
AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000690c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08006aac  08006aac  00016aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c90  08006c90  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c98  08006c98  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c9c  08006c9c  00016c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  20000094  08006d34  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  08006d34  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1f7  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000373e  00000000  00000000  0003c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  0003fa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001740  00000000  00000000  000412a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a92a  00000000  00000000  000429e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c576  00000000  00000000  0005d30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1f74  00000000  00000000  00079880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b7f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007290  00000000  00000000  0011b844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000094 	.word	0x20000094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a94 	.word	0x08006a94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000098 	.word	0x20000098
 80001dc:	08006a94 	.word	0x08006a94

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20000348 	.word	0x20000348
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <TIM5_IRQHandler>:
	HAL_IncTick();
}
*/

void TIM5_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	//HAL_NVIC_ClearPendingIRQ(TIM5_IRQn);
	//user_handler();
	HAL_TIM_IRQHandler(&tim5);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <TIM5_IRQHandler+0x10>)
 800062a:	f002 fbbb 	bl	8002da4 <HAL_TIM_IRQHandler>

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200001fc 	.word	0x200001fc

08000638 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  HAL_TIM_IRQHandler(&htim10);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800063e:	f002 fbb1 	bl	8002da4 <HAL_TIM_IRQHandler>

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000025c 	.word	0x2000025c

0800064c <main>:
bool check_validcard(void);
void rfid_app(void);


int main()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000650:	f000 fc9a 	bl	8000f88 <HAL_Init>
	sysclock_config();
 8000654:	f000 f824 	bl	80006a0 <sysclock_config>

	gpio_init();
 8000658:	f000 f85c 	bl	8000714 <gpio_init>
	uart_init();
 800065c:	f000 f8b6 	bl	80007cc <uart_init>
	spi1_init();
 8000660:	f000 f902 	bl	8000868 <spi1_init>
	spi2_init();
 8000664:	f000 f930 	bl	80008c8 <spi2_init>
	i2c2_init();
 8000668:	f000 f962 	bl	8000930 <i2c2_init>
	tim5_init();
 800066c:	f000 f8da 	bl	8000824 <tim5_init>

	rc522_init();
 8000670:	f003 fb92 	bl	8003d98 <rc522_init>
	ssd1963_setup();
	XPT2046_Init();
#endif

	/* Timebase start 100ms */
	HAL_TIM_Base_Start_IT(&tim5);
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <main+0x48>)
 8000676:	f002 fb33 	bl	8002ce0 <HAL_TIM_Base_Start_IT>

#if (DEBUG_UART)
	HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
 800067a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067e:	221f      	movs	r2, #31
 8000680:	4905      	ldr	r1, [pc, #20]	; (8000698 <main+0x4c>)
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <main+0x50>)
 8000684:	f002 fd9f 	bl	80031c6 <HAL_UART_Transmit>
#endif
	while(1)
	{
		read_touch();
 8000688:	f000 f98a 	bl	80009a0 <read_touch>
		rfid_app();
 800068c:	f000 f9e2 	bl	8000a54 <rfid_app>
		read_touch();
 8000690:	e7fa      	b.n	8000688 <main+0x3c>
 8000692:	bf00      	nop
 8000694:	200001fc 	.word	0x200001fc
 8000698:	20000004 	.word	0x20000004
 800069c:	200000b4 	.word	0x200000b4

080006a0 <sysclock_config>:

	return 0;
}

void sysclock_config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b092      	sub	sp, #72	; 0x48
 80006a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc;

	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
	osc.HSEState = RCC_HSE_ON;
 80006aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ae:	61bb      	str	r3, [r7, #24]

	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 80006b0:	f107 0314 	add.w	r3, r7, #20
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f891 	bl	80017dc <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <sysclock_config+0x26>
	{
		printf("HSE Init failed\n\r");
 80006c0:	4811      	ldr	r0, [pc, #68]	; (8000708 <sysclock_config+0x68>)
 80006c2:	f005 f819 	bl	80056f8 <iprintf>
	}

	RCC_ClkInitTypeDef clock;

	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80006c6:	2301      	movs	r3, #1
 80006c8:	603b      	str	r3, [r7, #0]
	clock.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006ca:	2301      	movs	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
	clock.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
	clock.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_0)!=HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 faf4 	bl	8001ccc <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <sysclock_config+0x50>
	{
		printf("clock config failed\n\r");
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <sysclock_config+0x6c>)
 80006ec:	f005 f804 	bl	80056f8 <iprintf>
	}

	uint32_t freq=HAL_RCC_GetSysClockFreq();
 80006f0:	f001 fbd2 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 80006f4:	6478      	str	r0, [r7, #68]	; 0x44
	printf("Sysclock frequency : %lu \r\n",freq);
 80006f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <sysclock_config+0x70>)
 80006fa:	f004 fffd 	bl	80056f8 <iprintf>
}
 80006fe:	bf00      	nop
 8000700:	3748      	adds	r7, #72	; 0x48
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	08006aac 	.word	0x08006aac
 800070c:	08006ac0 	.word	0x08006ac0
 8000710:	08006ad8 	.word	0x08006ad8

08000714 <gpio_init>:


void gpio_init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <gpio_init+0xac>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a27      	ldr	r2, [pc, #156]	; (80007c0 <gpio_init+0xac>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b25      	ldr	r3, [pc, #148]	; (80007c0 <gpio_init+0xac>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <gpio_init+0xac>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a20      	ldr	r2, [pc, #128]	; (80007c0 <gpio_init+0xac>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <gpio_init+0xac>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <gpio_init+0xac>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <gpio_init+0xac>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <gpio_init+0xac>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 ;

	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
#endif

	GPIO_InitTypeDef RFID_SPI ={0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
	RFID_SPI.Pin = GPIO_PIN_0;
 800077e:	2301      	movs	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
	RFID_SPI.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
	RFID_SPI.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
	RFID_SPI.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOB, &RFID_SPI);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	4619      	mov	r1, r3
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <gpio_init+0xb0>)
 8000796:	f000 fd3f 	bl	8001218 <HAL_GPIO_Init>

	RFID_SPI.Pin = (GPIO_PIN_8|GPIO_PIN_0);
 800079a:	f240 1301 	movw	r3, #257	; 0x101
 800079e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &RFID_SPI);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <gpio_init+0xb4>)
 80007a8:	f000 fd36 	bl	8001218 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <gpio_init+0xb4>)
 80007b2:	f000 feb5 	bl	8001520 <HAL_GPIO_WritePin>
	LED.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOC, &LED);
#endif

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40020400 	.word	0x40020400
 80007c8:	40020000 	.word	0x40020000

080007cc <uart_init>:

void uart_init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	uart1.Instance = USART1;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <uart_init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <uart_init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
	uart1.Init.BaudRate =9600;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <uart_init+0x4c>)
 80007d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007dc:	605a      	str	r2, [r3, #4]
	uart1.Init.Parity=UART_PARITY_NONE;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <uart_init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
	uart1.Init.Mode =UART_MODE_TX_RX;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <uart_init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
	uart1.Init.StopBits= UART_STOPBITS_1;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <uart_init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
	uart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <uart_init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
	uart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <uart_init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
	uart1.Init.OverSampling= UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <uart_init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&uart1)!= HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <uart_init+0x4c>)
 8000804:	f002 fc92 	bl	800312c <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <uart_init+0x48>
	{
		printf("Uart 1 Init Failed\r\n");
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <uart_init+0x54>)
 8000810:	f004 fff8 	bl	8005804 <puts>
	}
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000b4 	.word	0x200000b4
 800081c:	40011000 	.word	0x40011000
 8000820:	08006af4 	.word	0x08006af4

08000824 <tim5_init>:

void tim5_init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	tim5.Instance = TIM5;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <tim5_init+0x38>)
 800082a:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <tim5_init+0x3c>)
 800082c:	601a      	str	r2, [r3, #0]

	tim5.Init.Prescaler = 2499;		// for 25 MHz - 1tick : 100us
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <tim5_init+0x38>)
 8000830:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000834:	605a      	str	r2, [r3, #4]
	tim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <tim5_init+0x38>)
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	619a      	str	r2, [r3, #24]
	tim5.Init.Period = 1000;		// period : 100ms
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <tim5_init+0x38>)
 800083e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000842:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&tim5) != HAL_OK)
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <tim5_init+0x38>)
 8000846:	f002 f9fb 	bl	8002c40 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <tim5_init+0x32>
	{
		printf("Timer 5 base Init Failed\r\n");
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <tim5_init+0x40>)
 8000852:	f004 ffd7 	bl	8005804 <puts>
	}
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001fc 	.word	0x200001fc
 8000860:	40000c00 	.word	0x40000c00
 8000864:	08006b08 	.word	0x08006b08

08000868 <spi1_init>:


void spi1_init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

	spi1.Instance = SPI1;
 800086c:	4b13      	ldr	r3, [pc, #76]	; (80008bc <spi1_init+0x54>)
 800086e:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <spi1_init+0x58>)
 8000870:	601a      	str	r2, [r3, #0]
	spi1.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b12      	ldr	r3, [pc, #72]	; (80008bc <spi1_init+0x54>)
 8000874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000878:	605a      	str	r2, [r3, #4]
	spi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <spi1_init+0x54>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
	spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <spi1_init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
	spi1.Init.DataSize = SPI_DATASIZE_8BIT ;
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <spi1_init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
	spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <spi1_init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
	spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <spi1_init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
	spi1.Init.NSS = SPI_NSS_SOFT ;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <spi1_init+0x54>)
 800089a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089e:	619a      	str	r2, [r3, #24]
	spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <spi1_init+0x54>)
 80008a2:	2210      	movs	r2, #16
 80008a4:	61da      	str	r2, [r3, #28]


	if(HAL_SPI_Init(&spi1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <spi1_init+0x54>)
 80008a8:	f001 fc22 	bl	80020f0 <HAL_SPI_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <spi1_init+0x50>
	{
		printf("SPI1 Init Failed\r\n");
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <spi1_init+0x5c>)
 80008b4:	f004 ffa6 	bl	8005804 <puts>
	}

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000f8 	.word	0x200000f8
 80008c0:	40013000 	.word	0x40013000
 80008c4:	08006b24 	.word	0x08006b24

080008c8 <spi2_init>:

void spi2_init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

	spi2.Instance = SPI2;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <spi2_init+0x5c>)
 80008ce:	4a16      	ldr	r2, [pc, #88]	; (8000928 <spi2_init+0x60>)
 80008d0:	601a      	str	r2, [r3, #0]
	spi2.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <spi2_init+0x5c>)
 80008d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d8:	605a      	str	r2, [r3, #4]
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <spi2_init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <spi2_init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
	spi2.Init.DataSize = SPI_DATASIZE_8BIT ;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <spi2_init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <spi2_init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
	spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <spi2_init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
	spi2.Init.NSS = SPI_NSS_HARD_OUTPUT ;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <spi2_init+0x5c>)
 80008fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008fe:	619a      	str	r2, [r3, #24]
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <spi2_init+0x5c>)
 8000902:	2210      	movs	r2, #16
 8000904:	61da      	str	r2, [r3, #28]
	spi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <spi2_init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_SPI_Init(&spi2) != HAL_OK)
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <spi2_init+0x5c>)
 800090e:	f001 fbef 	bl	80020f0 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d002      	beq.n	800091e <spi2_init+0x56>
	{
		printf("SPI2 Init Failed\r\n");
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <spi2_init+0x64>)
 800091a:	f004 ff73 	bl	8005804 <puts>
	}

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000150 	.word	0x20000150
 8000928:	40003800 	.word	0x40003800
 800092c:	08006b38 	.word	0x08006b38

08000930 <i2c2_init>:

void i2c2_init()  //incomplete !!  please verify once before using it
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	i2c2.Instance = I2C2;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <i2c2_init+0x3c>)
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <i2c2_init+0x40>)
 8000938:	601a      	str	r2, [r3, #0]
	i2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <i2c2_init+0x3c>)
 800093c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000940:	611a      	str	r2, [r3, #16]
	i2c2.Init.ClockSpeed = 4000000;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <i2c2_init+0x3c>)
 8000944:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <i2c2_init+0x44>)
 8000946:	605a      	str	r2, [r3, #4]
	i2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <i2c2_init+0x3c>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
	i2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <i2c2_init+0x3c>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]

	if(HAL_I2C_Init(&i2c2) != HAL_OK)
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <i2c2_init+0x3c>)
 8000956:	f000 fdfd 	bl	8001554 <HAL_I2C_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <i2c2_init+0x36>
	{
		printf("I2C2 Init Failed\r\n");
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <i2c2_init+0x48>)
 8000962:	f004 ff4f 	bl	8005804 <puts>
	}
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001a8 	.word	0x200001a8
 8000970:	40005800 	.word	0x40005800
 8000974:	003d0900 	.word	0x003d0900
 8000978:	08006b4c 	.word	0x08006b4c

0800097c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	  {
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	  }
#endif

	  if (htim->Instance == TIM10)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
	  {
	    HAL_IncTick();
 800098e:	f000 fb1d 	bl	8000fcc <HAL_IncTick>
	  }
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40014400 	.word	0x40014400

080009a0 <read_touch>:
 * @ret:	None
 * @arg: 	None
 */

static void read_touch(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	g_pos_x = getX()+12;	// calibration
 80009a4:	f003 fa9c 	bl	8003ee0 <getX>
 80009a8:	4603      	mov	r3, r0
 80009aa:	330c      	adds	r3, #12
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <read_touch+0x3c>)
 80009b0:	801a      	strh	r2, [r3, #0]
	g_pos_y = 470-getY();
 80009b2:	f003 faaa 	bl	8003f0a <getY>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 80009bc:	b29a      	uxth	r2, r3
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <read_touch+0x40>)
 80009c0:	801a      	strh	r2, [r3, #0]

	while(!(TIM5->SR & TIM_SR_UIF)){}; 		// delay from time base
 80009c2:	bf00      	nop
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <read_touch+0x44>)
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f9      	beq.n	80009c4 <read_touch+0x24>
	TIM5->SR = 0;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <read_touch+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000b0 	.word	0x200000b0
 80009e0:	200000b2 	.word	0x200000b2
 80009e4:	40000c00 	.word	0x40000c00

080009e8 <check_validcard>:

bool check_validcard(void)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
	int i=4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	61fb      	str	r3, [r7, #28]

	while(i--)
 80009f2:	e01c      	b.n	8000a2e <check_validcard+0x46>
	{
		if(card_auth[i]!=rfid_id[i])
 80009f4:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <check_validcard+0x5c>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	4413      	add	r3, r2
 80009fa:	781a      	ldrb	r2, [r3, #0]
 80009fc:	4912      	ldr	r1, [pc, #72]	; (8000a48 <check_validcard+0x60>)
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	440b      	add	r3, r1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d012      	beq.n	8000a2e <check_validcard+0x46>
		{
			char msg[] = "Unauthorised Access\r\n";
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <check_validcard+0x64>)
 8000a0a:	1d3c      	adds	r4, r7, #4
 8000a0c:	461d      	mov	r5, r3
 8000a0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a16:	6020      	str	r0, [r4, #0]
 8000a18:	3404      	adds	r4, #4
 8000a1a:	8021      	strh	r1, [r4, #0]
			HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
 8000a1c:	1d39      	adds	r1, r7, #4
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	2216      	movs	r2, #22
 8000a24:	480a      	ldr	r0, [pc, #40]	; (8000a50 <check_validcard+0x68>)
 8000a26:	f002 fbce 	bl	80031c6 <HAL_UART_Transmit>
			return 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e005      	b.n	8000a3a <check_validcard+0x52>
	while(i--)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	61fa      	str	r2, [r7, #28]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d1dd      	bne.n	80009f4 <check_validcard+0xc>
			break;
		}
	}
	return 1;
 8000a38:	2301      	movs	r3, #1
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3720      	adds	r7, #32
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bdb0      	pop	{r4, r5, r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000000 	.word	0x20000000
 8000a48:	20000244 	.word	0x20000244
 8000a4c:	08006b60 	.word	0x08006b60
 8000a50:	200000b4 	.word	0x200000b4

08000a54 <rfid_app>:

void rfid_app(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af02      	add	r7, sp, #8

	if(rc522_checkCard(rfid_id))
 8000a5a:	4826      	ldr	r0, [pc, #152]	; (8000af4 <rfid_app+0xa0>)
 8000a5c:	f002 ffe5 	bl	8003a2a <rc522_checkCard>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d043      	beq.n	8000aee <rfid_app+0x9a>
		{
#if (DEBUG_UART)
			memset(data,0,sizeof(data));
 8000a66:	2214      	movs	r2, #20
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <rfid_app+0xa4>)
 8000a6c:	f004 fe3c 	bl	80056e8 <memset>
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	220a      	movs	r2, #10
 8000a76:	4921      	ldr	r1, [pc, #132]	; (8000afc <rfid_app+0xa8>)
 8000a78:	4821      	ldr	r0, [pc, #132]	; (8000b00 <rfid_app+0xac>)
 8000a7a:	f002 fba4 	bl	80031c6 <HAL_UART_Transmit>
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <rfid_app+0xa0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <rfid_app+0xa0>)
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <rfid_app+0xa0>)
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <rfid_app+0xa0>)
 8000a92:	78db      	ldrb	r3, [r3, #3]
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	9200      	str	r2, [sp, #0]
 8000a98:	4603      	mov	r3, r0
 8000a9a:	460a      	mov	r2, r1
 8000a9c:	4919      	ldr	r1, [pc, #100]	; (8000b04 <rfid_app+0xb0>)
 8000a9e:	4816      	ldr	r0, [pc, #88]	; (8000af8 <rfid_app+0xa4>)
 8000aa0:	f004 feb8 	bl	8005814 <siprintf>
			HAL_UART_Transmit(&uart1,(uint8_t *)data,sizeof(data),1000);
 8000aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa8:	2214      	movs	r2, #20
 8000aaa:	4913      	ldr	r1, [pc, #76]	; (8000af8 <rfid_app+0xa4>)
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <rfid_app+0xac>)
 8000aae:	f002 fb8a 	bl	80031c6 <HAL_UART_Transmit>
#endif
			if(1==check_validcard())
 8000ab2:	f7ff ff99 	bl	80009e8 <check_validcard>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d014      	beq.n	8000ae6 <rfid_app+0x92>
			{
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <rfid_app+0xb4>)
 8000ac2:	f000 fd2d 	bl	8001520 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000ac6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000aca:	f000 fa9f 	bl	800100c <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <rfid_app+0xb4>)
 8000ad4:	f000 fd24 	bl	8001520 <HAL_GPIO_WritePin>
#if (DEBUG_UART)
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	2213      	movs	r2, #19
 8000ade:	490b      	ldr	r1, [pc, #44]	; (8000b0c <rfid_app+0xb8>)
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <rfid_app+0xac>)
 8000ae2:	f002 fb70 	bl	80031c6 <HAL_UART_Transmit>
#endif
			}

			HAL_Delay(2000);
 8000ae6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000aea:	f000 fa8f 	bl	800100c <HAL_Delay>
		}
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000244 	.word	0x20000244
 8000af8:	20000248 	.word	0x20000248
 8000afc:	08006b78 	.word	0x08006b78
 8000b00:	200000b4 	.word	0x200000b4
 8000b04:	08006b84 	.word	0x08006b84
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	08006b94 	.word	0x08006b94

08000b10 <HAL_MspInit>:

extern SPI_HandleTypeDef spi2;
extern TIM_HandleTypeDef tim5;

void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();		// exti line controller clock
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();			// pwr  controller clcok
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

	vInitPrioGroupValue();
 8000b4e:	f003 fb9b 	bl	8004288 <vInitPrioGroupValue>
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	// enable the peripheral clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_UART_MspInit+0x7c>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <HAL_UART_MspInit+0x7c>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <HAL_UART_MspInit+0x7c>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_UART_MspInit+0x7c>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_UART_MspInit+0x7c>)
 8000b8e:	f043 0310 	orr.w	r3, r3, #16
 8000b92:	6453      	str	r3, [r2, #68]	; 0x44
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <HAL_UART_MspInit+0x7c>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b98:	f003 0310 	and.w	r3, r3, #16
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef gpio_uart;

	gpio_uart.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000ba0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ba4:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode 	=GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
	gpio_uart.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61fb      	str	r3, [r7, #28]
	gpio_uart.Alternate = GPIO_AF7_USART1;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <HAL_UART_MspInit+0x80>)
 8000bbe:	f000 fb2b 	bl	8001218 <HAL_GPIO_Init>

	// enable NVIC irq line
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc2:	2025      	movs	r0, #37	; 0x25
 8000bc4:	f000 fb1a 	bl	80011fc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	210f      	movs	r1, #15
 8000bcc:	2025      	movs	r0, #37	; 0x25
 8000bce:	f000 faf9 	bl	80011c4 <HAL_NVIC_SetPriority>

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000

08000be4 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef spi_pins;

	if(hspi->Instance == SPI1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <HAL_SPI_MspInit+0xd0>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d129      	bne.n	8000c4a <HAL_SPI_MspInit+0x66>
	{
		__HAL_RCC_SPI1_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61bb      	str	r3, [r7, #24]
 8000bfa:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b28      	ldr	r3, [pc, #160]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]

		spi_pins.Pin = (GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7);
 8000c2e:	23e0      	movs	r3, #224	; 0xe0
 8000c30:	61fb      	str	r3, [r7, #28]
		spi_pins.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
		spi_pins.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
		spi_pins.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_GPIO_Init(GPIOA, &spi_pins);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	481d      	ldr	r0, [pc, #116]	; (8000cbc <HAL_SPI_MspInit+0xd8>)
 8000c46:	f000 fae7 	bl	8001218 <HAL_GPIO_Init>
	}

	if(hspi->Instance == SPI2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <HAL_SPI_MspInit+0xdc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d12a      	bne.n	8000caa <HAL_SPI_MspInit+0xc6>
	{
		__HAL_RCC_SPI2_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	4b17      	ldr	r3, [pc, #92]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a16      	ldr	r2, [pc, #88]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b0d      	ldr	r3, [pc, #52]	; (8000cb8 <HAL_SPI_MspInit+0xd4>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0302 	and.w	r3, r3, #2
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]

		spi_pins.Pin = (GPIO_PIN_12 | GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8000c8c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c90:	61fb      	str	r3, [r7, #28]
		spi_pins.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	623b      	str	r3, [r7, #32]
		spi_pins.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
		spi_pins.Alternate = GPIO_AF5_SPI2;
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_GPIO_Init(GPIOB, &spi_pins);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <HAL_SPI_MspInit+0xe0>)
 8000ca6:	f000 fab7 	bl	8001218 <HAL_GPIO_Init>
	}

}
 8000caa:	bf00      	nop
 8000cac:	3730      	adds	r7, #48	; 0x30
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40013000 	.word	0x40013000
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40003800 	.word	0x40003800
 8000cc4:	40020400 	.word	0x40020400

08000cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_TIM_Base_MspInit+0x48>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d115      	bne.n	8000d06 <HAL_TIM_Base_MspInit+0x3e>
	{
		__HAL_RCC_TIM5_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_TIM_Base_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	2032      	movs	r0, #50	; 0x32
 8000cfc:	f000 fa62 	bl	80011c4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d00:	2032      	movs	r0, #50	; 0x32
 8000d02:	f000 fa7b 	bl	80011fc <HAL_NVIC_EnableIRQ>

	}

}
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40000c00 	.word	0x40000c00
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C2_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_I2C_MspInit+0x68>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <HAL_I2C_MspInit+0x68>)
 8000d2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_I2C_MspInit+0x68>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_I2C_MspInit+0x68>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <HAL_I2C_MspInit+0x68>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_I2C_MspInit+0x68>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef i2c2_pins;

	i2c2_pins.Pin = (GPIO_PIN_10 | GPIO_PIN_11);
 8000d58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d5c:	617b      	str	r3, [r7, #20]
	i2c2_pins.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	61bb      	str	r3, [r7, #24]
	i2c2_pins.Pull = GPIO_PULLUP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61fb      	str	r3, [r7, #28]
	i2c2_pins.Alternate = GPIO_AF4_I2C2;
 8000d66:	2304      	movs	r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOB, &i2c2_pins);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <HAL_I2C_MspInit+0x6c>)
 8000d72:	f000 fa51 	bl	8001218 <HAL_GPIO_Init>
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020400 	.word	0x40020400

08000d88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_InitTick+0xd0>)
 8000d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da0:	4a2d      	ldr	r2, [pc, #180]	; (8000e58 <HAL_InitTick+0xd0>)
 8000da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da6:	6453      	str	r3, [r2, #68]	; 0x44
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <HAL_InitTick+0xd0>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000db4:	f107 020c 	add.w	r2, r7, #12
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 f964 	bl	800208c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000dc4:	f001 f94e 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 8000dc8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	4a23      	ldr	r2, [pc, #140]	; (8000e5c <HAL_InitTick+0xd4>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	0c9b      	lsrs	r3, r3, #18
 8000dd4:	3b01      	subs	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000dd8:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_InitTick+0xd8>)
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <HAL_InitTick+0xdc>)
 8000ddc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <HAL_InitTick+0xd8>)
 8000de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000de4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000de6:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <HAL_InitTick+0xd8>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_InitTick+0xd8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_InitTick+0xd8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_InitTick+0xd8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000dfe:	4818      	ldr	r0, [pc, #96]	; (8000e60 <HAL_InitTick+0xd8>)
 8000e00:	f001 ff1e 	bl	8002c40 <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11b      	bne.n	8000e4a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000e12:	4813      	ldr	r0, [pc, #76]	; (8000e60 <HAL_InitTick+0xd8>)
 8000e14:	f001 ff64 	bl	8002ce0 <HAL_TIM_Base_Start_IT>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d111      	bne.n	8000e4a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e26:	2019      	movs	r0, #25
 8000e28:	f000 f9e8 	bl	80011fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2b0f      	cmp	r3, #15
 8000e30:	d808      	bhi.n	8000e44 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e32:	2200      	movs	r2, #0
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	2019      	movs	r0, #25
 8000e38:	f000 f9c4 	bl	80011c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <HAL_InitTick+0xe0>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e002      	b.n	8000e4a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3730      	adds	r7, #48	; 0x30
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	431bde83 	.word	0x431bde83
 8000e60:	2000025c 	.word	0x2000025c
 8000e64:	40014400 	.word	0x40014400
 8000e68:	20000028 	.word	0x20000028

08000e6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
  }

  return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ece:	605a      	str	r2, [r3, #4]
  return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_isatty>:

int _isatty(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f3a:	490e      	ldr	r1, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f50:	4c0b      	ldr	r4, [pc, #44]	; (8000f80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5e:	f7ff ffd7 	bl	8000f10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f004 fb8f 	bl	8005684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff fb71 	bl	800064c <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000f78:	08006ca0 	.word	0x08006ca0
  ldr r2, =_sbss
 8000f7c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000f80:	20000928 	.word	0x20000928

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f000 f8fc 	bl	80011ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	200f      	movs	r0, #15
 8000fb8:	f7ff fee6 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f7ff fda8 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000002c 	.word	0x2000002c
 8000ff0:	200002a4 	.word	0x200002a4

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200002a4 	.word	0x200002a4

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000002c 	.word	0x2000002c

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff4c 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d6:	f7ff ff61 	bl	800109c <__NVIC_GetPriorityGrouping>
 80011da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7ff ffb1 	bl	8001148 <NVIC_EncodePriority>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff80 	bl	80010f4 <__NVIC_SetPriority>
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff54 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
 8001232:	e159      	b.n	80014e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001234:	2201      	movs	r2, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	429a      	cmp	r2, r3
 800124e:	f040 8148 	bne.w	80014e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b01      	cmp	r3, #1
 800125c:	d005      	beq.n	800126a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001266:	2b02      	cmp	r3, #2
 8001268:	d130      	bne.n	80012cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f003 0201 	and.w	r2, r3, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d017      	beq.n	8001308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f003 0303 	and.w	r3, r3, #3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d123      	bne.n	800135c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	08da      	lsrs	r2, r3, #3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3208      	adds	r2, #8
 8001356:	69b9      	ldr	r1, [r7, #24]
 8001358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0203 	and.w	r2, r3, #3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 80a2 	beq.w	80014e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b57      	ldr	r3, [pc, #348]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a56      	ldr	r2, [pc, #344]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b54      	ldr	r3, [pc, #336]	; (8001500 <HAL_GPIO_Init+0x2e8>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ba:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	220f      	movs	r2, #15
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a49      	ldr	r2, [pc, #292]	; (8001508 <HAL_GPIO_Init+0x2f0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x202>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a48      	ldr	r2, [pc, #288]	; (800150c <HAL_GPIO_Init+0x2f4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x1fe>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <HAL_GPIO_Init+0x2f8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x1fa>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a46      	ldr	r2, [pc, #280]	; (8001514 <HAL_GPIO_Init+0x2fc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x1f6>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a45      	ldr	r2, [pc, #276]	; (8001518 <HAL_GPIO_Init+0x300>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x1f2>
 8001406:	2304      	movs	r3, #4
 8001408:	e008      	b.n	800141c <HAL_GPIO_Init+0x204>
 800140a:	2307      	movs	r3, #7
 800140c:	e006      	b.n	800141c <HAL_GPIO_Init+0x204>
 800140e:	2303      	movs	r3, #3
 8001410:	e004      	b.n	800141c <HAL_GPIO_Init+0x204>
 8001412:	2302      	movs	r3, #2
 8001414:	e002      	b.n	800141c <HAL_GPIO_Init+0x204>
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_GPIO_Init+0x204>
 800141a:	2300      	movs	r3, #0
 800141c:	69fa      	ldr	r2, [r7, #28]
 800141e:	f002 0203 	and.w	r2, r2, #3
 8001422:	0092      	lsls	r2, r2, #2
 8001424:	4093      	lsls	r3, r2
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x2ec>)
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	3302      	adds	r3, #2
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_GPIO_Init+0x304>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a2f      	ldr	r2, [pc, #188]	; (800151c <HAL_GPIO_Init+0x304>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_GPIO_Init+0x304>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <HAL_GPIO_Init+0x304>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800148e:	4b23      	ldr	r3, [pc, #140]	; (800151c <HAL_GPIO_Init+0x304>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <HAL_GPIO_Init+0x304>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_GPIO_Init+0x304>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_GPIO_Init+0x304>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	f67f aea2 	bls.w	8001234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40013800 	.word	0x40013800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020400 	.word	0x40020400
 8001510:	40020800 	.word	0x40020800
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40021000 	.word	0x40021000
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
 800152c:	4613      	mov	r3, r2
 800152e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001530:	787b      	ldrb	r3, [r7, #1]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800153c:	e003      	b.n	8001546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153e:	887b      	ldrh	r3, [r7, #2]
 8001540:	041a      	lsls	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	619a      	str	r2, [r3, #24]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e12b      	b.n	80017be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d106      	bne.n	8001580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fbcc 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015b8:	f000 fd40 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 80015bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	4a81      	ldr	r2, [pc, #516]	; (80017c8 <HAL_I2C_Init+0x274>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d807      	bhi.n	80015d8 <HAL_I2C_Init+0x84>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4a80      	ldr	r2, [pc, #512]	; (80017cc <HAL_I2C_Init+0x278>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	bf94      	ite	ls
 80015d0:	2301      	movls	r3, #1
 80015d2:	2300      	movhi	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	e006      	b.n	80015e6 <HAL_I2C_Init+0x92>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a7d      	ldr	r2, [pc, #500]	; (80017d0 <HAL_I2C_Init+0x27c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	bf94      	ite	ls
 80015e0:	2301      	movls	r3, #1
 80015e2:	2300      	movhi	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e0e7      	b.n	80017be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4a78      	ldr	r2, [pc, #480]	; (80017d4 <HAL_I2C_Init+0x280>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0c9b      	lsrs	r3, r3, #18
 80015f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	68ba      	ldr	r2, [r7, #8]
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a6a      	ldr	r2, [pc, #424]	; (80017c8 <HAL_I2C_Init+0x274>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d802      	bhi.n	8001628 <HAL_I2C_Init+0xd4>
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	3301      	adds	r3, #1
 8001626:	e009      	b.n	800163c <HAL_I2C_Init+0xe8>
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	4a69      	ldr	r2, [pc, #420]	; (80017d8 <HAL_I2C_Init+0x284>)
 8001634:	fba2 2303 	umull	r2, r3, r2, r3
 8001638:	099b      	lsrs	r3, r3, #6
 800163a:	3301      	adds	r3, #1
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	430b      	orrs	r3, r1
 8001642:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800164e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	495c      	ldr	r1, [pc, #368]	; (80017c8 <HAL_I2C_Init+0x274>)
 8001658:	428b      	cmp	r3, r1
 800165a:	d819      	bhi.n	8001690 <HAL_I2C_Init+0x13c>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e59      	subs	r1, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fbb1 f3f3 	udiv	r3, r1, r3
 800166a:	1c59      	adds	r1, r3, #1
 800166c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001670:	400b      	ands	r3, r1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00a      	beq.n	800168c <HAL_I2C_Init+0x138>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e59      	subs	r1, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fbb1 f3f3 	udiv	r3, r1, r3
 8001684:	3301      	adds	r3, #1
 8001686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168a:	e051      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 800168c:	2304      	movs	r3, #4
 800168e:	e04f      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d111      	bne.n	80016bc <HAL_I2C_Init+0x168>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	1e58      	subs	r0, r3, #1
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	bf0c      	ite	eq
 80016b4:	2301      	moveq	r3, #1
 80016b6:	2300      	movne	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e012      	b.n	80016e2 <HAL_I2C_Init+0x18e>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	0099      	lsls	r1, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf0c      	ite	eq
 80016dc:	2301      	moveq	r3, #1
 80016de:	2300      	movne	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Init+0x196>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e022      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10e      	bne.n	8001710 <HAL_I2C_Init+0x1bc>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1e58      	subs	r0, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	460b      	mov	r3, r1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	440b      	add	r3, r1
 8001700:	fbb0 f3f3 	udiv	r3, r0, r3
 8001704:	3301      	adds	r3, #1
 8001706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170e:	e00f      	b.n	8001730 <HAL_I2C_Init+0x1dc>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	0099      	lsls	r1, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	3301      	adds	r3, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	6809      	ldr	r1, [r1, #0]
 8001734:	4313      	orrs	r3, r2
 8001736:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69da      	ldr	r2, [r3, #28]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800175e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	6911      	ldr	r1, [r2, #16]
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68d2      	ldr	r2, [r2, #12]
 800176a:	4311      	orrs	r1, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2220      	movs	r2, #32
 80017aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	000186a0 	.word	0x000186a0
 80017cc:	001e847f 	.word	0x001e847f
 80017d0:	003d08ff 	.word	0x003d08ff
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	10624dd3 	.word	0x10624dd3

080017dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e267      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d075      	beq.n	80018e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fa:	4b88      	ldr	r3, [pc, #544]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b04      	cmp	r3, #4
 8001804:	d00c      	beq.n	8001820 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001806:	4b85      	ldr	r3, [pc, #532]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800180e:	2b08      	cmp	r3, #8
 8001810:	d112      	bne.n	8001838 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800181e:	d10b      	bne.n	8001838 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	4b7e      	ldr	r3, [pc, #504]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d05b      	beq.n	80018e4 <HAL_RCC_OscConfig+0x108>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d157      	bne.n	80018e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e242      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001840:	d106      	bne.n	8001850 <HAL_RCC_OscConfig+0x74>
 8001842:	4b76      	ldr	r3, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a75      	ldr	r2, [pc, #468]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e01d      	b.n	800188c <HAL_RCC_OscConfig+0xb0>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x98>
 800185a:	4b70      	ldr	r3, [pc, #448]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6f      	ldr	r2, [pc, #444]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001860:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a6c      	ldr	r2, [pc, #432]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 800186c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e00b      	b.n	800188c <HAL_RCC_OscConfig+0xb0>
 8001874:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a68      	ldr	r2, [pc, #416]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 800187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a65      	ldr	r2, [pc, #404]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fbae 	bl	8000ff4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189c:	f7ff fbaa 	bl	8000ff4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	; 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e207      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0xc0>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb9a 	bl	8000ff4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff fb96 	bl	8000ff4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1f3      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d6:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0xe8>
 80018e2:	e000      	b.n	80018e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d063      	beq.n	80019ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f2:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fe:	4b47      	ldr	r3, [pc, #284]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001906:	2b08      	cmp	r3, #8
 8001908:	d11c      	bne.n	8001944 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800190a:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d116      	bne.n	8001944 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001916:	4b41      	ldr	r3, [pc, #260]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <HAL_RCC_OscConfig+0x152>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e1c7      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4937      	ldr	r1, [pc, #220]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001942:	e03a      	b.n	80019ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d020      	beq.n	800198e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x244>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fb4f 	bl	8000ff4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fb4b 	bl	8000ff4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e1a8      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4925      	ldr	r1, [pc, #148]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
 800198c:	e015      	b.n	80019ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x244>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fb2e 	bl	8000ff4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fb2a 	bl	8000ff4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e187      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d036      	beq.n	8001a34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d016      	beq.n	80019fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_RCC_OscConfig+0x248>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff fb0e 	bl	8000ff4 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019dc:	f7ff fb0a 	bl	8000ff4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e167      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_RCC_OscConfig+0x240>)
 80019f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x200>
 80019fa:	e01b      	b.n	8001a34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_OscConfig+0x248>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff faf7 	bl	8000ff4 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a08:	e00e      	b.n	8001a28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff faf3 	bl	8000ff4 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d907      	bls.n	8001a28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e150      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	42470000 	.word	0x42470000
 8001a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a28:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ea      	bne.n	8001a0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 8097 	beq.w	8001b70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a46:	4b81      	ldr	r3, [pc, #516]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10f      	bne.n	8001a72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b7d      	ldr	r3, [pc, #500]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a7c      	ldr	r2, [pc, #496]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b7a      	ldr	r3, [pc, #488]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	4b77      	ldr	r3, [pc, #476]	; (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d118      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7e:	4b74      	ldr	r3, [pc, #464]	; (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a73      	ldr	r2, [pc, #460]	; (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fab3 	bl	8000ff4 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f7ff faaf 	bl	8000ff4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e10c      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa4:	4b6a      	ldr	r3, [pc, #424]	; (8001c50 <HAL_RCC_OscConfig+0x474>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x2ea>
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abc:	4a63      	ldr	r2, [pc, #396]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac4:	e01c      	b.n	8001b00 <HAL_RCC_OscConfig+0x324>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x30c>
 8001ace:	4b5f      	ldr	r3, [pc, #380]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad2:	4a5e      	ldr	r2, [pc, #376]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ade:	4a5b      	ldr	r2, [pc, #364]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0x324>
 8001ae8:	4b58      	ldr	r3, [pc, #352]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aec:	4a57      	ldr	r2, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001aee:	f023 0301 	bic.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	; 0x70
 8001af4:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a54      	ldr	r2, [pc, #336]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001afa:	f023 0304 	bic.w	r3, r3, #4
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d015      	beq.n	8001b34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff fa74 	bl	8000ff4 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b10:	f7ff fa70 	bl	8000ff4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e0cb      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0ee      	beq.n	8001b10 <HAL_RCC_OscConfig+0x334>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff fa5e 	bl	8000ff4 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fa5a 	bl	8000ff4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e0b5      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b52:	4b3e      	ldr	r3, [pc, #248]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ee      	bne.n	8001b3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80a1 	beq.w	8001cbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d05c      	beq.n	8001c40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d141      	bne.n	8001c12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_OscConfig+0x478>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fa2e 	bl	8000ff4 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fa2a 	bl	8000ff4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e087      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69da      	ldr	r2, [r3, #28]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	019b      	lsls	r3, r3, #6
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd0:	085b      	lsrs	r3, r3, #1
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	041b      	lsls	r3, r3, #16
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	061b      	lsls	r3, r3, #24
 8001bde:	491b      	ldr	r1, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x478>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bea:	f7ff fa03 	bl	8000ff4 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7ff f9ff 	bl	8000ff4 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e05c      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x416>
 8001c10:	e054      	b.n	8001cbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <HAL_RCC_OscConfig+0x478>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff f9ec 	bl	8000ff4 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f9e8 	bl	8000ff4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e045      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x470>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x444>
 8001c3e:	e03d      	b.n	8001cbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e038      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x4ec>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d028      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d121      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d111      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0cc      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d90c      	bls.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d020      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	4a58      	ldr	r2, [pc, #352]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d38:	4b53      	ldr	r3, [pc, #332]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d44:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	494d      	ldr	r1, [pc, #308]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d044      	beq.n	8001dec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d107      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d119      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d107      	bne.n	8001d9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9a:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e067      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f023 0203 	bic.w	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4934      	ldr	r1, [pc, #208]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff f91a 	bl	8000ff4 <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc2:	e00a      	b.n	8001dda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc4:	f7ff f916 	bl	8000ff4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e04f      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dda:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 020c 	and.w	r2, r3, #12
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d1eb      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dec:	4b25      	ldr	r3, [pc, #148]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d20c      	bcs.n	8001e14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e032      	b.n	8001e7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d008      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4916      	ldr	r1, [pc, #88]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	490e      	ldr	r1, [pc, #56]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e52:	f000 f821 	bl	8001e98 <HAL_RCC_GetSysClockFreq>
 8001e56:	4602      	mov	r2, r0
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	490a      	ldr	r1, [pc, #40]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	5ccb      	ldrb	r3, [r1, r3]
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a09      	ldr	r2, [pc, #36]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe ff88 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	08006bd4 	.word	0x08006bd4
 8001e90:	20000024 	.word	0x20000024
 8001e94:	20000028 	.word	0x20000028

08001e98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e9c:	b090      	sub	sp, #64	; 0x40
 8001e9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb0:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d00d      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	f200 80a1 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x34>
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eca:	e09b      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_GetSysClockFreq+0x184>)
 8001ece:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ed0:	e09b      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed2:	4b53      	ldr	r3, [pc, #332]	; (8002020 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ed4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ed6:	e098      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee2:	4b4d      	ldr	r3, [pc, #308]	; (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d028      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	099b      	lsrs	r3, r3, #6
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	627a      	str	r2, [r7, #36]	; 0x24
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001f00:	2100      	movs	r1, #0
 8001f02:	4b47      	ldr	r3, [pc, #284]	; (8002020 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f04:	fb03 f201 	mul.w	r2, r3, r1
 8001f08:	2300      	movs	r3, #0
 8001f0a:	fb00 f303 	mul.w	r3, r0, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a43      	ldr	r2, [pc, #268]	; (8002020 <HAL_RCC_GetSysClockFreq+0x188>)
 8001f12:	fba0 1202 	umull	r1, r2, r0, r2
 8001f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f18:	460a      	mov	r2, r1
 8001f1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f1e:	4413      	add	r3, r2
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	2200      	movs	r2, #0
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	61fa      	str	r2, [r7, #28]
 8001f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f32:	f7fe f9f5 	bl	8000320 <__aeabi_uldivmod>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f3e:	e053      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f40:	4b35      	ldr	r3, [pc, #212]	; (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	099b      	lsrs	r3, r3, #6
 8001f46:	2200      	movs	r2, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	617a      	str	r2, [r7, #20]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f52:	f04f 0b00 	mov.w	fp, #0
 8001f56:	4652      	mov	r2, sl
 8001f58:	465b      	mov	r3, fp
 8001f5a:	f04f 0000 	mov.w	r0, #0
 8001f5e:	f04f 0100 	mov.w	r1, #0
 8001f62:	0159      	lsls	r1, r3, #5
 8001f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f68:	0150      	lsls	r0, r2, #5
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	ebb2 080a 	subs.w	r8, r2, sl
 8001f72:	eb63 090b 	sbc.w	r9, r3, fp
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f8a:	ebb2 0408 	subs.w	r4, r2, r8
 8001f8e:	eb63 0509 	sbc.w	r5, r3, r9
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	00eb      	lsls	r3, r5, #3
 8001f9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fa0:	00e2      	lsls	r2, r4, #3
 8001fa2:	4614      	mov	r4, r2
 8001fa4:	461d      	mov	r5, r3
 8001fa6:	eb14 030a 	adds.w	r3, r4, sl
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	eb45 030b 	adc.w	r3, r5, fp
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	028b      	lsls	r3, r1, #10
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc8:	4621      	mov	r1, r4
 8001fca:	028a      	lsls	r2, r1, #10
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	60fa      	str	r2, [r7, #12]
 8001fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fdc:	f7fe f9a0 	bl	8000320 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	0c1b      	lsrs	r3, r3, #16
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ff8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002002:	e002      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_RCC_GetSysClockFreq+0x184>)
 8002006:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800200c:	4618      	mov	r0, r3
 800200e:	3740      	adds	r7, #64	; 0x40
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	00f42400 	.word	0x00f42400
 8002020:	017d7840 	.word	0x017d7840

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_RCC_GetHCLKFreq+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000024 	.word	0x20000024

0800203c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002040:	f7ff fff0 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002044:	4602      	mov	r2, r0
 8002046:	4b05      	ldr	r3, [pc, #20]	; (800205c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	0a9b      	lsrs	r3, r3, #10
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	4903      	ldr	r1, [pc, #12]	; (8002060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002052:	5ccb      	ldrb	r3, [r1, r3]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002058:	4618      	mov	r0, r3
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	08006be4 	.word	0x08006be4

08002064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002068:	f7ff ffdc 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 800206c:	4602      	mov	r2, r0
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0b5b      	lsrs	r3, r3, #13
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	4903      	ldr	r1, [pc, #12]	; (8002088 <HAL_RCC_GetPCLK2Freq+0x24>)
 800207a:	5ccb      	ldrb	r3, [r1, r3]
 800207c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002080:	4618      	mov	r0, r3
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	08006be4 	.word	0x08006be4

0800208c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	220f      	movs	r2, #15
 800209a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020a8:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_GetClockConfig+0x5c>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCC_GetClockConfig+0x60>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0207 	and.w	r2, r3, #7
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40023c00 	.word	0x40023c00

080020f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e07b      	b.n	80021fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002112:	d009      	beq.n	8002128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
 800211a:	e005      	b.n	8002128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fd4e 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800215e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ac:	ea42 0103 	orr.w	r1, r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0104 	and.w	r1, r3, #4
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0210 	and.w	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b088      	sub	sp, #32
 8002206:	af00      	add	r7, sp, #0
 8002208:	60f8      	str	r0, [r7, #12]
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	603b      	str	r3, [r7, #0]
 800220e:	4613      	mov	r3, r2
 8002210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_SPI_Transmit+0x22>
 8002220:	2302      	movs	r3, #2
 8002222:	e126      	b.n	8002472 <HAL_SPI_Transmit+0x270>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800222c:	f7fe fee2 	bl	8000ff4 <HAL_GetTick>
 8002230:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d002      	beq.n	8002248 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002246:	e10b      	b.n	8002460 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_SPI_Transmit+0x52>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002258:	e102      	b.n	8002460 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	88fa      	ldrh	r2, [r7, #6]
 8002272:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a0:	d10f      	bne.n	80022c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d007      	beq.n	80022e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022e8:	d14b      	bne.n	8002382 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_SPI_Transmit+0xf6>
 80022f2:	8afb      	ldrh	r3, [r7, #22]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d13e      	bne.n	8002376 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	881a      	ldrh	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	1c9a      	adds	r2, r3, #2
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800231c:	e02b      	b.n	8002376 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b02      	cmp	r3, #2
 800232a:	d112      	bne.n	8002352 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	1c9a      	adds	r2, r3, #2
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002350:	e011      	b.n	8002376 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002352:	f7fe fe4f 	bl	8000ff4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d803      	bhi.n	800236a <HAL_SPI_Transmit+0x168>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002368:	d102      	bne.n	8002370 <HAL_SPI_Transmit+0x16e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002374:	e074      	b.n	8002460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ce      	bne.n	800231e <HAL_SPI_Transmit+0x11c>
 8002380:	e04c      	b.n	800241c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_SPI_Transmit+0x18e>
 800238a:	8afb      	ldrh	r3, [r7, #22]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d140      	bne.n	8002412 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	330c      	adds	r3, #12
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023b6:	e02c      	b.n	8002412 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d113      	bne.n	80023ee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	86da      	strh	r2, [r3, #54]	; 0x36
 80023ec:	e011      	b.n	8002412 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ee:	f7fe fe01 	bl	8000ff4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d803      	bhi.n	8002406 <HAL_SPI_Transmit+0x204>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d102      	bne.n	800240c <HAL_SPI_Transmit+0x20a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d102      	bne.n	8002412 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002410:	e026      	b.n	8002460 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1cd      	bne.n	80023b8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	6839      	ldr	r1, [r7, #0]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fbcb 	bl	8002bbc <SPI_EndRxTxTransaction>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10a      	bne.n	8002450 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	77fb      	strb	r3, [r7, #31]
 800245c:	e000      	b.n	8002460 <HAL_SPI_Transmit+0x25e>
  }

error:
 800245e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002470:	7ffb      	ldrb	r3, [r7, #31]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b088      	sub	sp, #32
 800247e:	af02      	add	r7, sp, #8
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002496:	d112      	bne.n	80024be <HAL_SPI_Receive+0x44>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10e      	bne.n	80024be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2204      	movs	r2, #4
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024a8:	88fa      	ldrh	r2, [r7, #6]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f8f1 	bl	800269c <HAL_SPI_TransmitReceive>
 80024ba:	4603      	mov	r3, r0
 80024bc:	e0ea      	b.n	8002694 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_SPI_Receive+0x52>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0e3      	b.n	8002694 <HAL_SPI_Receive+0x21a>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d4:	f7fe fd8e 	bl	8000ff4 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d002      	beq.n	80024ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
 80024e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024ea:	e0ca      	b.n	8002682 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Receive+0x7e>
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80024fc:	e0c1      	b.n	8002682 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2204      	movs	r2, #4
 8002502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002544:	d10f      	bne.n	8002566 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002554:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d007      	beq.n	8002584 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002582:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d162      	bne.n	8002652 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800258c:	e02e      	b.n	80025ec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d115      	bne.n	80025c8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f103 020c 	add.w	r2, r3, #12
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	7812      	ldrb	r2, [r2, #0]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025c6:	e011      	b.n	80025ec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025c8:	f7fe fd14 	bl	8000ff4 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d803      	bhi.n	80025e0 <HAL_SPI_Receive+0x166>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d102      	bne.n	80025e6 <HAL_SPI_Receive+0x16c>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025ea:	e04a      	b.n	8002682 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1cb      	bne.n	800258e <HAL_SPI_Receive+0x114>
 80025f6:	e031      	b.n	800265c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d113      	bne.n	800262e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002610:	b292      	uxth	r2, r2
 8002612:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	1c9a      	adds	r2, r3, #2
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800262c:	e011      	b.n	8002652 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800262e:	f7fe fce1 	bl	8000ff4 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d803      	bhi.n	8002646 <HAL_SPI_Receive+0x1cc>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d102      	bne.n	800264c <HAL_SPI_Receive+0x1d2>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002650:	e017      	b.n	8002682 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1cd      	bne.n	80025f8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	6839      	ldr	r1, [r7, #0]
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fa45 	bl	8002af0 <SPI_EndRxTransaction>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
 800267e:	e000      	b.n	8002682 <HAL_SPI_Receive+0x208>
  }

error :
 8002680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002692:	7dfb      	ldrb	r3, [r7, #23]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026aa:	2301      	movs	r3, #1
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_SPI_TransmitReceive+0x26>
 80026be:	2302      	movs	r3, #2
 80026c0:	e18a      	b.n	80029d8 <HAL_SPI_TransmitReceive+0x33c>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ca:	f7fe fc93 	bl	8000ff4 <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80026e0:	887b      	ldrh	r3, [r7, #2]
 80026e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d00f      	beq.n	800270c <HAL_SPI_TransmitReceive+0x70>
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026f2:	d107      	bne.n	8002704 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <HAL_SPI_TransmitReceive+0x68>
 80026fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002700:	2b04      	cmp	r3, #4
 8002702:	d003      	beq.n	800270c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002704:	2302      	movs	r3, #2
 8002706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800270a:	e15b      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_SPI_TransmitReceive+0x82>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_SPI_TransmitReceive+0x82>
 8002718:	887b      	ldrh	r3, [r7, #2]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002724:	e14e      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b04      	cmp	r3, #4
 8002730:	d003      	beq.n	800273a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2205      	movs	r2, #5
 8002736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	887a      	ldrh	r2, [r7, #2]
 800274a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	887a      	ldrh	r2, [r7, #2]
 800275c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d007      	beq.n	800278e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002796:	d178      	bne.n	800288a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_SPI_TransmitReceive+0x10a>
 80027a0:	8b7b      	ldrh	r3, [r7, #26]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d166      	bne.n	8002874 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	881a      	ldrh	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	1c9a      	adds	r2, r3, #2
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027ca:	e053      	b.n	8002874 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d11b      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x176>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d016      	beq.n	8002812 <HAL_SPI_TransmitReceive+0x176>
 80027e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d113      	bne.n	8002812 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	881a      	ldrh	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	1c9a      	adds	r2, r3, #2
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d119      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x1b8>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d014      	beq.n	8002854 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	b292      	uxth	r2, r2
 8002836:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	1c9a      	adds	r2, r3, #2
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002850:	2301      	movs	r3, #1
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002854:	f7fe fbce 	bl	8000ff4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002860:	429a      	cmp	r2, r3
 8002862:	d807      	bhi.n	8002874 <HAL_SPI_TransmitReceive+0x1d8>
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d003      	beq.n	8002874 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002872:	e0a7      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1a6      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x130>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1a1      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x130>
 8002888:	e07c      	b.n	8002984 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x1fc>
 8002892:	8b7b      	ldrh	r3, [r7, #26]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d16b      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	330c      	adds	r3, #12
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028be:	e057      	b.n	8002970 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d11c      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x26c>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x26c>
 80028d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d114      	bne.n	8002908 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b01      	cmp	r3, #1
 8002914:	d119      	bne.n	800294a <HAL_SPI_TransmitReceive+0x2ae>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d014      	beq.n	800294a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002946:	2301      	movs	r3, #1
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800294a:	f7fe fb53 	bl	8000ff4 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002956:	429a      	cmp	r2, r3
 8002958:	d803      	bhi.n	8002962 <HAL_SPI_TransmitReceive+0x2c6>
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d102      	bne.n	8002968 <HAL_SPI_TransmitReceive+0x2cc>
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	2b00      	cmp	r3, #0
 8002966:	d103      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800296e:	e029      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1a2      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x224>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d19d      	bne.n	80028c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f917 	bl	8002bbc <SPI_EndRxTxTransaction>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d006      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80029a0:	e010      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	e000      	b.n	80029c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80029c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3730      	adds	r7, #48	; 0x30
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029f0:	f7fe fb00 	bl	8000ff4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a00:	f7fe faf8 	bl	8000ff4 <HAL_GetTick>
 8002a04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	015b      	lsls	r3, r3, #5
 8002a0c:	0d1b      	lsrs	r3, r3, #20
 8002a0e:	69fa      	ldr	r2, [r7, #28]
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a16:	e054      	b.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1e:	d050      	beq.n	8002ac2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a20:	f7fe fae8 	bl	8000ff4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d902      	bls.n	8002a36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d13d      	bne.n	8002ab2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a4e:	d111      	bne.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a58:	d004      	beq.n	8002a64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a62:	d107      	bne.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7c:	d10f      	bne.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e017      	b.n	8002ae2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	bf0c      	ite	eq
 8002ad2:	2301      	moveq	r3, #1
 8002ad4:	2300      	movne	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	461a      	mov	r2, r3
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d19b      	bne.n	8002a18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000024 	.word	0x20000024

08002af0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b04:	d111      	bne.n	8002b2a <SPI_EndRxTransaction+0x3a>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0e:	d004      	beq.n	8002b1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b18:	d107      	bne.n	8002b2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b32:	d12a      	bne.n	8002b8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d012      	beq.n	8002b64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2200      	movs	r2, #0
 8002b46:	2180      	movs	r1, #128	; 0x80
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff ff49 	bl	80029e0 <SPI_WaitFlagStateUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02d      	beq.n	8002bb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e026      	b.n	8002bb2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f7ff ff36 	bl	80029e0 <SPI_WaitFlagStateUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d01a      	beq.n	8002bb0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e013      	b.n	8002bb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2101      	movs	r1, #1
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f7ff ff23 	bl	80029e0 <SPI_WaitFlagStateUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <SPI_EndRxTxTransaction+0x7c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <SPI_EndRxTxTransaction+0x80>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0d5b      	lsrs	r3, r3, #21
 8002bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002be6:	d112      	bne.n	8002c0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f7ff fef4 	bl	80029e0 <SPI_WaitFlagStateUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f043 0220 	orr.w	r2, r3, #32
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e00f      	b.n	8002c2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c24:	2b80      	cmp	r3, #128	; 0x80
 8002c26:	d0f2      	beq.n	8002c0e <SPI_EndRxTxTransaction+0x52>
 8002c28:	e000      	b.n	8002c2c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c2a:	bf00      	nop
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000024 	.word	0x20000024
 8002c3c:	165e9f81 	.word	0x165e9f81

08002c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e041      	b.n	8002cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f82e 	bl	8000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f000 f9c0 	bl	8003004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e044      	b.n	8002d82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1e      	ldr	r2, [pc, #120]	; (8002d90 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d018      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x6c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d013      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x6c>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x6c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x6c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <HAL_TIM_Base_Start_IT+0xbc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x6c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b06      	cmp	r3, #6
 8002d5c:	d010      	beq.n	8002d80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f042 0201 	orr.w	r2, r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6e:	e007      	b.n	8002d80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40010000 	.word	0x40010000
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40014000 	.word	0x40014000

08002da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d122      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d11b      	bne.n	8002e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0202 	mvn.w	r2, #2
 8002dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8ee 	bl	8002fc8 <HAL_TIM_IC_CaptureCallback>
 8002dec:	e005      	b.n	8002dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f8e0 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8f1 	bl	8002fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d122      	bne.n	8002e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d11b      	bne.n	8002e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f06f 0204 	mvn.w	r2, #4
 8002e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f8c4 	bl	8002fc8 <HAL_TIM_IC_CaptureCallback>
 8002e40:	e005      	b.n	8002e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8b6 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f8c7 	bl	8002fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d122      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0208 	mvn.w	r2, #8
 8002e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f89a 	bl	8002fc8 <HAL_TIM_IC_CaptureCallback>
 8002e94:	e005      	b.n	8002ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f88c 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f89d 	bl	8002fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d122      	bne.n	8002efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d11b      	bne.n	8002efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f06f 0210 	mvn.w	r2, #16
 8002ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2208      	movs	r2, #8
 8002ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f870 	bl	8002fc8 <HAL_TIM_IC_CaptureCallback>
 8002ee8:	e005      	b.n	8002ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f862 	bl	8002fb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f873 	bl	8002fdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10e      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0201 	mvn.w	r2, #1
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fd2a 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8e2 	bl	8003118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b40      	cmp	r3, #64	; 0x40
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f838 	bl	8002ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b20      	cmp	r3, #32
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b20      	cmp	r3, #32
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0220 	mvn.w	r2, #32
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8ac 	bl	8003104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <TIM_Base_SetConfig+0xe4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00f      	beq.n	800303c <TIM_Base_SetConfig+0x38>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003022:	d00b      	beq.n	800303c <TIM_Base_SetConfig+0x38>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a31      	ldr	r2, [pc, #196]	; (80030ec <TIM_Base_SetConfig+0xe8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_Base_SetConfig+0x38>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <TIM_Base_SetConfig+0xec>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0x38>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <TIM_Base_SetConfig+0xf0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a25      	ldr	r2, [pc, #148]	; (80030e8 <TIM_Base_SetConfig+0xe4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d01b      	beq.n	800308e <TIM_Base_SetConfig+0x8a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d017      	beq.n	800308e <TIM_Base_SetConfig+0x8a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a22      	ldr	r2, [pc, #136]	; (80030ec <TIM_Base_SetConfig+0xe8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d013      	beq.n	800308e <TIM_Base_SetConfig+0x8a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <TIM_Base_SetConfig+0xec>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00f      	beq.n	800308e <TIM_Base_SetConfig+0x8a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <TIM_Base_SetConfig+0xf0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d00b      	beq.n	800308e <TIM_Base_SetConfig+0x8a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1f      	ldr	r2, [pc, #124]	; (80030f8 <TIM_Base_SetConfig+0xf4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d007      	beq.n	800308e <TIM_Base_SetConfig+0x8a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <TIM_Base_SetConfig+0xf8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d003      	beq.n	800308e <TIM_Base_SetConfig+0x8a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <TIM_Base_SetConfig+0xfc>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d108      	bne.n	80030a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <TIM_Base_SetConfig+0xe4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d103      	bne.n	80030d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	615a      	str	r2, [r3, #20]
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800

08003104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e03f      	b.n	80031be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fd04 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2224      	movs	r2, #36	; 0x24
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f929 	bl	80033c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08a      	sub	sp, #40	; 0x28
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	603b      	str	r3, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b20      	cmp	r3, #32
 80031e4:	d17c      	bne.n	80032e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_UART_Transmit+0x2c>
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e075      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Transmit+0x3e>
 8003200:	2302      	movs	r3, #2
 8003202:	e06e      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2221      	movs	r2, #33	; 0x21
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800321a:	f7fd feeb 	bl	8000ff4 <HAL_GetTick>
 800321e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003234:	d108      	bne.n	8003248 <HAL_UART_Transmit+0x82>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d104      	bne.n	8003248 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e003      	b.n	8003250 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003258:	e02a      	b.n	80032b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2200      	movs	r2, #0
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f840 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e036      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10b      	bne.n	8003292 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003288:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	3302      	adds	r3, #2
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	e007      	b.n	80032a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	3301      	adds	r3, #1
 80032a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1cf      	bne.n	800325a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2140      	movs	r1, #64	; 0x40
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f810 	bl	80032ea <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e006      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b090      	sub	sp, #64	; 0x40
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	603b      	str	r3, [r7, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fa:	e050      	b.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d04c      	beq.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
 800330a:	f7fd fe73 	bl	8000ff4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003316:	429a      	cmp	r2, r3
 8003318:	d241      	bcs.n	800339e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	330c      	adds	r3, #12
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800333a:	637a      	str	r2, [r7, #52]	; 0x34
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003340:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e5      	bne.n	800331a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	613b      	str	r3, [r7, #16]
   return(result);
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3314      	adds	r3, #20
 800336c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800336e:	623a      	str	r2, [r7, #32]
 8003370:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	69f9      	ldr	r1, [r7, #28]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	61bb      	str	r3, [r7, #24]
   return(result);
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d09f      	beq.n	80032fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3740      	adds	r7, #64	; 0x40
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b0c0      	sub	sp, #256	; 0x100
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	68d9      	ldr	r1, [r3, #12]
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	ea40 0301 	orr.w	r3, r0, r1
 80033f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003420:	f021 010c 	bic.w	r1, r1, #12
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800342e:	430b      	orrs	r3, r1
 8003430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	6999      	ldr	r1, [r3, #24]
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	ea40 0301 	orr.w	r3, r0, r1
 800344e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <UART_SetConfig+0x2cc>)
 8003458:	429a      	cmp	r2, r3
 800345a:	d005      	beq.n	8003468 <UART_SetConfig+0xa0>
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4b8d      	ldr	r3, [pc, #564]	; (8003698 <UART_SetConfig+0x2d0>)
 8003464:	429a      	cmp	r2, r3
 8003466:	d104      	bne.n	8003472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003468:	f7fe fdfc 	bl	8002064 <HAL_RCC_GetPCLK2Freq>
 800346c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003470:	e003      	b.n	800347a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003472:	f7fe fde3 	bl	800203c <HAL_RCC_GetPCLK1Freq>
 8003476:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003484:	f040 810c 	bne.w	80036a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800348c:	2200      	movs	r2, #0
 800348e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003492:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80034a2:	415b      	adcs	r3, r3
 80034a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034aa:	4621      	mov	r1, r4
 80034ac:	eb12 0801 	adds.w	r8, r2, r1
 80034b0:	4629      	mov	r1, r5
 80034b2:	eb43 0901 	adc.w	r9, r3, r1
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4623      	mov	r3, r4
 80034d0:	eb18 0303 	adds.w	r3, r8, r3
 80034d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034d8:	462b      	mov	r3, r5
 80034da:	eb49 0303 	adc.w	r3, r9, r3
 80034de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80034f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034f6:	460b      	mov	r3, r1
 80034f8:	18db      	adds	r3, r3, r3
 80034fa:	653b      	str	r3, [r7, #80]	; 0x50
 80034fc:	4613      	mov	r3, r2
 80034fe:	eb42 0303 	adc.w	r3, r2, r3
 8003502:	657b      	str	r3, [r7, #84]	; 0x54
 8003504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800350c:	f7fc ff08 	bl	8000320 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4b61      	ldr	r3, [pc, #388]	; (800369c <UART_SetConfig+0x2d4>)
 8003516:	fba3 2302 	umull	r2, r3, r3, r2
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	011c      	lsls	r4, r3, #4
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003528:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800352c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	64b9      	str	r1, [r7, #72]	; 0x48
 8003538:	415b      	adcs	r3, r3
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800353c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003540:	4641      	mov	r1, r8
 8003542:	eb12 0a01 	adds.w	sl, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0b01 	adc.w	fp, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800355c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003560:	4692      	mov	sl, r2
 8003562:	469b      	mov	fp, r3
 8003564:	4643      	mov	r3, r8
 8003566:	eb1a 0303 	adds.w	r3, sl, r3
 800356a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800356e:	464b      	mov	r3, r9
 8003570:	eb4b 0303 	adc.w	r3, fp, r3
 8003574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003584:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800358c:	460b      	mov	r3, r1
 800358e:	18db      	adds	r3, r3, r3
 8003590:	643b      	str	r3, [r7, #64]	; 0x40
 8003592:	4613      	mov	r3, r2
 8003594:	eb42 0303 	adc.w	r3, r2, r3
 8003598:	647b      	str	r3, [r7, #68]	; 0x44
 800359a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800359e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035a2:	f7fc febd 	bl	8000320 <__aeabi_uldivmod>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	4b3b      	ldr	r3, [pc, #236]	; (800369c <UART_SetConfig+0x2d4>)
 80035ae:	fba3 2301 	umull	r2, r3, r3, r1
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2264      	movs	r2, #100	; 0x64
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	1acb      	subs	r3, r1, r3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <UART_SetConfig+0x2d4>)
 80035c4:	fba3 2302 	umull	r2, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035d0:	441c      	add	r4, r3
 80035d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035e4:	4642      	mov	r2, r8
 80035e6:	464b      	mov	r3, r9
 80035e8:	1891      	adds	r1, r2, r2
 80035ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80035ec:	415b      	adcs	r3, r3
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035f4:	4641      	mov	r1, r8
 80035f6:	1851      	adds	r1, r2, r1
 80035f8:	6339      	str	r1, [r7, #48]	; 0x30
 80035fa:	4649      	mov	r1, r9
 80035fc:	414b      	adcs	r3, r1
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800360c:	4659      	mov	r1, fp
 800360e:	00cb      	lsls	r3, r1, #3
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003616:	4651      	mov	r1, sl
 8003618:	00ca      	lsls	r2, r1, #3
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	4603      	mov	r3, r0
 8003620:	4642      	mov	r2, r8
 8003622:	189b      	adds	r3, r3, r2
 8003624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003628:	464b      	mov	r3, r9
 800362a:	460a      	mov	r2, r1
 800362c:	eb42 0303 	adc.w	r3, r2, r3
 8003630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003640:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003648:	460b      	mov	r3, r1
 800364a:	18db      	adds	r3, r3, r3
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
 800364e:	4613      	mov	r3, r2
 8003650:	eb42 0303 	adc.w	r3, r2, r3
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800365a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800365e:	f7fc fe5f 	bl	8000320 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4b0d      	ldr	r3, [pc, #52]	; (800369c <UART_SetConfig+0x2d4>)
 8003668:	fba3 1302 	umull	r1, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	2164      	movs	r1, #100	; 0x64
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3332      	adds	r3, #50	; 0x32
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <UART_SetConfig+0x2d4>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0207 	and.w	r2, r3, #7
 8003686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4422      	add	r2, r4
 800368e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003690:	e105      	b.n	800389e <UART_SetConfig+0x4d6>
 8003692:	bf00      	nop
 8003694:	40011000 	.word	0x40011000
 8003698:	40011400 	.word	0x40011400
 800369c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a4:	2200      	movs	r2, #0
 80036a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036b2:	4642      	mov	r2, r8
 80036b4:	464b      	mov	r3, r9
 80036b6:	1891      	adds	r1, r2, r2
 80036b8:	6239      	str	r1, [r7, #32]
 80036ba:	415b      	adcs	r3, r3
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
 80036be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036c2:	4641      	mov	r1, r8
 80036c4:	1854      	adds	r4, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0501 	adc.w	r5, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	00eb      	lsls	r3, r5, #3
 80036d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036da:	00e2      	lsls	r2, r4, #3
 80036dc:	4614      	mov	r4, r2
 80036de:	461d      	mov	r5, r3
 80036e0:	4643      	mov	r3, r8
 80036e2:	18e3      	adds	r3, r4, r3
 80036e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036e8:	464b      	mov	r3, r9
 80036ea:	eb45 0303 	adc.w	r3, r5, r3
 80036ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800370e:	4629      	mov	r1, r5
 8003710:	008b      	lsls	r3, r1, #2
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003718:	4621      	mov	r1, r4
 800371a:	008a      	lsls	r2, r1, #2
 800371c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003720:	f7fc fdfe 	bl	8000320 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4b60      	ldr	r3, [pc, #384]	; (80038ac <UART_SetConfig+0x4e4>)
 800372a:	fba3 2302 	umull	r2, r3, r3, r2
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	011c      	lsls	r4, r3, #4
 8003732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003736:	2200      	movs	r2, #0
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800373c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	61b9      	str	r1, [r7, #24]
 800374c:	415b      	adcs	r3, r3
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6139      	str	r1, [r7, #16]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003788:	464b      	mov	r3, r9
 800378a:	460a      	mov	r2, r1
 800378c:	eb42 0303 	adc.w	r3, r2, r3
 8003790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	67bb      	str	r3, [r7, #120]	; 0x78
 800379e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037ac:	4649      	mov	r1, r9
 80037ae:	008b      	lsls	r3, r1, #2
 80037b0:	4641      	mov	r1, r8
 80037b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b6:	4641      	mov	r1, r8
 80037b8:	008a      	lsls	r2, r1, #2
 80037ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037be:	f7fc fdaf 	bl	8000320 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4b39      	ldr	r3, [pc, #228]	; (80038ac <UART_SetConfig+0x4e4>)
 80037c8:	fba3 1302 	umull	r1, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2164      	movs	r1, #100	; 0x64
 80037d0:	fb01 f303 	mul.w	r3, r1, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a34      	ldr	r2, [pc, #208]	; (80038ac <UART_SetConfig+0x4e4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037e6:	441c      	add	r4, r3
 80037e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ec:	2200      	movs	r2, #0
 80037ee:	673b      	str	r3, [r7, #112]	; 0x70
 80037f0:	677a      	str	r2, [r7, #116]	; 0x74
 80037f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80037f6:	4642      	mov	r2, r8
 80037f8:	464b      	mov	r3, r9
 80037fa:	1891      	adds	r1, r2, r2
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	415b      	adcs	r3, r3
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003806:	4641      	mov	r1, r8
 8003808:	1851      	adds	r1, r2, r1
 800380a:	6039      	str	r1, [r7, #0]
 800380c:	4649      	mov	r1, r9
 800380e:	414b      	adcs	r3, r1
 8003810:	607b      	str	r3, [r7, #4]
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800381e:	4659      	mov	r1, fp
 8003820:	00cb      	lsls	r3, r1, #3
 8003822:	4651      	mov	r1, sl
 8003824:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003828:	4651      	mov	r1, sl
 800382a:	00ca      	lsls	r2, r1, #3
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	4603      	mov	r3, r0
 8003832:	4642      	mov	r2, r8
 8003834:	189b      	adds	r3, r3, r2
 8003836:	66bb      	str	r3, [r7, #104]	; 0x68
 8003838:	464b      	mov	r3, r9
 800383a:	460a      	mov	r2, r1
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	663b      	str	r3, [r7, #96]	; 0x60
 800384c:	667a      	str	r2, [r7, #100]	; 0x64
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800385a:	4649      	mov	r1, r9
 800385c:	008b      	lsls	r3, r1, #2
 800385e:	4641      	mov	r1, r8
 8003860:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003864:	4641      	mov	r1, r8
 8003866:	008a      	lsls	r2, r1, #2
 8003868:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800386c:	f7fc fd58 	bl	8000320 <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4b0d      	ldr	r3, [pc, #52]	; (80038ac <UART_SetConfig+0x4e4>)
 8003876:	fba3 1302 	umull	r1, r3, r3, r2
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2164      	movs	r1, #100	; 0x64
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	3332      	adds	r3, #50	; 0x32
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <UART_SetConfig+0x4e4>)
 800388a:	fba2 2303 	umull	r2, r3, r2, r3
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4422      	add	r2, r4
 800389c:	609a      	str	r2, [r3, #8]
}
 800389e:	bf00      	nop
 80038a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038a4:	46bd      	mov	sp, r7
 80038a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038aa:	bf00      	nop
 80038ac:	51eb851f 	.word	0x51eb851f

080038b0 <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t* serNum);

void spi_cs_rfid_write(bool state)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
	if(state)
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <spi_cs_rfid_write+0x18>
	{
		MFRC522_CS_HIGH();
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <spi_cs_rfid_write+0x2c>)
 80038c2:	2201      	movs	r2, #1
 80038c4:	619a      	str	r2, [r3, #24]
	}
	else
	{
		MFRC522_CS_LOW();
	}
}
 80038c6:	e003      	b.n	80038d0 <spi_cs_rfid_write+0x20>
		MFRC522_CS_LOW();
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <spi_cs_rfid_write+0x2c>)
 80038ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80038ce:	619a      	str	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40020400 	.word	0x40020400

080038e0 <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  spi_cs_rfid_write(0);
 80038ea:	2000      	movs	r0, #0
 80038ec:	f7ff ffe0 	bl	80038b0 <spi_cs_rfid_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	b25b      	sxtb	r3, r3
 80038f6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003900:	b25b      	sxtb	r3, r3
 8003902:	b2db      	uxtb	r3, r3
 8003904:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&spi1,(uint8_t *)&reg,1,100);
 8003906:	1df9      	adds	r1, r7, #7
 8003908:	2364      	movs	r3, #100	; 0x64
 800390a:	2201      	movs	r2, #1
 800390c:	4809      	ldr	r0, [pc, #36]	; (8003934 <rc522_regRead8+0x54>)
 800390e:	f7fe fc78 	bl	8002202 <HAL_SPI_Transmit>
  uint8_t dataRd=0;
 8003912:	2300      	movs	r3, #0
 8003914:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&spi1,(uint8_t *)&dataRd,1,100);
 8003916:	f107 010f 	add.w	r1, r7, #15
 800391a:	2364      	movs	r3, #100	; 0x64
 800391c:	2201      	movs	r2, #1
 800391e:	4805      	ldr	r0, [pc, #20]	; (8003934 <rc522_regRead8+0x54>)
 8003920:	f7fe fdab 	bl	800247a <HAL_SPI_Receive>
  spi_cs_rfid_write(1);
 8003924:	2001      	movs	r0, #1
 8003926:	f7ff ffc3 	bl	80038b0 <spi_cs_rfid_write>
  return dataRd;
 800392a:	7bfb      	ldrb	r3, [r7, #15]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200000f8 	.word	0x200000f8

08003938 <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	460a      	mov	r2, r1
 8003942:	71fb      	strb	r3, [r7, #7]
 8003944:	4613      	mov	r3, r2
 8003946:	71bb      	strb	r3, [r7, #6]
  spi_cs_rfid_write(0);
 8003948:	2000      	movs	r0, #0
 800394a:	f7ff ffb1 	bl	80038b0 <spi_cs_rfid_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003958:	b2db      	uxtb	r3, r3
 800395a:	733b      	strb	r3, [r7, #12]
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(&spi1,(uint8_t *)&txData,2,100);
 8003960:	f107 010c 	add.w	r1, r7, #12
 8003964:	2364      	movs	r3, #100	; 0x64
 8003966:	2202      	movs	r2, #2
 8003968:	4804      	ldr	r0, [pc, #16]	; (800397c <rc522_regWrite8+0x44>)
 800396a:	f7fe fc4a 	bl	8002202 <HAL_SPI_Transmit>
  spi_cs_rfid_write(1);
 800396e:	2001      	movs	r0, #1
 8003970:	f7ff ff9e 	bl	80038b0 <spi_cs_rfid_write>
}
 8003974:	bf00      	nop
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200000f8 	.word	0x200000f8

08003980 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	460a      	mov	r2, r1
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	4613      	mov	r3, r2
 800398e:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff ffa4 	bl	80038e0 <rc522_regRead8>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	79bb      	ldrb	r3, [r7, #6]
 800399e:	4313      	orrs	r3, r2
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	4611      	mov	r1, r2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ffc6 	bl	8003938 <rc522_regWrite8>
}
 80039ac:	bf00      	nop
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	460a      	mov	r2, r1
 80039be:	71fb      	strb	r3, [r7, #7]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ff8a 	bl	80038e0 <rc522_regRead8>
 80039cc:	4603      	mov	r3, r0
 80039ce:	b25a      	sxtb	r2, r3
 80039d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	4013      	ands	r3, r2
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff ffa8 	bl	8003938 <rc522_regWrite8>
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 80039f4:	210f      	movs	r1, #15
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7ff ff9e 	bl	8003938 <rc522_regWrite8>
}
 80039fc:	bf00      	nop
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 8003a06:	2014      	movs	r0, #20
 8003a08:	f7ff ff6a 	bl	80038e0 <rc522_regRead8>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 8003a1a:	2103      	movs	r1, #3
 8003a1c:	2014      	movs	r0, #20
 8003a1e:	f7ff ffaf 	bl	8003980 <rc522_setBit>
  }
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  bool status=false;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	2026      	movs	r0, #38	; 0x26
 8003a3a:	f000 f811 	bl	8003a60 <rc522_request>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f904 	bl	8003c56 <rc522_antiColl>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 8003a52:	f000 f93d 	bl	8003cd0 <rc522_halt>

    return status;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	4603      	mov	r3, r0
 8003a68:	6039      	str	r1, [r7, #0]
 8003a6a:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 8003a70:	2107      	movs	r1, #7
 8003a72:	200d      	movs	r0, #13
 8003a74:	f7ff ff60 	bl	8003938 <rc522_regWrite8>
  tagType[0] = reqMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	79fa      	ldrb	r2, [r7, #7]
 8003a7c:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	200c      	movs	r0, #12
 8003a8c:	f000 f812 	bl	8003ab4 <rc522_toCard>
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	f083 0301 	eor.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <rc522_request+0x46>
 8003aa0:	89bb      	ldrh	r3, [r7, #12]
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d001      	beq.n	8003aaa <rc522_request+0x4a>
    status = false;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	4603      	mov	r3, r0
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	75fb      	strb	r3, [r7, #23]
  uint8_t irqEn = 0x00;
 8003aca:	2300      	movs	r3, #0
 8003acc:	75bb      	strb	r3, [r7, #22]
  uint8_t waitIRq = 0x00;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	757b      	strb	r3, [r7, #21]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	d006      	beq.n	8003ae6 <rc522_toCard+0x32>
 8003ad8:	2b0e      	cmp	r3, #14
 8003ada:	d109      	bne.n	8003af0 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 8003adc:	2312      	movs	r3, #18
 8003ade:	75bb      	strb	r3, [r7, #22]
      waitIRq = 0x10;
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	757b      	strb	r3, [r7, #21]
      break;
 8003ae4:	e005      	b.n	8003af2 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 8003ae6:	2377      	movs	r3, #119	; 0x77
 8003ae8:	75bb      	strb	r3, [r7, #22]
      waitIRq = 0x30;
 8003aea:	2330      	movs	r3, #48	; 0x30
 8003aec:	757b      	strb	r3, [r7, #21]
      break;
 8003aee:	e000      	b.n	8003af2 <rc522_toCard+0x3e>
    }
    default:
      break;
 8003af0:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8003af2:	7dbb      	ldrb	r3, [r7, #22]
 8003af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	2002      	movs	r0, #2
 8003afe:	f7ff ff1b 	bl	8003938 <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 8003b02:	2180      	movs	r1, #128	; 0x80
 8003b04:	2004      	movs	r0, #4
 8003b06:	f7ff ff55 	bl	80039b4 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 8003b0a:	2180      	movs	r1, #128	; 0x80
 8003b0c:	200a      	movs	r0, #10
 8003b0e:	f7ff ff37 	bl	8003980 <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 8003b12:	2100      	movs	r1, #0
 8003b14:	2001      	movs	r0, #1
 8003b16:	f7ff ff0f 	bl	8003938 <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	827b      	strh	r3, [r7, #18]
 8003b1e:	e00a      	b.n	8003b36 <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8003b20:	8a7b      	ldrh	r3, [r7, #18]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	2009      	movs	r0, #9
 8003b2c:	f7ff ff04 	bl	8003938 <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 8003b30:	8a7b      	ldrh	r3, [r7, #18]
 8003b32:	3301      	adds	r3, #1
 8003b34:	827b      	strh	r3, [r7, #18]
 8003b36:	7bbb      	ldrb	r3, [r7, #14]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	8a7a      	ldrh	r2, [r7, #18]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d3ef      	bcc.n	8003b20 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	4619      	mov	r1, r3
 8003b44:	2001      	movs	r0, #1
 8003b46:	f7ff fef7 	bl	8003938 <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d103      	bne.n	8003b58 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	200d      	movs	r0, #13
 8003b54:	f7ff ff14 	bl	8003980 <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8003b58:	2364      	movs	r3, #100	; 0x64
 8003b5a:	827b      	strh	r3, [r7, #18]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 8003b5c:	2004      	movs	r0, #4
 8003b5e:	f7ff febf 	bl	80038e0 <rc522_regRead8>
 8003b62:	4603      	mov	r3, r0
 8003b64:	753b      	strb	r3, [r7, #20]
    i--;
 8003b66:	8a7b      	ldrh	r3, [r7, #18]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	827b      	strh	r3, [r7, #18]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8003b6c:	8a7b      	ldrh	r3, [r7, #18]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <rc522_toCard+0xd4>
 8003b72:	7d3b      	ldrb	r3, [r7, #20]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d105      	bne.n	8003b88 <rc522_toCard+0xd4>
 8003b7c:	7d3a      	ldrb	r2, [r7, #20]
 8003b7e:	7d7b      	ldrb	r3, [r7, #21]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0e9      	beq.n	8003b5c <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	200d      	movs	r0, #13
 8003b8c:	f7ff ff12 	bl	80039b4 <rc522_clearBit>

  if (i != 0)  {
 8003b90:	8a7b      	ldrh	r3, [r7, #18]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d05a      	beq.n	8003c4c <rc522_toCard+0x198>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8003b96:	2006      	movs	r0, #6
 8003b98:	f7ff fea2 	bl	80038e0 <rc522_regRead8>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f003 031b 	and.w	r3, r3, #27
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d150      	bne.n	8003c48 <rc522_toCard+0x194>
      status = true;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	75fb      	strb	r3, [r7, #23]
      if (n & irqEn & 0x01) {
 8003baa:	7d3a      	ldrb	r2, [r7, #20]
 8003bac:	7dbb      	ldrb	r3, [r7, #22]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <rc522_toCard+0x10a>
        status = false;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
      }

      if (command == PCD_TRANSCEIVE) {
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d143      	bne.n	8003c4c <rc522_toCard+0x198>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8003bc4:	200a      	movs	r0, #10
 8003bc6:	f7ff fe8b 	bl	80038e0 <rc522_regRead8>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	753b      	strb	r3, [r7, #20]
 //       uint8_t l = n;
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 8003bce:	200c      	movs	r0, #12
 8003bd0:	f7ff fe86 	bl	80038e0 <rc522_regRead8>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	747b      	strb	r3, [r7, #17]
        if (lastBits) {
 8003bdc:	7c7b      	ldrb	r3, [r7, #17]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <rc522_toCard+0x146>
          *backLen = (n - 1) * 8 + lastBits;
 8003be2:	7d3b      	ldrb	r3, [r7, #20]
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	7c7b      	ldrb	r3, [r7, #17]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e005      	b.n	8003c06 <rc522_toCard+0x152>
        } else {
          *backLen = n * 8;
 8003bfa:	7d3b      	ldrb	r3, [r7, #20]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 8003c06:	7d3b      	ldrb	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <rc522_toCard+0x15c>
          n = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	753b      	strb	r3, [r7, #20]
        }
        if (n > MFRC522_MAX_LEN) {
 8003c10:	7d3b      	ldrb	r3, [r7, #20]
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d901      	bls.n	8003c1a <rc522_toCard+0x166>
          n = MFRC522_MAX_LEN;
 8003c16:	2310      	movs	r3, #16
 8003c18:	753b      	strb	r3, [r7, #20]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) 
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	827b      	strh	r3, [r7, #18]
 8003c1e:	e00c      	b.n	8003c3a <rc522_toCard+0x186>
				{
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 8003c20:	2009      	movs	r0, #9
 8003c22:	f7ff fe5d 	bl	80038e0 <rc522_regRead8>
 8003c26:	4603      	mov	r3, r0
 8003c28:	743b      	strb	r3, [r7, #16]
//          if (l == 4)
//            printf("%02x ", d);
          backData[i] = d;
 8003c2a:	8a7b      	ldrh	r3, [r7, #18]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	7c3a      	ldrb	r2, [r7, #16]
 8003c32:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) 
 8003c34:	8a7b      	ldrh	r3, [r7, #18]
 8003c36:	3301      	adds	r3, #1
 8003c38:	827b      	strh	r3, [r7, #18]
 8003c3a:	7d3b      	ldrb	r3, [r7, #20]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	8a7a      	ldrh	r2, [r7, #18]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d3ed      	bcc.n	8003c20 <rc522_toCard+0x16c>
        }
//       if (l==4)
//          printf("\r\n");
        return status;
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	e002      	b.n	8003c4e <rc522_toCard+0x19a>
      }
    } 
		else 
		{
//      printf("error\r\n");
      status = false;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 8003c62:	2100      	movs	r1, #0
 8003c64:	200d      	movs	r0, #13
 8003c66:	f7ff fe67 	bl	8003938 <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2293      	movs	r2, #147	; 0x93
 8003c6e:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3301      	adds	r3, #1
 8003c74:	2220      	movs	r2, #32
 8003c76:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8003c78:	f107 030a 	add.w	r3, r7, #10
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	200c      	movs	r0, #12
 8003c86:	f7ff ff15 	bl	8003ab4 <rc522_toCard>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d018      	beq.n	8003cc6 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 8003c94:	2300      	movs	r3, #0
 8003c96:	73bb      	strb	r3, [r7, #14]
 8003c98:	e009      	b.n	8003cae <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	7b7b      	ldrb	r3, [r7, #13]
 8003ca4:	4053      	eors	r3, r2
 8003ca6:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 8003ca8:	7bbb      	ldrb	r3, [r7, #14]
 8003caa:	3301      	adds	r3, #1
 8003cac:	73bb      	strb	r3, [r7, #14]
 8003cae:	7bbb      	ldrb	r3, [r7, #14]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d9f2      	bls.n	8003c9a <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 8003cb4:	7bbb      	ldrb	r3, [r7, #14]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	7b7a      	ldrb	r2, [r7, #13]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d001      	beq.n	8003cc6 <rc522_antiColl+0x70>
      status = false;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <rc522_halt>:

void rc522_halt(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8003cd6:	2350      	movs	r3, #80	; 0x50
 8003cd8:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8003cde:	463b      	mov	r3, r7
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	463b      	mov	r3, r7
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f80d 	bl	8003d06 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8003cec:	463a      	mov	r2, r7
 8003cee:	4639      	mov	r1, r7
 8003cf0:	1dbb      	adds	r3, r7, #6
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	200c      	movs	r0, #12
 8003cfa:	f7ff fedb 	bl	8003ab4 <rc522_toCard>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 8003d06:	b590      	push	{r4, r7, lr}
 8003d08:	b087      	sub	sp, #28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	460b      	mov	r3, r1
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8003d14:	2104      	movs	r1, #4
 8003d16:	2005      	movs	r0, #5
 8003d18:	f7ff fe4c 	bl	80039b4 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	200a      	movs	r0, #10
 8003d20:	f7ff fe2e 	bl	8003980 <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8003d24:	2300      	movs	r3, #0
 8003d26:	75fb      	strb	r3, [r7, #23]
 8003d28:	e00a      	b.n	8003d40 <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	4619      	mov	r1, r3
 8003d34:	2009      	movs	r0, #9
 8003d36:	f7ff fdff 	bl	8003938 <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
 8003d40:	7dfa      	ldrb	r2, [r7, #23]
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3f0      	bcc.n	8003d2a <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8003d48:	2103      	movs	r1, #3
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7ff fdf4 	bl	8003938 <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8003d50:	23ff      	movs	r3, #255	; 0xff
 8003d52:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8003d54:	2005      	movs	r0, #5
 8003d56:	f7ff fdc3 	bl	80038e0 <rc522_regRead8>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	75bb      	strb	r3, [r7, #22]
    i--;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <rc522_calculateCRC+0x6e>
 8003d6a:	7dbb      	ldrb	r3, [r7, #22]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ef      	beq.n	8003d54 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8003d74:	2022      	movs	r0, #34	; 0x22
 8003d76:	f7ff fdb3 	bl	80038e0 <rc522_regRead8>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	1c5c      	adds	r4, r3, #1
 8003d86:	2021      	movs	r0, #33	; 0x21
 8003d88:	f7ff fdaa 	bl	80038e0 <rc522_regRead8>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	7023      	strb	r3, [r4, #0]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd90      	pop	{r4, r7, pc}

08003d98 <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0




  //GPIOA->BSRR= (1<<8)<<16;
  MFRC522_RST_LOW();
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <rc522_init+0x5c>)
 8003d9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da2:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 8003da4:	200a      	movs	r0, #10
 8003da6:	f7fd f931 	bl	800100c <HAL_Delay>
  MFRC522_RST_HIGH();
 8003daa:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <rc522_init+0x5c>)
 8003dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db0:	619a      	str	r2, [r3, #24]
  //GPIOA->BSRR= (1<<8);
  HAL_Delay(10);
 8003db2:	200a      	movs	r0, #10
 8003db4:	f7fd f92a 	bl	800100c <HAL_Delay>
	
  rc522_reset();
 8003db8:	f7ff fe1a 	bl	80039f0 <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	202a      	movs	r0, #42	; 0x2a
 8003dc0:	f7ff fdba 	bl	8003938 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8003dc4:	21a9      	movs	r1, #169	; 0xa9
 8003dc6:	202b      	movs	r0, #43	; 0x2b
 8003dc8:	f7ff fdb6 	bl	8003938 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8003dcc:	21e8      	movs	r1, #232	; 0xe8
 8003dce:	202d      	movs	r0, #45	; 0x2d
 8003dd0:	f7ff fdb2 	bl	8003938 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8003dd4:	2103      	movs	r1, #3
 8003dd6:	202c      	movs	r0, #44	; 0x2c
 8003dd8:	f7ff fdae 	bl	8003938 <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8003ddc:	2140      	movs	r1, #64	; 0x40
 8003dde:	2015      	movs	r0, #21
 8003de0:	f7ff fdaa 	bl	8003938 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8003de4:	213d      	movs	r1, #61	; 0x3d
 8003de6:	2011      	movs	r0, #17
 8003de8:	f7ff fda6 	bl	8003938 <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8003dec:	f7ff fe08 	bl	8003a00 <rc522_antennaON>
}
 8003df0:	bf00      	nop
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40020000 	.word	0x40020000

08003df8 <map>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

static inline uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8003df8:	b490      	push	{r4, r7}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	80fb      	strh	r3, [r7, #6]
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80bb      	strh	r3, [r7, #4]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	807b      	strh	r3, [r7, #2]
 8003e12:	4613      	mov	r3, r2
 8003e14:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	88bb      	ldrh	r3, [r7, #4]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	8a39      	ldrh	r1, [r7, #16]
 8003e1e:	883a      	ldrh	r2, [r7, #0]
 8003e20:	1a8a      	subs	r2, r1, r2
 8003e22:	fb03 f202 	mul.w	r2, r3, r2
 8003e26:	8879      	ldrh	r1, [r7, #2]
 8003e28:	88bb      	ldrh	r3, [r7, #4]
 8003e2a:	1acb      	subs	r3, r1, r3
 8003e2c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	883b      	ldrh	r3, [r7, #0]
 8003e34:	4413      	add	r3, r2
 8003e36:	b29b      	uxth	r3, r3
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc90      	pop	{r4, r7}
 8003e40:	4770      	bx	lr
	...

08003e44 <getRaw>:

uint16_t getRaw(uint8_t address)      // static
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	for(int dly = 0; dly < 10000; dly++);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e002      	b.n	8003e5a <getRaw+0x16>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	3301      	adds	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003e60:	4293      	cmp	r3, r2
 8003e62:	ddf7      	ble.n	8003e54 <getRaw+0x10>
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 8003e64:	2200      	movs	r2, #0
 8003e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e6a:	481b      	ldr	r0, [pc, #108]	; (8003ed8 <getRaw+0x94>)
 8003e6c:	f7fd fb58 	bl	8001520 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&spi2, &address, 1, 1000);
 8003e70:	1df9      	adds	r1, r7, #7
 8003e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e76:	2201      	movs	r2, #1
 8003e78:	4818      	ldr	r0, [pc, #96]	; (8003edc <getRaw+0x98>)
 8003e7a:	f7fe f9c2 	bl	8002202 <HAL_SPI_Transmit>
	address = 0x00;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 8003e82:	f107 020f 	add.w	r2, r7, #15
 8003e86:	1df9      	adds	r1, r7, #7
 8003e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4812      	ldr	r0, [pc, #72]	; (8003edc <getRaw+0x98>)
 8003e92:	f7fe fc03 	bl	800269c <HAL_SPI_TransmitReceive>
	MSB = data;   
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	827b      	strh	r3, [r7, #18]
	address = 0x00;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 8003e9e:	f107 020f 	add.w	r2, r7, #15
 8003ea2:	1df9      	adds	r1, r7, #7
 8003ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	2301      	movs	r3, #1
 8003eac:	480b      	ldr	r0, [pc, #44]	; (8003edc <getRaw+0x98>)
 8003eae:	f7fe fbf5 	bl	800269c <HAL_SPI_TransmitReceive>
	LSB = data;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	823b      	strh	r3, [r7, #16]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);      // if (XPT2046_NSS_SOFT)	
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ebc:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <getRaw+0x94>)
 8003ebe:	f7fd fb2f 	bl	8001520 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8003ec2:	8a7b      	ldrh	r3, [r7, #18]
 8003ec4:	021a      	lsls	r2, r3, #8
 8003ec6:	8a3b      	ldrh	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	10db      	asrs	r3, r3, #3
 8003ecc:	b29b      	uxth	r3, r3
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40020400 	.word	0x40020400
 8003edc:	20000150 	.word	0x20000150

08003ee0 <getX>:

uint16_t getX(void)
{ 
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_X)
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MAX_X, OUT_MIN_X);
	else
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8003ee6:	20d0      	movs	r0, #208	; 0xd0
 8003ee8:	f7ff ffac 	bl	8003e44 <getRaw>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f240 331f 	movw	r3, #799	; 0x31f
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003efc:	21c8      	movs	r1, #200	; 0xc8
 8003efe:	f7ff ff7b 	bl	8003df8 <map>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <getY>:

uint16_t getY(void)
{ 
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_Y)
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MAX_Y, OUT_MIN_Y);
 8003f10:	2090      	movs	r0, #144	; 0x90
 8003f12:	f7ff ff97 	bl	8003e44 <getRaw>
 8003f16:	4603      	mov	r3, r0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	f240 13df 	movw	r3, #479	; 0x1df
 8003f22:	f640 62d8 	movw	r2, #3800	; 0xed8
 8003f26:	21c8      	movs	r1, #200	; 0xc8
 8003f28:	f7ff ff66 	bl	8003df8 <map>
 8003f2c:	4603      	mov	r3, r0
	else
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]
}
 8003f70:	bf00      	nop
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6852      	ldr	r2, [r2, #4]
 8003f9c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d103      	bne.n	8003fb0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	1e5a      	subs	r2, r3, #1
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fda:	4b50      	ldr	r3, [pc, #320]	; (800411c <xTaskIncrementTick+0x14c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f040 8092 	bne.w	8004108 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fe4:	4b4e      	ldr	r3, [pc, #312]	; (8004120 <xTaskIncrementTick+0x150>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003fec:	4a4c      	ldr	r2, [pc, #304]	; (8004120 <xTaskIncrementTick+0x150>)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d120      	bne.n	800403a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ff8:	4b4a      	ldr	r3, [pc, #296]	; (8004124 <xTaskIncrementTick+0x154>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004014:	bf00      	nop
 8004016:	e7fe      	b.n	8004016 <xTaskIncrementTick+0x46>
 8004018:	4b42      	ldr	r3, [pc, #264]	; (8004124 <xTaskIncrementTick+0x154>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b42      	ldr	r3, [pc, #264]	; (8004128 <xTaskIncrementTick+0x158>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a40      	ldr	r2, [pc, #256]	; (8004124 <xTaskIncrementTick+0x154>)
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4a40      	ldr	r2, [pc, #256]	; (8004128 <xTaskIncrementTick+0x158>)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4b3f      	ldr	r3, [pc, #252]	; (800412c <xTaskIncrementTick+0x15c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a3e      	ldr	r2, [pc, #248]	; (800412c <xTaskIncrementTick+0x15c>)
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	f000 f8f1 	bl	800421c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800403a:	4b3d      	ldr	r3, [pc, #244]	; (8004130 <xTaskIncrementTick+0x160>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	429a      	cmp	r2, r3
 8004042:	d34c      	bcc.n	80040de <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004044:	4b37      	ldr	r3, [pc, #220]	; (8004124 <xTaskIncrementTick+0x154>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <xTaskIncrementTick+0x160>)
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	601a      	str	r2, [r3, #0]
                    break;
 8004056:	e042      	b.n	80040de <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004058:	4b32      	ldr	r3, [pc, #200]	; (8004124 <xTaskIncrementTick+0x154>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	d203      	bcs.n	8004078 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004070:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <xTaskIncrementTick+0x160>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004076:	e032      	b.n	80040de <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	3304      	adds	r3, #4
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff7d 	bl	8003f7c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	3318      	adds	r3, #24
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff74 	bl	8003f7c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f001 f9c4 	bl	8005424 <SEGGER_SYSVIEW_OnTaskStartReady>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	2201      	movs	r2, #1
 80040a2:	409a      	lsls	r2, r3
 80040a4:	4b23      	ldr	r3, [pc, #140]	; (8004134 <xTaskIncrementTick+0x164>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	4a22      	ldr	r2, [pc, #136]	; (8004134 <xTaskIncrementTick+0x164>)
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <xTaskIncrementTick+0x168>)
 80040bc:	441a      	add	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3304      	adds	r3, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f7ff ff35 	bl	8003f34 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4b1b      	ldr	r3, [pc, #108]	; (800413c <xTaskIncrementTick+0x16c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d3b5      	bcc.n	8004044 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80040d8:	2301      	movs	r3, #1
 80040da:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040dc:	e7b2      	b.n	8004044 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <xTaskIncrementTick+0x16c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	4914      	ldr	r1, [pc, #80]	; (8004138 <xTaskIncrementTick+0x168>)
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d901      	bls.n	80040fa <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80040f6:	2301      	movs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <xTaskIncrementTick+0x170>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d007      	beq.n	8004112 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8004102:	2301      	movs	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	e004      	b.n	8004112 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004108:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <xTaskIncrementTick+0x174>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <xTaskIncrementTick+0x174>)
 8004110:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004112:	697b      	ldr	r3, [r7, #20]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20000334 	.word	0x20000334
 8004120:	20000318 	.word	0x20000318
 8004124:	20000310 	.word	0x20000310
 8004128:	20000314 	.word	0x20000314
 800412c:	20000328 	.word	0x20000328
 8004130:	2000032c 	.word	0x2000032c
 8004134:	2000031c 	.word	0x2000031c
 8004138:	200002ac 	.word	0x200002ac
 800413c:	200002a8 	.word	0x200002a8
 8004140:	20000324 	.word	0x20000324
 8004144:	20000320 	.word	0x20000320

08004148 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800414e:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <vTaskSwitchContext+0xbc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <vTaskSwitchContext+0xc0>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800415c:	e04d      	b.n	80041fa <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <vTaskSwitchContext+0xc0>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004164:	4b29      	ldr	r3, [pc, #164]	; (800420c <vTaskSwitchContext+0xc4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	fab3 f383 	clz	r3, r3
 8004170:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004172:	7afb      	ldrb	r3, [r7, #11]
 8004174:	f1c3 031f 	rsb	r3, r3, #31
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	4925      	ldr	r1, [pc, #148]	; (8004210 <vTaskSwitchContext+0xc8>)
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10a      	bne.n	80041a4 <vTaskSwitchContext+0x5c>
        __asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
    }
 80041a0:	bf00      	nop
 80041a2:	e7fe      	b.n	80041a2 <vTaskSwitchContext+0x5a>
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4a18      	ldr	r2, [pc, #96]	; (8004210 <vTaskSwitchContext+0xc8>)
 80041b0:	4413      	add	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	3308      	adds	r3, #8
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d104      	bne.n	80041d4 <vTaskSwitchContext+0x8c>
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a0e      	ldr	r2, [pc, #56]	; (8004214 <vTaskSwitchContext+0xcc>)
 80041dc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80041de:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <vTaskSwitchContext+0xcc>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <vTaskSwitchContext+0xd0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d102      	bne.n	80041f0 <vTaskSwitchContext+0xa8>
 80041ea:	f001 f8bd 	bl	8005368 <SEGGER_SYSVIEW_OnIdle>
}
 80041ee:	e004      	b.n	80041fa <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80041f0:	4b08      	ldr	r3, [pc, #32]	; (8004214 <vTaskSwitchContext+0xcc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f001 f8d3 	bl	80053a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000334 	.word	0x20000334
 8004208:	20000324 	.word	0x20000324
 800420c:	2000031c 	.word	0x2000031c
 8004210:	200002ac 	.word	0x200002ac
 8004214:	200002a8 	.word	0x200002a8
 8004218:	20000330 	.word	0x20000330

0800421c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <prvResetNextTaskUnblockTime+0x30>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <prvResetNextTaskUnblockTime+0x34>)
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004232:	e005      	b.n	8004240 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <prvResetNextTaskUnblockTime+0x30>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <prvResetNextTaskUnblockTime+0x34>)
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000310 	.word	0x20000310
 8004250:	2000032c 	.word	0x2000032c
	...

08004260 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <pxCurrentTCBConst2>)
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	6808      	ldr	r0, [r1, #0]
 8004266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426a:	f380 8809 	msr	PSP, r0
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	4770      	bx	lr
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst2>:
 8004280:	200002a8 	.word	0x200002a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <vInitPrioGroupValue>:
}
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <vInitPrioGroupValue+0xe4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a37      	ldr	r2, [pc, #220]	; (8004370 <vInitPrioGroupValue+0xe8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10a      	bne.n	80042ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	613b      	str	r3, [r7, #16]
    }
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042ae:	4b2f      	ldr	r3, [pc, #188]	; (800436c <vInitPrioGroupValue+0xe4>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a30      	ldr	r2, [pc, #192]	; (8004374 <vInitPrioGroupValue+0xec>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d10a      	bne.n	80042ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60fb      	str	r3, [r7, #12]
    }
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ce:	4b2a      	ldr	r3, [pc, #168]	; (8004378 <vInitPrioGroupValue+0xf0>)
 80042d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <vInitPrioGroupValue+0xf4>)
 80042f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <vInitPrioGroupValue+0xf8>)
 80042f8:	2207      	movs	r2, #7
 80042fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fc:	e009      	b.n	8004312 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004306:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	b2db      	uxtb	r3, r3
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	b2db      	uxtb	r3, r3
 8004310:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d0ef      	beq.n	80042fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	d00a      	beq.n	8004340 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	60bb      	str	r3, [r7, #8]
    }
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004348:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <vInitPrioGroupValue+0xf8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004352:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <vInitPrioGroupValue+0xf8>)
 8004354:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000ed00 	.word	0xe000ed00
 8004370:	410fc271 	.word	0x410fc271
 8004374:	410fc270 	.word	0x410fc270
 8004378:	e000e400 	.word	0xe000e400
 800437c:	20000338 	.word	0x20000338
 8004380:	2000033c 	.word	0x2000033c
	...

08004390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004390:	f3ef 8009 	mrs	r0, PSP
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <pxCurrentTCBConst>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	f01e 0f10 	tst.w	lr, #16
 80043a0:	bf08      	it	eq
 80043a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	6010      	str	r0, [r2, #0]
 80043ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80043b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80043b4:	f380 8811 	msr	BASEPRI, r0
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f7ff fec2 	bl	8004148 <vTaskSwitchContext>
 80043c4:	f04f 0000 	mov.w	r0, #0
 80043c8:	f380 8811 	msr	BASEPRI, r0
 80043cc:	bc09      	pop	{r0, r3}
 80043ce:	6819      	ldr	r1, [r3, #0]
 80043d0:	6808      	ldr	r0, [r1, #0]
 80043d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d6:	f01e 0f10 	tst.w	lr, #16
 80043da:	bf08      	it	eq
 80043dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043e0:	f380 8809 	msr	PSP, r0
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	f3af 8000 	nop.w

080043f0 <pxCurrentTCBConst>:
 80043f0:	200002a8 	.word	0x200002a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop

080043f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
        __asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
    }
 8004410:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004412:	f000 ff2f 	bl	8005274 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004416:	f7ff fddb 	bl	8003fd0 <xTaskIncrementTick>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d006      	beq.n	800442e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004420:	f000 ff86 	bl	8005330 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <SysTick_Handler+0x50>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e001      	b.n	8004432 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800442e:	f000 ff63 	bl	80052f8 <SEGGER_SYSVIEW_RecordExitISR>
 8004432:	2300      	movs	r3, #0
 8004434:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800443c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	e000ed04 	.word	0xe000ed04

0800444c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004452:	4b1e      	ldr	r3, [pc, #120]	; (80044cc <USART2_IRQHandler+0x80>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d011      	beq.n	8004486 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <USART2_IRQHandler+0x84>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 030b 	and.w	r3, r3, #11
 8004470:	2b00      	cmp	r3, #0
 8004472:	d108      	bne.n	8004486 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004474:	4b17      	ldr	r3, [pc, #92]	; (80044d4 <USART2_IRQHandler+0x88>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800447c:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <USART2_IRQHandler+0x88>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	79fa      	ldrb	r2, [r7, #7]
 8004482:	4610      	mov	r0, r2
 8004484:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01a      	beq.n	80044c6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004490:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <USART2_IRQHandler+0x8c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d015      	beq.n	80044c4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <USART2_IRQHandler+0x8c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	1dfa      	adds	r2, r7, #7
 800449e:	4610      	mov	r0, r2
 80044a0:	4798      	blx	r3
 80044a2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <USART2_IRQHandler+0x90>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0b      	ldr	r2, [pc, #44]	; (80044dc <USART2_IRQHandler+0x90>)
 80044b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e006      	b.n	80044c6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <USART2_IRQHandler+0x80>)
 80044ba:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80044bc:	79fa      	ldrb	r2, [r7, #7]
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <USART2_IRQHandler+0x84>)
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e000      	b.n	80044c6 <USART2_IRQHandler+0x7a>
      return;
 80044c4:	bf00      	nop
    }
  }
}
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40004400 	.word	0x40004400
 80044d0:	40004404 	.word	0x40004404
 80044d4:	20000340 	.word	0x20000340
 80044d8:	20000344 	.word	0x20000344
 80044dc:	4000440c 	.word	0x4000440c

080044e0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <HIF_UART_EnableTXEInterrupt+0x1c>)
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	4000440c 	.word	0x4000440c

08004500 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004506:	4b24      	ldr	r3, [pc, #144]	; (8004598 <_DoInit+0x98>)
 8004508:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2203      	movs	r2, #3
 8004514:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a20      	ldr	r2, [pc, #128]	; (800459c <_DoInit+0x9c>)
 800451a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a20      	ldr	r2, [pc, #128]	; (80045a0 <_DoInit+0xa0>)
 8004520:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004528:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <_DoInit+0x9c>)
 8004540:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a17      	ldr	r2, [pc, #92]	; (80045a4 <_DoInit+0xa4>)
 8004546:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2210      	movs	r2, #16
 800454c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3307      	adds	r3, #7
 8004564:	4a10      	ldr	r2, [pc, #64]	; (80045a8 <_DoInit+0xa8>)
 8004566:	6810      	ldr	r0, [r2, #0]
 8004568:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800456a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a0e      	ldr	r2, [pc, #56]	; (80045ac <_DoInit+0xac>)
 8004572:	6810      	ldr	r0, [r2, #0]
 8004574:	6018      	str	r0, [r3, #0]
 8004576:	8891      	ldrh	r1, [r2, #4]
 8004578:	7992      	ldrb	r2, [r2, #6]
 800457a:	8099      	strh	r1, [r3, #4]
 800457c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800457e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004588:	f3bf 8f5f 	dmb	sy
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000348 	.word	0x20000348
 800459c:	08006bbc 	.word	0x08006bbc
 80045a0:	200003f0 	.word	0x200003f0
 80045a4:	200007f0 	.word	0x200007f0
 80045a8:	08006bc8 	.word	0x08006bc8
 80045ac:	08006bcc 	.word	0x08006bcc

080045b0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80045bc:	2300      	movs	r3, #0
 80045be:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d905      	bls.n	80045e0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	3b01      	subs	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
 80045de:	e007      	b.n	80045f0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	69b9      	ldr	r1, [r7, #24]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	1acb      	subs	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3b01      	subs	r3, #1
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	4293      	cmp	r3, r2
 80045fc:	bf28      	it	cs
 80045fe:	4613      	movcs	r3, r2
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4293      	cmp	r3, r2
 8004608:	bf28      	it	cs
 800460a:	4613      	movcs	r3, r2
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	6978      	ldr	r0, [r7, #20]
 800461e:	f001 f855 	bl	80056cc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	4413      	add	r3, r2
 8004628:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	4413      	add	r3, r2
 8004630:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	4413      	add	r3, r2
 8004640:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	429a      	cmp	r2, r3
 800464a:	d101      	bne.n	8004650 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800464c:	2300      	movs	r3, #0
 800464e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004650:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1b2      	bne.n	80045c6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004660:	6a3b      	ldr	r3, [r7, #32]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3728      	adds	r7, #40	; 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800466a:	b580      	push	{r7, lr}
 800466c:	b088      	sub	sp, #32
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	d911      	bls.n	80046b2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	6938      	ldr	r0, [r7, #16]
 800469e:	f001 f815 	bl	80056cc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046a2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	441a      	add	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80046b0:	e01f      	b.n	80046f2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	4413      	add	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	68b9      	ldr	r1, [r7, #8]
 80046c4:	6938      	ldr	r0, [r7, #16]
 80046c6:	f001 f801 	bl	80056cc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4619      	mov	r1, r3
 80046e2:	6938      	ldr	r0, [r7, #16]
 80046e4:	f000 fff2 	bl	80056cc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	60da      	str	r2, [r3, #12]
}
 80046f2:	bf00      	nop
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80046fa:	b480      	push	{r7}
 80046fc:	b087      	sub	sp, #28
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	429a      	cmp	r2, r3
 8004714:	d808      	bhi.n	8004728 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad2      	subs	r2, r2, r3
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4413      	add	r3, r2
 8004722:	3b01      	subs	r3, #1
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e004      	b.n	8004732 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004732:	697b      	ldr	r3, [r7, #20]
}
 8004734:	4618      	mov	r0, r3
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	; 0x30
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800474c:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <SEGGER_RTT_ReadNoLock+0x108>)
 800474e:	623b      	str	r3, [r7, #32]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <SEGGER_RTT_ReadNoLock+0x1e>
 800475a:	f7ff fed1 	bl	8004500 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	4613      	mov	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	3360      	adds	r3, #96	; 0x60
 800476a:	4a37      	ldr	r2, [pc, #220]	; (8004848 <SEGGER_RTT_ReadNoLock+0x108>)
 800476c:	4413      	add	r3, r2
 800476e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	429a      	cmp	r2, r3
 800478a:	d92b      	bls.n	80047e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4293      	cmp	r3, r2
 800479c:	bf28      	it	cs
 800479e:	4613      	movcs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a8:	4413      	add	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	6939      	ldr	r1, [r7, #16]
 80047b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b2:	f000 ff8b 	bl	80056cc <memcpy>
    NumBytesRead += NumBytesRem;
 80047b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	4413      	add	r3, r2
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80047be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047dc:	429a      	cmp	r2, r3
 80047de:	d101      	bne.n	80047e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4293      	cmp	r3, r2
 80047f2:	bf28      	it	cs
 80047f4:	4613      	movcs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d019      	beq.n	8004832 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	4413      	add	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	6939      	ldr	r1, [r7, #16]
 800480c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800480e:	f000 ff5d 	bl	80056cc <memcpy>
    NumBytesRead += NumBytesRem;
 8004812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4413      	add	r3, r2
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800482a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4413      	add	r3, r2
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800483c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004840:	4618      	mov	r0, r3
 8004842:	3730      	adds	r7, #48	; 0x30
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000348 	.word	0x20000348

0800484c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800484c:	b580      	push	{r7, lr}
 800484e:	b088      	sub	sp, #32
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	4613      	mov	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4413      	add	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <SEGGER_RTT_WriteNoLock+0x9c>)
 800486a:	4413      	add	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d029      	beq.n	80048ca <SEGGER_RTT_WriteNoLock+0x7e>
 8004876:	2b02      	cmp	r3, #2
 8004878:	d82e      	bhi.n	80048d8 <SEGGER_RTT_WriteNoLock+0x8c>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <SEGGER_RTT_WriteNoLock+0x38>
 800487e:	2b01      	cmp	r3, #1
 8004880:	d013      	beq.n	80048aa <SEGGER_RTT_WriteNoLock+0x5e>
 8004882:	e029      	b.n	80048d8 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004884:	6978      	ldr	r0, [r7, #20]
 8004886:	f7ff ff38 	bl	80046fa <_GetAvailWriteSpace>
 800488a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	d202      	bcs.n	800489a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004894:	2300      	movs	r3, #0
 8004896:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004898:	e021      	b.n	80048de <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	69b9      	ldr	r1, [r7, #24]
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7ff fee1 	bl	800466a <_WriteNoCheck>
    break;
 80048a8:	e019      	b.n	80048de <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7ff ff25 	bl	80046fa <_GetAvailWriteSpace>
 80048b0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	4293      	cmp	r3, r2
 80048b8:	bf28      	it	cs
 80048ba:	4613      	movcs	r3, r2
 80048bc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	6978      	ldr	r0, [r7, #20]
 80048c4:	f7ff fed1 	bl	800466a <_WriteNoCheck>
    break;
 80048c8:	e009      	b.n	80048de <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	69b9      	ldr	r1, [r7, #24]
 80048ce:	6978      	ldr	r0, [r7, #20]
 80048d0:	f7ff fe6e 	bl	80045b0 <_WriteBlocking>
 80048d4:	61f8      	str	r0, [r7, #28]
    break;
 80048d6:	e002      	b.n	80048de <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80048d8:	2300      	movs	r3, #0
 80048da:	61fb      	str	r3, [r7, #28]
    break;
 80048dc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80048de:	69fb      	ldr	r3, [r7, #28]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000348 	.word	0x20000348

080048ec <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <SEGGER_RTT_Write+0x48>)
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <SEGGER_RTT_Write+0x1e>
 8004906:	f7ff fdfb 	bl	8004500 <_DoInit>
  SEGGER_RTT_LOCK();
 800490a:	f3ef 8311 	mrs	r3, BASEPRI
 800490e:	f04f 0120 	mov.w	r1, #32
 8004912:	f381 8811 	msr	BASEPRI, r1
 8004916:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f7ff ff95 	bl	800484c <SEGGER_RTT_WriteNoLock>
 8004922:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800492a:	697b      	ldr	r3, [r7, #20]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3720      	adds	r7, #32
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000348 	.word	0x20000348

08004938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004948:	e002      	b.n	8004950 <_EncodeStr+0x18>
    Len++;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3301      	adds	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4413      	add	r3, r2
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f6      	bne.n	800494a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d901      	bls.n	8004968 <_EncodeStr+0x30>
    Len = Limit;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	2bfe      	cmp	r3, #254	; 0xfe
 800496c:	d806      	bhi.n	800497c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	60fa      	str	r2, [r7, #12]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e011      	b.n	80049a0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	60fa      	str	r2, [r7, #12]
 8004982:	22ff      	movs	r2, #255	; 0xff
 8004984:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	60fa      	str	r2, [r7, #12]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	0a19      	lsrs	r1, r3, #8
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	60fa      	str	r2, [r7, #12]
 800499c:	b2ca      	uxtb	r2, r1
 800499e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80049a4:	e00a      	b.n	80049bc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	1c53      	adds	r3, r2, #1
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1c59      	adds	r1, r3, #1
 80049b0:	60f9      	str	r1, [r7, #12]
 80049b2:	7812      	ldrb	r2, [r2, #0]
 80049b4:	701a      	strb	r2, [r3, #0]
    n++;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3301      	adds	r3, #1
 80049ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d3f0      	bcc.n	80049a6 <_EncodeStr+0x6e>
  }
  return pPayload;
 80049c4:	68fb      	ldr	r3, [r7, #12]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3304      	adds	r3, #4
}
 80049de:	4618      	mov	r0, r3
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049f2:	4b36      	ldr	r3, [pc, #216]	; (8004acc <_HandleIncomingPacket+0xe0>)
 80049f4:	7e1b      	ldrb	r3, [r3, #24]
 80049f6:	4618      	mov	r0, r3
 80049f8:	1cfb      	adds	r3, r7, #3
 80049fa:	2201      	movs	r2, #1
 80049fc:	4619      	mov	r1, r3
 80049fe:	f7ff fe9f 	bl	8004740 <SEGGER_RTT_ReadNoLock>
 8004a02:	4603      	mov	r3, r0
 8004a04:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	dd54      	ble.n	8004ab6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d032      	beq.n	8004a78 <_HandleIncomingPacket+0x8c>
 8004a12:	2b80      	cmp	r3, #128	; 0x80
 8004a14:	dc42      	bgt.n	8004a9c <_HandleIncomingPacket+0xb0>
 8004a16:	2b07      	cmp	r3, #7
 8004a18:	dc16      	bgt.n	8004a48 <_HandleIncomingPacket+0x5c>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dd3e      	ble.n	8004a9c <_HandleIncomingPacket+0xb0>
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d83b      	bhi.n	8004a9c <_HandleIncomingPacket+0xb0>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <_HandleIncomingPacket+0x40>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a4f 	.word	0x08004a4f
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a5b 	.word	0x08004a5b
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	08004a67 	.word	0x08004a67
 8004a40:	08004a6d 	.word	0x08004a6d
 8004a44:	08004a73 	.word	0x08004a73
 8004a48:	2b7f      	cmp	r3, #127	; 0x7f
 8004a4a:	d036      	beq.n	8004aba <_HandleIncomingPacket+0xce>
 8004a4c:	e026      	b.n	8004a9c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004a4e:	f000 fa4f 	bl	8004ef0 <SEGGER_SYSVIEW_Start>
      break;
 8004a52:	e037      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004a54:	f000 fb08 	bl	8005068 <SEGGER_SYSVIEW_Stop>
      break;
 8004a58:	e034      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004a5a:	f000 fbd9 	bl	8005210 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004a5e:	e031      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004a60:	f000 fbc2 	bl	80051e8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004a64:	e02e      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004a66:	f000 fb25 	bl	80050b4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004a6a:	e02b      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004a6c:	f000 fdba 	bl	80055e4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004a70:	e028      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004a72:	f000 fd99 	bl	80055a8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004a76:	e025      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <_HandleIncomingPacket+0xe0>)
 8004a7a:	7e1b      	ldrb	r3, [r3, #24]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	1cfb      	adds	r3, r7, #3
 8004a80:	2201      	movs	r2, #1
 8004a82:	4619      	mov	r1, r3
 8004a84:	f7ff fe5c 	bl	8004740 <SEGGER_RTT_ReadNoLock>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dd15      	ble.n	8004abe <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fd07 	bl	80054a8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004a9a:	e010      	b.n	8004abe <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	da0e      	bge.n	8004ac2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <_HandleIncomingPacket+0xe0>)
 8004aa6:	7e1b      	ldrb	r3, [r3, #24]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	1cfb      	adds	r3, r7, #3
 8004aac:	2201      	movs	r2, #1
 8004aae:	4619      	mov	r1, r3
 8004ab0:	f7ff fe46 	bl	8004740 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004ab4:	e005      	b.n	8004ac2 <_HandleIncomingPacket+0xd6>
    }
  }
 8004ab6:	bf00      	nop
 8004ab8:	e004      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
      break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
      break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <_HandleIncomingPacket+0xd8>
      break;
 8004ac2:	bf00      	nop
}
 8004ac4:	bf00      	nop
 8004ac6:	3708      	adds	r7, #8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	20000800 	.word	0x20000800

08004ad0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	3301      	adds	r3, #1
 8004ade:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae4:	4b32      	ldr	r3, [pc, #200]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aea:	e00b      	b.n	8004b04 <_TrySendOverflowPacket+0x34>
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af2:	1c59      	adds	r1, r3, #1
 8004af4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004af6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	09db      	lsrs	r3, r3, #7
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	2b7f      	cmp	r3, #127	; 0x7f
 8004b08:	d8f0      	bhi.n	8004aec <_TrySendOverflowPacket+0x1c>
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <_TrySendOverflowPacket+0xe4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b20:	4b23      	ldr	r3, [pc, #140]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	e00b      	b.n	8004b4c <_TrySendOverflowPacket+0x7c>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	1c59      	adds	r1, r3, #1
 8004b3c:	6279      	str	r1, [r7, #36]	; 0x24
 8004b3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	09db      	lsrs	r3, r3, #7
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b50:	d8f0      	bhi.n	8004b34 <_TrySendOverflowPacket+0x64>
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	627a      	str	r2, [r7, #36]	; 0x24
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004b62:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	4618      	mov	r0, r3
 8004b68:	1d3b      	adds	r3, r7, #4
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	461a      	mov	r2, r3
 8004b70:	1d3b      	adds	r3, r7, #4
 8004b72:	4619      	mov	r1, r3
 8004b74:	f7fb fb34 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004b7c:	f7ff fcb0 	bl	80044e0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004b8c:	4b08      	ldr	r3, [pc, #32]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e004      	b.n	8004ba4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	4a03      	ldr	r2, [pc, #12]	; (8004bb0 <_TrySendOverflowPacket+0xe0>)
 8004ba2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004ba4:	693b      	ldr	r3, [r7, #16]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3730      	adds	r7, #48	; 0x30
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000800 	.word	0x20000800
 8004bb4:	e0001004 	.word	0xe0001004

08004bb8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08a      	sub	sp, #40	; 0x28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004bc4:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <_SendPacket+0x1c4>)
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d010      	beq.n	8004bee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004bcc:	4b6b      	ldr	r3, [pc, #428]	; (8004d7c <_SendPacket+0x1c4>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a5 	beq.w	8004d20 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004bd6:	4b69      	ldr	r3, [pc, #420]	; (8004d7c <_SendPacket+0x1c4>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d109      	bne.n	8004bf2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004bde:	f7ff ff77 	bl	8004ad0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004be2:	4b66      	ldr	r3, [pc, #408]	; (8004d7c <_SendPacket+0x1c4>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	f040 809c 	bne.w	8004d24 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004bec:	e001      	b.n	8004bf2 <_SendPacket+0x3a>
    goto Send;
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <_SendPacket+0x3c>
Send:
 8004bf2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b1f      	cmp	r3, #31
 8004bf8:	d809      	bhi.n	8004c0e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004bfa:	4b60      	ldr	r3, [pc, #384]	; (8004d7c <_SendPacket+0x1c4>)
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f040 808d 	bne.w	8004d28 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b17      	cmp	r3, #23
 8004c12:	d807      	bhi.n	8004c24 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	e03d      	b.n	8004ca0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c30:	d912      	bls.n	8004c58 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	09da      	lsrs	r2, r3, #7
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	b2d2      	uxtb	r2, r2
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	60fa      	str	r2, [r7, #12]
 8004c4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e006      	b.n	8004c66 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6a:	d912      	bls.n	8004c92 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	09da      	lsrs	r2, r3, #7
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	3a01      	subs	r2, #1
 8004c84:	60fa      	str	r2, [r7, #12]
 8004c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	e006      	b.n	8004ca0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ca0:	4b37      	ldr	r3, [pc, #220]	; (8004d80 <_SendPacket+0x1c8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ca6:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <_SendPacket+0x1c4>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	623b      	str	r3, [r7, #32]
 8004cb8:	e00b      	b.n	8004cd2 <_SendPacket+0x11a>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	6279      	str	r1, [r7, #36]	; 0x24
 8004cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	09db      	lsrs	r3, r3, #7
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd6:	d8f0      	bhi.n	8004cba <_SendPacket+0x102>
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8004cde:	6a3a      	ldr	r2, [r7, #32]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <_SendPacket+0x1c4>)
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	4618      	mov	r0, r3
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68f9      	ldr	r1, [r7, #12]
 8004cf8:	f7fb fa72 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004d00:	f7ff fbee 	bl	80044e0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d0a:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <_SendPacket+0x1c4>)
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	60d3      	str	r3, [r2, #12]
 8004d10:	e00b      	b.n	8004d2a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <_SendPacket+0x1c4>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <_SendPacket+0x1c4>)
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e004      	b.n	8004d2a <_SendPacket+0x172>
    goto SendDone;
 8004d20:	bf00      	nop
 8004d22:	e002      	b.n	8004d2a <_SendPacket+0x172>
      goto SendDone;
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <_SendPacket+0x172>
      goto SendDone;
 8004d28:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <_SendPacket+0x1c4>)
 8004d2c:	7e1b      	ldrb	r3, [r3, #24]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <_SendPacket+0x1cc>)
 8004d32:	460b      	mov	r3, r1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	440b      	add	r3, r1
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	336c      	adds	r3, #108	; 0x6c
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b0e      	ldr	r3, [pc, #56]	; (8004d7c <_SendPacket+0x1c4>)
 8004d42:	7e1b      	ldrb	r3, [r3, #24]
 8004d44:	4618      	mov	r0, r3
 8004d46:	490f      	ldr	r1, [pc, #60]	; (8004d84 <_SendPacket+0x1cc>)
 8004d48:	4603      	mov	r3, r0
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	4403      	add	r3, r0
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	440b      	add	r3, r1
 8004d52:	3370      	adds	r3, #112	; 0x70
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d00b      	beq.n	8004d72 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <_SendPacket+0x1c4>)
 8004d5c:	789b      	ldrb	r3, [r3, #2]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d107      	bne.n	8004d72 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <_SendPacket+0x1c4>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004d68:	f7ff fe40 	bl	80049ec <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <_SendPacket+0x1c4>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004d72:	bf00      	nop
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000800 	.word	0x20000800
 8004d80:	e0001004 	.word	0xe0001004
 8004d84:	20000348 	.word	0x20000348

08004d88 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	4808      	ldr	r0, [pc, #32]	; (8004dc0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004da0:	f7ff fe17 	bl	80049d2 <_PreparePacket>
 8004da4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	68b8      	ldr	r0, [r7, #8]
 8004dac:	f7ff ff04 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f383 8811 	msr	BASEPRI, r3
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000830 	.word	0x20000830

08004dc4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004dce:	f3ef 8311 	mrs	r3, BASEPRI
 8004dd2:	f04f 0120 	mov.w	r1, #32
 8004dd6:	f381 8811 	msr	BASEPRI, r1
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	4816      	ldr	r0, [pc, #88]	; (8004e38 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004dde:	f7ff fdf8 	bl	80049d2 <_PreparePacket>
 8004de2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e00b      	b.n	8004e0a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	1c59      	adds	r1, r3, #1
 8004dfa:	61f9      	str	r1, [r7, #28]
 8004dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	09db      	lsrs	r3, r3, #7
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0e:	d8f0      	bhi.n	8004df2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	61fa      	str	r2, [r7, #28]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	6938      	ldr	r0, [r7, #16]
 8004e26:	f7ff fec7 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f383 8811 	msr	BASEPRI, r3
}
 8004e30:	bf00      	nop
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000830 	.word	0x20000830

08004e3c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08c      	sub	sp, #48	; 0x30
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e48:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4c:	f04f 0120 	mov.w	r1, #32
 8004e50:	f381 8811 	msr	BASEPRI, r1
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	4825      	ldr	r0, [pc, #148]	; (8004eec <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004e58:	f7ff fdbb 	bl	80049d2 <_PreparePacket>
 8004e5c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6a:	e00b      	b.n	8004e84 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	09db      	lsrs	r3, r3, #7
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	2b7f      	cmp	r3, #127	; 0x7f
 8004e88:	d8f0      	bhi.n	8004e6c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e98:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	e00b      	b.n	8004ebc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eaa:	1c59      	adds	r1, r3, #1
 8004eac:	6279      	str	r1, [r7, #36]	; 0x24
 8004eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	09db      	lsrs	r3, r3, #7
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec0:	d8f0      	bhi.n	8004ea4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	627a      	str	r2, [r7, #36]	; 0x24
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	6979      	ldr	r1, [r7, #20]
 8004ed6:	69b8      	ldr	r0, [r7, #24]
 8004ed8:	f7ff fe6e 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f383 8811 	msr	BASEPRI, r3
}
 8004ee2:	bf00      	nop
 8004ee4:	3730      	adds	r7, #48	; 0x30
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000830 	.word	0x20000830

08004ef0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08c      	sub	sp, #48	; 0x30
 8004ef4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004ef6:	4b59      	ldr	r3, [pc, #356]	; (800505c <SEGGER_SYSVIEW_Start+0x16c>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004efc:	f3ef 8311 	mrs	r3, BASEPRI
 8004f00:	f04f 0120 	mov.w	r1, #32
 8004f04:	f381 8811 	msr	BASEPRI, r1
 8004f08:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f0a:	4b54      	ldr	r3, [pc, #336]	; (800505c <SEGGER_SYSVIEW_Start+0x16c>)
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	220a      	movs	r2, #10
 8004f10:	4953      	ldr	r1, [pc, #332]	; (8005060 <SEGGER_SYSVIEW_Start+0x170>)
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fb f964 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004f1e:	f7ff fadf 	bl	80044e0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f22:	200a      	movs	r0, #10
 8004f24:	f7ff ff30 	bl	8004d88 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f28:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2c:	f04f 0120 	mov.w	r1, #32
 8004f30:	f381 8811 	msr	BASEPRI, r1
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	484b      	ldr	r0, [pc, #300]	; (8005064 <SEGGER_SYSVIEW_Start+0x174>)
 8004f38:	f7ff fd4b 	bl	80049d2 <_PreparePacket>
 8004f3c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f46:	4b45      	ldr	r3, [pc, #276]	; (800505c <SEGGER_SYSVIEW_Start+0x16c>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f4c:	e00b      	b.n	8004f66 <SEGGER_SYSVIEW_Start+0x76>
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	1c59      	adds	r1, r3, #1
 8004f56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	09db      	lsrs	r3, r3, #7
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6a:	d8f0      	bhi.n	8004f4e <SEGGER_SYSVIEW_Start+0x5e>
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f74:	b2d2      	uxtb	r2, r2
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f80:	4b36      	ldr	r3, [pc, #216]	; (800505c <SEGGER_SYSVIEW_Start+0x16c>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	e00b      	b.n	8004fa0 <SEGGER_SYSVIEW_Start+0xb0>
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	1c59      	adds	r1, r3, #1
 8004f90:	6279      	str	r1, [r7, #36]	; 0x24
 8004f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	09db      	lsrs	r3, r3, #7
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa4:	d8f0      	bhi.n	8004f88 <SEGGER_SYSVIEW_Start+0x98>
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	627a      	str	r2, [r7, #36]	; 0x24
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	4b28      	ldr	r3, [pc, #160]	; (800505c <SEGGER_SYSVIEW_Start+0x16c>)
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	e00b      	b.n	8004fda <SEGGER_SYSVIEW_Start+0xea>
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	1c59      	adds	r1, r3, #1
 8004fca:	61f9      	str	r1, [r7, #28]
 8004fcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	09db      	lsrs	r3, r3, #7
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b7f      	cmp	r3, #127	; 0x7f
 8004fde:	d8f0      	bhi.n	8004fc2 <SEGGER_SYSVIEW_Start+0xd2>
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	61fa      	str	r2, [r7, #28]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	e00b      	b.n	8005012 <SEGGER_SYSVIEW_Start+0x122>
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1c59      	adds	r1, r3, #1
 8005002:	6179      	str	r1, [r7, #20]
 8005004:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	09db      	lsrs	r3, r3, #7
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b7f      	cmp	r3, #127	; 0x7f
 8005016:	d8f0      	bhi.n	8004ffa <SEGGER_SYSVIEW_Start+0x10a>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	617a      	str	r2, [r7, #20]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005028:	2218      	movs	r2, #24
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff fdc3 	bl	8004bb8 <_SendPacket>
      RECORD_END();
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005038:	4b08      	ldr	r3, [pc, #32]	; (800505c <SEGGER_SYSVIEW_Start+0x16c>)
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005040:	4b06      	ldr	r3, [pc, #24]	; (800505c <SEGGER_SYSVIEW_Start+0x16c>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005046:	f000 f8e3 	bl	8005210 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800504a:	f000 f8cd 	bl	80051e8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800504e:	f000 fac9 	bl	80055e4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005052:	bf00      	nop
 8005054:	3730      	adds	r7, #48	; 0x30
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000800 	.word	0x20000800
 8005060:	08006bec 	.word	0x08006bec
 8005064:	20000830 	.word	0x20000830

08005068 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800506e:	f3ef 8311 	mrs	r3, BASEPRI
 8005072:	f04f 0120 	mov.w	r1, #32
 8005076:	f381 8811 	msr	BASEPRI, r1
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	480b      	ldr	r0, [pc, #44]	; (80050ac <SEGGER_SYSVIEW_Stop+0x44>)
 800507e:	f7ff fca8 	bl	80049d2 <_PreparePacket>
 8005082:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800508c:	220b      	movs	r2, #11
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	6838      	ldr	r0, [r7, #0]
 8005092:	f7ff fd91 	bl	8004bb8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <SEGGER_SYSVIEW_Stop+0x48>)
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f383 8811 	msr	BASEPRI, r3
}
 80050a2:	bf00      	nop
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000830 	.word	0x20000830
 80050b0:	20000800 	.word	0x20000800

080050b4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08c      	sub	sp, #48	; 0x30
 80050b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050ba:	f3ef 8311 	mrs	r3, BASEPRI
 80050be:	f04f 0120 	mov.w	r1, #32
 80050c2:	f381 8811 	msr	BASEPRI, r1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	4845      	ldr	r0, [pc, #276]	; (80051e0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80050ca:	f7ff fc82 	bl	80049d2 <_PreparePacket>
 80050ce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050d8:	4b42      	ldr	r3, [pc, #264]	; (80051e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050de:	e00b      	b.n	80050f8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	1c59      	adds	r1, r3, #1
 80050e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	09db      	lsrs	r3, r3, #7
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	2b7f      	cmp	r3, #127	; 0x7f
 80050fc:	d8f0      	bhi.n	80050e0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	4b34      	ldr	r3, [pc, #208]	; (80051e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	623b      	str	r3, [r7, #32]
 8005118:	e00b      	b.n	8005132 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	6279      	str	r1, [r7, #36]	; 0x24
 8005124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d8f0      	bhi.n	800511a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	627a      	str	r2, [r7, #36]	; 0x24
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	e00b      	b.n	800516c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	1c59      	adds	r1, r3, #1
 800515c:	61f9      	str	r1, [r7, #28]
 800515e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	09db      	lsrs	r3, r3, #7
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	2b7f      	cmp	r3, #127	; 0x7f
 8005170:	d8f0      	bhi.n	8005154 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	61fa      	str	r2, [r7, #28]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	e00b      	b.n	80051a4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	6179      	str	r1, [r7, #20]
 8005196:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	09db      	lsrs	r3, r3, #7
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b7f      	cmp	r3, #127	; 0x7f
 80051a8:	d8f0      	bhi.n	800518c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	617a      	str	r2, [r7, #20]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80051ba:	2218      	movs	r2, #24
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	68b8      	ldr	r0, [r7, #8]
 80051c0:	f7ff fcfa 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80051ca:	4b06      	ldr	r3, [pc, #24]	; (80051e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80051d2:	4b04      	ldr	r3, [pc, #16]	; (80051e4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	4798      	blx	r3
  }
}
 80051d8:	bf00      	nop
 80051da:	3730      	adds	r7, #48	; 0x30
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000830 	.word	0x20000830
 80051e4:	20000800 	.word	0x20000800

080051e8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80051ec:	4b07      	ldr	r3, [pc, #28]	; (800520c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d008      	beq.n	8005206 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80051fe:	4b03      	ldr	r3, [pc, #12]	; (800520c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4798      	blx	r3
  }
}
 8005206:	bf00      	nop
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000800 	.word	0x20000800

08005210 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01a      	beq.n	8005254 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800521e:	4b13      	ldr	r3, [pc, #76]	; (800526c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d015      	beq.n	8005254 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005228:	4b10      	ldr	r3, [pc, #64]	; (800526c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4798      	blx	r3
 8005230:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005234:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005236:	e9d7 0100 	ldrd	r0, r1, [r7]
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	000a      	movs	r2, r1
 8005244:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005246:	4613      	mov	r3, r2
 8005248:	461a      	mov	r2, r3
 800524a:	4621      	mov	r1, r4
 800524c:	200d      	movs	r0, #13
 800524e:	f7ff fdf5 	bl	8004e3c <SEGGER_SYSVIEW_RecordU32x2>
 8005252:	e006      	b.n	8005262 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	200c      	movs	r0, #12
 800525c:	f7ff fdb2 	bl	8004dc4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}
 800526a:	bf00      	nop
 800526c:	20000800 	.word	0x20000800
 8005270:	e0001004 	.word	0xe0001004

08005274 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800527a:	f3ef 8311 	mrs	r3, BASEPRI
 800527e:	f04f 0120 	mov.w	r1, #32
 8005282:	f381 8811 	msr	BASEPRI, r1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4819      	ldr	r0, [pc, #100]	; (80052f0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800528a:	f7ff fba2 	bl	80049d2 <_PreparePacket>
 800528e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005294:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e00b      	b.n	80052c0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	6179      	str	r1, [r7, #20]
 80052b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	09db      	lsrs	r3, r3, #7
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b7f      	cmp	r3, #127	; 0x7f
 80052c4:	d8f0      	bhi.n	80052a8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	617a      	str	r2, [r7, #20]
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80052d6:	2202      	movs	r2, #2
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	68b8      	ldr	r0, [r7, #8]
 80052dc:	f7ff fc6c 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f383 8811 	msr	BASEPRI, r3
}
 80052e6:	bf00      	nop
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000830 	.word	0x20000830
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005302:	f04f 0120 	mov.w	r1, #32
 8005306:	f381 8811 	msr	BASEPRI, r1
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	4807      	ldr	r0, [pc, #28]	; (800532c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800530e:	f7ff fb60 	bl	80049d2 <_PreparePacket>
 8005312:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005314:	2203      	movs	r2, #3
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6838      	ldr	r0, [r7, #0]
 800531a:	f7ff fc4d 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f383 8811 	msr	BASEPRI, r3
}
 8005324:	bf00      	nop
 8005326:	3708      	adds	r7, #8
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	20000830 	.word	0x20000830

08005330 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005336:	f3ef 8311 	mrs	r3, BASEPRI
 800533a:	f04f 0120 	mov.w	r1, #32
 800533e:	f381 8811 	msr	BASEPRI, r1
 8005342:	607b      	str	r3, [r7, #4]
 8005344:	4807      	ldr	r0, [pc, #28]	; (8005364 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005346:	f7ff fb44 	bl	80049d2 <_PreparePacket>
 800534a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800534c:	2212      	movs	r2, #18
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	6838      	ldr	r0, [r7, #0]
 8005352:	f7ff fc31 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f383 8811 	msr	BASEPRI, r3
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000830 	.word	0x20000830

08005368 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800536e:	f3ef 8311 	mrs	r3, BASEPRI
 8005372:	f04f 0120 	mov.w	r1, #32
 8005376:	f381 8811 	msr	BASEPRI, r1
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	4807      	ldr	r0, [pc, #28]	; (800539c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800537e:	f7ff fb28 	bl	80049d2 <_PreparePacket>
 8005382:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005384:	2211      	movs	r2, #17
 8005386:	6839      	ldr	r1, [r7, #0]
 8005388:	6838      	ldr	r0, [r7, #0]
 800538a:	f7ff fc15 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f383 8811 	msr	BASEPRI, r3
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000830 	.word	0x20000830

080053a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053a8:	f3ef 8311 	mrs	r3, BASEPRI
 80053ac:	f04f 0120 	mov.w	r1, #32
 80053b0:	f381 8811 	msr	BASEPRI, r1
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	4819      	ldr	r0, [pc, #100]	; (800541c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80053b8:	f7ff fb0b 	bl	80049d2 <_PreparePacket>
 80053bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80053c2:	4b17      	ldr	r3, [pc, #92]	; (8005420 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e00b      	b.n	80053ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	1c59      	adds	r1, r3, #1
 80053de:	61f9      	str	r1, [r7, #28]
 80053e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	09db      	lsrs	r3, r3, #7
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b7f      	cmp	r3, #127	; 0x7f
 80053f2:	d8f0      	bhi.n	80053d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	61fa      	str	r2, [r7, #28]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	b2d2      	uxtb	r2, r2
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005404:	2204      	movs	r2, #4
 8005406:	68f9      	ldr	r1, [r7, #12]
 8005408:	6938      	ldr	r0, [r7, #16]
 800540a:	f7ff fbd5 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f383 8811 	msr	BASEPRI, r3
}
 8005414:	bf00      	nop
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000830 	.word	0x20000830
 8005420:	20000800 	.word	0x20000800

08005424 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800542c:	f3ef 8311 	mrs	r3, BASEPRI
 8005430:	f04f 0120 	mov.w	r1, #32
 8005434:	f381 8811 	msr	BASEPRI, r1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	4819      	ldr	r0, [pc, #100]	; (80054a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800543c:	f7ff fac9 	bl	80049d2 <_PreparePacket>
 8005440:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005446:	4b17      	ldr	r3, [pc, #92]	; (80054a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	e00b      	b.n	8005472 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	b2da      	uxtb	r2, r3
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	1c59      	adds	r1, r3, #1
 8005462:	61f9      	str	r1, [r7, #28]
 8005464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	701a      	strb	r2, [r3, #0]
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	09db      	lsrs	r3, r3, #7
 8005470:	61bb      	str	r3, [r7, #24]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b7f      	cmp	r3, #127	; 0x7f
 8005476:	d8f0      	bhi.n	800545a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	61fa      	str	r2, [r7, #28]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005488:	2206      	movs	r2, #6
 800548a:	68f9      	ldr	r1, [r7, #12]
 800548c:	6938      	ldr	r0, [r7, #16]
 800548e:	f7ff fb93 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f383 8811 	msr	BASEPRI, r3
}
 8005498:	bf00      	nop
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000830 	.word	0x20000830
 80054a4:	20000800 	.word	0x20000800

080054a8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	; 0x30
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	4603      	mov	r3, r0
 80054b0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80054b2:	4b3b      	ldr	r3, [pc, #236]	; (80055a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d06d      	beq.n	8005596 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80054ba:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80054c0:	2300      	movs	r3, #0
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c4:	e008      	b.n	80054d8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	3301      	adds	r3, #1
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054dc:	429a      	cmp	r2, r3
 80054de:	d3f2      	bcc.n	80054c6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80054e0:	e000      	b.n	80054e4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80054e2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80054e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d055      	beq.n	8005596 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054ea:	f3ef 8311 	mrs	r3, BASEPRI
 80054ee:	f04f 0120 	mov.w	r1, #32
 80054f2:	f381 8811 	msr	BASEPRI, r1
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	482a      	ldr	r0, [pc, #168]	; (80055a4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80054fa:	f7ff fa6a 	bl	80049d2 <_PreparePacket>
 80054fe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	623b      	str	r3, [r7, #32]
 800550c:	e00b      	b.n	8005526 <SEGGER_SYSVIEW_SendModule+0x7e>
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	b2da      	uxtb	r2, r3
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	1c59      	adds	r1, r3, #1
 8005516:	6279      	str	r1, [r7, #36]	; 0x24
 8005518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800551c:	b2d2      	uxtb	r2, r2
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	09db      	lsrs	r3, r3, #7
 8005524:	623b      	str	r3, [r7, #32]
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	2b7f      	cmp	r3, #127	; 0x7f
 800552a:	d8f0      	bhi.n	800550e <SEGGER_SYSVIEW_SendModule+0x66>
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	627a      	str	r2, [r7, #36]	; 0x24
 8005532:	6a3a      	ldr	r2, [r7, #32]
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	e00b      	b.n	8005560 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	1c59      	adds	r1, r3, #1
 8005550:	61f9      	str	r1, [r7, #28]
 8005552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	09db      	lsrs	r3, r3, #7
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	2b7f      	cmp	r3, #127	; 0x7f
 8005564:	d8f0      	bhi.n	8005548 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	61fa      	str	r2, [r7, #28]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2280      	movs	r2, #128	; 0x80
 800557c:	4619      	mov	r1, r3
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f7ff f9da 	bl	8004938 <_EncodeStr>
 8005584:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005586:	2216      	movs	r2, #22
 8005588:	68f9      	ldr	r1, [r7, #12]
 800558a:	6938      	ldr	r0, [r7, #16]
 800558c:	f7ff fb14 	bl	8004bb8 <_SendPacket>
      RECORD_END();
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005596:	bf00      	nop
 8005598:	3730      	adds	r7, #48	; 0x30
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000828 	.word	0x20000828
 80055a4:	20000830 	.word	0x20000830

080055a8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80055ae:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00f      	beq.n	80055d6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1f2      	bne.n	80055bc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000828 	.word	0x20000828

080055e4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80055ea:	f3ef 8311 	mrs	r3, BASEPRI
 80055ee:	f04f 0120 	mov.w	r1, #32
 80055f2:	f381 8811 	msr	BASEPRI, r1
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	4817      	ldr	r0, [pc, #92]	; (8005658 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80055fa:	f7ff f9ea 	bl	80049d2 <_PreparePacket>
 80055fe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	4b14      	ldr	r3, [pc, #80]	; (800565c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	613b      	str	r3, [r7, #16]
 800560e:	e00b      	b.n	8005628 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	6179      	str	r1, [r7, #20]
 800561a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	09db      	lsrs	r3, r3, #7
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	2b7f      	cmp	r3, #127	; 0x7f
 800562c:	d8f0      	bhi.n	8005610 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	617a      	str	r2, [r7, #20]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800563e:	221b      	movs	r2, #27
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	68b8      	ldr	r0, [r7, #8]
 8005644:	f7ff fab8 	bl	8004bb8 <_SendPacket>
  RECORD_END();
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f383 8811 	msr	BASEPRI, r3
}
 800564e:	bf00      	nop
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000830 	.word	0x20000830
 800565c:	2000082c 	.word	0x2000082c

08005660 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	2000      	movs	r0, #0
 8005674:	f7ff f93a 	bl	80048ec <SEGGER_RTT_Write>
  return len;
 8005678:	683b      	ldr	r3, [r7, #0]
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
	...

08005684 <__libc_init_array>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	4d0d      	ldr	r5, [pc, #52]	; (80056bc <__libc_init_array+0x38>)
 8005688:	4c0d      	ldr	r4, [pc, #52]	; (80056c0 <__libc_init_array+0x3c>)
 800568a:	1b64      	subs	r4, r4, r5
 800568c:	10a4      	asrs	r4, r4, #2
 800568e:	2600      	movs	r6, #0
 8005690:	42a6      	cmp	r6, r4
 8005692:	d109      	bne.n	80056a8 <__libc_init_array+0x24>
 8005694:	4d0b      	ldr	r5, [pc, #44]	; (80056c4 <__libc_init_array+0x40>)
 8005696:	4c0c      	ldr	r4, [pc, #48]	; (80056c8 <__libc_init_array+0x44>)
 8005698:	f001 f9fc 	bl	8006a94 <_init>
 800569c:	1b64      	subs	r4, r4, r5
 800569e:	10a4      	asrs	r4, r4, #2
 80056a0:	2600      	movs	r6, #0
 80056a2:	42a6      	cmp	r6, r4
 80056a4:	d105      	bne.n	80056b2 <__libc_init_array+0x2e>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ac:	4798      	blx	r3
 80056ae:	3601      	adds	r6, #1
 80056b0:	e7ee      	b.n	8005690 <__libc_init_array+0xc>
 80056b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b6:	4798      	blx	r3
 80056b8:	3601      	adds	r6, #1
 80056ba:	e7f2      	b.n	80056a2 <__libc_init_array+0x1e>
 80056bc:	08006c98 	.word	0x08006c98
 80056c0:	08006c98 	.word	0x08006c98
 80056c4:	08006c98 	.word	0x08006c98
 80056c8:	08006c9c 	.word	0x08006c9c

080056cc <memcpy>:
 80056cc:	440a      	add	r2, r1
 80056ce:	4291      	cmp	r1, r2
 80056d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80056d4:	d100      	bne.n	80056d8 <memcpy+0xc>
 80056d6:	4770      	bx	lr
 80056d8:	b510      	push	{r4, lr}
 80056da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056e2:	4291      	cmp	r1, r2
 80056e4:	d1f9      	bne.n	80056da <memcpy+0xe>
 80056e6:	bd10      	pop	{r4, pc}

080056e8 <memset>:
 80056e8:	4402      	add	r2, r0
 80056ea:	4603      	mov	r3, r0
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d100      	bne.n	80056f2 <memset+0xa>
 80056f0:	4770      	bx	lr
 80056f2:	f803 1b01 	strb.w	r1, [r3], #1
 80056f6:	e7f9      	b.n	80056ec <memset+0x4>

080056f8 <iprintf>:
 80056f8:	b40f      	push	{r0, r1, r2, r3}
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <iprintf+0x2c>)
 80056fc:	b513      	push	{r0, r1, r4, lr}
 80056fe:	681c      	ldr	r4, [r3, #0]
 8005700:	b124      	cbz	r4, 800570c <iprintf+0x14>
 8005702:	69a3      	ldr	r3, [r4, #24]
 8005704:	b913      	cbnz	r3, 800570c <iprintf+0x14>
 8005706:	4620      	mov	r0, r4
 8005708:	f000 fa7e 	bl	8005c08 <__sinit>
 800570c:	ab05      	add	r3, sp, #20
 800570e:	9a04      	ldr	r2, [sp, #16]
 8005710:	68a1      	ldr	r1, [r4, #8]
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	4620      	mov	r0, r4
 8005716:	f000 fde3 	bl	80062e0 <_vfiprintf_r>
 800571a:	b002      	add	sp, #8
 800571c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005720:	b004      	add	sp, #16
 8005722:	4770      	bx	lr
 8005724:	20000030 	.word	0x20000030

08005728 <_puts_r>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	460e      	mov	r6, r1
 800572c:	4605      	mov	r5, r0
 800572e:	b118      	cbz	r0, 8005738 <_puts_r+0x10>
 8005730:	6983      	ldr	r3, [r0, #24]
 8005732:	b90b      	cbnz	r3, 8005738 <_puts_r+0x10>
 8005734:	f000 fa68 	bl	8005c08 <__sinit>
 8005738:	69ab      	ldr	r3, [r5, #24]
 800573a:	68ac      	ldr	r4, [r5, #8]
 800573c:	b913      	cbnz	r3, 8005744 <_puts_r+0x1c>
 800573e:	4628      	mov	r0, r5
 8005740:	f000 fa62 	bl	8005c08 <__sinit>
 8005744:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <_puts_r+0xd0>)
 8005746:	429c      	cmp	r4, r3
 8005748:	d120      	bne.n	800578c <_puts_r+0x64>
 800574a:	686c      	ldr	r4, [r5, #4]
 800574c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d405      	bmi.n	800575e <_puts_r+0x36>
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	0598      	lsls	r0, r3, #22
 8005756:	d402      	bmi.n	800575e <_puts_r+0x36>
 8005758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800575a:	f000 faf3 	bl	8005d44 <__retarget_lock_acquire_recursive>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	0719      	lsls	r1, r3, #28
 8005762:	d51d      	bpl.n	80057a0 <_puts_r+0x78>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	b1db      	cbz	r3, 80057a0 <_puts_r+0x78>
 8005768:	3e01      	subs	r6, #1
 800576a:	68a3      	ldr	r3, [r4, #8]
 800576c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005770:	3b01      	subs	r3, #1
 8005772:	60a3      	str	r3, [r4, #8]
 8005774:	bb39      	cbnz	r1, 80057c6 <_puts_r+0x9e>
 8005776:	2b00      	cmp	r3, #0
 8005778:	da38      	bge.n	80057ec <_puts_r+0xc4>
 800577a:	4622      	mov	r2, r4
 800577c:	210a      	movs	r1, #10
 800577e:	4628      	mov	r0, r5
 8005780:	f000 f868 	bl	8005854 <__swbuf_r>
 8005784:	3001      	adds	r0, #1
 8005786:	d011      	beq.n	80057ac <_puts_r+0x84>
 8005788:	250a      	movs	r5, #10
 800578a:	e011      	b.n	80057b0 <_puts_r+0x88>
 800578c:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <_puts_r+0xd4>)
 800578e:	429c      	cmp	r4, r3
 8005790:	d101      	bne.n	8005796 <_puts_r+0x6e>
 8005792:	68ac      	ldr	r4, [r5, #8]
 8005794:	e7da      	b.n	800574c <_puts_r+0x24>
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <_puts_r+0xd8>)
 8005798:	429c      	cmp	r4, r3
 800579a:	bf08      	it	eq
 800579c:	68ec      	ldreq	r4, [r5, #12]
 800579e:	e7d5      	b.n	800574c <_puts_r+0x24>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f000 f8a8 	bl	80058f8 <__swsetup_r>
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d0dd      	beq.n	8005768 <_puts_r+0x40>
 80057ac:	f04f 35ff 	mov.w	r5, #4294967295
 80057b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057b2:	07da      	lsls	r2, r3, #31
 80057b4:	d405      	bmi.n	80057c2 <_puts_r+0x9a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	059b      	lsls	r3, r3, #22
 80057ba:	d402      	bmi.n	80057c2 <_puts_r+0x9a>
 80057bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057be:	f000 fac2 	bl	8005d46 <__retarget_lock_release_recursive>
 80057c2:	4628      	mov	r0, r5
 80057c4:	bd70      	pop	{r4, r5, r6, pc}
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da04      	bge.n	80057d4 <_puts_r+0xac>
 80057ca:	69a2      	ldr	r2, [r4, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	dc06      	bgt.n	80057de <_puts_r+0xb6>
 80057d0:	290a      	cmp	r1, #10
 80057d2:	d004      	beq.n	80057de <_puts_r+0xb6>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	6022      	str	r2, [r4, #0]
 80057da:	7019      	strb	r1, [r3, #0]
 80057dc:	e7c5      	b.n	800576a <_puts_r+0x42>
 80057de:	4622      	mov	r2, r4
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 f837 	bl	8005854 <__swbuf_r>
 80057e6:	3001      	adds	r0, #1
 80057e8:	d1bf      	bne.n	800576a <_puts_r+0x42>
 80057ea:	e7df      	b.n	80057ac <_puts_r+0x84>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	250a      	movs	r5, #10
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	6022      	str	r2, [r4, #0]
 80057f4:	701d      	strb	r5, [r3, #0]
 80057f6:	e7db      	b.n	80057b0 <_puts_r+0x88>
 80057f8:	08006c1c 	.word	0x08006c1c
 80057fc:	08006c3c 	.word	0x08006c3c
 8005800:	08006bfc 	.word	0x08006bfc

08005804 <puts>:
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <puts+0xc>)
 8005806:	4601      	mov	r1, r0
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	f7ff bf8d 	b.w	8005728 <_puts_r>
 800580e:	bf00      	nop
 8005810:	20000030 	.word	0x20000030

08005814 <siprintf>:
 8005814:	b40e      	push	{r1, r2, r3}
 8005816:	b500      	push	{lr}
 8005818:	b09c      	sub	sp, #112	; 0x70
 800581a:	ab1d      	add	r3, sp, #116	; 0x74
 800581c:	9002      	str	r0, [sp, #8]
 800581e:	9006      	str	r0, [sp, #24]
 8005820:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005824:	4809      	ldr	r0, [pc, #36]	; (800584c <siprintf+0x38>)
 8005826:	9107      	str	r1, [sp, #28]
 8005828:	9104      	str	r1, [sp, #16]
 800582a:	4909      	ldr	r1, [pc, #36]	; (8005850 <siprintf+0x3c>)
 800582c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005830:	9105      	str	r1, [sp, #20]
 8005832:	6800      	ldr	r0, [r0, #0]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	a902      	add	r1, sp, #8
 8005838:	f000 fc28 	bl	800608c <_svfiprintf_r>
 800583c:	9b02      	ldr	r3, [sp, #8]
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
 8005842:	b01c      	add	sp, #112	; 0x70
 8005844:	f85d eb04 	ldr.w	lr, [sp], #4
 8005848:	b003      	add	sp, #12
 800584a:	4770      	bx	lr
 800584c:	20000030 	.word	0x20000030
 8005850:	ffff0208 	.word	0xffff0208

08005854 <__swbuf_r>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	460e      	mov	r6, r1
 8005858:	4614      	mov	r4, r2
 800585a:	4605      	mov	r5, r0
 800585c:	b118      	cbz	r0, 8005866 <__swbuf_r+0x12>
 800585e:	6983      	ldr	r3, [r0, #24]
 8005860:	b90b      	cbnz	r3, 8005866 <__swbuf_r+0x12>
 8005862:	f000 f9d1 	bl	8005c08 <__sinit>
 8005866:	4b21      	ldr	r3, [pc, #132]	; (80058ec <__swbuf_r+0x98>)
 8005868:	429c      	cmp	r4, r3
 800586a:	d12b      	bne.n	80058c4 <__swbuf_r+0x70>
 800586c:	686c      	ldr	r4, [r5, #4]
 800586e:	69a3      	ldr	r3, [r4, #24]
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	071a      	lsls	r2, r3, #28
 8005876:	d52f      	bpl.n	80058d8 <__swbuf_r+0x84>
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	b36b      	cbz	r3, 80058d8 <__swbuf_r+0x84>
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	6820      	ldr	r0, [r4, #0]
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	6963      	ldr	r3, [r4, #20]
 8005884:	b2f6      	uxtb	r6, r6
 8005886:	4283      	cmp	r3, r0
 8005888:	4637      	mov	r7, r6
 800588a:	dc04      	bgt.n	8005896 <__swbuf_r+0x42>
 800588c:	4621      	mov	r1, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f926 	bl	8005ae0 <_fflush_r>
 8005894:	bb30      	cbnz	r0, 80058e4 <__swbuf_r+0x90>
 8005896:	68a3      	ldr	r3, [r4, #8]
 8005898:	3b01      	subs	r3, #1
 800589a:	60a3      	str	r3, [r4, #8]
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	6022      	str	r2, [r4, #0]
 80058a2:	701e      	strb	r6, [r3, #0]
 80058a4:	6963      	ldr	r3, [r4, #20]
 80058a6:	3001      	adds	r0, #1
 80058a8:	4283      	cmp	r3, r0
 80058aa:	d004      	beq.n	80058b6 <__swbuf_r+0x62>
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	07db      	lsls	r3, r3, #31
 80058b0:	d506      	bpl.n	80058c0 <__swbuf_r+0x6c>
 80058b2:	2e0a      	cmp	r6, #10
 80058b4:	d104      	bne.n	80058c0 <__swbuf_r+0x6c>
 80058b6:	4621      	mov	r1, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 f911 	bl	8005ae0 <_fflush_r>
 80058be:	b988      	cbnz	r0, 80058e4 <__swbuf_r+0x90>
 80058c0:	4638      	mov	r0, r7
 80058c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <__swbuf_r+0x9c>)
 80058c6:	429c      	cmp	r4, r3
 80058c8:	d101      	bne.n	80058ce <__swbuf_r+0x7a>
 80058ca:	68ac      	ldr	r4, [r5, #8]
 80058cc:	e7cf      	b.n	800586e <__swbuf_r+0x1a>
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <__swbuf_r+0xa0>)
 80058d0:	429c      	cmp	r4, r3
 80058d2:	bf08      	it	eq
 80058d4:	68ec      	ldreq	r4, [r5, #12]
 80058d6:	e7ca      	b.n	800586e <__swbuf_r+0x1a>
 80058d8:	4621      	mov	r1, r4
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 f80c 	bl	80058f8 <__swsetup_r>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d0cb      	beq.n	800587c <__swbuf_r+0x28>
 80058e4:	f04f 37ff 	mov.w	r7, #4294967295
 80058e8:	e7ea      	b.n	80058c0 <__swbuf_r+0x6c>
 80058ea:	bf00      	nop
 80058ec:	08006c1c 	.word	0x08006c1c
 80058f0:	08006c3c 	.word	0x08006c3c
 80058f4:	08006bfc 	.word	0x08006bfc

080058f8 <__swsetup_r>:
 80058f8:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <__swsetup_r+0xcc>)
 80058fa:	b570      	push	{r4, r5, r6, lr}
 80058fc:	681d      	ldr	r5, [r3, #0]
 80058fe:	4606      	mov	r6, r0
 8005900:	460c      	mov	r4, r1
 8005902:	b125      	cbz	r5, 800590e <__swsetup_r+0x16>
 8005904:	69ab      	ldr	r3, [r5, #24]
 8005906:	b913      	cbnz	r3, 800590e <__swsetup_r+0x16>
 8005908:	4628      	mov	r0, r5
 800590a:	f000 f97d 	bl	8005c08 <__sinit>
 800590e:	4b2e      	ldr	r3, [pc, #184]	; (80059c8 <__swsetup_r+0xd0>)
 8005910:	429c      	cmp	r4, r3
 8005912:	d10f      	bne.n	8005934 <__swsetup_r+0x3c>
 8005914:	686c      	ldr	r4, [r5, #4]
 8005916:	89a3      	ldrh	r3, [r4, #12]
 8005918:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800591c:	0719      	lsls	r1, r3, #28
 800591e:	d42c      	bmi.n	800597a <__swsetup_r+0x82>
 8005920:	06dd      	lsls	r5, r3, #27
 8005922:	d411      	bmi.n	8005948 <__swsetup_r+0x50>
 8005924:	2309      	movs	r3, #9
 8005926:	6033      	str	r3, [r6, #0]
 8005928:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	f04f 30ff 	mov.w	r0, #4294967295
 8005932:	e03e      	b.n	80059b2 <__swsetup_r+0xba>
 8005934:	4b25      	ldr	r3, [pc, #148]	; (80059cc <__swsetup_r+0xd4>)
 8005936:	429c      	cmp	r4, r3
 8005938:	d101      	bne.n	800593e <__swsetup_r+0x46>
 800593a:	68ac      	ldr	r4, [r5, #8]
 800593c:	e7eb      	b.n	8005916 <__swsetup_r+0x1e>
 800593e:	4b24      	ldr	r3, [pc, #144]	; (80059d0 <__swsetup_r+0xd8>)
 8005940:	429c      	cmp	r4, r3
 8005942:	bf08      	it	eq
 8005944:	68ec      	ldreq	r4, [r5, #12]
 8005946:	e7e6      	b.n	8005916 <__swsetup_r+0x1e>
 8005948:	0758      	lsls	r0, r3, #29
 800594a:	d512      	bpl.n	8005972 <__swsetup_r+0x7a>
 800594c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800594e:	b141      	cbz	r1, 8005962 <__swsetup_r+0x6a>
 8005950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005954:	4299      	cmp	r1, r3
 8005956:	d002      	beq.n	800595e <__swsetup_r+0x66>
 8005958:	4630      	mov	r0, r6
 800595a:	f000 fa5b 	bl	8005e14 <_free_r>
 800595e:	2300      	movs	r3, #0
 8005960:	6363      	str	r3, [r4, #52]	; 0x34
 8005962:	89a3      	ldrh	r3, [r4, #12]
 8005964:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005968:	81a3      	strh	r3, [r4, #12]
 800596a:	2300      	movs	r3, #0
 800596c:	6063      	str	r3, [r4, #4]
 800596e:	6923      	ldr	r3, [r4, #16]
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0308 	orr.w	r3, r3, #8
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	6923      	ldr	r3, [r4, #16]
 800597c:	b94b      	cbnz	r3, 8005992 <__swsetup_r+0x9a>
 800597e:	89a3      	ldrh	r3, [r4, #12]
 8005980:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005988:	d003      	beq.n	8005992 <__swsetup_r+0x9a>
 800598a:	4621      	mov	r1, r4
 800598c:	4630      	mov	r0, r6
 800598e:	f000 fa01 	bl	8005d94 <__smakebuf_r>
 8005992:	89a0      	ldrh	r0, [r4, #12]
 8005994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005998:	f010 0301 	ands.w	r3, r0, #1
 800599c:	d00a      	beq.n	80059b4 <__swsetup_r+0xbc>
 800599e:	2300      	movs	r3, #0
 80059a0:	60a3      	str	r3, [r4, #8]
 80059a2:	6963      	ldr	r3, [r4, #20]
 80059a4:	425b      	negs	r3, r3
 80059a6:	61a3      	str	r3, [r4, #24]
 80059a8:	6923      	ldr	r3, [r4, #16]
 80059aa:	b943      	cbnz	r3, 80059be <__swsetup_r+0xc6>
 80059ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059b0:	d1ba      	bne.n	8005928 <__swsetup_r+0x30>
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	0781      	lsls	r1, r0, #30
 80059b6:	bf58      	it	pl
 80059b8:	6963      	ldrpl	r3, [r4, #20]
 80059ba:	60a3      	str	r3, [r4, #8]
 80059bc:	e7f4      	b.n	80059a8 <__swsetup_r+0xb0>
 80059be:	2000      	movs	r0, #0
 80059c0:	e7f7      	b.n	80059b2 <__swsetup_r+0xba>
 80059c2:	bf00      	nop
 80059c4:	20000030 	.word	0x20000030
 80059c8:	08006c1c 	.word	0x08006c1c
 80059cc:	08006c3c 	.word	0x08006c3c
 80059d0:	08006bfc 	.word	0x08006bfc

080059d4 <__sflush_r>:
 80059d4:	898a      	ldrh	r2, [r1, #12]
 80059d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059da:	4605      	mov	r5, r0
 80059dc:	0710      	lsls	r0, r2, #28
 80059de:	460c      	mov	r4, r1
 80059e0:	d458      	bmi.n	8005a94 <__sflush_r+0xc0>
 80059e2:	684b      	ldr	r3, [r1, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dc05      	bgt.n	80059f4 <__sflush_r+0x20>
 80059e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	dc02      	bgt.n	80059f4 <__sflush_r+0x20>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059f6:	2e00      	cmp	r6, #0
 80059f8:	d0f9      	beq.n	80059ee <__sflush_r+0x1a>
 80059fa:	2300      	movs	r3, #0
 80059fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a00:	682f      	ldr	r7, [r5, #0]
 8005a02:	602b      	str	r3, [r5, #0]
 8005a04:	d032      	beq.n	8005a6c <__sflush_r+0x98>
 8005a06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	075a      	lsls	r2, r3, #29
 8005a0c:	d505      	bpl.n	8005a1a <__sflush_r+0x46>
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	1ac0      	subs	r0, r0, r3
 8005a12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a14:	b10b      	cbz	r3, 8005a1a <__sflush_r+0x46>
 8005a16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a18:	1ac0      	subs	r0, r0, r3
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a20:	6a21      	ldr	r1, [r4, #32]
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b0      	blx	r6
 8005a26:	1c43      	adds	r3, r0, #1
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	d106      	bne.n	8005a3a <__sflush_r+0x66>
 8005a2c:	6829      	ldr	r1, [r5, #0]
 8005a2e:	291d      	cmp	r1, #29
 8005a30:	d82c      	bhi.n	8005a8c <__sflush_r+0xb8>
 8005a32:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <__sflush_r+0x108>)
 8005a34:	40ca      	lsrs	r2, r1
 8005a36:	07d6      	lsls	r6, r2, #31
 8005a38:	d528      	bpl.n	8005a8c <__sflush_r+0xb8>
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	6062      	str	r2, [r4, #4]
 8005a3e:	04d9      	lsls	r1, r3, #19
 8005a40:	6922      	ldr	r2, [r4, #16]
 8005a42:	6022      	str	r2, [r4, #0]
 8005a44:	d504      	bpl.n	8005a50 <__sflush_r+0x7c>
 8005a46:	1c42      	adds	r2, r0, #1
 8005a48:	d101      	bne.n	8005a4e <__sflush_r+0x7a>
 8005a4a:	682b      	ldr	r3, [r5, #0]
 8005a4c:	b903      	cbnz	r3, 8005a50 <__sflush_r+0x7c>
 8005a4e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a52:	602f      	str	r7, [r5, #0]
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d0ca      	beq.n	80059ee <__sflush_r+0x1a>
 8005a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d002      	beq.n	8005a66 <__sflush_r+0x92>
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 f9d7 	bl	8005e14 <_free_r>
 8005a66:	2000      	movs	r0, #0
 8005a68:	6360      	str	r0, [r4, #52]	; 0x34
 8005a6a:	e7c1      	b.n	80059f0 <__sflush_r+0x1c>
 8005a6c:	6a21      	ldr	r1, [r4, #32]
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4628      	mov	r0, r5
 8005a72:	47b0      	blx	r6
 8005a74:	1c41      	adds	r1, r0, #1
 8005a76:	d1c7      	bne.n	8005a08 <__sflush_r+0x34>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0c4      	beq.n	8005a08 <__sflush_r+0x34>
 8005a7e:	2b1d      	cmp	r3, #29
 8005a80:	d001      	beq.n	8005a86 <__sflush_r+0xb2>
 8005a82:	2b16      	cmp	r3, #22
 8005a84:	d101      	bne.n	8005a8a <__sflush_r+0xb6>
 8005a86:	602f      	str	r7, [r5, #0]
 8005a88:	e7b1      	b.n	80059ee <__sflush_r+0x1a>
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	e7ad      	b.n	80059f0 <__sflush_r+0x1c>
 8005a94:	690f      	ldr	r7, [r1, #16]
 8005a96:	2f00      	cmp	r7, #0
 8005a98:	d0a9      	beq.n	80059ee <__sflush_r+0x1a>
 8005a9a:	0793      	lsls	r3, r2, #30
 8005a9c:	680e      	ldr	r6, [r1, #0]
 8005a9e:	bf08      	it	eq
 8005aa0:	694b      	ldreq	r3, [r1, #20]
 8005aa2:	600f      	str	r7, [r1, #0]
 8005aa4:	bf18      	it	ne
 8005aa6:	2300      	movne	r3, #0
 8005aa8:	eba6 0807 	sub.w	r8, r6, r7
 8005aac:	608b      	str	r3, [r1, #8]
 8005aae:	f1b8 0f00 	cmp.w	r8, #0
 8005ab2:	dd9c      	ble.n	80059ee <__sflush_r+0x1a>
 8005ab4:	6a21      	ldr	r1, [r4, #32]
 8005ab6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ab8:	4643      	mov	r3, r8
 8005aba:	463a      	mov	r2, r7
 8005abc:	4628      	mov	r0, r5
 8005abe:	47b0      	blx	r6
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	dc06      	bgt.n	8005ad2 <__sflush_r+0xfe>
 8005ac4:	89a3      	ldrh	r3, [r4, #12]
 8005ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	e78e      	b.n	80059f0 <__sflush_r+0x1c>
 8005ad2:	4407      	add	r7, r0
 8005ad4:	eba8 0800 	sub.w	r8, r8, r0
 8005ad8:	e7e9      	b.n	8005aae <__sflush_r+0xda>
 8005ada:	bf00      	nop
 8005adc:	20400001 	.word	0x20400001

08005ae0 <_fflush_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	690b      	ldr	r3, [r1, #16]
 8005ae4:	4605      	mov	r5, r0
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	b913      	cbnz	r3, 8005af0 <_fflush_r+0x10>
 8005aea:	2500      	movs	r5, #0
 8005aec:	4628      	mov	r0, r5
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	b118      	cbz	r0, 8005afa <_fflush_r+0x1a>
 8005af2:	6983      	ldr	r3, [r0, #24]
 8005af4:	b90b      	cbnz	r3, 8005afa <_fflush_r+0x1a>
 8005af6:	f000 f887 	bl	8005c08 <__sinit>
 8005afa:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <_fflush_r+0x6c>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d11b      	bne.n	8005b38 <_fflush_r+0x58>
 8005b00:	686c      	ldr	r4, [r5, #4]
 8005b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0ef      	beq.n	8005aea <_fflush_r+0xa>
 8005b0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b0c:	07d0      	lsls	r0, r2, #31
 8005b0e:	d404      	bmi.n	8005b1a <_fflush_r+0x3a>
 8005b10:	0599      	lsls	r1, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_fflush_r+0x3a>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 f915 	bl	8005d44 <__retarget_lock_acquire_recursive>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	f7ff ff59 	bl	80059d4 <__sflush_r>
 8005b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b24:	07da      	lsls	r2, r3, #31
 8005b26:	4605      	mov	r5, r0
 8005b28:	d4e0      	bmi.n	8005aec <_fflush_r+0xc>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	059b      	lsls	r3, r3, #22
 8005b2e:	d4dd      	bmi.n	8005aec <_fflush_r+0xc>
 8005b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b32:	f000 f908 	bl	8005d46 <__retarget_lock_release_recursive>
 8005b36:	e7d9      	b.n	8005aec <_fflush_r+0xc>
 8005b38:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <_fflush_r+0x70>)
 8005b3a:	429c      	cmp	r4, r3
 8005b3c:	d101      	bne.n	8005b42 <_fflush_r+0x62>
 8005b3e:	68ac      	ldr	r4, [r5, #8]
 8005b40:	e7df      	b.n	8005b02 <_fflush_r+0x22>
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <_fflush_r+0x74>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	bf08      	it	eq
 8005b48:	68ec      	ldreq	r4, [r5, #12]
 8005b4a:	e7da      	b.n	8005b02 <_fflush_r+0x22>
 8005b4c:	08006c1c 	.word	0x08006c1c
 8005b50:	08006c3c 	.word	0x08006c3c
 8005b54:	08006bfc 	.word	0x08006bfc

08005b58 <std>:
 8005b58:	2300      	movs	r3, #0
 8005b5a:	b510      	push	{r4, lr}
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b66:	6083      	str	r3, [r0, #8]
 8005b68:	8181      	strh	r1, [r0, #12]
 8005b6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b6c:	81c2      	strh	r2, [r0, #14]
 8005b6e:	6183      	str	r3, [r0, #24]
 8005b70:	4619      	mov	r1, r3
 8005b72:	2208      	movs	r2, #8
 8005b74:	305c      	adds	r0, #92	; 0x5c
 8005b76:	f7ff fdb7 	bl	80056e8 <memset>
 8005b7a:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <std+0x38>)
 8005b7c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <std+0x3c>)
 8005b80:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <std+0x40>)
 8005b84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <std+0x44>)
 8005b88:	6224      	str	r4, [r4, #32]
 8005b8a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b8c:	bd10      	pop	{r4, pc}
 8005b8e:	bf00      	nop
 8005b90:	08006889 	.word	0x08006889
 8005b94:	080068ab 	.word	0x080068ab
 8005b98:	080068e3 	.word	0x080068e3
 8005b9c:	08006907 	.word	0x08006907

08005ba0 <_cleanup_r>:
 8005ba0:	4901      	ldr	r1, [pc, #4]	; (8005ba8 <_cleanup_r+0x8>)
 8005ba2:	f000 b8af 	b.w	8005d04 <_fwalk_reent>
 8005ba6:	bf00      	nop
 8005ba8:	08005ae1 	.word	0x08005ae1

08005bac <__sfmoreglue>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	2268      	movs	r2, #104	; 0x68
 8005bb0:	1e4d      	subs	r5, r1, #1
 8005bb2:	4355      	muls	r5, r2
 8005bb4:	460e      	mov	r6, r1
 8005bb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bba:	f000 f997 	bl	8005eec <_malloc_r>
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	b140      	cbz	r0, 8005bd4 <__sfmoreglue+0x28>
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bc8:	300c      	adds	r0, #12
 8005bca:	60a0      	str	r0, [r4, #8]
 8005bcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bd0:	f7ff fd8a 	bl	80056e8 <memset>
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	bd70      	pop	{r4, r5, r6, pc}

08005bd8 <__sfp_lock_acquire>:
 8005bd8:	4801      	ldr	r0, [pc, #4]	; (8005be0 <__sfp_lock_acquire+0x8>)
 8005bda:	f000 b8b3 	b.w	8005d44 <__retarget_lock_acquire_recursive>
 8005bde:	bf00      	nop
 8005be0:	20000914 	.word	0x20000914

08005be4 <__sfp_lock_release>:
 8005be4:	4801      	ldr	r0, [pc, #4]	; (8005bec <__sfp_lock_release+0x8>)
 8005be6:	f000 b8ae 	b.w	8005d46 <__retarget_lock_release_recursive>
 8005bea:	bf00      	nop
 8005bec:	20000914 	.word	0x20000914

08005bf0 <__sinit_lock_acquire>:
 8005bf0:	4801      	ldr	r0, [pc, #4]	; (8005bf8 <__sinit_lock_acquire+0x8>)
 8005bf2:	f000 b8a7 	b.w	8005d44 <__retarget_lock_acquire_recursive>
 8005bf6:	bf00      	nop
 8005bf8:	20000915 	.word	0x20000915

08005bfc <__sinit_lock_release>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__sinit_lock_release+0x8>)
 8005bfe:	f000 b8a2 	b.w	8005d46 <__retarget_lock_release_recursive>
 8005c02:	bf00      	nop
 8005c04:	20000915 	.word	0x20000915

08005c08 <__sinit>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	f7ff fff0 	bl	8005bf0 <__sinit_lock_acquire>
 8005c10:	69a3      	ldr	r3, [r4, #24]
 8005c12:	b11b      	cbz	r3, 8005c1c <__sinit+0x14>
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f7ff bff0 	b.w	8005bfc <__sinit_lock_release>
 8005c1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c20:	6523      	str	r3, [r4, #80]	; 0x50
 8005c22:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <__sinit+0x68>)
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <__sinit+0x6c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	bf04      	itt	eq
 8005c2e:	2301      	moveq	r3, #1
 8005c30:	61a3      	streq	r3, [r4, #24]
 8005c32:	4620      	mov	r0, r4
 8005c34:	f000 f820 	bl	8005c78 <__sfp>
 8005c38:	6060      	str	r0, [r4, #4]
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	f000 f81c 	bl	8005c78 <__sfp>
 8005c40:	60a0      	str	r0, [r4, #8]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f818 	bl	8005c78 <__sfp>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	60e0      	str	r0, [r4, #12]
 8005c4c:	2104      	movs	r1, #4
 8005c4e:	6860      	ldr	r0, [r4, #4]
 8005c50:	f7ff ff82 	bl	8005b58 <std>
 8005c54:	68a0      	ldr	r0, [r4, #8]
 8005c56:	2201      	movs	r2, #1
 8005c58:	2109      	movs	r1, #9
 8005c5a:	f7ff ff7d 	bl	8005b58 <std>
 8005c5e:	68e0      	ldr	r0, [r4, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	2112      	movs	r1, #18
 8005c64:	f7ff ff78 	bl	8005b58 <std>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	61a3      	str	r3, [r4, #24]
 8005c6c:	e7d2      	b.n	8005c14 <__sinit+0xc>
 8005c6e:	bf00      	nop
 8005c70:	08006bf8 	.word	0x08006bf8
 8005c74:	08005ba1 	.word	0x08005ba1

08005c78 <__sfp>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	f7ff ffac 	bl	8005bd8 <__sfp_lock_acquire>
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <__sfp+0x84>)
 8005c82:	681e      	ldr	r6, [r3, #0]
 8005c84:	69b3      	ldr	r3, [r6, #24]
 8005c86:	b913      	cbnz	r3, 8005c8e <__sfp+0x16>
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ffbd 	bl	8005c08 <__sinit>
 8005c8e:	3648      	adds	r6, #72	; 0x48
 8005c90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	d503      	bpl.n	8005ca0 <__sfp+0x28>
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	b30b      	cbz	r3, 8005ce0 <__sfp+0x68>
 8005c9c:	6836      	ldr	r6, [r6, #0]
 8005c9e:	e7f7      	b.n	8005c90 <__sfp+0x18>
 8005ca0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ca4:	b9d5      	cbnz	r5, 8005cdc <__sfp+0x64>
 8005ca6:	4b16      	ldr	r3, [pc, #88]	; (8005d00 <__sfp+0x88>)
 8005ca8:	60e3      	str	r3, [r4, #12]
 8005caa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cae:	6665      	str	r5, [r4, #100]	; 0x64
 8005cb0:	f000 f847 	bl	8005d42 <__retarget_lock_init_recursive>
 8005cb4:	f7ff ff96 	bl	8005be4 <__sfp_lock_release>
 8005cb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005cbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cc0:	6025      	str	r5, [r4, #0]
 8005cc2:	61a5      	str	r5, [r4, #24]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ccc:	f7ff fd0c 	bl	80056e8 <memset>
 8005cd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cd8:	4620      	mov	r0, r4
 8005cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cdc:	3468      	adds	r4, #104	; 0x68
 8005cde:	e7d9      	b.n	8005c94 <__sfp+0x1c>
 8005ce0:	2104      	movs	r1, #4
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f7ff ff62 	bl	8005bac <__sfmoreglue>
 8005ce8:	4604      	mov	r4, r0
 8005cea:	6030      	str	r0, [r6, #0]
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d1d5      	bne.n	8005c9c <__sfp+0x24>
 8005cf0:	f7ff ff78 	bl	8005be4 <__sfp_lock_release>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	e7ee      	b.n	8005cd8 <__sfp+0x60>
 8005cfa:	bf00      	nop
 8005cfc:	08006bf8 	.word	0x08006bf8
 8005d00:	ffff0001 	.word	0xffff0001

08005d04 <_fwalk_reent>:
 8005d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d08:	4606      	mov	r6, r0
 8005d0a:	4688      	mov	r8, r1
 8005d0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d10:	2700      	movs	r7, #0
 8005d12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d16:	f1b9 0901 	subs.w	r9, r9, #1
 8005d1a:	d505      	bpl.n	8005d28 <_fwalk_reent+0x24>
 8005d1c:	6824      	ldr	r4, [r4, #0]
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d1f7      	bne.n	8005d12 <_fwalk_reent+0xe>
 8005d22:	4638      	mov	r0, r7
 8005d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d28:	89ab      	ldrh	r3, [r5, #12]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d907      	bls.n	8005d3e <_fwalk_reent+0x3a>
 8005d2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d32:	3301      	adds	r3, #1
 8005d34:	d003      	beq.n	8005d3e <_fwalk_reent+0x3a>
 8005d36:	4629      	mov	r1, r5
 8005d38:	4630      	mov	r0, r6
 8005d3a:	47c0      	blx	r8
 8005d3c:	4307      	orrs	r7, r0
 8005d3e:	3568      	adds	r5, #104	; 0x68
 8005d40:	e7e9      	b.n	8005d16 <_fwalk_reent+0x12>

08005d42 <__retarget_lock_init_recursive>:
 8005d42:	4770      	bx	lr

08005d44 <__retarget_lock_acquire_recursive>:
 8005d44:	4770      	bx	lr

08005d46 <__retarget_lock_release_recursive>:
 8005d46:	4770      	bx	lr

08005d48 <__swhatbuf_r>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	460e      	mov	r6, r1
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	2900      	cmp	r1, #0
 8005d52:	b096      	sub	sp, #88	; 0x58
 8005d54:	4614      	mov	r4, r2
 8005d56:	461d      	mov	r5, r3
 8005d58:	da08      	bge.n	8005d6c <__swhatbuf_r+0x24>
 8005d5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	602a      	str	r2, [r5, #0]
 8005d62:	061a      	lsls	r2, r3, #24
 8005d64:	d410      	bmi.n	8005d88 <__swhatbuf_r+0x40>
 8005d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d6a:	e00e      	b.n	8005d8a <__swhatbuf_r+0x42>
 8005d6c:	466a      	mov	r2, sp
 8005d6e:	f000 fddf 	bl	8006930 <_fstat_r>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	dbf1      	blt.n	8005d5a <__swhatbuf_r+0x12>
 8005d76:	9a01      	ldr	r2, [sp, #4]
 8005d78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d80:	425a      	negs	r2, r3
 8005d82:	415a      	adcs	r2, r3
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	e7ee      	b.n	8005d66 <__swhatbuf_r+0x1e>
 8005d88:	2340      	movs	r3, #64	; 0x40
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	6023      	str	r3, [r4, #0]
 8005d8e:	b016      	add	sp, #88	; 0x58
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d94 <__smakebuf_r>:
 8005d94:	898b      	ldrh	r3, [r1, #12]
 8005d96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d98:	079d      	lsls	r5, r3, #30
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	d507      	bpl.n	8005db0 <__smakebuf_r+0x1c>
 8005da0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	2301      	movs	r3, #1
 8005daa:	6163      	str	r3, [r4, #20]
 8005dac:	b002      	add	sp, #8
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	ab01      	add	r3, sp, #4
 8005db2:	466a      	mov	r2, sp
 8005db4:	f7ff ffc8 	bl	8005d48 <__swhatbuf_r>
 8005db8:	9900      	ldr	r1, [sp, #0]
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f000 f895 	bl	8005eec <_malloc_r>
 8005dc2:	b948      	cbnz	r0, 8005dd8 <__smakebuf_r+0x44>
 8005dc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dc8:	059a      	lsls	r2, r3, #22
 8005dca:	d4ef      	bmi.n	8005dac <__smakebuf_r+0x18>
 8005dcc:	f023 0303 	bic.w	r3, r3, #3
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	81a3      	strh	r3, [r4, #12]
 8005dd6:	e7e3      	b.n	8005da0 <__smakebuf_r+0xc>
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <__smakebuf_r+0x7c>)
 8005dda:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ddc:	89a3      	ldrh	r3, [r4, #12]
 8005dde:	6020      	str	r0, [r4, #0]
 8005de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de4:	81a3      	strh	r3, [r4, #12]
 8005de6:	9b00      	ldr	r3, [sp, #0]
 8005de8:	6163      	str	r3, [r4, #20]
 8005dea:	9b01      	ldr	r3, [sp, #4]
 8005dec:	6120      	str	r0, [r4, #16]
 8005dee:	b15b      	cbz	r3, 8005e08 <__smakebuf_r+0x74>
 8005df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df4:	4630      	mov	r0, r6
 8005df6:	f000 fdad 	bl	8006954 <_isatty_r>
 8005dfa:	b128      	cbz	r0, 8005e08 <__smakebuf_r+0x74>
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	89a0      	ldrh	r0, [r4, #12]
 8005e0a:	4305      	orrs	r5, r0
 8005e0c:	81a5      	strh	r5, [r4, #12]
 8005e0e:	e7cd      	b.n	8005dac <__smakebuf_r+0x18>
 8005e10:	08005ba1 	.word	0x08005ba1

08005e14 <_free_r>:
 8005e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e16:	2900      	cmp	r1, #0
 8005e18:	d044      	beq.n	8005ea4 <_free_r+0x90>
 8005e1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e1e:	9001      	str	r0, [sp, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f1a1 0404 	sub.w	r4, r1, #4
 8005e26:	bfb8      	it	lt
 8005e28:	18e4      	addlt	r4, r4, r3
 8005e2a:	f000 fdcf 	bl	80069cc <__malloc_lock>
 8005e2e:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <_free_r+0x94>)
 8005e30:	9801      	ldr	r0, [sp, #4]
 8005e32:	6813      	ldr	r3, [r2, #0]
 8005e34:	b933      	cbnz	r3, 8005e44 <_free_r+0x30>
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	6014      	str	r4, [r2, #0]
 8005e3a:	b003      	add	sp, #12
 8005e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e40:	f000 bdca 	b.w	80069d8 <__malloc_unlock>
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d908      	bls.n	8005e5a <_free_r+0x46>
 8005e48:	6825      	ldr	r5, [r4, #0]
 8005e4a:	1961      	adds	r1, r4, r5
 8005e4c:	428b      	cmp	r3, r1
 8005e4e:	bf01      	itttt	eq
 8005e50:	6819      	ldreq	r1, [r3, #0]
 8005e52:	685b      	ldreq	r3, [r3, #4]
 8005e54:	1949      	addeq	r1, r1, r5
 8005e56:	6021      	streq	r1, [r4, #0]
 8005e58:	e7ed      	b.n	8005e36 <_free_r+0x22>
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	b10b      	cbz	r3, 8005e64 <_free_r+0x50>
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d9fa      	bls.n	8005e5a <_free_r+0x46>
 8005e64:	6811      	ldr	r1, [r2, #0]
 8005e66:	1855      	adds	r5, r2, r1
 8005e68:	42a5      	cmp	r5, r4
 8005e6a:	d10b      	bne.n	8005e84 <_free_r+0x70>
 8005e6c:	6824      	ldr	r4, [r4, #0]
 8005e6e:	4421      	add	r1, r4
 8005e70:	1854      	adds	r4, r2, r1
 8005e72:	42a3      	cmp	r3, r4
 8005e74:	6011      	str	r1, [r2, #0]
 8005e76:	d1e0      	bne.n	8005e3a <_free_r+0x26>
 8005e78:	681c      	ldr	r4, [r3, #0]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	6053      	str	r3, [r2, #4]
 8005e7e:	4421      	add	r1, r4
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	e7da      	b.n	8005e3a <_free_r+0x26>
 8005e84:	d902      	bls.n	8005e8c <_free_r+0x78>
 8005e86:	230c      	movs	r3, #12
 8005e88:	6003      	str	r3, [r0, #0]
 8005e8a:	e7d6      	b.n	8005e3a <_free_r+0x26>
 8005e8c:	6825      	ldr	r5, [r4, #0]
 8005e8e:	1961      	adds	r1, r4, r5
 8005e90:	428b      	cmp	r3, r1
 8005e92:	bf04      	itt	eq
 8005e94:	6819      	ldreq	r1, [r3, #0]
 8005e96:	685b      	ldreq	r3, [r3, #4]
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	bf04      	itt	eq
 8005e9c:	1949      	addeq	r1, r1, r5
 8005e9e:	6021      	streq	r1, [r4, #0]
 8005ea0:	6054      	str	r4, [r2, #4]
 8005ea2:	e7ca      	b.n	8005e3a <_free_r+0x26>
 8005ea4:	b003      	add	sp, #12
 8005ea6:	bd30      	pop	{r4, r5, pc}
 8005ea8:	20000918 	.word	0x20000918

08005eac <sbrk_aligned>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4e0e      	ldr	r6, [pc, #56]	; (8005ee8 <sbrk_aligned+0x3c>)
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	6831      	ldr	r1, [r6, #0]
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	b911      	cbnz	r1, 8005ebe <sbrk_aligned+0x12>
 8005eb8:	f000 fcd6 	bl	8006868 <_sbrk_r>
 8005ebc:	6030      	str	r0, [r6, #0]
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 fcd1 	bl	8006868 <_sbrk_r>
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d00a      	beq.n	8005ee0 <sbrk_aligned+0x34>
 8005eca:	1cc4      	adds	r4, r0, #3
 8005ecc:	f024 0403 	bic.w	r4, r4, #3
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d007      	beq.n	8005ee4 <sbrk_aligned+0x38>
 8005ed4:	1a21      	subs	r1, r4, r0
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 fcc6 	bl	8006868 <_sbrk_r>
 8005edc:	3001      	adds	r0, #1
 8005ede:	d101      	bne.n	8005ee4 <sbrk_aligned+0x38>
 8005ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8005ee4:	4620      	mov	r0, r4
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	2000091c 	.word	0x2000091c

08005eec <_malloc_r>:
 8005eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef0:	1ccd      	adds	r5, r1, #3
 8005ef2:	f025 0503 	bic.w	r5, r5, #3
 8005ef6:	3508      	adds	r5, #8
 8005ef8:	2d0c      	cmp	r5, #12
 8005efa:	bf38      	it	cc
 8005efc:	250c      	movcc	r5, #12
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	4607      	mov	r7, r0
 8005f02:	db01      	blt.n	8005f08 <_malloc_r+0x1c>
 8005f04:	42a9      	cmp	r1, r5
 8005f06:	d905      	bls.n	8005f14 <_malloc_r+0x28>
 8005f08:	230c      	movs	r3, #12
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	2600      	movs	r6, #0
 8005f0e:	4630      	mov	r0, r6
 8005f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f14:	4e2e      	ldr	r6, [pc, #184]	; (8005fd0 <_malloc_r+0xe4>)
 8005f16:	f000 fd59 	bl	80069cc <__malloc_lock>
 8005f1a:	6833      	ldr	r3, [r6, #0]
 8005f1c:	461c      	mov	r4, r3
 8005f1e:	bb34      	cbnz	r4, 8005f6e <_malloc_r+0x82>
 8005f20:	4629      	mov	r1, r5
 8005f22:	4638      	mov	r0, r7
 8005f24:	f7ff ffc2 	bl	8005eac <sbrk_aligned>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	d14d      	bne.n	8005fca <_malloc_r+0xde>
 8005f2e:	6834      	ldr	r4, [r6, #0]
 8005f30:	4626      	mov	r6, r4
 8005f32:	2e00      	cmp	r6, #0
 8005f34:	d140      	bne.n	8005fb8 <_malloc_r+0xcc>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	4631      	mov	r1, r6
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	eb04 0803 	add.w	r8, r4, r3
 8005f40:	f000 fc92 	bl	8006868 <_sbrk_r>
 8005f44:	4580      	cmp	r8, r0
 8005f46:	d13a      	bne.n	8005fbe <_malloc_r+0xd2>
 8005f48:	6821      	ldr	r1, [r4, #0]
 8005f4a:	3503      	adds	r5, #3
 8005f4c:	1a6d      	subs	r5, r5, r1
 8005f4e:	f025 0503 	bic.w	r5, r5, #3
 8005f52:	3508      	adds	r5, #8
 8005f54:	2d0c      	cmp	r5, #12
 8005f56:	bf38      	it	cc
 8005f58:	250c      	movcc	r5, #12
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f7ff ffa5 	bl	8005eac <sbrk_aligned>
 8005f62:	3001      	adds	r0, #1
 8005f64:	d02b      	beq.n	8005fbe <_malloc_r+0xd2>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	442b      	add	r3, r5
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	e00e      	b.n	8005f8c <_malloc_r+0xa0>
 8005f6e:	6822      	ldr	r2, [r4, #0]
 8005f70:	1b52      	subs	r2, r2, r5
 8005f72:	d41e      	bmi.n	8005fb2 <_malloc_r+0xc6>
 8005f74:	2a0b      	cmp	r2, #11
 8005f76:	d916      	bls.n	8005fa6 <_malloc_r+0xba>
 8005f78:	1961      	adds	r1, r4, r5
 8005f7a:	42a3      	cmp	r3, r4
 8005f7c:	6025      	str	r5, [r4, #0]
 8005f7e:	bf18      	it	ne
 8005f80:	6059      	strne	r1, [r3, #4]
 8005f82:	6863      	ldr	r3, [r4, #4]
 8005f84:	bf08      	it	eq
 8005f86:	6031      	streq	r1, [r6, #0]
 8005f88:	5162      	str	r2, [r4, r5]
 8005f8a:	604b      	str	r3, [r1, #4]
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	f104 060b 	add.w	r6, r4, #11
 8005f92:	f000 fd21 	bl	80069d8 <__malloc_unlock>
 8005f96:	f026 0607 	bic.w	r6, r6, #7
 8005f9a:	1d23      	adds	r3, r4, #4
 8005f9c:	1af2      	subs	r2, r6, r3
 8005f9e:	d0b6      	beq.n	8005f0e <_malloc_r+0x22>
 8005fa0:	1b9b      	subs	r3, r3, r6
 8005fa2:	50a3      	str	r3, [r4, r2]
 8005fa4:	e7b3      	b.n	8005f0e <_malloc_r+0x22>
 8005fa6:	6862      	ldr	r2, [r4, #4]
 8005fa8:	42a3      	cmp	r3, r4
 8005faa:	bf0c      	ite	eq
 8005fac:	6032      	streq	r2, [r6, #0]
 8005fae:	605a      	strne	r2, [r3, #4]
 8005fb0:	e7ec      	b.n	8005f8c <_malloc_r+0xa0>
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	6864      	ldr	r4, [r4, #4]
 8005fb6:	e7b2      	b.n	8005f1e <_malloc_r+0x32>
 8005fb8:	4634      	mov	r4, r6
 8005fba:	6876      	ldr	r6, [r6, #4]
 8005fbc:	e7b9      	b.n	8005f32 <_malloc_r+0x46>
 8005fbe:	230c      	movs	r3, #12
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	f000 fd08 	bl	80069d8 <__malloc_unlock>
 8005fc8:	e7a1      	b.n	8005f0e <_malloc_r+0x22>
 8005fca:	6025      	str	r5, [r4, #0]
 8005fcc:	e7de      	b.n	8005f8c <_malloc_r+0xa0>
 8005fce:	bf00      	nop
 8005fd0:	20000918 	.word	0x20000918

08005fd4 <__ssputs_r>:
 8005fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd8:	688e      	ldr	r6, [r1, #8]
 8005fda:	429e      	cmp	r6, r3
 8005fdc:	4682      	mov	sl, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	4690      	mov	r8, r2
 8005fe2:	461f      	mov	r7, r3
 8005fe4:	d838      	bhi.n	8006058 <__ssputs_r+0x84>
 8005fe6:	898a      	ldrh	r2, [r1, #12]
 8005fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fec:	d032      	beq.n	8006054 <__ssputs_r+0x80>
 8005fee:	6825      	ldr	r5, [r4, #0]
 8005ff0:	6909      	ldr	r1, [r1, #16]
 8005ff2:	eba5 0901 	sub.w	r9, r5, r1
 8005ff6:	6965      	ldr	r5, [r4, #20]
 8005ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006000:	3301      	adds	r3, #1
 8006002:	444b      	add	r3, r9
 8006004:	106d      	asrs	r5, r5, #1
 8006006:	429d      	cmp	r5, r3
 8006008:	bf38      	it	cc
 800600a:	461d      	movcc	r5, r3
 800600c:	0553      	lsls	r3, r2, #21
 800600e:	d531      	bpl.n	8006074 <__ssputs_r+0xa0>
 8006010:	4629      	mov	r1, r5
 8006012:	f7ff ff6b 	bl	8005eec <_malloc_r>
 8006016:	4606      	mov	r6, r0
 8006018:	b950      	cbnz	r0, 8006030 <__ssputs_r+0x5c>
 800601a:	230c      	movs	r3, #12
 800601c:	f8ca 3000 	str.w	r3, [sl]
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006026:	81a3      	strh	r3, [r4, #12]
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	6921      	ldr	r1, [r4, #16]
 8006032:	464a      	mov	r2, r9
 8006034:	f7ff fb4a 	bl	80056cc <memcpy>
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800603e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	6126      	str	r6, [r4, #16]
 8006046:	6165      	str	r5, [r4, #20]
 8006048:	444e      	add	r6, r9
 800604a:	eba5 0509 	sub.w	r5, r5, r9
 800604e:	6026      	str	r6, [r4, #0]
 8006050:	60a5      	str	r5, [r4, #8]
 8006052:	463e      	mov	r6, r7
 8006054:	42be      	cmp	r6, r7
 8006056:	d900      	bls.n	800605a <__ssputs_r+0x86>
 8006058:	463e      	mov	r6, r7
 800605a:	6820      	ldr	r0, [r4, #0]
 800605c:	4632      	mov	r2, r6
 800605e:	4641      	mov	r1, r8
 8006060:	f000 fc9a 	bl	8006998 <memmove>
 8006064:	68a3      	ldr	r3, [r4, #8]
 8006066:	1b9b      	subs	r3, r3, r6
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	4433      	add	r3, r6
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	2000      	movs	r0, #0
 8006072:	e7db      	b.n	800602c <__ssputs_r+0x58>
 8006074:	462a      	mov	r2, r5
 8006076:	f000 fcb5 	bl	80069e4 <_realloc_r>
 800607a:	4606      	mov	r6, r0
 800607c:	2800      	cmp	r0, #0
 800607e:	d1e1      	bne.n	8006044 <__ssputs_r+0x70>
 8006080:	6921      	ldr	r1, [r4, #16]
 8006082:	4650      	mov	r0, sl
 8006084:	f7ff fec6 	bl	8005e14 <_free_r>
 8006088:	e7c7      	b.n	800601a <__ssputs_r+0x46>
	...

0800608c <_svfiprintf_r>:
 800608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	4698      	mov	r8, r3
 8006092:	898b      	ldrh	r3, [r1, #12]
 8006094:	061b      	lsls	r3, r3, #24
 8006096:	b09d      	sub	sp, #116	; 0x74
 8006098:	4607      	mov	r7, r0
 800609a:	460d      	mov	r5, r1
 800609c:	4614      	mov	r4, r2
 800609e:	d50e      	bpl.n	80060be <_svfiprintf_r+0x32>
 80060a0:	690b      	ldr	r3, [r1, #16]
 80060a2:	b963      	cbnz	r3, 80060be <_svfiprintf_r+0x32>
 80060a4:	2140      	movs	r1, #64	; 0x40
 80060a6:	f7ff ff21 	bl	8005eec <_malloc_r>
 80060aa:	6028      	str	r0, [r5, #0]
 80060ac:	6128      	str	r0, [r5, #16]
 80060ae:	b920      	cbnz	r0, 80060ba <_svfiprintf_r+0x2e>
 80060b0:	230c      	movs	r3, #12
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	e0d1      	b.n	800625e <_svfiprintf_r+0x1d2>
 80060ba:	2340      	movs	r3, #64	; 0x40
 80060bc:	616b      	str	r3, [r5, #20]
 80060be:	2300      	movs	r3, #0
 80060c0:	9309      	str	r3, [sp, #36]	; 0x24
 80060c2:	2320      	movs	r3, #32
 80060c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060cc:	2330      	movs	r3, #48	; 0x30
 80060ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006278 <_svfiprintf_r+0x1ec>
 80060d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d6:	f04f 0901 	mov.w	r9, #1
 80060da:	4623      	mov	r3, r4
 80060dc:	469a      	mov	sl, r3
 80060de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e2:	b10a      	cbz	r2, 80060e8 <_svfiprintf_r+0x5c>
 80060e4:	2a25      	cmp	r2, #37	; 0x25
 80060e6:	d1f9      	bne.n	80060dc <_svfiprintf_r+0x50>
 80060e8:	ebba 0b04 	subs.w	fp, sl, r4
 80060ec:	d00b      	beq.n	8006106 <_svfiprintf_r+0x7a>
 80060ee:	465b      	mov	r3, fp
 80060f0:	4622      	mov	r2, r4
 80060f2:	4629      	mov	r1, r5
 80060f4:	4638      	mov	r0, r7
 80060f6:	f7ff ff6d 	bl	8005fd4 <__ssputs_r>
 80060fa:	3001      	adds	r0, #1
 80060fc:	f000 80aa 	beq.w	8006254 <_svfiprintf_r+0x1c8>
 8006100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006102:	445a      	add	r2, fp
 8006104:	9209      	str	r2, [sp, #36]	; 0x24
 8006106:	f89a 3000 	ldrb.w	r3, [sl]
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 80a2 	beq.w	8006254 <_svfiprintf_r+0x1c8>
 8006110:	2300      	movs	r3, #0
 8006112:	f04f 32ff 	mov.w	r2, #4294967295
 8006116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800611a:	f10a 0a01 	add.w	sl, sl, #1
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	9307      	str	r3, [sp, #28]
 8006122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006126:	931a      	str	r3, [sp, #104]	; 0x68
 8006128:	4654      	mov	r4, sl
 800612a:	2205      	movs	r2, #5
 800612c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006130:	4851      	ldr	r0, [pc, #324]	; (8006278 <_svfiprintf_r+0x1ec>)
 8006132:	f7fa f8a5 	bl	8000280 <memchr>
 8006136:	9a04      	ldr	r2, [sp, #16]
 8006138:	b9d8      	cbnz	r0, 8006172 <_svfiprintf_r+0xe6>
 800613a:	06d0      	lsls	r0, r2, #27
 800613c:	bf44      	itt	mi
 800613e:	2320      	movmi	r3, #32
 8006140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006144:	0711      	lsls	r1, r2, #28
 8006146:	bf44      	itt	mi
 8006148:	232b      	movmi	r3, #43	; 0x2b
 800614a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614e:	f89a 3000 	ldrb.w	r3, [sl]
 8006152:	2b2a      	cmp	r3, #42	; 0x2a
 8006154:	d015      	beq.n	8006182 <_svfiprintf_r+0xf6>
 8006156:	9a07      	ldr	r2, [sp, #28]
 8006158:	4654      	mov	r4, sl
 800615a:	2000      	movs	r0, #0
 800615c:	f04f 0c0a 	mov.w	ip, #10
 8006160:	4621      	mov	r1, r4
 8006162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006166:	3b30      	subs	r3, #48	; 0x30
 8006168:	2b09      	cmp	r3, #9
 800616a:	d94e      	bls.n	800620a <_svfiprintf_r+0x17e>
 800616c:	b1b0      	cbz	r0, 800619c <_svfiprintf_r+0x110>
 800616e:	9207      	str	r2, [sp, #28]
 8006170:	e014      	b.n	800619c <_svfiprintf_r+0x110>
 8006172:	eba0 0308 	sub.w	r3, r0, r8
 8006176:	fa09 f303 	lsl.w	r3, r9, r3
 800617a:	4313      	orrs	r3, r2
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	46a2      	mov	sl, r4
 8006180:	e7d2      	b.n	8006128 <_svfiprintf_r+0x9c>
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	9103      	str	r1, [sp, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	bfbb      	ittet	lt
 800618e:	425b      	neglt	r3, r3
 8006190:	f042 0202 	orrlt.w	r2, r2, #2
 8006194:	9307      	strge	r3, [sp, #28]
 8006196:	9307      	strlt	r3, [sp, #28]
 8006198:	bfb8      	it	lt
 800619a:	9204      	strlt	r2, [sp, #16]
 800619c:	7823      	ldrb	r3, [r4, #0]
 800619e:	2b2e      	cmp	r3, #46	; 0x2e
 80061a0:	d10c      	bne.n	80061bc <_svfiprintf_r+0x130>
 80061a2:	7863      	ldrb	r3, [r4, #1]
 80061a4:	2b2a      	cmp	r3, #42	; 0x2a
 80061a6:	d135      	bne.n	8006214 <_svfiprintf_r+0x188>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9203      	str	r2, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfb8      	it	lt
 80061b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80061b8:	3402      	adds	r4, #2
 80061ba:	9305      	str	r3, [sp, #20]
 80061bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006288 <_svfiprintf_r+0x1fc>
 80061c0:	7821      	ldrb	r1, [r4, #0]
 80061c2:	2203      	movs	r2, #3
 80061c4:	4650      	mov	r0, sl
 80061c6:	f7fa f85b 	bl	8000280 <memchr>
 80061ca:	b140      	cbz	r0, 80061de <_svfiprintf_r+0x152>
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	eba0 000a 	sub.w	r0, r0, sl
 80061d2:	fa03 f000 	lsl.w	r0, r3, r0
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	4303      	orrs	r3, r0
 80061da:	3401      	adds	r4, #1
 80061dc:	9304      	str	r3, [sp, #16]
 80061de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e2:	4826      	ldr	r0, [pc, #152]	; (800627c <_svfiprintf_r+0x1f0>)
 80061e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e8:	2206      	movs	r2, #6
 80061ea:	f7fa f849 	bl	8000280 <memchr>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d038      	beq.n	8006264 <_svfiprintf_r+0x1d8>
 80061f2:	4b23      	ldr	r3, [pc, #140]	; (8006280 <_svfiprintf_r+0x1f4>)
 80061f4:	bb1b      	cbnz	r3, 800623e <_svfiprintf_r+0x1b2>
 80061f6:	9b03      	ldr	r3, [sp, #12]
 80061f8:	3307      	adds	r3, #7
 80061fa:	f023 0307 	bic.w	r3, r3, #7
 80061fe:	3308      	adds	r3, #8
 8006200:	9303      	str	r3, [sp, #12]
 8006202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006204:	4433      	add	r3, r6
 8006206:	9309      	str	r3, [sp, #36]	; 0x24
 8006208:	e767      	b.n	80060da <_svfiprintf_r+0x4e>
 800620a:	fb0c 3202 	mla	r2, ip, r2, r3
 800620e:	460c      	mov	r4, r1
 8006210:	2001      	movs	r0, #1
 8006212:	e7a5      	b.n	8006160 <_svfiprintf_r+0xd4>
 8006214:	2300      	movs	r3, #0
 8006216:	3401      	adds	r4, #1
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	4619      	mov	r1, r3
 800621c:	f04f 0c0a 	mov.w	ip, #10
 8006220:	4620      	mov	r0, r4
 8006222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006226:	3a30      	subs	r2, #48	; 0x30
 8006228:	2a09      	cmp	r2, #9
 800622a:	d903      	bls.n	8006234 <_svfiprintf_r+0x1a8>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0c5      	beq.n	80061bc <_svfiprintf_r+0x130>
 8006230:	9105      	str	r1, [sp, #20]
 8006232:	e7c3      	b.n	80061bc <_svfiprintf_r+0x130>
 8006234:	fb0c 2101 	mla	r1, ip, r1, r2
 8006238:	4604      	mov	r4, r0
 800623a:	2301      	movs	r3, #1
 800623c:	e7f0      	b.n	8006220 <_svfiprintf_r+0x194>
 800623e:	ab03      	add	r3, sp, #12
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	462a      	mov	r2, r5
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <_svfiprintf_r+0x1f8>)
 8006246:	a904      	add	r1, sp, #16
 8006248:	4638      	mov	r0, r7
 800624a:	f3af 8000 	nop.w
 800624e:	1c42      	adds	r2, r0, #1
 8006250:	4606      	mov	r6, r0
 8006252:	d1d6      	bne.n	8006202 <_svfiprintf_r+0x176>
 8006254:	89ab      	ldrh	r3, [r5, #12]
 8006256:	065b      	lsls	r3, r3, #25
 8006258:	f53f af2c 	bmi.w	80060b4 <_svfiprintf_r+0x28>
 800625c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800625e:	b01d      	add	sp, #116	; 0x74
 8006260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	462a      	mov	r2, r5
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <_svfiprintf_r+0x1f8>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	4638      	mov	r0, r7
 8006270:	f000 f9d4 	bl	800661c <_printf_i>
 8006274:	e7eb      	b.n	800624e <_svfiprintf_r+0x1c2>
 8006276:	bf00      	nop
 8006278:	08006c5c 	.word	0x08006c5c
 800627c:	08006c66 	.word	0x08006c66
 8006280:	00000000 	.word	0x00000000
 8006284:	08005fd5 	.word	0x08005fd5
 8006288:	08006c62 	.word	0x08006c62

0800628c <__sfputc_r>:
 800628c:	6893      	ldr	r3, [r2, #8]
 800628e:	3b01      	subs	r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	b410      	push	{r4}
 8006294:	6093      	str	r3, [r2, #8]
 8006296:	da08      	bge.n	80062aa <__sfputc_r+0x1e>
 8006298:	6994      	ldr	r4, [r2, #24]
 800629a:	42a3      	cmp	r3, r4
 800629c:	db01      	blt.n	80062a2 <__sfputc_r+0x16>
 800629e:	290a      	cmp	r1, #10
 80062a0:	d103      	bne.n	80062aa <__sfputc_r+0x1e>
 80062a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a6:	f7ff bad5 	b.w	8005854 <__swbuf_r>
 80062aa:	6813      	ldr	r3, [r2, #0]
 80062ac:	1c58      	adds	r0, r3, #1
 80062ae:	6010      	str	r0, [r2, #0]
 80062b0:	7019      	strb	r1, [r3, #0]
 80062b2:	4608      	mov	r0, r1
 80062b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <__sfputs_r>:
 80062ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062bc:	4606      	mov	r6, r0
 80062be:	460f      	mov	r7, r1
 80062c0:	4614      	mov	r4, r2
 80062c2:	18d5      	adds	r5, r2, r3
 80062c4:	42ac      	cmp	r4, r5
 80062c6:	d101      	bne.n	80062cc <__sfputs_r+0x12>
 80062c8:	2000      	movs	r0, #0
 80062ca:	e007      	b.n	80062dc <__sfputs_r+0x22>
 80062cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d0:	463a      	mov	r2, r7
 80062d2:	4630      	mov	r0, r6
 80062d4:	f7ff ffda 	bl	800628c <__sfputc_r>
 80062d8:	1c43      	adds	r3, r0, #1
 80062da:	d1f3      	bne.n	80062c4 <__sfputs_r+0xa>
 80062dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062e0 <_vfiprintf_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	460d      	mov	r5, r1
 80062e6:	b09d      	sub	sp, #116	; 0x74
 80062e8:	4614      	mov	r4, r2
 80062ea:	4698      	mov	r8, r3
 80062ec:	4606      	mov	r6, r0
 80062ee:	b118      	cbz	r0, 80062f8 <_vfiprintf_r+0x18>
 80062f0:	6983      	ldr	r3, [r0, #24]
 80062f2:	b90b      	cbnz	r3, 80062f8 <_vfiprintf_r+0x18>
 80062f4:	f7ff fc88 	bl	8005c08 <__sinit>
 80062f8:	4b89      	ldr	r3, [pc, #548]	; (8006520 <_vfiprintf_r+0x240>)
 80062fa:	429d      	cmp	r5, r3
 80062fc:	d11b      	bne.n	8006336 <_vfiprintf_r+0x56>
 80062fe:	6875      	ldr	r5, [r6, #4]
 8006300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006302:	07d9      	lsls	r1, r3, #31
 8006304:	d405      	bmi.n	8006312 <_vfiprintf_r+0x32>
 8006306:	89ab      	ldrh	r3, [r5, #12]
 8006308:	059a      	lsls	r2, r3, #22
 800630a:	d402      	bmi.n	8006312 <_vfiprintf_r+0x32>
 800630c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800630e:	f7ff fd19 	bl	8005d44 <__retarget_lock_acquire_recursive>
 8006312:	89ab      	ldrh	r3, [r5, #12]
 8006314:	071b      	lsls	r3, r3, #28
 8006316:	d501      	bpl.n	800631c <_vfiprintf_r+0x3c>
 8006318:	692b      	ldr	r3, [r5, #16]
 800631a:	b9eb      	cbnz	r3, 8006358 <_vfiprintf_r+0x78>
 800631c:	4629      	mov	r1, r5
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff faea 	bl	80058f8 <__swsetup_r>
 8006324:	b1c0      	cbz	r0, 8006358 <_vfiprintf_r+0x78>
 8006326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006328:	07dc      	lsls	r4, r3, #31
 800632a:	d50e      	bpl.n	800634a <_vfiprintf_r+0x6a>
 800632c:	f04f 30ff 	mov.w	r0, #4294967295
 8006330:	b01d      	add	sp, #116	; 0x74
 8006332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006336:	4b7b      	ldr	r3, [pc, #492]	; (8006524 <_vfiprintf_r+0x244>)
 8006338:	429d      	cmp	r5, r3
 800633a:	d101      	bne.n	8006340 <_vfiprintf_r+0x60>
 800633c:	68b5      	ldr	r5, [r6, #8]
 800633e:	e7df      	b.n	8006300 <_vfiprintf_r+0x20>
 8006340:	4b79      	ldr	r3, [pc, #484]	; (8006528 <_vfiprintf_r+0x248>)
 8006342:	429d      	cmp	r5, r3
 8006344:	bf08      	it	eq
 8006346:	68f5      	ldreq	r5, [r6, #12]
 8006348:	e7da      	b.n	8006300 <_vfiprintf_r+0x20>
 800634a:	89ab      	ldrh	r3, [r5, #12]
 800634c:	0598      	lsls	r0, r3, #22
 800634e:	d4ed      	bmi.n	800632c <_vfiprintf_r+0x4c>
 8006350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006352:	f7ff fcf8 	bl	8005d46 <__retarget_lock_release_recursive>
 8006356:	e7e9      	b.n	800632c <_vfiprintf_r+0x4c>
 8006358:	2300      	movs	r3, #0
 800635a:	9309      	str	r3, [sp, #36]	; 0x24
 800635c:	2320      	movs	r3, #32
 800635e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006362:	f8cd 800c 	str.w	r8, [sp, #12]
 8006366:	2330      	movs	r3, #48	; 0x30
 8006368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800652c <_vfiprintf_r+0x24c>
 800636c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006370:	f04f 0901 	mov.w	r9, #1
 8006374:	4623      	mov	r3, r4
 8006376:	469a      	mov	sl, r3
 8006378:	f813 2b01 	ldrb.w	r2, [r3], #1
 800637c:	b10a      	cbz	r2, 8006382 <_vfiprintf_r+0xa2>
 800637e:	2a25      	cmp	r2, #37	; 0x25
 8006380:	d1f9      	bne.n	8006376 <_vfiprintf_r+0x96>
 8006382:	ebba 0b04 	subs.w	fp, sl, r4
 8006386:	d00b      	beq.n	80063a0 <_vfiprintf_r+0xc0>
 8006388:	465b      	mov	r3, fp
 800638a:	4622      	mov	r2, r4
 800638c:	4629      	mov	r1, r5
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ff93 	bl	80062ba <__sfputs_r>
 8006394:	3001      	adds	r0, #1
 8006396:	f000 80aa 	beq.w	80064ee <_vfiprintf_r+0x20e>
 800639a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800639c:	445a      	add	r2, fp
 800639e:	9209      	str	r2, [sp, #36]	; 0x24
 80063a0:	f89a 3000 	ldrb.w	r3, [sl]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a2 	beq.w	80064ee <_vfiprintf_r+0x20e>
 80063aa:	2300      	movs	r3, #0
 80063ac:	f04f 32ff 	mov.w	r2, #4294967295
 80063b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063b4:	f10a 0a01 	add.w	sl, sl, #1
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	9307      	str	r3, [sp, #28]
 80063bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c0:	931a      	str	r3, [sp, #104]	; 0x68
 80063c2:	4654      	mov	r4, sl
 80063c4:	2205      	movs	r2, #5
 80063c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ca:	4858      	ldr	r0, [pc, #352]	; (800652c <_vfiprintf_r+0x24c>)
 80063cc:	f7f9 ff58 	bl	8000280 <memchr>
 80063d0:	9a04      	ldr	r2, [sp, #16]
 80063d2:	b9d8      	cbnz	r0, 800640c <_vfiprintf_r+0x12c>
 80063d4:	06d1      	lsls	r1, r2, #27
 80063d6:	bf44      	itt	mi
 80063d8:	2320      	movmi	r3, #32
 80063da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063de:	0713      	lsls	r3, r2, #28
 80063e0:	bf44      	itt	mi
 80063e2:	232b      	movmi	r3, #43	; 0x2b
 80063e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063e8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ec:	2b2a      	cmp	r3, #42	; 0x2a
 80063ee:	d015      	beq.n	800641c <_vfiprintf_r+0x13c>
 80063f0:	9a07      	ldr	r2, [sp, #28]
 80063f2:	4654      	mov	r4, sl
 80063f4:	2000      	movs	r0, #0
 80063f6:	f04f 0c0a 	mov.w	ip, #10
 80063fa:	4621      	mov	r1, r4
 80063fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006400:	3b30      	subs	r3, #48	; 0x30
 8006402:	2b09      	cmp	r3, #9
 8006404:	d94e      	bls.n	80064a4 <_vfiprintf_r+0x1c4>
 8006406:	b1b0      	cbz	r0, 8006436 <_vfiprintf_r+0x156>
 8006408:	9207      	str	r2, [sp, #28]
 800640a:	e014      	b.n	8006436 <_vfiprintf_r+0x156>
 800640c:	eba0 0308 	sub.w	r3, r0, r8
 8006410:	fa09 f303 	lsl.w	r3, r9, r3
 8006414:	4313      	orrs	r3, r2
 8006416:	9304      	str	r3, [sp, #16]
 8006418:	46a2      	mov	sl, r4
 800641a:	e7d2      	b.n	80063c2 <_vfiprintf_r+0xe2>
 800641c:	9b03      	ldr	r3, [sp, #12]
 800641e:	1d19      	adds	r1, r3, #4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	9103      	str	r1, [sp, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	bfbb      	ittet	lt
 8006428:	425b      	neglt	r3, r3
 800642a:	f042 0202 	orrlt.w	r2, r2, #2
 800642e:	9307      	strge	r3, [sp, #28]
 8006430:	9307      	strlt	r3, [sp, #28]
 8006432:	bfb8      	it	lt
 8006434:	9204      	strlt	r2, [sp, #16]
 8006436:	7823      	ldrb	r3, [r4, #0]
 8006438:	2b2e      	cmp	r3, #46	; 0x2e
 800643a:	d10c      	bne.n	8006456 <_vfiprintf_r+0x176>
 800643c:	7863      	ldrb	r3, [r4, #1]
 800643e:	2b2a      	cmp	r3, #42	; 0x2a
 8006440:	d135      	bne.n	80064ae <_vfiprintf_r+0x1ce>
 8006442:	9b03      	ldr	r3, [sp, #12]
 8006444:	1d1a      	adds	r2, r3, #4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	9203      	str	r2, [sp, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	bfb8      	it	lt
 800644e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006452:	3402      	adds	r4, #2
 8006454:	9305      	str	r3, [sp, #20]
 8006456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800653c <_vfiprintf_r+0x25c>
 800645a:	7821      	ldrb	r1, [r4, #0]
 800645c:	2203      	movs	r2, #3
 800645e:	4650      	mov	r0, sl
 8006460:	f7f9 ff0e 	bl	8000280 <memchr>
 8006464:	b140      	cbz	r0, 8006478 <_vfiprintf_r+0x198>
 8006466:	2340      	movs	r3, #64	; 0x40
 8006468:	eba0 000a 	sub.w	r0, r0, sl
 800646c:	fa03 f000 	lsl.w	r0, r3, r0
 8006470:	9b04      	ldr	r3, [sp, #16]
 8006472:	4303      	orrs	r3, r0
 8006474:	3401      	adds	r4, #1
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	482c      	ldr	r0, [pc, #176]	; (8006530 <_vfiprintf_r+0x250>)
 800647e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006482:	2206      	movs	r2, #6
 8006484:	f7f9 fefc 	bl	8000280 <memchr>
 8006488:	2800      	cmp	r0, #0
 800648a:	d03f      	beq.n	800650c <_vfiprintf_r+0x22c>
 800648c:	4b29      	ldr	r3, [pc, #164]	; (8006534 <_vfiprintf_r+0x254>)
 800648e:	bb1b      	cbnz	r3, 80064d8 <_vfiprintf_r+0x1f8>
 8006490:	9b03      	ldr	r3, [sp, #12]
 8006492:	3307      	adds	r3, #7
 8006494:	f023 0307 	bic.w	r3, r3, #7
 8006498:	3308      	adds	r3, #8
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649e:	443b      	add	r3, r7
 80064a0:	9309      	str	r3, [sp, #36]	; 0x24
 80064a2:	e767      	b.n	8006374 <_vfiprintf_r+0x94>
 80064a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80064a8:	460c      	mov	r4, r1
 80064aa:	2001      	movs	r0, #1
 80064ac:	e7a5      	b.n	80063fa <_vfiprintf_r+0x11a>
 80064ae:	2300      	movs	r3, #0
 80064b0:	3401      	adds	r4, #1
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	4619      	mov	r1, r3
 80064b6:	f04f 0c0a 	mov.w	ip, #10
 80064ba:	4620      	mov	r0, r4
 80064bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c0:	3a30      	subs	r2, #48	; 0x30
 80064c2:	2a09      	cmp	r2, #9
 80064c4:	d903      	bls.n	80064ce <_vfiprintf_r+0x1ee>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0c5      	beq.n	8006456 <_vfiprintf_r+0x176>
 80064ca:	9105      	str	r1, [sp, #20]
 80064cc:	e7c3      	b.n	8006456 <_vfiprintf_r+0x176>
 80064ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d2:	4604      	mov	r4, r0
 80064d4:	2301      	movs	r3, #1
 80064d6:	e7f0      	b.n	80064ba <_vfiprintf_r+0x1da>
 80064d8:	ab03      	add	r3, sp, #12
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	462a      	mov	r2, r5
 80064de:	4b16      	ldr	r3, [pc, #88]	; (8006538 <_vfiprintf_r+0x258>)
 80064e0:	a904      	add	r1, sp, #16
 80064e2:	4630      	mov	r0, r6
 80064e4:	f3af 8000 	nop.w
 80064e8:	4607      	mov	r7, r0
 80064ea:	1c78      	adds	r0, r7, #1
 80064ec:	d1d6      	bne.n	800649c <_vfiprintf_r+0x1bc>
 80064ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064f0:	07d9      	lsls	r1, r3, #31
 80064f2:	d405      	bmi.n	8006500 <_vfiprintf_r+0x220>
 80064f4:	89ab      	ldrh	r3, [r5, #12]
 80064f6:	059a      	lsls	r2, r3, #22
 80064f8:	d402      	bmi.n	8006500 <_vfiprintf_r+0x220>
 80064fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064fc:	f7ff fc23 	bl	8005d46 <__retarget_lock_release_recursive>
 8006500:	89ab      	ldrh	r3, [r5, #12]
 8006502:	065b      	lsls	r3, r3, #25
 8006504:	f53f af12 	bmi.w	800632c <_vfiprintf_r+0x4c>
 8006508:	9809      	ldr	r0, [sp, #36]	; 0x24
 800650a:	e711      	b.n	8006330 <_vfiprintf_r+0x50>
 800650c:	ab03      	add	r3, sp, #12
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	462a      	mov	r2, r5
 8006512:	4b09      	ldr	r3, [pc, #36]	; (8006538 <_vfiprintf_r+0x258>)
 8006514:	a904      	add	r1, sp, #16
 8006516:	4630      	mov	r0, r6
 8006518:	f000 f880 	bl	800661c <_printf_i>
 800651c:	e7e4      	b.n	80064e8 <_vfiprintf_r+0x208>
 800651e:	bf00      	nop
 8006520:	08006c1c 	.word	0x08006c1c
 8006524:	08006c3c 	.word	0x08006c3c
 8006528:	08006bfc 	.word	0x08006bfc
 800652c:	08006c5c 	.word	0x08006c5c
 8006530:	08006c66 	.word	0x08006c66
 8006534:	00000000 	.word	0x00000000
 8006538:	080062bb 	.word	0x080062bb
 800653c:	08006c62 	.word	0x08006c62

08006540 <_printf_common>:
 8006540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006544:	4616      	mov	r6, r2
 8006546:	4699      	mov	r9, r3
 8006548:	688a      	ldr	r2, [r1, #8]
 800654a:	690b      	ldr	r3, [r1, #16]
 800654c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006550:	4293      	cmp	r3, r2
 8006552:	bfb8      	it	lt
 8006554:	4613      	movlt	r3, r2
 8006556:	6033      	str	r3, [r6, #0]
 8006558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800655c:	4607      	mov	r7, r0
 800655e:	460c      	mov	r4, r1
 8006560:	b10a      	cbz	r2, 8006566 <_printf_common+0x26>
 8006562:	3301      	adds	r3, #1
 8006564:	6033      	str	r3, [r6, #0]
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	0699      	lsls	r1, r3, #26
 800656a:	bf42      	ittt	mi
 800656c:	6833      	ldrmi	r3, [r6, #0]
 800656e:	3302      	addmi	r3, #2
 8006570:	6033      	strmi	r3, [r6, #0]
 8006572:	6825      	ldr	r5, [r4, #0]
 8006574:	f015 0506 	ands.w	r5, r5, #6
 8006578:	d106      	bne.n	8006588 <_printf_common+0x48>
 800657a:	f104 0a19 	add.w	sl, r4, #25
 800657e:	68e3      	ldr	r3, [r4, #12]
 8006580:	6832      	ldr	r2, [r6, #0]
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	42ab      	cmp	r3, r5
 8006586:	dc26      	bgt.n	80065d6 <_printf_common+0x96>
 8006588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800658c:	1e13      	subs	r3, r2, #0
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	bf18      	it	ne
 8006592:	2301      	movne	r3, #1
 8006594:	0692      	lsls	r2, r2, #26
 8006596:	d42b      	bmi.n	80065f0 <_printf_common+0xb0>
 8006598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800659c:	4649      	mov	r1, r9
 800659e:	4638      	mov	r0, r7
 80065a0:	47c0      	blx	r8
 80065a2:	3001      	adds	r0, #1
 80065a4:	d01e      	beq.n	80065e4 <_printf_common+0xa4>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	68e5      	ldr	r5, [r4, #12]
 80065aa:	6832      	ldr	r2, [r6, #0]
 80065ac:	f003 0306 	and.w	r3, r3, #6
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	bf08      	it	eq
 80065b4:	1aad      	subeq	r5, r5, r2
 80065b6:	68a3      	ldr	r3, [r4, #8]
 80065b8:	6922      	ldr	r2, [r4, #16]
 80065ba:	bf0c      	ite	eq
 80065bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065c0:	2500      	movne	r5, #0
 80065c2:	4293      	cmp	r3, r2
 80065c4:	bfc4      	itt	gt
 80065c6:	1a9b      	subgt	r3, r3, r2
 80065c8:	18ed      	addgt	r5, r5, r3
 80065ca:	2600      	movs	r6, #0
 80065cc:	341a      	adds	r4, #26
 80065ce:	42b5      	cmp	r5, r6
 80065d0:	d11a      	bne.n	8006608 <_printf_common+0xc8>
 80065d2:	2000      	movs	r0, #0
 80065d4:	e008      	b.n	80065e8 <_printf_common+0xa8>
 80065d6:	2301      	movs	r3, #1
 80065d8:	4652      	mov	r2, sl
 80065da:	4649      	mov	r1, r9
 80065dc:	4638      	mov	r0, r7
 80065de:	47c0      	blx	r8
 80065e0:	3001      	adds	r0, #1
 80065e2:	d103      	bne.n	80065ec <_printf_common+0xac>
 80065e4:	f04f 30ff 	mov.w	r0, #4294967295
 80065e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ec:	3501      	adds	r5, #1
 80065ee:	e7c6      	b.n	800657e <_printf_common+0x3e>
 80065f0:	18e1      	adds	r1, r4, r3
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	2030      	movs	r0, #48	; 0x30
 80065f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065fa:	4422      	add	r2, r4
 80065fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006604:	3302      	adds	r3, #2
 8006606:	e7c7      	b.n	8006598 <_printf_common+0x58>
 8006608:	2301      	movs	r3, #1
 800660a:	4622      	mov	r2, r4
 800660c:	4649      	mov	r1, r9
 800660e:	4638      	mov	r0, r7
 8006610:	47c0      	blx	r8
 8006612:	3001      	adds	r0, #1
 8006614:	d0e6      	beq.n	80065e4 <_printf_common+0xa4>
 8006616:	3601      	adds	r6, #1
 8006618:	e7d9      	b.n	80065ce <_printf_common+0x8e>
	...

0800661c <_printf_i>:
 800661c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006620:	7e0f      	ldrb	r7, [r1, #24]
 8006622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006624:	2f78      	cmp	r7, #120	; 0x78
 8006626:	4691      	mov	r9, r2
 8006628:	4680      	mov	r8, r0
 800662a:	460c      	mov	r4, r1
 800662c:	469a      	mov	sl, r3
 800662e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006632:	d807      	bhi.n	8006644 <_printf_i+0x28>
 8006634:	2f62      	cmp	r7, #98	; 0x62
 8006636:	d80a      	bhi.n	800664e <_printf_i+0x32>
 8006638:	2f00      	cmp	r7, #0
 800663a:	f000 80d8 	beq.w	80067ee <_printf_i+0x1d2>
 800663e:	2f58      	cmp	r7, #88	; 0x58
 8006640:	f000 80a3 	beq.w	800678a <_printf_i+0x16e>
 8006644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800664c:	e03a      	b.n	80066c4 <_printf_i+0xa8>
 800664e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006652:	2b15      	cmp	r3, #21
 8006654:	d8f6      	bhi.n	8006644 <_printf_i+0x28>
 8006656:	a101      	add	r1, pc, #4	; (adr r1, 800665c <_printf_i+0x40>)
 8006658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800665c:	080066b5 	.word	0x080066b5
 8006660:	080066c9 	.word	0x080066c9
 8006664:	08006645 	.word	0x08006645
 8006668:	08006645 	.word	0x08006645
 800666c:	08006645 	.word	0x08006645
 8006670:	08006645 	.word	0x08006645
 8006674:	080066c9 	.word	0x080066c9
 8006678:	08006645 	.word	0x08006645
 800667c:	08006645 	.word	0x08006645
 8006680:	08006645 	.word	0x08006645
 8006684:	08006645 	.word	0x08006645
 8006688:	080067d5 	.word	0x080067d5
 800668c:	080066f9 	.word	0x080066f9
 8006690:	080067b7 	.word	0x080067b7
 8006694:	08006645 	.word	0x08006645
 8006698:	08006645 	.word	0x08006645
 800669c:	080067f7 	.word	0x080067f7
 80066a0:	08006645 	.word	0x08006645
 80066a4:	080066f9 	.word	0x080066f9
 80066a8:	08006645 	.word	0x08006645
 80066ac:	08006645 	.word	0x08006645
 80066b0:	080067bf 	.word	0x080067bf
 80066b4:	682b      	ldr	r3, [r5, #0]
 80066b6:	1d1a      	adds	r2, r3, #4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	602a      	str	r2, [r5, #0]
 80066bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066c4:	2301      	movs	r3, #1
 80066c6:	e0a3      	b.n	8006810 <_printf_i+0x1f4>
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	6829      	ldr	r1, [r5, #0]
 80066cc:	0606      	lsls	r6, r0, #24
 80066ce:	f101 0304 	add.w	r3, r1, #4
 80066d2:	d50a      	bpl.n	80066ea <_printf_i+0xce>
 80066d4:	680e      	ldr	r6, [r1, #0]
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	2e00      	cmp	r6, #0
 80066da:	da03      	bge.n	80066e4 <_printf_i+0xc8>
 80066dc:	232d      	movs	r3, #45	; 0x2d
 80066de:	4276      	negs	r6, r6
 80066e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e4:	485e      	ldr	r0, [pc, #376]	; (8006860 <_printf_i+0x244>)
 80066e6:	230a      	movs	r3, #10
 80066e8:	e019      	b.n	800671e <_printf_i+0x102>
 80066ea:	680e      	ldr	r6, [r1, #0]
 80066ec:	602b      	str	r3, [r5, #0]
 80066ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066f2:	bf18      	it	ne
 80066f4:	b236      	sxthne	r6, r6
 80066f6:	e7ef      	b.n	80066d8 <_printf_i+0xbc>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	1d19      	adds	r1, r3, #4
 80066fe:	6029      	str	r1, [r5, #0]
 8006700:	0601      	lsls	r1, r0, #24
 8006702:	d501      	bpl.n	8006708 <_printf_i+0xec>
 8006704:	681e      	ldr	r6, [r3, #0]
 8006706:	e002      	b.n	800670e <_printf_i+0xf2>
 8006708:	0646      	lsls	r6, r0, #25
 800670a:	d5fb      	bpl.n	8006704 <_printf_i+0xe8>
 800670c:	881e      	ldrh	r6, [r3, #0]
 800670e:	4854      	ldr	r0, [pc, #336]	; (8006860 <_printf_i+0x244>)
 8006710:	2f6f      	cmp	r7, #111	; 0x6f
 8006712:	bf0c      	ite	eq
 8006714:	2308      	moveq	r3, #8
 8006716:	230a      	movne	r3, #10
 8006718:	2100      	movs	r1, #0
 800671a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800671e:	6865      	ldr	r5, [r4, #4]
 8006720:	60a5      	str	r5, [r4, #8]
 8006722:	2d00      	cmp	r5, #0
 8006724:	bfa2      	ittt	ge
 8006726:	6821      	ldrge	r1, [r4, #0]
 8006728:	f021 0104 	bicge.w	r1, r1, #4
 800672c:	6021      	strge	r1, [r4, #0]
 800672e:	b90e      	cbnz	r6, 8006734 <_printf_i+0x118>
 8006730:	2d00      	cmp	r5, #0
 8006732:	d04d      	beq.n	80067d0 <_printf_i+0x1b4>
 8006734:	4615      	mov	r5, r2
 8006736:	fbb6 f1f3 	udiv	r1, r6, r3
 800673a:	fb03 6711 	mls	r7, r3, r1, r6
 800673e:	5dc7      	ldrb	r7, [r0, r7]
 8006740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006744:	4637      	mov	r7, r6
 8006746:	42bb      	cmp	r3, r7
 8006748:	460e      	mov	r6, r1
 800674a:	d9f4      	bls.n	8006736 <_printf_i+0x11a>
 800674c:	2b08      	cmp	r3, #8
 800674e:	d10b      	bne.n	8006768 <_printf_i+0x14c>
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	07de      	lsls	r6, r3, #31
 8006754:	d508      	bpl.n	8006768 <_printf_i+0x14c>
 8006756:	6923      	ldr	r3, [r4, #16]
 8006758:	6861      	ldr	r1, [r4, #4]
 800675a:	4299      	cmp	r1, r3
 800675c:	bfde      	ittt	le
 800675e:	2330      	movle	r3, #48	; 0x30
 8006760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006768:	1b52      	subs	r2, r2, r5
 800676a:	6122      	str	r2, [r4, #16]
 800676c:	f8cd a000 	str.w	sl, [sp]
 8006770:	464b      	mov	r3, r9
 8006772:	aa03      	add	r2, sp, #12
 8006774:	4621      	mov	r1, r4
 8006776:	4640      	mov	r0, r8
 8006778:	f7ff fee2 	bl	8006540 <_printf_common>
 800677c:	3001      	adds	r0, #1
 800677e:	d14c      	bne.n	800681a <_printf_i+0x1fe>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295
 8006784:	b004      	add	sp, #16
 8006786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678a:	4835      	ldr	r0, [pc, #212]	; (8006860 <_printf_i+0x244>)
 800678c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006790:	6829      	ldr	r1, [r5, #0]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	f851 6b04 	ldr.w	r6, [r1], #4
 8006798:	6029      	str	r1, [r5, #0]
 800679a:	061d      	lsls	r5, r3, #24
 800679c:	d514      	bpl.n	80067c8 <_printf_i+0x1ac>
 800679e:	07df      	lsls	r7, r3, #31
 80067a0:	bf44      	itt	mi
 80067a2:	f043 0320 	orrmi.w	r3, r3, #32
 80067a6:	6023      	strmi	r3, [r4, #0]
 80067a8:	b91e      	cbnz	r6, 80067b2 <_printf_i+0x196>
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	f023 0320 	bic.w	r3, r3, #32
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	2310      	movs	r3, #16
 80067b4:	e7b0      	b.n	8006718 <_printf_i+0xfc>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	f043 0320 	orr.w	r3, r3, #32
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	2378      	movs	r3, #120	; 0x78
 80067c0:	4828      	ldr	r0, [pc, #160]	; (8006864 <_printf_i+0x248>)
 80067c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067c6:	e7e3      	b.n	8006790 <_printf_i+0x174>
 80067c8:	0659      	lsls	r1, r3, #25
 80067ca:	bf48      	it	mi
 80067cc:	b2b6      	uxthmi	r6, r6
 80067ce:	e7e6      	b.n	800679e <_printf_i+0x182>
 80067d0:	4615      	mov	r5, r2
 80067d2:	e7bb      	b.n	800674c <_printf_i+0x130>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	6826      	ldr	r6, [r4, #0]
 80067d8:	6961      	ldr	r1, [r4, #20]
 80067da:	1d18      	adds	r0, r3, #4
 80067dc:	6028      	str	r0, [r5, #0]
 80067de:	0635      	lsls	r5, r6, #24
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	d501      	bpl.n	80067e8 <_printf_i+0x1cc>
 80067e4:	6019      	str	r1, [r3, #0]
 80067e6:	e002      	b.n	80067ee <_printf_i+0x1d2>
 80067e8:	0670      	lsls	r0, r6, #25
 80067ea:	d5fb      	bpl.n	80067e4 <_printf_i+0x1c8>
 80067ec:	8019      	strh	r1, [r3, #0]
 80067ee:	2300      	movs	r3, #0
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	4615      	mov	r5, r2
 80067f4:	e7ba      	b.n	800676c <_printf_i+0x150>
 80067f6:	682b      	ldr	r3, [r5, #0]
 80067f8:	1d1a      	adds	r2, r3, #4
 80067fa:	602a      	str	r2, [r5, #0]
 80067fc:	681d      	ldr	r5, [r3, #0]
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	2100      	movs	r1, #0
 8006802:	4628      	mov	r0, r5
 8006804:	f7f9 fd3c 	bl	8000280 <memchr>
 8006808:	b108      	cbz	r0, 800680e <_printf_i+0x1f2>
 800680a:	1b40      	subs	r0, r0, r5
 800680c:	6060      	str	r0, [r4, #4]
 800680e:	6863      	ldr	r3, [r4, #4]
 8006810:	6123      	str	r3, [r4, #16]
 8006812:	2300      	movs	r3, #0
 8006814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006818:	e7a8      	b.n	800676c <_printf_i+0x150>
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	462a      	mov	r2, r5
 800681e:	4649      	mov	r1, r9
 8006820:	4640      	mov	r0, r8
 8006822:	47d0      	blx	sl
 8006824:	3001      	adds	r0, #1
 8006826:	d0ab      	beq.n	8006780 <_printf_i+0x164>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	079b      	lsls	r3, r3, #30
 800682c:	d413      	bmi.n	8006856 <_printf_i+0x23a>
 800682e:	68e0      	ldr	r0, [r4, #12]
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	4298      	cmp	r0, r3
 8006834:	bfb8      	it	lt
 8006836:	4618      	movlt	r0, r3
 8006838:	e7a4      	b.n	8006784 <_printf_i+0x168>
 800683a:	2301      	movs	r3, #1
 800683c:	4632      	mov	r2, r6
 800683e:	4649      	mov	r1, r9
 8006840:	4640      	mov	r0, r8
 8006842:	47d0      	blx	sl
 8006844:	3001      	adds	r0, #1
 8006846:	d09b      	beq.n	8006780 <_printf_i+0x164>
 8006848:	3501      	adds	r5, #1
 800684a:	68e3      	ldr	r3, [r4, #12]
 800684c:	9903      	ldr	r1, [sp, #12]
 800684e:	1a5b      	subs	r3, r3, r1
 8006850:	42ab      	cmp	r3, r5
 8006852:	dcf2      	bgt.n	800683a <_printf_i+0x21e>
 8006854:	e7eb      	b.n	800682e <_printf_i+0x212>
 8006856:	2500      	movs	r5, #0
 8006858:	f104 0619 	add.w	r6, r4, #25
 800685c:	e7f5      	b.n	800684a <_printf_i+0x22e>
 800685e:	bf00      	nop
 8006860:	08006c6d 	.word	0x08006c6d
 8006864:	08006c7e 	.word	0x08006c7e

08006868 <_sbrk_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d06      	ldr	r5, [pc, #24]	; (8006884 <_sbrk_r+0x1c>)
 800686c:	2300      	movs	r3, #0
 800686e:	4604      	mov	r4, r0
 8006870:	4608      	mov	r0, r1
 8006872:	602b      	str	r3, [r5, #0]
 8006874:	f000 f900 	bl	8006a78 <_sbrk>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_sbrk_r+0x1a>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_sbrk_r+0x1a>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	20000920 	.word	0x20000920

08006888 <__sread>:
 8006888:	b510      	push	{r4, lr}
 800688a:	460c      	mov	r4, r1
 800688c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006890:	f000 f8d8 	bl	8006a44 <_read_r>
 8006894:	2800      	cmp	r0, #0
 8006896:	bfab      	itete	ge
 8006898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800689a:	89a3      	ldrhlt	r3, [r4, #12]
 800689c:	181b      	addge	r3, r3, r0
 800689e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068a2:	bfac      	ite	ge
 80068a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068a6:	81a3      	strhlt	r3, [r4, #12]
 80068a8:	bd10      	pop	{r4, pc}

080068aa <__swrite>:
 80068aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ae:	461f      	mov	r7, r3
 80068b0:	898b      	ldrh	r3, [r1, #12]
 80068b2:	05db      	lsls	r3, r3, #23
 80068b4:	4605      	mov	r5, r0
 80068b6:	460c      	mov	r4, r1
 80068b8:	4616      	mov	r6, r2
 80068ba:	d505      	bpl.n	80068c8 <__swrite+0x1e>
 80068bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c0:	2302      	movs	r3, #2
 80068c2:	2200      	movs	r2, #0
 80068c4:	f000 f856 	bl	8006974 <_lseek_r>
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068d2:	81a3      	strh	r3, [r4, #12]
 80068d4:	4632      	mov	r2, r6
 80068d6:	463b      	mov	r3, r7
 80068d8:	4628      	mov	r0, r5
 80068da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	f7fe bebf 	b.w	8005660 <_write_r>

080068e2 <__sseek>:
 80068e2:	b510      	push	{r4, lr}
 80068e4:	460c      	mov	r4, r1
 80068e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ea:	f000 f843 	bl	8006974 <_lseek_r>
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	bf15      	itete	ne
 80068f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80068f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068fe:	81a3      	strheq	r3, [r4, #12]
 8006900:	bf18      	it	ne
 8006902:	81a3      	strhne	r3, [r4, #12]
 8006904:	bd10      	pop	{r4, pc}

08006906 <__sclose>:
 8006906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690a:	f000 b801 	b.w	8006910 <_close_r>
	...

08006910 <_close_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4d06      	ldr	r5, [pc, #24]	; (800692c <_close_r+0x1c>)
 8006914:	2300      	movs	r3, #0
 8006916:	4604      	mov	r4, r0
 8006918:	4608      	mov	r0, r1
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	f7fa fac3 	bl	8000ea6 <_close>
 8006920:	1c43      	adds	r3, r0, #1
 8006922:	d102      	bne.n	800692a <_close_r+0x1a>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b103      	cbz	r3, 800692a <_close_r+0x1a>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	bd38      	pop	{r3, r4, r5, pc}
 800692c:	20000920 	.word	0x20000920

08006930 <_fstat_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d07      	ldr	r5, [pc, #28]	; (8006950 <_fstat_r+0x20>)
 8006934:	2300      	movs	r3, #0
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	4611      	mov	r1, r2
 800693c:	602b      	str	r3, [r5, #0]
 800693e:	f7fa fabe 	bl	8000ebe <_fstat>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	d102      	bne.n	800694c <_fstat_r+0x1c>
 8006946:	682b      	ldr	r3, [r5, #0]
 8006948:	b103      	cbz	r3, 800694c <_fstat_r+0x1c>
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	bd38      	pop	{r3, r4, r5, pc}
 800694e:	bf00      	nop
 8006950:	20000920 	.word	0x20000920

08006954 <_isatty_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d06      	ldr	r5, [pc, #24]	; (8006970 <_isatty_r+0x1c>)
 8006958:	2300      	movs	r3, #0
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fa fabd 	bl	8000ede <_isatty>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_isatty_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_isatty_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000920 	.word	0x20000920

08006974 <_lseek_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4d07      	ldr	r5, [pc, #28]	; (8006994 <_lseek_r+0x20>)
 8006978:	4604      	mov	r4, r0
 800697a:	4608      	mov	r0, r1
 800697c:	4611      	mov	r1, r2
 800697e:	2200      	movs	r2, #0
 8006980:	602a      	str	r2, [r5, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	f7fa fab6 	bl	8000ef4 <_lseek>
 8006988:	1c43      	adds	r3, r0, #1
 800698a:	d102      	bne.n	8006992 <_lseek_r+0x1e>
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	b103      	cbz	r3, 8006992 <_lseek_r+0x1e>
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	20000920 	.word	0x20000920

08006998 <memmove>:
 8006998:	4288      	cmp	r0, r1
 800699a:	b510      	push	{r4, lr}
 800699c:	eb01 0402 	add.w	r4, r1, r2
 80069a0:	d902      	bls.n	80069a8 <memmove+0x10>
 80069a2:	4284      	cmp	r4, r0
 80069a4:	4623      	mov	r3, r4
 80069a6:	d807      	bhi.n	80069b8 <memmove+0x20>
 80069a8:	1e43      	subs	r3, r0, #1
 80069aa:	42a1      	cmp	r1, r4
 80069ac:	d008      	beq.n	80069c0 <memmove+0x28>
 80069ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069b6:	e7f8      	b.n	80069aa <memmove+0x12>
 80069b8:	4402      	add	r2, r0
 80069ba:	4601      	mov	r1, r0
 80069bc:	428a      	cmp	r2, r1
 80069be:	d100      	bne.n	80069c2 <memmove+0x2a>
 80069c0:	bd10      	pop	{r4, pc}
 80069c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069ca:	e7f7      	b.n	80069bc <memmove+0x24>

080069cc <__malloc_lock>:
 80069cc:	4801      	ldr	r0, [pc, #4]	; (80069d4 <__malloc_lock+0x8>)
 80069ce:	f7ff b9b9 	b.w	8005d44 <__retarget_lock_acquire_recursive>
 80069d2:	bf00      	nop
 80069d4:	20000913 	.word	0x20000913

080069d8 <__malloc_unlock>:
 80069d8:	4801      	ldr	r0, [pc, #4]	; (80069e0 <__malloc_unlock+0x8>)
 80069da:	f7ff b9b4 	b.w	8005d46 <__retarget_lock_release_recursive>
 80069de:	bf00      	nop
 80069e0:	20000913 	.word	0x20000913

080069e4 <_realloc_r>:
 80069e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	4680      	mov	r8, r0
 80069ea:	4614      	mov	r4, r2
 80069ec:	460e      	mov	r6, r1
 80069ee:	b921      	cbnz	r1, 80069fa <_realloc_r+0x16>
 80069f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069f4:	4611      	mov	r1, r2
 80069f6:	f7ff ba79 	b.w	8005eec <_malloc_r>
 80069fa:	b92a      	cbnz	r2, 8006a08 <_realloc_r+0x24>
 80069fc:	f7ff fa0a 	bl	8005e14 <_free_r>
 8006a00:	4625      	mov	r5, r4
 8006a02:	4628      	mov	r0, r5
 8006a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a08:	f000 f82e 	bl	8006a68 <_malloc_usable_size_r>
 8006a0c:	4284      	cmp	r4, r0
 8006a0e:	4607      	mov	r7, r0
 8006a10:	d802      	bhi.n	8006a18 <_realloc_r+0x34>
 8006a12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a16:	d812      	bhi.n	8006a3e <_realloc_r+0x5a>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7ff fa66 	bl	8005eec <_malloc_r>
 8006a20:	4605      	mov	r5, r0
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d0ed      	beq.n	8006a02 <_realloc_r+0x1e>
 8006a26:	42bc      	cmp	r4, r7
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	bf28      	it	cs
 8006a2e:	463a      	movcs	r2, r7
 8006a30:	f7fe fe4c 	bl	80056cc <memcpy>
 8006a34:	4631      	mov	r1, r6
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff f9ec 	bl	8005e14 <_free_r>
 8006a3c:	e7e1      	b.n	8006a02 <_realloc_r+0x1e>
 8006a3e:	4635      	mov	r5, r6
 8006a40:	e7df      	b.n	8006a02 <_realloc_r+0x1e>
	...

08006a44 <_read_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d07      	ldr	r5, [pc, #28]	; (8006a64 <_read_r+0x20>)
 8006a48:	4604      	mov	r4, r0
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f7fa fa0a 	bl	8000e6c <_read>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_read_r+0x1e>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_read_r+0x1e>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	20000920 	.word	0x20000920

08006a68 <_malloc_usable_size_r>:
 8006a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a6c:	1f18      	subs	r0, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bfbc      	itt	lt
 8006a72:	580b      	ldrlt	r3, [r1, r0]
 8006a74:	18c0      	addlt	r0, r0, r3
 8006a76:	4770      	bx	lr

08006a78 <_sbrk>:
 8006a78:	4a04      	ldr	r2, [pc, #16]	; (8006a8c <_sbrk+0x14>)
 8006a7a:	6811      	ldr	r1, [r2, #0]
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	b909      	cbnz	r1, 8006a84 <_sbrk+0xc>
 8006a80:	4903      	ldr	r1, [pc, #12]	; (8006a90 <_sbrk+0x18>)
 8006a82:	6011      	str	r1, [r2, #0]
 8006a84:	6810      	ldr	r0, [r2, #0]
 8006a86:	4403      	add	r3, r0
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4770      	bx	lr
 8006a8c:	20000924 	.word	0x20000924
 8006a90:	20000928 	.word	0x20000928

08006a94 <_init>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr

08006aa0 <_fini>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr
