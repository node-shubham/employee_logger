
AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000237f8  0800a010  0800a010  0001a010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d808  0802d808  000405c0  2**0
                  CONTENTS
  4 .ARM          00000008  0802d808  0802d808  0003d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d810  0802d810  000405c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d810  0802d810  0003d810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d814  0802d814  0003d814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c0  20000000  0802d818  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200005c0  0802ddd8  000405c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0802ddd8  000408d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   001156c8  00000000  00000000  000405f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041bc  00000000  00000000  00155cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00159e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000a6b0  00000000  00000000  0015aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000052a6  00000000  00000000  001655a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ea57  00000000  00000000  0016a84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009596d  00000000  00000000  001992a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022ec12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b0  00000000  00000000  0022ec64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0002534a  00000000  00000000  00233614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005c0 	.word	0x200005c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ff8 	.word	0x08009ff8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c4 	.word	0x200005c4
 80001dc:	08009ff8 	.word	0x08009ff8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TIM5_IRQHandler>:
*/

void TIM5_IRQHandler(void)
{

	HAL_TIM_IRQHandler(&tim5);
 8000584:	4801      	ldr	r0, [pc, #4]	; (800058c <TIM5_IRQHandler+0x8>)
 8000586:	f003 bbc5 	b.w	8003d14 <HAL_TIM_IRQHandler>
 800058a:	bf00      	nop
 800058c:	200007c0 	.word	0x200007c0

08000590 <TIM1_TRG_COM_TIM11_IRQHandler>:

}

void TIM1_TRG_COM_TIM11_IRQHandler(void)	// Timebase source
{
  HAL_TIM_IRQHandler(&htim11);
 8000590:	4801      	ldr	r0, [pc, #4]	; (8000598 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8000592:	f003 bbbf 	b.w	8003d14 <HAL_TIM_IRQHandler>
 8000596:	bf00      	nop
 8000598:	20000870 	.word	0x20000870

0800059c <read_card.part.0>:
	return 0;
}



void read_card(void)
 800059c:	b570      	push	{r4, r5, r6, lr}
{
	if(rc522_checkCard(rfid_id))
		{
			memset(data,0,sizeof(data));
 800059e:	4c1c      	ldr	r4, [pc, #112]	; (8000610 <read_card.part.0+0x74>)
			memset(issue_uid,0,sizeof(issue_uid));
 80005a0:	4e1c      	ldr	r6, [pc, #112]	; (8000614 <read_card.part.0+0x78>)
#if (DEBUG_UART)
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 80005a2:	4d1d      	ldr	r5, [pc, #116]	; (8000618 <read_card.part.0+0x7c>)
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 80005a4:	481d      	ldr	r0, [pc, #116]	; (800061c <read_card.part.0+0x80>)
			memset(data,0,sizeof(data));
 80005a6:	2100      	movs	r1, #0
void read_card(void)
 80005a8:	b082      	sub	sp, #8
			memset(data,0,sizeof(data));
 80005aa:	e9c4 1100 	strd	r1, r1, [r4]
 80005ae:	e9c4 1102 	strd	r1, r1, [r4, #8]
 80005b2:	6121      	str	r1, [r4, #16]
			memset(issue_uid,0,sizeof(issue_uid));
 80005b4:	6031      	str	r1, [r6, #0]
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 80005b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ba:	4919      	ldr	r1, [pc, #100]	; (8000620 <read_card.part.0+0x84>)
 80005bc:	220a      	movs	r2, #10
 80005be:	f003 fcf1 	bl	8003fa4 <HAL_UART_Transmit>
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 80005c2:	78ea      	ldrb	r2, [r5, #3]
 80005c4:	78ab      	ldrb	r3, [r5, #2]
 80005c6:	4917      	ldr	r1, [pc, #92]	; (8000624 <read_card.part.0+0x88>)
 80005c8:	e9cd 3200 	strd	r3, r2, [sp]
 80005cc:	4620      	mov	r0, r4
 80005ce:	786b      	ldrb	r3, [r5, #1]
 80005d0:	782a      	ldrb	r2, [r5, #0]
 80005d2:	f008 fbaf 	bl	8008d34 <siprintf>
			HAL_UART_Transmit(&uart1,(uint8_t *)data,sizeof(data),1000);
 80005d6:	4621      	mov	r1, r4
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	2214      	movs	r2, #20
 80005de:	480f      	ldr	r0, [pc, #60]	; (800061c <read_card.part.0+0x80>)
 80005e0:	f003 fce0 	bl	8003fa4 <HAL_UART_Transmit>
#endif
			if(rfid_id[0] !=	0x26)
 80005e4:	782b      	ldrb	r3, [r5, #0]
			{
				for(int i=0;i<4;i++)
					issue_uid[i]= rfid_id[i];
			}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80005e6:	4810      	ldr	r0, [pc, #64]	; (8000628 <read_card.part.0+0x8c>)
			if(rfid_id[0] !=	0x26)
 80005e8:	2b26      	cmp	r3, #38	; 0x26
					issue_uid[i]= rfid_id[i];
 80005ea:	bf1c      	itt	ne
 80005ec:	682b      	ldrne	r3, [r5, #0]
 80005ee:	6033      	strne	r3, [r6, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2104      	movs	r1, #4
 80005f4:	f001 fe50 	bl	8002298 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80005f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005fc:	f001 fcea 	bl	8001fd4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <read_card.part.0+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	2104      	movs	r1, #4
		}
}
 8000606:	b002      	add	sp, #8
 8000608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800060c:	f001 be44 	b.w	8002298 <HAL_GPIO_WritePin>
 8000610:	200005e4 	.word	0x200005e4
 8000614:	20000674 	.word	0x20000674
 8000618:	2000069c 	.word	0x2000069c
 800061c:	20000808 	.word	0x20000808
 8000620:	0800a010 	.word	0x0800a010
 8000624:	0800a01c 	.word	0x0800a01c
 8000628:	40020400 	.word	0x40020400

0800062c <__io_putchar>:
{
 800062c:	b500      	push	{lr}
 800062e:	b083      	sub	sp, #12
    return uart_write(USART1, (uint8_t *)&ch, 1);
 8000630:	2201      	movs	r2, #1
{
 8000632:	9001      	str	r0, [sp, #4]
    return uart_write(USART1, (uint8_t *)&ch, 1);
 8000634:	a901      	add	r1, sp, #4
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <__io_putchar+0x18>)
 8000638:	f004 fe76 	bl	8005328 <uart_write>
}
 800063c:	b003      	add	sp, #12
 800063e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000642:	bf00      	nop
 8000644:	40011000 	.word	0x40011000

08000648 <check_validcard>:
uint8_t check_validcard(void){
 8000648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(int j=0;j<emp_id_read;j++)
 800064c:	4f1d      	ldr	r7, [pc, #116]	; (80006c4 <check_validcard+0x7c>)
	memset(uid_read,0,sizeof(uid_read));
 800064e:	4d1e      	ldr	r5, [pc, #120]	; (80006c8 <check_validcard+0x80>)
	for(int j=0;j<emp_id_read;j++)
 8000650:	783b      	ldrb	r3, [r7, #0]
	memset(uid_read,0,sizeof(uid_read));
 8000652:	2400      	movs	r4, #0
uint8_t check_validcard(void){
 8000654:	b085      	sub	sp, #20
	memset(uid_read,0,sizeof(uid_read));
 8000656:	602c      	str	r4, [r5, #0]
	for(int j=0;j<emp_id_read;j++)
 8000658:	b383      	cbz	r3, 80006bc <check_validcard+0x74>
 800065a:	f8df b074 	ldr.w	fp, [pc, #116]	; 80006d0 <check_validcard+0x88>
 800065e:	4e1b      	ldr	r6, [pc, #108]	; (80006cc <check_validcard+0x84>)
		HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 156+j*32, 2, (uint8_t *)&uid_read, 4, 100);
 8000660:	f8df a070 	ldr.w	sl, [pc, #112]	; 80006d4 <check_validcard+0x8c>
	for(int j=0;j<emp_id_read;j++)
 8000664:	f04f 089c 	mov.w	r8, #156	; 0x9c
		HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 156+j*32, 2, (uint8_t *)&uid_read, 4, 100);
 8000668:	f04f 0964 	mov.w	r9, #100	; 0x64
 800066c:	e002      	b.n	8000674 <check_validcard+0x2c>
	for(int j=0;j<emp_id_read;j++)
 800066e:	783b      	ldrb	r3, [r7, #0]
 8000670:	42a3      	cmp	r3, r4
 8000672:	dd23      	ble.n	80006bc <check_validcard+0x74>
		HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 156+j*32, 2, (uint8_t *)&uid_read, 4, 100);
 8000674:	2304      	movs	r3, #4
 8000676:	4642      	mov	r2, r8
 8000678:	e9cd 5300 	strd	r5, r3, [sp]
 800067c:	f89b 1000 	ldrb.w	r1, [fp]
 8000680:	f8cd 9008 	str.w	r9, [sp, #8]
 8000684:	2302      	movs	r3, #2
 8000686:	4650      	mov	r0, sl
 8000688:	f002 f948 	bl	800291c <HAL_I2C_Mem_Read>
		if((uid_read[3]==rfid_id[0])&&(uid_read[2]==rfid_id[1])&&(uid_read[1]==rfid_id[2])&&(uid_read[0]==rfid_id[3]))
 800068c:	78ea      	ldrb	r2, [r5, #3]
 800068e:	7833      	ldrb	r3, [r6, #0]
	for(int j=0;j<emp_id_read;j++)
 8000690:	f108 0820 	add.w	r8, r8, #32
		if((uid_read[3]==rfid_id[0])&&(uid_read[2]==rfid_id[1])&&(uid_read[1]==rfid_id[2])&&(uid_read[0]==rfid_id[3]))
 8000694:	429a      	cmp	r2, r3
	for(int j=0;j<emp_id_read;j++)
 8000696:	f104 0401 	add.w	r4, r4, #1
 800069a:	fa1f f888 	uxth.w	r8, r8
		if((uid_read[3]==rfid_id[0])&&(uid_read[2]==rfid_id[1])&&(uid_read[1]==rfid_id[2])&&(uid_read[0]==rfid_id[3]))
 800069e:	d1e6      	bne.n	800066e <check_validcard+0x26>
 80006a0:	78aa      	ldrb	r2, [r5, #2]
 80006a2:	7873      	ldrb	r3, [r6, #1]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d1e2      	bne.n	800066e <check_validcard+0x26>
 80006a8:	786a      	ldrb	r2, [r5, #1]
 80006aa:	78b3      	ldrb	r3, [r6, #2]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d1de      	bne.n	800066e <check_validcard+0x26>
 80006b0:	782a      	ldrb	r2, [r5, #0]
 80006b2:	78f3      	ldrb	r3, [r6, #3]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d1da      	bne.n	800066e <check_validcard+0x26>
			return 1;
 80006b8:	2001      	movs	r0, #1
 80006ba:	e000      	b.n	80006be <check_validcard+0x76>
	return 0;
 80006bc:	2000      	movs	r0, #0
}
 80006be:	b005      	add	sp, #20
 80006c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006c4:	200005fa 	.word	0x200005fa
 80006c8:	2000084c 	.word	0x2000084c
 80006cc:	2000069c 	.word	0x2000069c
 80006d0:	20000029 	.word	0x20000029
 80006d4:	2000061c 	.word	0x2000061c

080006d8 <sysclock_config>:
}



void sysclock_config(void)
{
 80006d8:	b500      	push	{lr}
		printf("clock config failed\n\r");
	}

#elif defined(SYSCLK_PLL_84MHZ)

	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006da:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8000748 <sysclock_config+0x70>
{
 80006de:	b093      	sub	sp, #76	; 0x4c
	osc.HSEState = RCC_HSE_ON;

	osc.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	osc.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
	osc.PLL.PLLM = 25;
 80006e6:	2119      	movs	r1, #25
	osc.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e8:	920d      	str	r2, [sp, #52]	; 0x34
	osc.PLL.PLLN = 168;
	osc.PLL.PLLP = RCC_PLLP_DIV2;

	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 80006ea:	a806      	add	r0, sp, #24
	osc.PLL.PLLN = 168;
 80006ec:	22a8      	movs	r2, #168	; 0xa8
	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ee:	ed8d 7b06 	vstr	d7, [sp, #24]
	osc.PLL.PLLN = 168;
 80006f2:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	osc.PLL.PLLState = RCC_PLL_ON;
 80006f6:	930c      	str	r3, [sp, #48]	; 0x30
	osc.PLL.PLLP = RCC_PLLP_DIV2;
 80006f8:	9310      	str	r3, [sp, #64]	; 0x40
	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 80006fa:	f002 fabd 	bl	8002c78 <HAL_RCC_OscConfig>
 80006fe:	b9c8      	cbnz	r0, 8000734 <sysclock_config+0x5c>
	{
		printf("PLL Init failed\n\r");
	}

	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000700:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8000750 <sysclock_config+0x78>
 8000704:	2001      	movs	r0, #1
 8000706:	2102      	movs	r1, #2
 8000708:	e9cd 0100 	strd	r0, r1, [sp]
	clock.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	clock.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clock.APB1CLKDivider = RCC_HCLK_DIV2;
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0


	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_2)!=HAL_OK)
 800070e:	2102      	movs	r1, #2
 8000710:	4668      	mov	r0, sp
	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000712:	ed8d 7b02 	vstr	d7, [sp, #8]
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	9304      	str	r3, [sp, #16]
	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_2)!=HAL_OK)
 8000718:	f002 fcc6 	bl	80030a8 <HAL_RCC_ClockConfig>
 800071c:	b970      	cbnz	r0, 800073c <sysclock_config+0x64>
#else
	printf("No clock source selected !! HSI Running by default\n\r");
#endif

	//uint32_t freq=HAL_RCC_GetSysClockFreq();
	freq=HAL_RCC_GetSysClockFreq();
 800071e:	f002 fc8f 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <sysclock_config+0x80>)
 8000724:	4601      	mov	r1, r0
	printf("Sysclock frequency : %lu \r\n",freq);
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <sysclock_config+0x84>)
	freq=HAL_RCC_GetSysClockFreq();
 8000728:	6019      	str	r1, [r3, #0]
	printf("Sysclock frequency : %lu \r\n",freq);
 800072a:	f008 f9af 	bl	8008a8c <iprintf>
}
 800072e:	b013      	add	sp, #76	; 0x4c
 8000730:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("PLL Init failed\n\r");
 8000734:	480a      	ldr	r0, [pc, #40]	; (8000760 <sysclock_config+0x88>)
 8000736:	f008 f9a9 	bl	8008a8c <iprintf>
 800073a:	e7e1      	b.n	8000700 <sysclock_config+0x28>
		printf("clock config failed\n\r");
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <sysclock_config+0x8c>)
 800073e:	f008 f9a5 	bl	8008a8c <iprintf>
 8000742:	e7ec      	b.n	800071e <sysclock_config+0x46>
 8000744:	f3af 8000 	nop.w
 8000748:	00000001 	.word	0x00000001
 800074c:	00010000 	.word	0x00010000
 8000750:	00000000 	.word	0x00000000
 8000754:	00001000 	.word	0x00001000
 8000758:	20000618 	.word	0x20000618
 800075c:	0800a058 	.word	0x0800a058
 8000760:	0800a02c 	.word	0x0800a02c
 8000764:	0800a040 	.word	0x0800a040

08000768 <gpio_init>:


void gpio_init(void)
{
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	b097      	sub	sp, #92	; 0x5c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800076c:	2400      	movs	r4, #0
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <gpio_init+0x9c>)
 8000770:	9401      	str	r4, [sp, #4]
 8000772:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);

	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 ;

	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 8000774:	4d24      	ldr	r5, [pc, #144]	; (8000808 <gpio_init+0xa0>)
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <gpio_init+0xa4>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	f042 0201 	orr.w	r2, r2, #1
 800077c:	631a      	str	r2, [r3, #48]	; 0x30
 800077e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000780:	f002 0201 	and.w	r2, r2, #1
 8000784:	9201      	str	r2, [sp, #4]
 8000786:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	9402      	str	r4, [sp, #8]
 800078a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078c:	f042 0202 	orr.w	r2, r2, #2
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
 8000792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000794:	f002 0202 	and.w	r2, r2, #2
 8000798:	9202      	str	r2, [sp, #8]
 800079a:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	9403      	str	r4, [sp, #12]
 800079e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a0:	f042 0204 	orr.w	r2, r2, #4
 80007a4:	631a      	str	r2, [r3, #48]	; 0x30
 80007a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitTypeDef SSD_DATA_PINS ={0};
 80007a8:	9406      	str	r4, [sp, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 80007b0:	a904      	add	r1, sp, #16
	SSD_DATA_PINS.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 \
 80007b2:	22ff      	movs	r2, #255	; 0xff
 80007b4:	2301      	movs	r3, #1
 80007b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	GPIO_InitTypeDef SSD_DATA_PINS ={0};
 80007ba:	e9cd 4407 	strd	r4, r4, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 80007c0:	f001 fc78 	bl	80020b4 <HAL_GPIO_Init>
	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 80007c4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 80007c8:	a90a      	add	r1, sp, #40	; 0x28
	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 80007ca:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 80007cc:	4810      	ldr	r0, [pc, #64]	; (8000810 <gpio_init+0xa8>)
	GPIO_InitTypeDef SSD_CTRL_PINS ={0};
 80007ce:	940e      	str	r4, [sp, #56]	; 0x38
	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 80007d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	GPIO_InitTypeDef SSD_CTRL_PINS ={0};
 80007d4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 80007d8:	f001 fc6c 	bl	80020b4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 80007dc:	a90a      	add	r1, sp, #40	; 0x28
 80007de:	4628      	mov	r0, r5
	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 ;
 80007e0:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80007e4:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 80007e6:	f001 fc65 	bl	80020b4 <HAL_GPIO_Init>
#endif


#if 1
	GPIO_InitTypeDef RFID_SPI ={0};
	RFID_SPI.Pin = (GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2) ;
 80007ea:	2207      	movs	r2, #7
 80007ec:	2301      	movs	r3, #1
	RFID_SPI.Mode = GPIO_MODE_OUTPUT_PP;
	RFID_SPI.Pull = GPIO_NOPULL;
	RFID_SPI.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOB, &RFID_SPI);
 80007ee:	a910      	add	r1, sp, #64	; 0x40
 80007f0:	4628      	mov	r0, r5
	RFID_SPI.Pin = (GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2) ;
 80007f2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	GPIO_InitTypeDef RFID_SPI ={0};
 80007f6:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 80007fa:	9414      	str	r4, [sp, #80]	; 0x50
	HAL_GPIO_Init(GPIOB, &RFID_SPI);
 80007fc:	f001 fc5a 	bl	80020b4 <HAL_GPIO_Init>
	LED.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOC, &LED);
#endif

}
 8000800:	b017      	add	sp, #92	; 0x5c
 8000802:	bd30      	pop	{r4, r5, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400
 800080c:	40020000 	.word	0x40020000
 8000810:	40020800 	.word	0x40020800

08000814 <uart1_init>:



void uart1_init(void)
{
 8000814:	b510      	push	{r4, lr}
	uart1.Instance = USART1;
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <uart1_init+0x30>)
 8000818:	4c0b      	ldr	r4, [pc, #44]	; (8000848 <uart1_init+0x34>)
	uart1.Init.BaudRate =9600;
	uart1.Init.Parity=UART_PARITY_NONE;
 800081a:	2300      	movs	r3, #0
	uart1.Init.BaudRate =9600;
 800081c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
	uart1.Init.Mode =UART_MODE_TX_RX;
 8000820:	220c      	movs	r2, #12
	uart1.Init.BaudRate =9600;
 8000822:	e9c0 4100 	strd	r4, r1, [r0]
	uart1.Init.Mode =UART_MODE_TX_RX;
 8000826:	e9c0 3204 	strd	r3, r2, [r0, #16]
	uart1.Init.StopBits= UART_STOPBITS_1;
 800082a:	60c3      	str	r3, [r0, #12]
	uart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082c:	6183      	str	r3, [r0, #24]
	uart1.Init.WordLength = UART_WORDLENGTH_8B;
 800082e:	6083      	str	r3, [r0, #8]
	uart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8000830:	61c3      	str	r3, [r0, #28]

	if(HAL_UART_Init(&uart1)!= HAL_OK)
 8000832:	f003 fb1d 	bl	8003e70 <HAL_UART_Init>
 8000836:	b900      	cbnz	r0, 800083a <uart1_init+0x26>
	{
		printf("Uart 1 Init Failed\r\n");
	}
}
 8000838:	bd10      	pop	{r4, pc}
 800083a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Uart 1 Init Failed\r\n");
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <uart1_init+0x38>)
 8000840:	f008 b9aa 	b.w	8008b98 <puts>
 8000844:	20000808 	.word	0x20000808
 8000848:	40011000 	.word	0x40011000
 800084c:	0800a074 	.word	0x0800a074

08000850 <spi1_init>:
	}
}


void spi1_init(void)
{
 8000850:	b510      	push	{r4, lr}

	spi1.Instance = SPI1;
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <spi1_init+0x38>)
 8000854:	4c0d      	ldr	r4, [pc, #52]	; (800088c <spi1_init+0x3c>)
	spi1.Init.Mode = SPI_MODE_MASTER;
 8000856:	f44f 7282 	mov.w	r2, #260	; 0x104
	spi1.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	2300      	movs	r3, #0
	spi1.Init.Mode = SPI_MODE_MASTER;
 800085c:	e9c0 4200 	strd	r4, r2, [r0]
	spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
	spi1.Init.DataSize = SPI_DATASIZE_8BIT ;
	spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
	spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
	spi1.Init.NSS = SPI_NSS_SOFT ;
 8000860:	f44f 7100 	mov.w	r1, #512	; 0x200
	spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000864:	2230      	movs	r2, #48	; 0x30
	spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000866:	e9c0 3303 	strd	r3, r3, [r0, #12]
	spi1.Init.NSS = SPI_NSS_SOFT ;
 800086a:	e9c0 3105 	strd	r3, r1, [r0, #20]
	spi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	6083      	str	r3, [r0, #8]
	spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000870:	6203      	str	r3, [r0, #32]
	spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000872:	61c2      	str	r2, [r0, #28]

	if(HAL_SPI_Init(&spi1) != HAL_OK)
 8000874:	f002 fd58 	bl	8003328 <HAL_SPI_Init>
 8000878:	b900      	cbnz	r0, 800087c <spi1_init+0x2c>
	{
		printf("SPI1 Init Failed\r\n");
	}

}
 800087a:	bd10      	pop	{r4, pc}
 800087c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("SPI1 Init Failed\r\n");
 8000880:	4803      	ldr	r0, [pc, #12]	; (8000890 <spi1_init+0x40>)
 8000882:	f008 b989 	b.w	8008b98 <puts>
 8000886:	bf00      	nop
 8000888:	200006a8 	.word	0x200006a8
 800088c:	40013000 	.word	0x40013000
 8000890:	0800a088 	.word	0x0800a088

08000894 <spi2_init>:

void spi2_init(void) 		/* SPI2 : XPT2048 Touch Sensor */
{
 8000894:	b510      	push	{r4, lr}

	spi2.Instance = SPI2;
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <spi2_init+0x38>)
 8000898:	4c0d      	ldr	r4, [pc, #52]	; (80008d0 <spi2_init+0x3c>)
	spi2.Init.Mode = SPI_MODE_MASTER;
 800089a:	f44f 7282 	mov.w	r2, #260	; 0x104
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	2300      	movs	r3, #0
	spi2.Init.Mode = SPI_MODE_MASTER;
 80008a0:	e9c0 4200 	strd	r4, r2, [r0]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
	spi2.Init.DataSize = SPI_DATASIZE_8BIT ;
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
	spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
	spi2.Init.NSS = SPI_NSS_SOFT ;
 80008a4:	f44f 7100 	mov.w	r1, #512	; 0x200
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008a8:	2230      	movs	r2, #48	; 0x30
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	spi2.Init.NSS = SPI_NSS_SOFT ;
 80008ae:	e9c0 3105 	strd	r3, r1, [r0, #20]
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	6083      	str	r3, [r0, #8]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	6203      	str	r3, [r0, #32]
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008b6:	61c2      	str	r2, [r0, #28]
	spi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b8:	6243      	str	r3, [r0, #36]	; 0x24

	if(HAL_SPI_Init(&spi2) != HAL_OK)
 80008ba:	f002 fd35 	bl	8003328 <HAL_SPI_Init>
 80008be:	b900      	cbnz	r0, 80008c2 <spi2_init+0x2e>
	{
		printf("SPI2 Init Failed\r\n");
	}
}
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("SPI2 Init Failed\r\n");
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <spi2_init+0x40>)
 80008c8:	f008 b966 	b.w	8008b98 <puts>
 80008cc:	20000700 	.word	0x20000700
 80008d0:	40003800 	.word	0x40003800
 80008d4:	0800a09c 	.word	0x0800a09c

080008d8 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if (htim->Instance == TIM11)	/* TimeBase for HAL Layer */
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80008da:	6802      	ldr	r2, [r0, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d000      	beq.n	80008e2 <HAL_TIM_PeriodElapsedCallback+0xa>
	{
#if (DEBUG_LED)
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
#endif
	}
}
 80008e0:	4770      	bx	lr
		HAL_IncTick();
 80008e2:	f001 bb65 	b.w	8001fb0 <HAL_IncTick>
 80008e6:	bf00      	nop
 80008e8:	40014800 	.word	0x40014800

080008ec <rfid_read>:
	*/
}


void rfid_read(void)
{
 80008ec:	b570      	push	{r4, r5, r6, lr}
	if(rc522_checkCard(rfid_id))
 80008ee:	4c21      	ldr	r4, [pc, #132]	; (8000974 <rfid_read+0x88>)
{
 80008f0:	b082      	sub	sp, #8
	if(rc522_checkCard(rfid_id))
 80008f2:	4620      	mov	r0, r4
 80008f4:	f004 fb5e 	bl	8004fb4 <rc522_checkCard>
 80008f8:	b908      	cbnz	r0, 80008fe <rfid_read+0x12>
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
#endif
			}
		}

}
 80008fa:	b002      	add	sp, #8
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
			memset(data,0,sizeof(data));
 80008fe:	4d1e      	ldr	r5, [pc, #120]	; (8000978 <rfid_read+0x8c>)
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000900:	491e      	ldr	r1, [pc, #120]	; (800097c <rfid_read+0x90>)
 8000902:	481f      	ldr	r0, [pc, #124]	; (8000980 <rfid_read+0x94>)
			memset(data,0,sizeof(data));
 8000904:	2600      	movs	r6, #0
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090a:	220a      	movs	r2, #10
			memset(data,0,sizeof(data));
 800090c:	e9c5 6600 	strd	r6, r6, [r5]
 8000910:	e9c5 6602 	strd	r6, r6, [r5, #8]
 8000914:	612e      	str	r6, [r5, #16]
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000916:	f003 fb45 	bl	8003fa4 <HAL_UART_Transmit>
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 800091a:	78e2      	ldrb	r2, [r4, #3]
 800091c:	78a3      	ldrb	r3, [r4, #2]
 800091e:	4919      	ldr	r1, [pc, #100]	; (8000984 <rfid_read+0x98>)
 8000920:	e9cd 3200 	strd	r3, r2, [sp]
 8000924:	4628      	mov	r0, r5
 8000926:	7863      	ldrb	r3, [r4, #1]
 8000928:	7822      	ldrb	r2, [r4, #0]
 800092a:	f008 fa03 	bl	8008d34 <siprintf>
			HAL_UART_Transmit(&uart1,(uint8_t *)data,sizeof(data),1000);
 800092e:	2214      	movs	r2, #20
 8000930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000934:	4629      	mov	r1, r5
 8000936:	4812      	ldr	r0, [pc, #72]	; (8000980 <rfid_read+0x94>)
 8000938:	f003 fb34 	bl	8003fa4 <HAL_UART_Transmit>
			if(1==check_validcard())
 800093c:	f7ff fe84 	bl	8000648 <check_validcard>
 8000940:	2801      	cmp	r0, #1
 8000942:	4602      	mov	r2, r0
 8000944:	d1d9      	bne.n	80008fa <rfid_read+0xe>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8000946:	2104      	movs	r1, #4
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <rfid_read+0x9c>)
 800094a:	f001 fca5 	bl	8002298 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800094e:	2064      	movs	r0, #100	; 0x64
 8000950:	f001 fb40 	bl	8001fd4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000954:	4632      	mov	r2, r6
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <rfid_read+0x9c>)
 8000958:	2104      	movs	r1, #4
 800095a:	f001 fc9d 	bl	8002298 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
 800095e:	490b      	ldr	r1, [pc, #44]	; (800098c <rfid_read+0xa0>)
 8000960:	4807      	ldr	r0, [pc, #28]	; (8000980 <rfid_read+0x94>)
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	2213      	movs	r2, #19
}
 8000968:	b002      	add	sp, #8
 800096a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
 800096e:	f003 bb19 	b.w	8003fa4 <HAL_UART_Transmit>
 8000972:	bf00      	nop
 8000974:	2000069c 	.word	0x2000069c
 8000978:	200005e4 	.word	0x200005e4
 800097c:	0800a010 	.word	0x0800a010
 8000980:	20000808 	.word	0x20000808
 8000984:	0800a01c 	.word	0x0800a01c
 8000988:	40020400 	.word	0x40020400
 800098c:	0800a0b0 	.word	0x0800a0b0

08000990 <main>:
{
 8000990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000994:	ed2d 8b02 	vpush	{d8}
 8000998:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 800099a:	f001 faef 	bl	8001f7c <HAL_Init>
	sysclock_config();
 800099e:	f7ff fe9b 	bl	80006d8 <sysclock_config>
	gpio_init();
 80009a2:	f7ff fee1 	bl	8000768 <gpio_init>
	uart1_init();
 80009a6:	f7ff ff35 	bl	8000814 <uart1_init>
	spi1_init();
 80009aa:	f7ff ff51 	bl	8000850 <spi1_init>
	spi2_init();
 80009ae:	f7ff ff71 	bl	8000894 <spi2_init>
	rc522_init();
 80009b2:	f004 fb13 	bl	8004fdc <rc522_init>
	ssd1963_setup();
 80009b6:	f005 fd95 	bl	80064e4 <ssd1963_setup>
	XPT2046_Init();
 80009ba:	f007 fff9 	bl	80089b0 <XPT2046_Init>
	Front_screen();
 80009be:	f006 fde7 	bl	8007590 <Front_screen>
  uart_init(USART1,9600);
 80009c2:	484d      	ldr	r0, [pc, #308]	; (8000af8 <main+0x168>)
HAL_I2C_Mem_Read(&hi2c1,dev_addr, 0,2,(uint8_t *)temp_str,sizeof(temp_str),100);
 80009c4:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8000b28 <main+0x198>
 80009c8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8000b2c <main+0x19c>
 80009cc:	f8df a160 	ldr.w	sl, [pc, #352]	; 8000b30 <main+0x1a0>
	uint64_t erase_data = 0xffffffffffffffff;

	while(erase_addr<1024)
	//while(erase_addr<32768)
	{
	  HAL_I2C_Mem_Write(&hi2c1, dev_addr, erase_addr, 2, (uint8_t *) &(erase_data), sizeof(erase_data), 100);  ///  write employee_id
 80009d0:	f8df b144 	ldr.w	fp, [pc, #324]	; 8000b18 <main+0x188>
  uart_init(USART1,9600);
 80009d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80009d8:	f004 fbe4 	bl	80051a4 <uart_init>
  uart_init(USART6,57600);
 80009dc:	4847      	ldr	r0, [pc, #284]	; (8000afc <main+0x16c>)
 80009de:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80009e2:	f004 fbdf 	bl	80051a4 <uart_init>
  setvbuf(stdout, NULL, _IONBF, 0);
 80009e6:	4a46      	ldr	r2, [pc, #280]	; (8000b00 <main+0x170>)
 80009e8:	6810      	ldr	r0, [r2, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	2202      	movs	r2, #2
 80009f0:	6880      	ldr	r0, [r0, #8]
 80009f2:	f008 f8d9 	bl	8008ba8 <setvbuf>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2104      	movs	r1, #4
 80009fa:	4842      	ldr	r0, [pc, #264]	; (8000b04 <main+0x174>)
 80009fc:	f001 fc4c 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000a00:	2032      	movs	r0, #50	; 0x32
 8000a02:	f001 fae7 	bl	8001fd4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2104      	movs	r1, #4
 8000a0a:	483e      	ldr	r0, [pc, #248]	; (8000b04 <main+0x174>)
 8000a0c:	f001 fc44 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000a10:	2032      	movs	r0, #50	; 0x32
 8000a12:	f001 fadf 	bl	8001fd4 <HAL_Delay>
	HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
 8000a16:	493c      	ldr	r1, [pc, #240]	; (8000b08 <main+0x178>)
 8000a18:	483c      	ldr	r0, [pc, #240]	; (8000b0c <main+0x17c>)
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	221f      	movs	r2, #31
 8000a20:	f003 fac0 	bl	8003fa4 <HAL_UART_Transmit>
HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 0x00, 2, (uint8_t *)&emp_id_read, 1, 100);
 8000a24:	4a3a      	ldr	r2, [pc, #232]	; (8000b10 <main+0x180>)
 8000a26:	9200      	str	r2, [sp, #0]
 8000a28:	2301      	movs	r3, #1
	curr_page = 1 ;
 8000a2a:	4a3a      	ldr	r2, [pc, #232]	; (8000b14 <main+0x184>)
HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 0x00, 2, (uint8_t *)&emp_id_read, 1, 100);
 8000a2c:	483a      	ldr	r0, [pc, #232]	; (8000b18 <main+0x188>)
 8000a2e:	2464      	movs	r4, #100	; 0x64
 8000a30:	e9cd 3401 	strd	r3, r4, [sp, #4]
	curr_page = 1 ;
 8000a34:	7013      	strb	r3, [r2, #0]
HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 0x00, 2, (uint8_t *)&emp_id_read, 1, 100);
 8000a36:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <main+0x18c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	7819      	ldrb	r1, [r3, #0]
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	f001 ff6d 	bl	800291c <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c1,dev_addr, 0,2,(uint8_t *)temp_str,sizeof(temp_str),100);
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <main+0x190>)
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000a4a:	f898 1000 	ldrb.w	r1, [r8]
 8000a4e:	4832      	ldr	r0, [pc, #200]	; (8000b18 <main+0x188>)
 8000a50:	2302      	movs	r3, #2
 8000a52:	2200      	movs	r2, #0
 8000a54:	f001 ff62 	bl	800291c <HAL_I2C_Mem_Read>
	uint64_t erase_data = 0xffffffffffffffff;
 8000a58:	ed9f 8b25 	vldr	d8, [pc, #148]	; 8000af0 <main+0x160>
 8000a5c:	af08      	add	r7, sp, #32
	touchX = (getX() + 12);
 8000a5e:	f007 ff07 	bl	8008870 <getX>
 8000a62:	300c      	adds	r0, #12
 8000a64:	f8a9 0000 	strh.w	r0, [r9]
	touchY = (470 - getY());
 8000a68:	f007 ff50 	bl	800890c <getY>
 8000a6c:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <main+0x194>)
 8000a6e:	f5c0 70eb 	rsb	r0, r0, #470	; 0x1d6
 8000a72:	8018      	strh	r0, [r3, #0]
	HAL_Delay(200);
 8000a74:	20c8      	movs	r0, #200	; 0xc8
 8000a76:	f001 faad 	bl	8001fd4 <HAL_Delay>
	rfid_read();
 8000a7a:	f7ff ff37 	bl	80008ec <rfid_read>
	if(curr_page == 1)
 8000a7e:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <main+0x184>)
 8000a80:	7818      	ldrb	r0, [r3, #0]
 8000a82:	2801      	cmp	r0, #1
 8000a84:	f000 8250 	beq.w	8000f28 <main+0x598>
	if(curr_page == 2)
 8000a88:	2802      	cmp	r0, #2
 8000a8a:	f000 8252 	beq.w	8000f32 <main+0x5a2>
	if(curr_page == 3)
 8000a8e:	2803      	cmp	r0, #3
 8000a90:	f000 8282 	beq.w	8000f98 <main+0x608>
	if(curr_page == 4)
 8000a94:	2804      	cmp	r0, #4
 8000a96:	f000 818d 	beq.w	8000db4 <main+0x424>
	if(curr_page == 5)
 8000a9a:	2805      	cmp	r0, #5
 8000a9c:	d04a      	beq.n	8000b34 <main+0x1a4>
	if(curr_page == 6)
 8000a9e:	2806      	cmp	r0, #6
 8000aa0:	f000 80e9 	beq.w	8000c76 <main+0x2e6>
	if(curr_page == 7)
 8000aa4:	2807      	cmp	r0, #7
 8000aa6:	d00e      	beq.n	8000ac6 <main+0x136>
	if(curr_page == 8)
 8000aa8:	2808      	cmp	r0, #8
 8000aaa:	d1d8      	bne.n	8000a5e <main+0xce>
		if(isTouched( 8, 72, 10, 70)) // back
 8000aac:	2346      	movs	r3, #70	; 0x46
 8000aae:	220a      	movs	r2, #10
 8000ab0:	2148      	movs	r1, #72	; 0x48
 8000ab2:	f001 fa1d 	bl	8001ef0 <isTouched>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d0d1      	beq.n	8000a5e <main+0xce>
			Admin_screen();
 8000aba:	f006 fd83 	bl	80075c4 <Admin_screen>
			curr_page = 2;
 8000abe:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <main+0x184>)
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	7013      	strb	r3, [r2, #0]
 8000ac4:	e7cb      	b.n	8000a5e <main+0xce>
		if(isTouched( 190, 590, 36, 84)) //190,590,36,84
 8000ac6:	2354      	movs	r3, #84	; 0x54
 8000ac8:	2224      	movs	r2, #36	; 0x24
 8000aca:	f240 214e 	movw	r1, #590	; 0x24e
 8000ace:	20be      	movs	r0, #190	; 0xbe
 8000ad0:	f001 fa0e 	bl	8001ef0 <isTouched>
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	f040 83ca 	bne.w	800126e <main+0x8de>
		if(isTouched( 8, 72, 10, 70)) // back
 8000ada:	2346      	movs	r3, #70	; 0x46
 8000adc:	220a      	movs	r2, #10
 8000ade:	2148      	movs	r1, #72	; 0x48
 8000ae0:	2008      	movs	r0, #8
 8000ae2:	f001 fa05 	bl	8001ef0 <isTouched>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	d1e7      	bne.n	8000aba <main+0x12a>
	if(curr_page == 8)
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <main+0x184>)
 8000aec:	7818      	ldrb	r0, [r3, #0]
 8000aee:	e7db      	b.n	8000aa8 <main+0x118>
 8000af0:	ffffffff 	.word	0xffffffff
 8000af4:	ffffffff 	.word	0xffffffff
 8000af8:	40011000 	.word	0x40011000
 8000afc:	40011400 	.word	0x40011400
 8000b00:	2000055c 	.word	0x2000055c
 8000b04:	40020400 	.word	0x40020400
 8000b08:	20000054 	.word	0x20000054
 8000b0c:	20000808 	.word	0x20000808
 8000b10:	200005fa 	.word	0x200005fa
 8000b14:	20000022 	.word	0x20000022
 8000b18:	2000061c 	.word	0x2000061c
 8000b1c:	20000029 	.word	0x20000029
 8000b20:	2000075c 	.word	0x2000075c
 8000b24:	200008ba 	.word	0x200008ba
 8000b28:	20000028 	.word	0x20000028
 8000b2c:	200008b8 	.word	0x200008b8
 8000b30:	20000614 	.word	0x20000614
		if(isTouched( 630, 720, 121, 169))  //SAVE  630,720,121,169
 8000b34:	23a9      	movs	r3, #169	; 0xa9
 8000b36:	2279      	movs	r2, #121	; 0x79
 8000b38:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000b3c:	f240 2076 	movw	r0, #630	; 0x276
 8000b40:	f001 f9d6 	bl	8001ef0 <isTouched>
		if(isTouched( 494, 584, 121, 169))   //EDIT  494,584,121,169
 8000b44:	23a9      	movs	r3, #169	; 0xa9
 8000b46:	2279      	movs	r2, #121	; 0x79
 8000b48:	f44f 7112 	mov.w	r1, #584	; 0x248
 8000b4c:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8000b50:	f001 f9ce 	bl	8001ef0 <isTouched>
		if(isTouched( 661, 695, 210, 254))     //	494,720,199,259,0xcedcfd  //desig
 8000b54:	23fe      	movs	r3, #254	; 0xfe
 8000b56:	22d2      	movs	r2, #210	; 0xd2
 8000b58:	f240 21b7 	movw	r1, #695	; 0x2b7
 8000b5c:	f240 2095 	movw	r0, #661	; 0x295
 8000b60:	f001 f9c6 	bl	8001ef0 <isTouched>
 8000b64:	b1a8      	cbz	r0, 8000b92 <main+0x202>
			drop_btn = !drop_btn;
 8000b66:	4a86      	ldr	r2, [pc, #536]	; (8000d80 <main+0x3f0>)
 8000b68:	7813      	ldrb	r3, [r2, #0]
 8000b6a:	f083 0301 	eor.w	r3, r3, #1
 8000b6e:	7013      	strb	r3, [r2, #0]
			sub_page =4;
 8000b70:	4a84      	ldr	r2, [pc, #528]	; (8000d84 <main+0x3f4>)
 8000b72:	2404      	movs	r4, #4
 8000b74:	7014      	strb	r4, [r2, #0]
			if(drop_btn)
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8419 	beq.w	80013ae <main+0xa1e>
				NewUser_Desig1();
 8000b7c:	f007 fc56 	bl	800842c <NewUser_Desig1>
				dropdown(&dropdown_desgn[0],4,297,217,32);
 8000b80:	2320      	movs	r3, #32
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	4880      	ldr	r0, [pc, #512]	; (8000d88 <main+0x3f8>)
 8000b86:	4621      	mov	r1, r4
 8000b88:	23d9      	movs	r3, #217	; 0xd9
 8000b8a:	f240 1229 	movw	r2, #297	; 0x129
 8000b8e:	f007 f9a7 	bl	8007ee0 <dropdown>
		if(isTouched( 670, 720, 300, 344))//	494,720,289,349,//role
 8000b92:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8000b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000b9a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8000b9e:	f240 209e 	movw	r0, #670	; 0x29e
 8000ba2:	f001 f9a5 	bl	8001ef0 <isTouched>
 8000ba6:	b1c0      	cbz	r0, 8000bda <main+0x24a>
			drop_btn = !drop_btn;
 8000ba8:	4a75      	ldr	r2, [pc, #468]	; (8000d80 <main+0x3f0>)
			sub_page =5;
 8000baa:	4976      	ldr	r1, [pc, #472]	; (8000d84 <main+0x3f4>)
			drop_btn = !drop_btn;
 8000bac:	7813      	ldrb	r3, [r2, #0]
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	7013      	strb	r3, [r2, #0]
			sub_page =5;
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f000 840c 	beq.w	80013d6 <main+0xa46>
				NewUser_Role1();
 8000bbe:	f007 fc83 	bl	80084c8 <NewUser_Role1>
				NewUser_Card1();
 8000bc2:	f007 fcd7 	bl	8008574 <NewUser_Card1>
				dropdown(&dropdown_role[0],3,297,217,-80);
 8000bc6:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	486f      	ldr	r0, [pc, #444]	; (8000d8c <main+0x3fc>)
 8000bce:	23d9      	movs	r3, #217	; 0xd9
 8000bd0:	f240 1229 	movw	r2, #297	; 0x129
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	f007 f983 	bl	8007ee0 <dropdown>
		if(isTouched( 661, 695, 390, 434))//	494,720,379,439 // card
 8000bda:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8000bde:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000be2:	f240 21b7 	movw	r1, #695	; 0x2b7
 8000be6:	f240 2095 	movw	r0, #661	; 0x295
 8000bea:	f001 f981 	bl	8001ef0 <isTouched>
 8000bee:	b1b8      	cbz	r0, 8000c20 <main+0x290>
			drop_btn = !drop_btn;
 8000bf0:	4a63      	ldr	r2, [pc, #396]	; (8000d80 <main+0x3f0>)
			sub_page =6;
 8000bf2:	4964      	ldr	r1, [pc, #400]	; (8000d84 <main+0x3f4>)
			drop_btn = !drop_btn;
 8000bf4:	7813      	ldrb	r3, [r2, #0]
 8000bf6:	f083 0301 	eor.w	r3, r3, #1
 8000bfa:	7013      	strb	r3, [r2, #0]
			sub_page =6;
 8000bfc:	2206      	movs	r2, #6
 8000bfe:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	f000 838c 	beq.w	800131e <main+0x98e>
				NewUser_Desig1();
 8000c06:	f007 fc11 	bl	800842c <NewUser_Desig1>
				NewUser_Card1();
 8000c0a:	f007 fcb3 	bl	8008574 <NewUser_Card1>
				dropdown(&dropdown_CardThumb[0],2,297,217,50);
 8000c0e:	2332      	movs	r3, #50	; 0x32
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	485f      	ldr	r0, [pc, #380]	; (8000d90 <main+0x400>)
 8000c14:	23d9      	movs	r3, #217	; 0xd9
 8000c16:	f240 1229 	movw	r2, #297	; 0x129
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	f007 f960 	bl	8007ee0 <dropdown>
		if(isTouched( 8, 72, 10, 70)) //back
 8000c20:	2346      	movs	r3, #70	; 0x46
 8000c22:	220a      	movs	r2, #10
 8000c24:	2148      	movs	r1, #72	; 0x48
 8000c26:	2008      	movs	r0, #8
 8000c28:	f001 f962 	bl	8001ef0 <isTouched>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	f040 8342 	bne.w	80012b6 <main+0x926>
		if((sub_page ==4))
 8000c32:	4b54      	ldr	r3, [pc, #336]	; (8000d84 <main+0x3f4>)
 8000c34:	781c      	ldrb	r4, [r3, #0]
 8000c36:	2c04      	cmp	r4, #4
 8000c38:	f000 820a 	beq.w	8001050 <main+0x6c0>
		if(sub_page ==5)
 8000c3c:	2c05      	cmp	r4, #5
 8000c3e:	f000 81ec 	beq.w	800101a <main+0x68a>
		if(sub_page ==6)
 8000c42:	2c06      	cmp	r4, #6
 8000c44:	d112      	bne.n	8000c6c <main+0x2dc>
			if(touchX >= 494 && touchX <= 720)
 8000c46:	f8b9 3000 	ldrh.w	r3, [r9]
 8000c4a:	f5a3 73f7 	sub.w	r3, r3, #494	; 0x1ee
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	2be2      	cmp	r3, #226	; 0xe2
 8000c52:	d80b      	bhi.n	8000c6c <main+0x2dc>
				 if(touchY >= 284 && touchY <= 330)
 8000c54:	4b4f      	ldr	r3, [pc, #316]	; (8000d94 <main+0x404>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8000c5c:	2a2e      	cmp	r2, #46	; 0x2e
 8000c5e:	f240 8696 	bls.w	800198e <main+0xffe>
				 if(touchY >= 284+40 && touchY <= 330+40)
 8000c62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000c66:	2b2e      	cmp	r3, #46	; 0x2e
 8000c68:	f240 866b 	bls.w	8001942 <main+0xfb2>
	if(curr_page == 6)
 8000c6c:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <main+0x408>)
 8000c6e:	7818      	ldrb	r0, [r3, #0]
 8000c70:	2806      	cmp	r0, #6
 8000c72:	f47f af17 	bne.w	8000aa4 <main+0x114>
				Set_Font(&Font12x18);
 8000c76:	4849      	ldr	r0, [pc, #292]	; (8000d9c <main+0x40c>)
 8000c78:	f004 fc56 	bl	8005528 <Set_Font>
				if(touchX >= 525 && touchX <= 615 && touchY >= 340+y && touchY <= 380+y) // down  525,615,360+y,400+y
 8000c7c:	f8b9 3000 	ldrh.w	r3, [r9]
 8000c80:	f46f 7c03 	mvn.w	ip, #524	; 0x20c
 8000c84:	eb03 020c 	add.w	r2, r3, ip
 8000c88:	2a5a      	cmp	r2, #90	; 0x5a
 8000c8a:	d81e      	bhi.n	8000cca <main+0x33a>
 8000c8c:	4a41      	ldr	r2, [pc, #260]	; (8000d94 <main+0x404>)
 8000c8e:	8812      	ldrh	r2, [r2, #0]
 8000c90:	f46f 76b9 	mvn.w	r6, #370	; 0x172
 8000c94:	4432      	add	r2, r6
 8000c96:	b292      	uxth	r2, r2
 8000c98:	2a28      	cmp	r2, #40	; 0x28
 8000c9a:	f200 83df 	bhi.w	800145c <main+0xacc>
						if(keypad_down)
 8000c9e:	4b40      	ldr	r3, [pc, #256]	; (8000da0 <main+0x410>)
 8000ca0:	7818      	ldrb	r0, [r3, #0]
							fill_area(0,800,200,480,PURPLE);
 8000ca2:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <main+0x414>)
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	22c8      	movs	r2, #200	; 0xc8
 8000ca8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000cac:	f44f 7148 	mov.w	r1, #800	; 0x320
						if(keypad_down)
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	f000 8799 	beq.w	8001be8 <main+0x1258>
							fill_area(0,800,200,480,PURPLE);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f004 fce8 	bl	800568c <fill_area>
							NewEntry_page();
 8000cbc:	f006 ff44 	bl	8007b48 <NewEntry_page>
							curr_page = 4;
 8000cc0:	4a35      	ldr	r2, [pc, #212]	; (8000d98 <main+0x408>)
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	7013      	strb	r3, [r2, #0]
				if(touchX >= 150 && touchX <= 215 && touchY >= 290+y && touchY <= 330+y) //caps  150,215,310+y,350+y
 8000cc6:	f8b9 3000 	ldrh.w	r3, [r9]
 8000cca:	f1a3 0296 	sub.w	r2, r3, #150	; 0x96
 8000cce:	2a41      	cmp	r2, #65	; 0x41
 8000cd0:	f200 83c4 	bhi.w	800145c <main+0xacc>
 8000cd4:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <main+0x404>)
 8000cd6:	8812      	ldrh	r2, [r2, #0]
 8000cd8:	f46f 75a0 	mvn.w	r5, #320	; 0x140
 8000cdc:	442a      	add	r2, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	2a28      	cmp	r2, #40	; 0x28
 8000ce2:	d804      	bhi.n	8000cee <main+0x35e>
					UC_FLAG = !UC_FLAG;
 8000ce4:	4930      	ldr	r1, [pc, #192]	; (8000da8 <main+0x418>)
 8000ce6:	780a      	ldrb	r2, [r1, #0]
 8000ce8:	f082 0201 	eor.w	r2, r2, #1
 8000cec:	700a      	strb	r2, [r1, #0]
					pos--;
 8000cee:	4a2f      	ldr	r2, [pc, #188]	; (8000dac <main+0x41c>)
 8000cf0:	7811      	ldrb	r1, [r2, #0]
			for(ia=0;ia<emp_id_read;ia++)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	20dd      	movs	r0, #221	; 0xdd
 8000cf6:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8000cfa:	4616      	mov	r6, r2
 8000cfc:	9206      	str	r2, [sp, #24]
					for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000cfe:	9805      	ldr	r0, [sp, #20]
					x1+=25*idx1;
 8000d00:	9c06      	ldr	r4, [sp, #24]
 8000d02:	eb00 0580 	add.w	r5, r0, r0, lsl #2
					for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000d06:	ebc6 0640 	rsb	r6, r6, r0, lsl #1
					x1+=25*idx1;
 8000d0a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 8000d0e:	4404      	add	r4, r0
 8000d10:	4620      	mov	r0, r4
 8000d12:	9406      	str	r4, [sp, #24]
					for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000d14:	4c26      	ldr	r4, [pc, #152]	; (8000db0 <main+0x420>)
 8000d16:	f1c6 0209 	rsb	r2, r6, #9
 8000d1a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8000d1e:	f100 06c8 	add.w	r6, r0, #200	; 0xc8
 8000d22:	2432      	movs	r4, #50	; 0x32
 8000d24:	fb04 6602 	mla	r6, r4, r2, r6
						if(touchX >= x1+150+x && touchX <= x1+190+x && touchY >= y1+190+y && touchY <= y1+230+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 8000d28:	9a04      	ldr	r2, [sp, #16]
 8000d2a:	3228      	adds	r2, #40	; 0x28
 8000d2c:	f100 0496 	add.w	r4, r0, #150	; 0x96
 8000d30:	9207      	str	r2, [sp, #28]
 8000d32:	e001      	b.n	8000d38 <main+0x3a8>
 8000d34:	f8b9 3000 	ldrh.w	r3, [r9]
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	f104 0228 	add.w	r2, r4, #40	; 0x28
					for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000d3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
						if(touchX >= x1+150+x && touchX <= x1+190+x && touchY >= y1+190+y && touchY <= y1+230+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 8000d42:	db0a      	blt.n	8000d5a <main+0x3ca>
 8000d44:	4293      	cmp	r3, r2
 8000d46:	dc08      	bgt.n	8000d5a <main+0x3ca>
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <main+0x404>)
 8000d4a:	9a04      	ldr	r2, [sp, #16]
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	db03      	blt.n	8000d5a <main+0x3ca>
 8000d52:	9a07      	ldr	r2, [sp, #28]
 8000d54:	4293      	cmp	r3, r2
 8000d56:	f340 8143 	ble.w	8000fe0 <main+0x650>
					for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000d5a:	42b4      	cmp	r4, r6
 8000d5c:	f105 0501 	add.w	r5, r5, #1
 8000d60:	d1e8      	bne.n	8000d34 <main+0x3a4>
				for(int idx1=0; idx1<3; idx1++)
 8000d62:	9b05      	ldr	r3, [sp, #20]
 8000d64:	9a04      	ldr	r2, [sp, #16]
 8000d66:	3301      	adds	r3, #1
 8000d68:	3232      	adds	r2, #50	; 0x32
 8000d6a:	9305      	str	r3, [sp, #20]
 8000d6c:	f240 1373 	movw	r3, #371	; 0x173
 8000d70:	429a      	cmp	r2, r3
 8000d72:	9204      	str	r2, [sp, #16]
 8000d74:	f000 814a 	beq.w	800100c <main+0x67c>
						if(touchX >= x1+150+x && touchX <= x1+190+x && touchY >= y1+190+y && touchY <= y1+230+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 8000d78:	f8b9 3000 	ldrh.w	r3, [r9]
					k=1;
 8000d7c:	2601      	movs	r6, #1
 8000d7e:	e7be      	b.n	8000cfe <main+0x36e>
 8000d80:	200005f9 	.word	0x200005f9
 8000d84:	20000758 	.word	0x20000758
 8000d88:	20000034 	.word	0x20000034
 8000d8c:	20000044 	.word	0x20000044
 8000d90:	2000002c 	.word	0x2000002c
 8000d94:	200008ba 	.word	0x200008ba
 8000d98:	20000022 	.word	0x20000022
 8000d9c:	20000544 	.word	0x20000544
 8000da0:	20000678 	.word	0x20000678
 8000da4:	00800010 	.word	0x00800010
 8000da8:	200005dd 	.word	0x200005dd
 8000dac:	20000679 	.word	0x20000679
 8000db0:	20000004 	.word	0x20000004
		if(isTouched( 197, 503, 69, 135)) // NAME
 8000db4:	2387      	movs	r3, #135	; 0x87
 8000db6:	2245      	movs	r2, #69	; 0x45
 8000db8:	f240 11f7 	movw	r1, #503	; 0x1f7
 8000dbc:	20c5      	movs	r0, #197	; 0xc5
 8000dbe:	f001 f897 	bl	8001ef0 <isTouched>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	f040 8287 	bne.w	80012d6 <main+0x946>
		if(isTouched( 450, 500, 170, 220)) // DESGI.draw_rect(450,500,170,220,BLUE);
 8000dc8:	23dc      	movs	r3, #220	; 0xdc
 8000dca:	22aa      	movs	r2, #170	; 0xaa
 8000dcc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dd0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000dd4:	f001 f88c 	bl	8001ef0 <isTouched>
 8000dd8:	b1c8      	cbz	r0, 8000e0e <main+0x47e>
			drop_btn = !drop_btn;
 8000dda:	4abb      	ldr	r2, [pc, #748]	; (80010c8 <main+0x738>)
			sub_page =1;
 8000ddc:	49bb      	ldr	r1, [pc, #748]	; (80010cc <main+0x73c>)
			drop_btn = !drop_btn;
 8000dde:	7813      	ldrb	r3, [r2, #0]
 8000de0:	f083 0301 	eor.w	r3, r3, #1
 8000de4:	7013      	strb	r3, [r2, #0]
			sub_page =1;
 8000de6:	2201      	movs	r2, #1
 8000de8:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 82cd 	beq.w	800138a <main+0x9fa>
				NewUser_Name();
 8000df0:	f006 fd12 	bl	8007818 <NewUser_Name>
				NewUser_Desig(0,0,0,0);
 8000df4:	2300      	movs	r3, #0
 8000df6:	461a      	mov	r2, r3
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f006 fd58 	bl	80078b0 <NewUser_Desig>
				dropdown(&dropdown_desgn[0],4,0,0,0);
 8000e00:	2300      	movs	r3, #0
 8000e02:	48b3      	ldr	r0, [pc, #716]	; (80010d0 <main+0x740>)
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	2104      	movs	r1, #4
 8000e0a:	f007 f869 	bl	8007ee0 <dropdown>
		if(isTouched( 450, 500, 260, 310)) // ROLE
 8000e0e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8000e12:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e16:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e1a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000e1e:	f001 f867 	bl	8001ef0 <isTouched>
 8000e22:	b1b8      	cbz	r0, 8000e54 <main+0x4c4>
			drop_btn = !drop_btn;
 8000e24:	4ba8      	ldr	r3, [pc, #672]	; (80010c8 <main+0x738>)
			sub_page =2;
 8000e26:	4aa9      	ldr	r2, [pc, #676]	; (80010cc <main+0x73c>)
			drop_btn = !drop_btn;
 8000e28:	781c      	ldrb	r4, [r3, #0]
 8000e2a:	f084 0401 	eor.w	r4, r4, #1
 8000e2e:	701c      	strb	r4, [r3, #0]
			sub_page =2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	7013      	strb	r3, [r2, #0]
			if(drop_btn)
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	f000 8283 	beq.w	8001340 <main+0x9b0>
				NewUser_Role();
 8000e3a:	f006 fdb7 	bl	80079ac <NewUser_Role>
				NewUser_Card();
 8000e3e:	f006 fe1b 	bl	8007a78 <NewUser_Card>
				dropdown(&dropdown_role[0],3,0,0,-120);
 8000e42:	f06f 0377 	mvn.w	r3, #119	; 0x77
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2300      	movs	r3, #0
 8000e4a:	48a2      	ldr	r0, [pc, #648]	; (80010d4 <main+0x744>)
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	2103      	movs	r1, #3
 8000e50:	f007 f846 	bl	8007ee0 <dropdown>
		if(isTouched( 450, 500, 355, 405)) // CARD/THUMB
 8000e54:	f240 1395 	movw	r3, #405	; 0x195
 8000e58:	f240 1263 	movw	r2, #355	; 0x163
 8000e5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e60:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000e64:	f001 f844 	bl	8001ef0 <isTouched>
 8000e68:	b1e0      	cbz	r0, 8000ea4 <main+0x514>
			drop_btn = !drop_btn;
 8000e6a:	4a97      	ldr	r2, [pc, #604]	; (80010c8 <main+0x738>)
			sub_page =3;
 8000e6c:	4997      	ldr	r1, [pc, #604]	; (80010cc <main+0x73c>)
			drop_btn = !drop_btn;
 8000e6e:	7813      	ldrb	r3, [r2, #0]
 8000e70:	f083 0301 	eor.w	r3, r3, #1
 8000e74:	7013      	strb	r3, [r2, #0]
			sub_page =3;
 8000e76:	2203      	movs	r2, #3
 8000e78:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8275 	beq.w	800136a <main+0x9da>
				NewUser_Name();
 8000e80:	f006 fcca 	bl	8007818 <NewUser_Name>
				NewUser_Desig(0,0,0,0);
 8000e84:	2300      	movs	r3, #0
 8000e86:	461a      	mov	r2, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 fd10 	bl	80078b0 <NewUser_Desig>
				NewUser_Card();
 8000e90:	f006 fdf2 	bl	8007a78 <NewUser_Card>
				dropdown(&dropdown_CardThumb[0],2,0,0,10);
 8000e94:	230a      	movs	r3, #10
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	488f      	ldr	r0, [pc, #572]	; (80010d8 <main+0x748>)
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	f007 f81e 	bl	8007ee0 <dropdown>
		if(isTouched( 550, 650, 348, 408)) 	// SCAN
 8000ea4:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000ea8:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8000eac:	f240 218a 	movw	r1, #650	; 0x28a
 8000eb0:	f240 2026 	movw	r0, #550	; 0x226
 8000eb4:	f001 f81c 	bl	8001ef0 <isTouched>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	f040 81f3 	bne.w	80012a4 <main+0x914>
		if(isTouched( 550, 650, 248, 308)) 	// Save
 8000ebe:	f44f 739a 	mov.w	r3, #308	; 0x134
 8000ec2:	22f8      	movs	r2, #248	; 0xf8
 8000ec4:	f240 218a 	movw	r1, #650	; 0x28a
 8000ec8:	f240 2026 	movw	r0, #550	; 0x226
 8000ecc:	f001 f810 	bl	8001ef0 <isTouched>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	f040 8132 	bne.w	800113a <main+0x7aa>
		if(isTouched( 8, 72, 10, 70)) //back
 8000ed6:	2346      	movs	r3, #70	; 0x46
 8000ed8:	220a      	movs	r2, #10
 8000eda:	2148      	movs	r1, #72	; 0x48
 8000edc:	2008      	movs	r0, #8
 8000ede:	f001 f807 	bl	8001ef0 <isTouched>
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	f040 8123 	bne.w	800112e <main+0x79e>
		if((sub_page ==1))
 8000ee8:	4b78      	ldr	r3, [pc, #480]	; (80010cc <main+0x73c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	f000 80fd 	beq.w	80010ec <main+0x75c>
		if(sub_page ==2)
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	f000 80cd 	beq.w	8001092 <main+0x702>
		if(sub_page ==3)
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d112      	bne.n	8000f22 <main+0x592>
			if(touchX >= 197 && touchX <= 503)
 8000efc:	f8b9 3000 	ldrh.w	r3, [r9]
 8000f00:	3bc5      	subs	r3, #197	; 0xc5
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8000f08:	d80b      	bhi.n	8000f22 <main+0x592>
				 if(touchY >= 254 && touchY <= 300)
 8000f0a:	4b74      	ldr	r3, [pc, #464]	; (80010dc <main+0x74c>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	f1a3 02fe 	sub.w	r2, r3, #254	; 0xfe
 8000f12:	2a2e      	cmp	r2, #46	; 0x2e
 8000f14:	f240 83b2 	bls.w	800167c <main+0xcec>
				 if(touchY >= 254+40 && touchY <= 300+40)
 8000f18:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8000f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1e:	f240 838c 	bls.w	800163a <main+0xcaa>
	if(curr_page == 5)
 8000f22:	4b6f      	ldr	r3, [pc, #444]	; (80010e0 <main+0x750>)
 8000f24:	7818      	ldrb	r0, [r3, #0]
 8000f26:	e5b8      	b.n	8000a9a <main+0x10a>
		Admin_screen();
 8000f28:	f006 fb4c 	bl	80075c4 <Admin_screen>
		curr_page = 2;
 8000f2c:	4a6c      	ldr	r2, [pc, #432]	; (80010e0 <main+0x750>)
 8000f2e:	2302      	movs	r3, #2
 8000f30:	7013      	strb	r3, [r2, #0]
		if(isTouched(200, 300, 85, 205)){	// USER MANAGEMENT
 8000f32:	23cd      	movs	r3, #205	; 0xcd
 8000f34:	2255      	movs	r2, #85	; 0x55
 8000f36:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f3a:	20c8      	movs	r0, #200	; 0xc8
 8000f3c:	f000 ffd8 	bl	8001ef0 <isTouched>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	f040 81a9 	bne.w	8001298 <main+0x908>
		if(isTouched( 500, 600, 85, 205))  // SEARCH ATTENDANCE
 8000f46:	23cd      	movs	r3, #205	; 0xcd
 8000f48:	2255      	movs	r2, #85	; 0x55
 8000f4a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f52:	f000 ffcd 	bl	8001ef0 <isTouched>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	f040 831f 	bne.w	800159a <main+0xc0a>
		if(isTouched(200, 300, 275, 395))  // USER ROLE
 8000f5c:	f240 138b 	movw	r3, #395	; 0x18b
 8000f60:	f240 1213 	movw	r2, #275	; 0x113
 8000f64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f68:	20c8      	movs	r0, #200	; 0xc8
 8000f6a:	f000 ffc1 	bl	8001ef0 <isTouched>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	f040 81cf 	bne.w	8001312 <main+0x982>
		if(isTouched( 500, 600, 275, 395))  // SETTING
 8000f74:	f240 138b 	movw	r3, #395	; 0x18b
 8000f78:	f240 1213 	movw	r2, #275	; 0x113
 8000f7c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f84:	f000 ffb4 	bl	8001ef0 <isTouched>
 8000f88:	2800      	cmp	r0, #0
 8000f8a:	f040 813a 	bne.w	8001202 <main+0x872>
	if(curr_page == 3)
 8000f8e:	4b54      	ldr	r3, [pc, #336]	; (80010e0 <main+0x750>)
 8000f90:	7818      	ldrb	r0, [r3, #0]
 8000f92:	2803      	cmp	r0, #3
 8000f94:	f47f ad7e 	bne.w	8000a94 <main+0x104>
		if(isTouched( 327, 580, 115, 195)) // NEW USER
 8000f98:	23c3      	movs	r3, #195	; 0xc3
 8000f9a:	2273      	movs	r2, #115	; 0x73
 8000f9c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000fa0:	f240 1047 	movw	r0, #327	; 0x147
 8000fa4:	f000 ffa4 	bl	8001ef0 <isTouched>
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	f040 816f 	bne.w	800128c <main+0x8fc>
		if(isTouched( 327, 580, 280, 360)) // ALL USER
 8000fae:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000fb2:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000fb6:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000fba:	f240 1047 	movw	r0, #327	; 0x147
 8000fbe:	f000 ff97 	bl	8001ef0 <isTouched>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f040 8294 	bne.w	80014f0 <main+0xb60>
		if(isTouched( 8, 72, 10, 70)) // BACK
 8000fc8:	2346      	movs	r3, #70	; 0x46
 8000fca:	220a      	movs	r2, #10
 8000fcc:	2148      	movs	r1, #72	; 0x48
 8000fce:	2008      	movs	r0, #8
 8000fd0:	f000 ff8e 	bl	8001ef0 <isTouched>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	f47f ad70 	bne.w	8000aba <main+0x12a>
	if(curr_page == 4)
 8000fda:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <main+0x750>)
 8000fdc:	7818      	ldrb	r0, [r3, #0]
 8000fde:	e559      	b.n	8000a94 <main+0x104>
									print_char(220+(pos*12),90,char_key[idx1][idx2],RED);
 8000fe0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000fe4:	0088      	lsls	r0, r1, #2
 8000fe6:	30dc      	adds	r0, #220	; 0xdc
 8000fe8:	782a      	ldrb	r2, [r5, #0]
 8000fea:	b280      	uxth	r0, r0
 8000fec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000ff0:	215a      	movs	r1, #90	; 0x5a
 8000ff2:	f005 f9ef 	bl	80063d4 <print_char>
									*(emp_name+pos) =char_key[idx1][idx2];
 8000ff6:	483b      	ldr	r0, [pc, #236]	; (80010e4 <main+0x754>)
 8000ff8:	493b      	ldr	r1, [pc, #236]	; (80010e8 <main+0x758>)
 8000ffa:	7803      	ldrb	r3, [r0, #0]
 8000ffc:	782a      	ldrb	r2, [r5, #0]
 8000ffe:	54ca      	strb	r2, [r1, r3]
								pos++;
 8001000:	f103 0c01 	add.w	ip, r3, #1
 8001004:	fa5f f18c 	uxtb.w	r1, ip
 8001008:	7001      	strb	r1, [r0, #0]
 800100a:	e6a6      	b.n	8000d5a <main+0x3ca>
				*(emp_name+pos+1)= '\0';
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <main+0x758>)
 800100e:	4419      	add	r1, r3
 8001010:	2300      	movs	r3, #0
 8001012:	704b      	strb	r3, [r1, #1]
	if(curr_page == 7)
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <main+0x750>)
 8001016:	7818      	ldrb	r0, [r3, #0]
 8001018:	e544      	b.n	8000aa4 <main+0x114>
			if(touchX >= 494 && touchX <= 720)
 800101a:	f8b9 3000 	ldrh.w	r3, [r9]
 800101e:	f5a3 73f7 	sub.w	r3, r3, #494	; 0x1ee
 8001022:	b29b      	uxth	r3, r3
 8001024:	2be2      	cmp	r3, #226	; 0xe2
 8001026:	f63f ae21 	bhi.w	8000c6c <main+0x2dc>
				 if(touchY >= 154 && touchY <= 200)
 800102a:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <main+0x74c>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f1a3 029a 	sub.w	r2, r3, #154	; 0x9a
 8001032:	2a2e      	cmp	r2, #46	; 0x2e
 8001034:	f240 8538 	bls.w	8001aa8 <main+0x1118>
				 if(touchY >= 154+40 && touchY <= 200+40)
 8001038:	f1a3 02c2 	sub.w	r2, r3, #194	; 0xc2
 800103c:	2a2e      	cmp	r2, #46	; 0x2e
 800103e:	f240 84e1 	bls.w	8001a04 <main+0x1074>
				 if(touchY >= 154+80 && touchY <= 200+80)
 8001042:	3bea      	subs	r3, #234	; 0xea
 8001044:	2b2e      	cmp	r3, #46	; 0x2e
 8001046:	f240 8508 	bls.w	8001a5a <main+0x10ca>
		if(sub_page ==6)
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <main+0x73c>)
 800104c:	781c      	ldrb	r4, [r3, #0]
 800104e:	e5f8      	b.n	8000c42 <main+0x2b2>
			if(touchX >= 494 && touchX <= 720)
 8001050:	f8b9 3000 	ldrh.w	r3, [r9]
 8001054:	f5a3 73f7 	sub.w	r3, r3, #494	; 0x1ee
 8001058:	b29b      	uxth	r3, r3
 800105a:	2be2      	cmp	r3, #226	; 0xe2
 800105c:	f63f ae06 	bhi.w	8000c6c <main+0x2dc>
				 if(touchY >= 266 && touchY <= 312)
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <main+0x74c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	f5a3 7285 	sub.w	r2, r3, #266	; 0x10a
 8001068:	2a2e      	cmp	r2, #46	; 0x2e
 800106a:	f240 8444 	bls.w	80018f6 <main+0xf66>
				 if(touchY >= 266+40 && touchY <= 312+40)
 800106e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8001072:	2a2e      	cmp	r2, #46	; 0x2e
 8001074:	f240 841a 	bls.w	80018ac <main+0xf1c>
				 if(touchY >= 266+80 && touchY <= 312+80)
 8001078:	f5a3 72ad 	sub.w	r2, r3, #346	; 0x15a
 800107c:	2a2e      	cmp	r2, #46	; 0x2e
 800107e:	f240 83f0 	bls.w	8001862 <main+0xed2>
				 if(touchY >= 266+120 && touchY <= 312+120)
 8001082:	f5a3 73c1 	sub.w	r3, r3, #386	; 0x182
 8001086:	2b2e      	cmp	r3, #46	; 0x2e
 8001088:	f240 83c9 	bls.w	800181e <main+0xe8e>
		if(sub_page ==5)
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <main+0x73c>)
 800108e:	781c      	ldrb	r4, [r3, #0]
 8001090:	e5d4      	b.n	8000c3c <main+0x2ac>
			if(touchX >= 197 && touchX <= 503)
 8001092:	f8b9 3000 	ldrh.w	r3, [r9]
 8001096:	3bc5      	subs	r3, #197	; 0xc5
 8001098:	b29b      	uxth	r3, r3
 800109a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800109e:	f63f af40 	bhi.w	8000f22 <main+0x592>
				 if(touchY >= 124 && touchY <= 170)
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <main+0x74c>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	f1a3 027c 	sub.w	r2, r3, #124	; 0x7c
 80010aa:	2a2e      	cmp	r2, #46	; 0x2e
 80010ac:	f240 8573 	bls.w	8001b96 <main+0x1206>
				 if(touchY >= 124+40 && touchY <= 170+40)
 80010b0:	f1a3 02a4 	sub.w	r2, r3, #164	; 0xa4
 80010b4:	2a2e      	cmp	r2, #46	; 0x2e
 80010b6:	f240 8546 	bls.w	8001b46 <main+0x11b6>
				 if(touchY >= 124+80 && touchY <= 170+80)
 80010ba:	3bcc      	subs	r3, #204	; 0xcc
 80010bc:	2b2e      	cmp	r3, #46	; 0x2e
 80010be:	f240 851c 	bls.w	8001afa <main+0x116a>
		if(sub_page ==3)
 80010c2:	4b02      	ldr	r3, [pc, #8]	; (80010cc <main+0x73c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	e717      	b.n	8000ef8 <main+0x568>
 80010c8:	200005f9 	.word	0x200005f9
 80010cc:	20000758 	.word	0x20000758
 80010d0:	20000034 	.word	0x20000034
 80010d4:	20000044 	.word	0x20000044
 80010d8:	2000002c 	.word	0x2000002c
 80010dc:	200008ba 	.word	0x200008ba
 80010e0:	20000022 	.word	0x20000022
 80010e4:	20000679 	.word	0x20000679
 80010e8:	200005fc 	.word	0x200005fc
			if(touchX >= 197 && touchX <= 503)
 80010ec:	f8b9 3000 	ldrh.w	r3, [r9]
 80010f0:	3bc5      	subs	r3, #197	; 0xc5
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80010f8:	f63f af13 	bhi.w	8000f22 <main+0x592>
				 if(touchY >= 234 && touchY <= 280)
 80010fc:	4bbf      	ldr	r3, [pc, #764]	; (80013fc <main+0xa6c>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f1a3 02ea 	sub.w	r2, r3, #234	; 0xea
 8001104:	2a2e      	cmp	r2, #46	; 0x2e
 8001106:	f240 8367 	bls.w	80017d8 <main+0xe48>
				 if(touchY >= 234+40 && touchY <= 280+40)
 800110a:	f5a3 7289 	sub.w	r2, r3, #274	; 0x112
 800110e:	2a2e      	cmp	r2, #46	; 0x2e
 8001110:	f240 8340 	bls.w	8001794 <main+0xe04>
				 if(touchY >= 234+80 && touchY <= 280+80)
 8001114:	f5a3 729d 	sub.w	r2, r3, #314	; 0x13a
 8001118:	2a2e      	cmp	r2, #46	; 0x2e
 800111a:	f240 8319 	bls.w	8001750 <main+0xdc0>
				 if(touchY >= 234+120 && touchY <= 280+120)
 800111e:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8001122:	2b2e      	cmp	r3, #46	; 0x2e
 8001124:	f240 82ce 	bls.w	80016c4 <main+0xd34>
		if(sub_page ==2)
 8001128:	4bb5      	ldr	r3, [pc, #724]	; (8001400 <main+0xa70>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	e6e1      	b.n	8000ef2 <main+0x562>
			User_Management();
 800112e:	f006 faed 	bl	800770c <User_Management>
			curr_page = 3;
 8001132:	4ab4      	ldr	r2, [pc, #720]	; (8001404 <main+0xa74>)
 8001134:	2303      	movs	r3, #3
 8001136:	7013      	strb	r3, [r2, #0]
 8001138:	e6d6      	b.n	8000ee8 <main+0x558>
			HAL_Delay(500);
 800113a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113e:	f000 ff49 	bl	8001fd4 <HAL_Delay>
			scanned_EMPLO_ID = ++emp_id_read;
 8001142:	4bb1      	ldr	r3, [pc, #708]	; (8001408 <main+0xa78>)
 8001144:	4ab1      	ldr	r2, [pc, #708]	; (800140c <main+0xa7c>)
 8001146:	781c      	ldrb	r4, [r3, #0]
 8001148:	6816      	ldr	r6, [r2, #0]
			scanned_UID = (((0xffffffff & issue_uid[0])<<24)|((0xffffffff & issue_uid[1])<<16)|((0xffffffff & issue_uid[2])<<8)|issue_uid[3]);
 800114a:	4ab1      	ldr	r2, [pc, #708]	; (8001410 <main+0xa80>)
			strcpy(write_details.wr_EMPLO_name, emp_name);
 800114c:	49b1      	ldr	r1, [pc, #708]	; (8001414 <main+0xa84>)
 800114e:	48b2      	ldr	r0, [pc, #712]	; (8001418 <main+0xa88>)
			scanned_EMPLO_ID = ++emp_id_read;
 8001150:	3401      	adds	r4, #1
 8001152:	b2e4      	uxtb	r4, r4
 8001154:	701c      	strb	r4, [r3, #0]
 8001156:	ba36      	rev	r6, r6
 8001158:	b2a4      	uxth	r4, r4
			scanned_UID = (((0xffffffff & issue_uid[0])<<24)|((0xffffffff & issue_uid[1])<<16)|((0xffffffff & issue_uid[2])<<8)|issue_uid[3]);
 800115a:	6016      	str	r6, [r2, #0]
			scanned_EMPLO_ID = ++emp_id_read;
 800115c:	4baf      	ldr	r3, [pc, #700]	; (800141c <main+0xa8c>)
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 800115e:	4ab0      	ldr	r2, [pc, #704]	; (8001420 <main+0xa90>)
			scanned_EMPLO_ID = ++emp_id_read;
 8001160:	801c      	strh	r4, [r3, #0]
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 8001162:	1ce5      	adds	r5, r4, #3
 8001164:	016d      	lsls	r5, r5, #5
 8001166:	8015      	strh	r5, [r2, #0]
			strcpy(write_details.wr_EMPLO_name, emp_name);
 8001168:	f007 fe04 	bl	8008d74 <strcpy>
			write_details.wr_EMPLO_id = scanned_EMPLO_ID;
 800116c:	49aa      	ldr	r1, [pc, #680]	; (8001418 <main+0xa88>)
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 800116e:	4aad      	ldr	r2, [pc, #692]	; (8001424 <main+0xa94>)
			write_details.wr_EMPLO_id = scanned_EMPLO_ID;
 8001170:	830c      	strh	r4, [r1, #24]
			write_details.wr_EMPLO_RFID = scanned_UID;
 8001172:	61ce      	str	r6, [r1, #28]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 8001174:	2420      	movs	r4, #32
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	462a      	mov	r2, r5
 800117a:	2564      	movs	r5, #100	; 0x64
 800117c:	e9cd 4501 	strd	r4, r5, [sp, #4]
			write_details.wr_EMPLO_desig = desgn_id;
 8001180:	48a9      	ldr	r0, [pc, #676]	; (8001428 <main+0xa98>)
 8001182:	7803      	ldrb	r3, [r0, #0]
 8001184:	768b      	strb	r3, [r1, #26]
 8001186:	460e      	mov	r6, r1
			write_details.wr_EMPLO_role = role_id;
 8001188:	49a8      	ldr	r1, [pc, #672]	; (800142c <main+0xa9c>)
 800118a:	780b      	ldrb	r3, [r1, #0]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 800118c:	49a8      	ldr	r1, [pc, #672]	; (8001430 <main+0xaa0>)
			write_details.wr_EMPLO_role = role_id;
 800118e:	76f3      	strb	r3, [r6, #27]
			write_details.wr_employee_code = 'E';
 8001190:	2345      	movs	r3, #69	; 0x45
 8001192:	75f3      	strb	r3, [r6, #23]
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 8001194:	7809      	ldrb	r1, [r1, #0]
 8001196:	2302      	movs	r3, #2
 8001198:	4658      	mov	r0, fp
 800119a:	f001 fbbf 	bl	800291c <HAL_I2C_Mem_Read>
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 800119e:	4aa1      	ldr	r2, [pc, #644]	; (8001424 <main+0xa94>)
 80011a0:	4b9e      	ldr	r3, [pc, #632]	; (800141c <main+0xa8c>)
 80011a2:	8b12      	ldrh	r2, [r2, #24]
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	f000 8243 	beq.w	8001632 <main+0xca2>
			 HAL_I2C_Mem_Write(&hi2c1, dev_addr, calculate_addr, 2, (uint8_t *) &(write_details), sizeof(write_details), 100);  ///  write employee_id
 80011ac:	e9cd 4501 	strd	r4, r5, [sp, #4]
 80011b0:	4a9b      	ldr	r2, [pc, #620]	; (8001420 <main+0xa90>)
 80011b2:	9600      	str	r6, [sp, #0]
 80011b4:	8812      	ldrh	r2, [r2, #0]
 80011b6:	f898 1000 	ldrb.w	r1, [r8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	4658      	mov	r0, fp
 80011be:	f001 fab9 	bl	8002734 <HAL_I2C_Mem_Write>
			 HAL_Delay(10);
 80011c2:	200a      	movs	r0, #10
 80011c4:	f000 ff06 	bl	8001fd4 <HAL_Delay>
			 chek_wr = 1;
 80011c8:	4a9a      	ldr	r2, [pc, #616]	; (8001434 <main+0xaa4>)
 80011ca:	2301      	movs	r3, #1
 80011cc:	7013      	strb	r3, [r2, #0]
			HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&scanned_EMPLO_ID,1,100);
 80011ce:	4b93      	ldr	r3, [pc, #588]	; (800141c <main+0xa8c>)
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80011d6:	2301      	movs	r3, #1
 80011d8:	e9cd 3e01 	strd	r3, lr, [sp, #4]
 80011dc:	f898 1000 	ldrb.w	r1, [r8]
 80011e0:	2302      	movs	r3, #2
 80011e2:	2200      	movs	r2, #0
 80011e4:	4658      	mov	r0, fp
 80011e6:	f001 faa5 	bl	8002734 <HAL_I2C_Mem_Write>
			Set_Font(&Font12x18);
 80011ea:	4893      	ldr	r0, [pc, #588]	; (8001438 <main+0xaa8>)
 80011ec:	f004 f99c 	bl	8005528 <Set_Font>
			print_string(550,240,"saved",RED);
 80011f0:	4a92      	ldr	r2, [pc, #584]	; (800143c <main+0xaac>)
 80011f2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80011f6:	21f0      	movs	r1, #240	; 0xf0
 80011f8:	f240 2026 	movw	r0, #550	; 0x226
 80011fc:	f005 f8fc 	bl	80063f8 <print_string>
 8001200:	e669      	b.n	8000ed6 <main+0x546>
	uint64_t erase_data = 0xffffffffffffffff;
 8001202:	ed8d 8b08 	vstr	d8, [sp, #32]
	uint16_t erase_addr = 0;
 8001206:	2400      	movs	r4, #0
	  HAL_I2C_Mem_Write(&hi2c1, dev_addr, erase_addr, 2, (uint8_t *) &(erase_data), sizeof(erase_data), 100);  ///  write employee_id
 8001208:	2564      	movs	r5, #100	; 0x64
 800120a:	2608      	movs	r6, #8
 800120c:	4622      	mov	r2, r4
 800120e:	2302      	movs	r3, #2
 8001210:	f898 1000 	ldrb.w	r1, [r8]
 8001214:	9700      	str	r7, [sp, #0]
 8001216:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800121a:	4658      	mov	r0, fp
 800121c:	f001 fa8a 	bl	8002734 <HAL_I2C_Mem_Write>
		HAL_Delay(5);
 8001220:	2005      	movs	r0, #5
 8001222:	f000 fed7 	bl	8001fd4 <HAL_Delay>
		erase_addr += 8;
 8001226:	3408      	adds	r4, #8
		erase_addr_cnt++;
 8001228:	f8ba 3000 	ldrh.w	r3, [sl]
		erase_addr += 8;
 800122c:	b2a4      	uxth	r4, r4
		erase_addr_cnt++;
 800122e:	3301      	adds	r3, #1
	while(erase_addr<1024)
 8001230:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		erase_addr_cnt++;
 8001234:	f8aa 3000 	strh.w	r3, [sl]
	while(erase_addr<1024)
 8001238:	d1e8      	bne.n	800120c <main+0x87c>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 800123a:	2201      	movs	r2, #1
 800123c:	2104      	movs	r1, #4
 800123e:	4880      	ldr	r0, [pc, #512]	; (8001440 <main+0xab0>)
 8001240:	f001 f82a 	bl	8002298 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8001244:	20c8      	movs	r0, #200	; 0xc8
 8001246:	f000 fec5 	bl	8001fd4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800124a:	487d      	ldr	r0, [pc, #500]	; (8001440 <main+0xab0>)
 800124c:	2200      	movs	r2, #0
 800124e:	2104      	movs	r1, #4
 8001250:	f001 f822 	bl	8002298 <HAL_GPIO_WritePin>
				HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&val,1,100);
 8001254:	2301      	movs	r3, #1
				int val=0;
 8001256:	2200      	movs	r2, #0
				HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&val,1,100);
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	f898 1000 	ldrb.w	r1, [r8]
 800125e:	9502      	str	r5, [sp, #8]
 8001260:	9700      	str	r7, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	4658      	mov	r0, fp
				int val=0;
 8001266:	9208      	str	r2, [sp, #32]
				HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&val,1,100);
 8001268:	f001 fa64 	bl	8002734 <HAL_I2C_Mem_Write>
 800126c:	e68f      	b.n	8000f8e <main+0x5fe>
			PageKeyPad();
 800126e:	f006 fcf9 	bl	8007c64 <PageKeyPad>
			keypad_down = 0;
 8001272:	4a74      	ldr	r2, [pc, #464]	; (8001444 <main+0xab4>)
 8001274:	2300      	movs	r3, #0
 8001276:	7013      	strb	r3, [r2, #0]
			curr_page = 6;
 8001278:	4a62      	ldr	r2, [pc, #392]	; (8001404 <main+0xa74>)
 800127a:	2306      	movs	r3, #6
 800127c:	7013      	strb	r3, [r2, #0]
			print_string(200,50,emp_name,0x737373); //190,590,36,84,
 800127e:	2132      	movs	r1, #50	; 0x32
 8001280:	4b71      	ldr	r3, [pc, #452]	; (8001448 <main+0xab8>)
 8001282:	4a64      	ldr	r2, [pc, #400]	; (8001414 <main+0xa84>)
 8001284:	20c8      	movs	r0, #200	; 0xc8
 8001286:	f005 f8b7 	bl	80063f8 <print_string>
 800128a:	e426      	b.n	8000ada <main+0x14a>
			NewEntry_page();
 800128c:	f006 fc5c 	bl	8007b48 <NewEntry_page>
			curr_page = 4;
 8001290:	4a5c      	ldr	r2, [pc, #368]	; (8001404 <main+0xa74>)
 8001292:	2304      	movs	r3, #4
 8001294:	7013      	strb	r3, [r2, #0]
 8001296:	e68a      	b.n	8000fae <main+0x61e>
			User_Management();
 8001298:	f006 fa38 	bl	800770c <User_Management>
			curr_page = 3;
 800129c:	4a59      	ldr	r2, [pc, #356]	; (8001404 <main+0xa74>)
 800129e:	2303      	movs	r3, #3
 80012a0:	7013      	strb	r3, [r2, #0]
 80012a2:	e650      	b.n	8000f46 <main+0x5b6>
	if(rc522_checkCard(rfid_id))
 80012a4:	4869      	ldr	r0, [pc, #420]	; (800144c <main+0xabc>)
 80012a6:	f003 fe85 	bl	8004fb4 <rc522_checkCard>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	f43f ae07 	beq.w	8000ebe <main+0x52e>
 80012b0:	f7ff f974 	bl	800059c <read_card.part.0>
 80012b4:	e603      	b.n	8000ebe <main+0x52e>
			fill_area(45, 725, 96, 464,PURPLE);
 80012b6:	4b66      	ldr	r3, [pc, #408]	; (8001450 <main+0xac0>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2260      	movs	r2, #96	; 0x60
 80012bc:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 80012c0:	f240 21d5 	movw	r1, #725	; 0x2d5
 80012c4:	202d      	movs	r0, #45	; 0x2d
 80012c6:	f004 f9e1 	bl	800568c <fill_area>
			User_Management();
 80012ca:	f006 fa1f 	bl	800770c <User_Management>
			curr_page = 3;
 80012ce:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <main+0xa74>)
 80012d0:	2303      	movs	r3, #3
 80012d2:	7013      	strb	r3, [r2, #0]
 80012d4:	e4ad      	b.n	8000c32 <main+0x2a2>
			curr_page =6;
 80012d6:	4a4b      	ldr	r2, [pc, #300]	; (8001404 <main+0xa74>)
			keypad_down = 1;
 80012d8:	4d5a      	ldr	r5, [pc, #360]	; (8001444 <main+0xab4>)
			curr_page =6;
 80012da:	2306      	movs	r3, #6
 80012dc:	7013      	strb	r3, [r2, #0]
			sub_page =7;
 80012de:	4a48      	ldr	r2, [pc, #288]	; (8001400 <main+0xa70>)
 80012e0:	2307      	movs	r3, #7
 80012e2:	7013      	strb	r3, [r2, #0]
			keypad_down = 1;
 80012e4:	2401      	movs	r4, #1
			PageKeyPad();
 80012e6:	f006 fcbd 	bl	8007c64 <PageKeyPad>
			fill_area(210,400,80,120,0xe7eefe);
 80012ea:	4b5a      	ldr	r3, [pc, #360]	; (8001454 <main+0xac4>)
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2250      	movs	r2, #80	; 0x50
 80012f0:	2378      	movs	r3, #120	; 0x78
 80012f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80012f6:	20d2      	movs	r0, #210	; 0xd2
			keypad_down = 1;
 80012f8:	702c      	strb	r4, [r5, #0]
			fill_area(210,400,80,120,0xe7eefe);
 80012fa:	f004 f9c7 	bl	800568c <fill_area>
			Set_Font(&Font12x18);
 80012fe:	484e      	ldr	r0, [pc, #312]	; (8001438 <main+0xaa8>)
 8001300:	f004 f912 	bl	8005528 <Set_Font>
			print_string(220,90,emp_name,0x737373);
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <main+0xab8>)
 8001306:	4a43      	ldr	r2, [pc, #268]	; (8001414 <main+0xa84>)
 8001308:	215a      	movs	r1, #90	; 0x5a
 800130a:	20dc      	movs	r0, #220	; 0xdc
 800130c:	f005 f874 	bl	80063f8 <print_string>
 8001310:	e55a      	b.n	8000dc8 <main+0x438>
			Role_Page();
 8001312:	f006 ff71 	bl	80081f8 <Role_Page>
			curr_page = 8;
 8001316:	4a3b      	ldr	r2, [pc, #236]	; (8001404 <main+0xa74>)
 8001318:	2308      	movs	r3, #8
 800131a:	7013      	strb	r3, [r2, #0]
 800131c:	e62a      	b.n	8000f74 <main+0x5e4>
				sub_page=0;
 800131e:	4a38      	ldr	r2, [pc, #224]	; (8001400 <main+0xa70>)
 8001320:	7013      	strb	r3, [r2, #0]
				fill_area(494,720,284,330+40,0xfffafa);
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <main+0xac8>)
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800132a:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800132e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001332:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8001336:	f004 f9a9 	bl	800568c <fill_area>
				NewUser_Role1();
 800133a:	f007 f8c5 	bl	80084c8 <NewUser_Role1>
 800133e:	e46f      	b.n	8000c20 <main+0x290>
				sub_page=0;
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <main+0xa70>)
 8001342:	701c      	strb	r4, [r3, #0]
				fill_area(197,503,124,170+80,WHITE);
 8001344:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	227c      	movs	r2, #124	; 0x7c
 800134c:	23fa      	movs	r3, #250	; 0xfa
 800134e:	f240 11f7 	movw	r1, #503	; 0x1f7
 8001352:	20c5      	movs	r0, #197	; 0xc5
 8001354:	f004 f99a 	bl	800568c <fill_area>
				NewUser_Name();
 8001358:	f006 fa5e 	bl	8007818 <NewUser_Name>
				NewUser_Desig(0,0,0,0);
 800135c:	4623      	mov	r3, r4
 800135e:	4622      	mov	r2, r4
 8001360:	4621      	mov	r1, r4
 8001362:	4620      	mov	r0, r4
 8001364:	f006 faa4 	bl	80078b0 <NewUser_Desig>
 8001368:	e574      	b.n	8000e54 <main+0x4c4>
				sub_page=0;
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <main+0xa70>)
 800136c:	7013      	strb	r3, [r2, #0]
				fill_area(197,503,244,300+40,WHITE);
 800136e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	22f4      	movs	r2, #244	; 0xf4
 8001376:	f44f 73aa 	mov.w	r3, #340	; 0x154
 800137a:	f240 11f7 	movw	r1, #503	; 0x1f7
 800137e:	20c5      	movs	r0, #197	; 0xc5
 8001380:	f004 f984 	bl	800568c <fill_area>
				NewUser_Role();
 8001384:	f006 fb12 	bl	80079ac <NewUser_Role>
 8001388:	e58c      	b.n	8000ea4 <main+0x514>
				sub_page=0;
 800138a:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <main+0xa70>)
 800138c:	7013      	strb	r3, [r2, #0]
				fill_area(197,503,234,280+120,WHITE);
 800138e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001392:	22ea      	movs	r2, #234	; 0xea
 8001394:	f240 11f7 	movw	r1, #503	; 0x1f7
 8001398:	20c5      	movs	r0, #197	; 0xc5
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013a0:	f004 f974 	bl	800568c <fill_area>
				NewUser_Role();
 80013a4:	f006 fb02 	bl	80079ac <NewUser_Role>
				NewUser_Card();
 80013a8:	f006 fb66 	bl	8007a78 <NewUser_Card>
 80013ac:	e52f      	b.n	8000e0e <main+0x47e>
				sub_page=0;
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <main+0xa70>)
 80013b0:	7013      	strb	r3, [r2, #0]
				fill_area(494,720,266,320+120,0xfffafa);
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <main+0xac8>)
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80013ba:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80013be:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80013c2:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 80013c6:	f004 f961 	bl	800568c <fill_area>
				NewUser_Role1();
 80013ca:	f007 f87d 	bl	80084c8 <NewUser_Role1>
				NewUser_Card1();
 80013ce:	f007 f8d1 	bl	8008574 <NewUser_Card1>
 80013d2:	f7ff bbde 	b.w	8000b92 <main+0x202>
				sub_page=0;
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <main+0xa70>)
 80013d8:	7013      	strb	r3, [r2, #0]
				fill_area(494,720,154,200+80,0xfffafa);
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <main+0xac8>)
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	229a      	movs	r2, #154	; 0x9a
 80013e0:	f44f 738c 	mov.w	r3, #280	; 0x118
 80013e4:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80013e8:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 80013ec:	f004 f94e 	bl	800568c <fill_area>
				NewUser_Desig1();
 80013f0:	f007 f81c 	bl	800842c <NewUser_Desig1>
				SaveAndExit();
 80013f4:	f007 f914 	bl	8008620 <SaveAndExit>
 80013f8:	f7ff bbef 	b.w	8000bda <main+0x24a>
 80013fc:	200008ba 	.word	0x200008ba
 8001400:	20000758 	.word	0x20000758
 8001404:	20000022 	.word	0x20000022
 8001408:	200005fa 	.word	0x200005fa
 800140c:	20000674 	.word	0x20000674
 8001410:	200006a4 	.word	0x200006a4
 8001414:	200005fc 	.word	0x200005fc
 8001418:	20000850 	.word	0x20000850
 800141c:	200006a2 	.word	0x200006a2
 8001420:	200005e0 	.word	0x200005e0
 8001424:	2000067c 	.word	0x2000067c
 8001428:	200005f8 	.word	0x200005f8
 800142c:	200006a0 	.word	0x200006a0
 8001430:	20000029 	.word	0x20000029
 8001434:	200005e2 	.word	0x200005e2
 8001438:	20000544 	.word	0x20000544
 800143c:	0800a0c4 	.word	0x0800a0c4
 8001440:	40020400 	.word	0x40020400
 8001444:	20000678 	.word	0x20000678
 8001448:	00737373 	.word	0x00737373
 800144c:	2000069c 	.word	0x2000069c
 8001450:	00800010 	.word	0x00800010
 8001454:	00e7eefe 	.word	0x00e7eefe
 8001458:	00fffafa 	.word	0x00fffafa
				if(touchX >= 275 && touchX <= 515 && touchY >= 340+y && touchY <= 380+y)		// space 275,515,360+y,400+y
 800145c:	f46f 7489 	mvn.w	r4, #274	; 0x112
 8001460:	191a      	adds	r2, r3, r4
 8001462:	2af0      	cmp	r2, #240	; 0xf0
 8001464:	f200 83cb 	bhi.w	8001bfe <main+0x126e>
 8001468:	4aa6      	ldr	r2, [pc, #664]	; (8001704 <main+0xd74>)
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	f5b2 7fb9 	cmp.w	r2, #370	; 0x172
 8001470:	f67f ac3d 	bls.w	8000cee <main+0x35e>
 8001474:	f5b2 7fce 	cmp.w	r2, #412	; 0x19c
 8001478:	f4bf ac39 	bcs.w	8000cee <main+0x35e>
					HAL_Delay(100);
 800147c:	2064      	movs	r0, #100	; 0x64
 800147e:	f000 fda9 	bl	8001fd4 <HAL_Delay>
					print_char(220+(pos*12),85,32,0xe7eefe);
 8001482:	48a1      	ldr	r0, [pc, #644]	; (8001708 <main+0xd78>)
 8001484:	7803      	ldrb	r3, [r0, #0]
 8001486:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800148a:	4604      	mov	r4, r0
 800148c:	0098      	lsls	r0, r3, #2
 800148e:	2220      	movs	r2, #32
 8001490:	4b9e      	ldr	r3, [pc, #632]	; (800170c <main+0xd7c>)
 8001492:	2155      	movs	r1, #85	; 0x55
 8001494:	30dc      	adds	r0, #220	; 0xdc
 8001496:	f004 ff9d 	bl	80063d4 <print_char>
					*(emp_name+pos) =32;
 800149a:	7823      	ldrb	r3, [r4, #0]
 800149c:	499c      	ldr	r1, [pc, #624]	; (8001710 <main+0xd80>)
 800149e:	2220      	movs	r2, #32
 80014a0:	54ca      	strb	r2, [r1, r3]
					pos++;
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2d9      	uxtb	r1, r3
				if(touchX >= 575 && touchX <= 640 && touchY >= 290+y && touchY <= 330+y) //backspace  575,640,310+y,350+y
 80014a6:	f8b9 3000 	ldrh.w	r3, [r9]
					pos++;
 80014aa:	7021      	strb	r1, [r4, #0]
				if(touchX >= 575 && touchX <= 640 && touchY >= 290+y && touchY <= 330+y) //backspace  575,640,310+y,350+y
 80014ac:	f2a3 223f 	subw	r2, r3, #575	; 0x23f
 80014b0:	2a41      	cmp	r2, #65	; 0x41
 80014b2:	f63f ac1e 	bhi.w	8000cf2 <main+0x362>
 80014b6:	4a93      	ldr	r2, [pc, #588]	; (8001704 <main+0xd74>)
 80014b8:	8812      	ldrh	r2, [r2, #0]
 80014ba:	f46f 70a0 	mvn.w	r0, #320	; 0x140
 80014be:	4402      	add	r2, r0
 80014c0:	b292      	uxth	r2, r2
 80014c2:	2a28      	cmp	r2, #40	; 0x28
 80014c4:	f63f ac15 	bhi.w	8000cf2 <main+0x362>
					pos--;
 80014c8:	4c8f      	ldr	r4, [pc, #572]	; (8001708 <main+0xd78>)
					fill_area(220+(pos*12),235+(pos*12),85,115,0xe7eefe);
 80014ca:	4a90      	ldr	r2, [pc, #576]	; (800170c <main+0xd7c>)
 80014cc:	9200      	str	r2, [sp, #0]
					pos--;
 80014ce:	1e4b      	subs	r3, r1, #1
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	7023      	strb	r3, [r4, #0]
					fill_area(220+(pos*12),235+(pos*12),85,115,0xe7eefe);
 80014d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80014d8:	0098      	lsls	r0, r3, #2
 80014da:	f100 01eb 	add.w	r1, r0, #235	; 0xeb
 80014de:	2373      	movs	r3, #115	; 0x73
 80014e0:	2255      	movs	r2, #85	; 0x55
 80014e2:	30dc      	adds	r0, #220	; 0xdc
 80014e4:	f004 f8d2 	bl	800568c <fill_area>
						if(touchX >= x1+150+x && touchX <= x1+190+x && touchY >= y1+190+y && touchY <= y1+230+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 80014e8:	f8b9 3000 	ldrh.w	r3, [r9]
									print_char(220+(pos*12),90,char_key[idx1][idx2],RED);
 80014ec:	7821      	ldrb	r1, [r4, #0]
 80014ee:	e400      	b.n	8000cf2 <main+0x362>
			AllUser_Page();
 80014f0:	f007 f8e6 	bl	80086c0 <AllUser_Page>
			for(ia=0;ia<emp_id_read;ia++)
 80014f4:	4b87      	ldr	r3, [pc, #540]	; (8001714 <main+0xd84>)
			scanned_EMPLO_ID = 1;
 80014f6:	4988      	ldr	r1, [pc, #544]	; (8001718 <main+0xd88>)
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 80014f8:	4888      	ldr	r0, [pc, #544]	; (800171c <main+0xd8c>)
			for(ia=0;ia<emp_id_read;ia++)
 80014fa:	781a      	ldrb	r2, [r3, #0]
			scanned_EMPLO_ID = 1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	800b      	strh	r3, [r1, #0]
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	8001      	strh	r1, [r0, #0]
			for(ia=0;ia<emp_id_read;ia++)
 8001504:	4886      	ldr	r0, [pc, #536]	; (8001720 <main+0xd90>)
 8001506:	2100      	movs	r1, #0
 8001508:	6001      	str	r1, [r0, #0]
 800150a:	2a00      	cmp	r2, #0
 800150c:	d041      	beq.n	8001592 <main+0xc02>
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 800150e:	4c85      	ldr	r4, [pc, #532]	; (8001724 <main+0xd94>)
			  availble_employee = 0;   //  employee not availble
 8001510:	460d      	mov	r5, r1
 8001512:	4608      	mov	r0, r1
 8001514:	e019      	b.n	800154a <main+0xbba>
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 8001516:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800151a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800151e:	0089      	lsls	r1, r1, #2
 8001520:	31c2      	adds	r1, #194	; 0xc2
 8001522:	2300      	movs	r3, #0
 8001524:	b289      	uxth	r1, r1
 8001526:	4622      	mov	r2, r4
 8001528:	20aa      	movs	r0, #170	; 0xaa
 800152a:	f004 ff65 	bl	80063f8 <print_string>
				scanned_EMPLO_ID++;
 800152e:	4e7a      	ldr	r6, [pc, #488]	; (8001718 <main+0xd88>)
			for(ia=0;ia<emp_id_read;ia++)
 8001530:	4a7b      	ldr	r2, [pc, #492]	; (8001720 <main+0xd90>)
 8001532:	4878      	ldr	r0, [pc, #480]	; (8001714 <main+0xd84>)
 8001534:	6811      	ldr	r1, [r2, #0]
				scanned_EMPLO_ID++;
 8001536:	8833      	ldrh	r3, [r6, #0]
			for(ia=0;ia<emp_id_read;ia++)
 8001538:	7802      	ldrb	r2, [r0, #0]
				scanned_EMPLO_ID++;
 800153a:	3301      	adds	r3, #1
			for(ia=0;ia<emp_id_read;ia++)
 800153c:	1c48      	adds	r0, r1, #1
 800153e:	4978      	ldr	r1, [pc, #480]	; (8001720 <main+0xd90>)
				scanned_EMPLO_ID++;
 8001540:	b29b      	uxth	r3, r3
			for(ia=0;ia<emp_id_read;ia++)
 8001542:	4290      	cmp	r0, r2
				scanned_EMPLO_ID++;
 8001544:	8033      	strh	r3, [r6, #0]
			for(ia=0;ia<emp_id_read;ia++)
 8001546:	6008      	str	r0, [r1, #0]
 8001548:	da23      	bge.n	8001592 <main+0xc02>
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 800154a:	1cda      	adds	r2, r3, #3
 800154c:	0152      	lsls	r2, r2, #5
 800154e:	b292      	uxth	r2, r2
 8001550:	4972      	ldr	r1, [pc, #456]	; (800171c <main+0xd8c>)
 if(32736 < calculate_addr)
 8001552:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 8001556:	429a      	cmp	r2, r3
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 8001558:	800a      	strh	r2, [r1, #0]
 if(32736 < calculate_addr)
 800155a:	d8dc      	bhi.n	8001516 <main+0xb86>
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 800155c:	2320      	movs	r3, #32
 800155e:	2164      	movs	r1, #100	; 0x64
 8001560:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001564:	486f      	ldr	r0, [pc, #444]	; (8001724 <main+0xd94>)
 8001566:	4b70      	ldr	r3, [pc, #448]	; (8001728 <main+0xd98>)
 8001568:	4606      	mov	r6, r0
 800156a:	7819      	ldrb	r1, [r3, #0]
 800156c:	9000      	str	r0, [sp, #0]
 800156e:	2302      	movs	r3, #2
 8001570:	4658      	mov	r0, fp
 8001572:	f001 f9d3 	bl	800291c <HAL_I2C_Mem_Read>
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 8001576:	4b68      	ldr	r3, [pc, #416]	; (8001718 <main+0xd88>)
 8001578:	8b32      	ldrh	r2, [r6, #24]
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	429a      	cmp	r2, r3
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 800157e:	4b68      	ldr	r3, [pc, #416]	; (8001720 <main+0xd90>)
 8001580:	6818      	ldr	r0, [r3, #0]
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 8001582:	d002      	beq.n	800158a <main+0xbfa>
			  availble_employee = 0;   //  employee not availble
 8001584:	4b69      	ldr	r3, [pc, #420]	; (800172c <main+0xd9c>)
 8001586:	701d      	strb	r5, [r3, #0]
 8001588:	e7c5      	b.n	8001516 <main+0xb86>
			  availble_employee = 1;   //  employee availble
 800158a:	4a68      	ldr	r2, [pc, #416]	; (800172c <main+0xd9c>)
 800158c:	2301      	movs	r3, #1
 800158e:	7013      	strb	r3, [r2, #0]
 8001590:	e7c1      	b.n	8001516 <main+0xb86>
			curr_page = 5;
 8001592:	4a67      	ldr	r2, [pc, #412]	; (8001730 <main+0xda0>)
 8001594:	2305      	movs	r3, #5
 8001596:	7013      	strb	r3, [r2, #0]
 8001598:	e516      	b.n	8000fc8 <main+0x638>
			attendence_search();
 800159a:	f006 fcfd 	bl	8007f98 <attendence_search>
			for(ia=0;ia<5;ia++)
 800159e:	4b60      	ldr	r3, [pc, #384]	; (8001720 <main+0xd90>)
			scanned_EMPLO_ID =1;
 80015a0:	4a5d      	ldr	r2, [pc, #372]	; (8001718 <main+0xd88>)
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 80015a2:	4c60      	ldr	r4, [pc, #384]	; (8001724 <main+0xd94>)
			for(ia=0;ia<5;ia++)
 80015a4:	2100      	movs	r1, #0
 80015a6:	6019      	str	r1, [r3, #0]
			scanned_EMPLO_ID =1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	8013      	strh	r3, [r2, #0]
			  availble_employee = 0;   //  employee not availble
 80015ac:	460d      	mov	r5, r1
 80015ae:	e016      	b.n	80015de <main+0xc4e>
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 80015b0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80015b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80015b8:	0089      	lsls	r1, r1, #2
 80015ba:	31c2      	adds	r1, #194	; 0xc2
 80015bc:	2300      	movs	r3, #0
 80015be:	20aa      	movs	r0, #170	; 0xaa
 80015c0:	b289      	uxth	r1, r1
 80015c2:	4622      	mov	r2, r4
 80015c4:	f004 ff18 	bl	80063f8 <print_string>
				scanned_EMPLO_ID++;
 80015c8:	4a53      	ldr	r2, [pc, #332]	; (8001718 <main+0xd88>)
			for(ia=0;ia<5;ia++)
 80015ca:	4855      	ldr	r0, [pc, #340]	; (8001720 <main+0xd90>)
				scanned_EMPLO_ID++;
 80015cc:	8813      	ldrh	r3, [r2, #0]
			for(ia=0;ia<5;ia++)
 80015ce:	6801      	ldr	r1, [r0, #0]
				scanned_EMPLO_ID++;
 80015d0:	3301      	adds	r3, #1
			for(ia=0;ia<5;ia++)
 80015d2:	3101      	adds	r1, #1
				scanned_EMPLO_ID++;
 80015d4:	b29b      	uxth	r3, r3
			for(ia=0;ia<5;ia++)
 80015d6:	2904      	cmp	r1, #4
				scanned_EMPLO_ID++;
 80015d8:	8013      	strh	r3, [r2, #0]
			for(ia=0;ia<5;ia++)
 80015da:	6001      	str	r1, [r0, #0]
 80015dc:	dc25      	bgt.n	800162a <main+0xc9a>
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 80015de:	1cda      	adds	r2, r3, #3
 80015e0:	0152      	lsls	r2, r2, #5
 80015e2:	b292      	uxth	r2, r2
 80015e4:	484d      	ldr	r0, [pc, #308]	; (800171c <main+0xd8c>)
 if(32736 < calculate_addr)
 80015e6:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80015ea:	429a      	cmp	r2, r3
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 80015ec:	8002      	strh	r2, [r0, #0]
 if(32736 < calculate_addr)
 80015ee:	d8df      	bhi.n	80015b0 <main+0xc20>
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <main+0xd98>)
 80015f2:	2664      	movs	r6, #100	; 0x64
 80015f4:	2020      	movs	r0, #32
 80015f6:	7819      	ldrb	r1, [r3, #0]
 80015f8:	e9cd 0601 	strd	r0, r6, [sp, #4]
 80015fc:	4849      	ldr	r0, [pc, #292]	; (8001724 <main+0xd94>)
 80015fe:	9000      	str	r0, [sp, #0]
 8001600:	2302      	movs	r3, #2
 8001602:	4606      	mov	r6, r0
 8001604:	4658      	mov	r0, fp
 8001606:	f001 f989 	bl	800291c <HAL_I2C_Mem_Read>
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <main+0xd88>)
 800160c:	8b32      	ldrh	r2, [r6, #24]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d004      	beq.n	800161e <main+0xc8e>
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 8001614:	4b42      	ldr	r3, [pc, #264]	; (8001720 <main+0xd90>)
 8001616:	6819      	ldr	r1, [r3, #0]
			  availble_employee = 0;   //  employee not availble
 8001618:	4b44      	ldr	r3, [pc, #272]	; (800172c <main+0xd9c>)
 800161a:	701d      	strb	r5, [r3, #0]
 800161c:	e7c8      	b.n	80015b0 <main+0xc20>
			  availble_employee = 1;   //  employee availble
 800161e:	4a43      	ldr	r2, [pc, #268]	; (800172c <main+0xd9c>)
 8001620:	2301      	movs	r3, #1
 8001622:	7013      	strb	r3, [r2, #0]
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <main+0xd90>)
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	e7c2      	b.n	80015b0 <main+0xc20>
			curr_page = 7;
 800162a:	4a41      	ldr	r2, [pc, #260]	; (8001730 <main+0xda0>)
 800162c:	2307      	movs	r3, #7
 800162e:	7013      	strb	r3, [r2, #0]
 8001630:	e494      	b.n	8000f5c <main+0x5cc>
			 availble_employee = 1;   //  employee is availble
 8001632:	4a3e      	ldr	r2, [pc, #248]	; (800172c <main+0xd9c>)
 8001634:	2301      	movs	r3, #1
 8001636:	7013      	strb	r3, [r2, #0]
 8001638:	e5c9      	b.n	80011ce <main+0x83e>
						fill_area(210,400,370,400,0xe7eefe);
 800163a:	4b34      	ldr	r3, [pc, #208]	; (800170c <main+0xd7c>)
						card_ptr = dropdown_CardThumb[1];
 800163c:	4a3d      	ldr	r2, [pc, #244]	; (8001734 <main+0xda4>)
						fill_area(210,400,370,400,0xe7eefe);
 800163e:	9300      	str	r3, [sp, #0]
						card_ptr = dropdown_CardThumb[1];
 8001640:	4d3d      	ldr	r5, [pc, #244]	; (8001738 <main+0xda8>)
						active_role =1;
 8001642:	4e3e      	ldr	r6, [pc, #248]	; (800173c <main+0xdac>)
						card_ptr = dropdown_CardThumb[1];
 8001644:	6852      	ldr	r2, [r2, #4]
 8001646:	602a      	str	r2, [r5, #0]
						fill_area(210,400,370,400,0xe7eefe);
 8001648:	f44f 73c8 	mov.w	r3, #400	; 0x190
						active_role =1;
 800164c:	2401      	movs	r4, #1
						fill_area(210,400,370,400,0xe7eefe);
 800164e:	4619      	mov	r1, r3
 8001650:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001654:	20d2      	movs	r0, #210	; 0xd2
						active_role =1;
 8001656:	7034      	strb	r4, [r6, #0]
						fill_area(210,400,370,400,0xe7eefe);
 8001658:	f004 f818 	bl	800568c <fill_area>
						print_string(220,375,card_ptr,0x737373);
 800165c:	682a      	ldr	r2, [r5, #0]
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <main+0xdb0>)
 8001660:	f240 1177 	movw	r1, #375	; 0x177
 8001664:	20dc      	movs	r0, #220	; 0xdc
 8001666:	f004 fec7 	bl	80063f8 <print_string>
						dropdown(&dropdown_CardThumb[0],2,0,0,10);
 800166a:	2300      	movs	r3, #0
 800166c:	220a      	movs	r2, #10
 800166e:	9200      	str	r2, [sp, #0]
 8001670:	4830      	ldr	r0, [pc, #192]	; (8001734 <main+0xda4>)
 8001672:	461a      	mov	r2, r3
 8001674:	2102      	movs	r1, #2
 8001676:	f006 fc33 	bl	8007ee0 <dropdown>
 800167a:	e452      	b.n	8000f22 <main+0x592>
						active_role =0;
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <main+0xdac>)
						fill_area(210,400,370,400,0xe7eefe);
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <main+0xd7c>)
 8001680:	9300      	str	r3, [sp, #0]
						active_role =0;
 8001682:	2400      	movs	r4, #0
						card_ptr = dropdown_CardThumb[0];
 8001684:	482c      	ldr	r0, [pc, #176]	; (8001738 <main+0xda8>)
						active_role =0;
 8001686:	7014      	strb	r4, [r2, #0]
						card_ptr = dropdown_CardThumb[0];
 8001688:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <main+0xda4>)
						fill_area(210,400,370,400,0xe7eefe);
 800168a:	f44f 73c8 	mov.w	r3, #400	; 0x190
						card_ptr = dropdown_CardThumb[0];
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	6002      	str	r2, [r0, #0]
 8001692:	4605      	mov	r5, r0
						fill_area(210,400,370,400,0xe7eefe);
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 72b9 	mov.w	r2, #370	; 0x172
 800169a:	20d2      	movs	r0, #210	; 0xd2
 800169c:	f003 fff6 	bl	800568c <fill_area>
						print_string(220,375,card_ptr,0x737373);
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <main+0xdb0>)
 80016a2:	682a      	ldr	r2, [r5, #0]
 80016a4:	f240 1177 	movw	r1, #375	; 0x177
 80016a8:	20dc      	movs	r0, #220	; 0xdc
 80016aa:	f004 fea5 	bl	80063f8 <print_string>
						dropdown(&dropdown_CardThumb[0],2,0,0,10);
 80016ae:	230a      	movs	r3, #10
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4820      	ldr	r0, [pc, #128]	; (8001734 <main+0xda4>)
 80016b4:	4623      	mov	r3, r4
 80016b6:	4622      	mov	r2, r4
 80016b8:	2102      	movs	r1, #2
 80016ba:	f006 fc11 	bl	8007ee0 <dropdown>
				 if(touchY >= 254+40 && touchY <= 300+40)
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <main+0xd74>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	e429      	b.n	8000f18 <main+0x588>
					 	fill_area(210,400,180,210,0xe7eefe);
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <main+0xd7c>)
					 desgn_ptr =	dropdown_desgn[3];
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <main+0xdb4>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80016c8:	9300      	str	r3, [sp, #0]
					 desgn_ptr =	dropdown_desgn[3];
 80016ca:	4d1f      	ldr	r5, [pc, #124]	; (8001748 <main+0xdb8>)
 80016cc:	68d2      	ldr	r2, [r2, #12]
 80016ce:	602a      	str	r2, [r5, #0]
						active_role =3;
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <main+0xdac>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80016d2:	23d2      	movs	r3, #210	; 0xd2
						active_role =3;
 80016d4:	2403      	movs	r4, #3
					 	fill_area(210,400,180,210,0xe7eefe);
 80016d6:	4618      	mov	r0, r3
						active_role =3;
 80016d8:	7014      	strb	r4, [r2, #0]
					 	fill_area(210,400,180,210,0xe7eefe);
 80016da:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80016de:	22b4      	movs	r2, #180	; 0xb4
 80016e0:	f003 ffd4 	bl	800568c <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 80016e4:	4b16      	ldr	r3, [pc, #88]	; (8001740 <main+0xdb0>)
 80016e6:	682a      	ldr	r2, [r5, #0]
 80016e8:	21be      	movs	r1, #190	; 0xbe
 80016ea:	20dc      	movs	r0, #220	; 0xdc
 80016ec:	f004 fe84 	bl	80063f8 <print_string>
					 dropdown(&dropdown_desgn[0],4,0,0,0);
 80016f0:	2300      	movs	r3, #0
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4813      	ldr	r0, [pc, #76]	; (8001744 <main+0xdb4>)
 80016f8:	2104      	movs	r1, #4
 80016fa:	f006 fbf1 	bl	8007ee0 <dropdown>
					 desgn_id =3;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <main+0xdbc>)
 8001700:	701c      	strb	r4, [r3, #0]
 8001702:	e511      	b.n	8001128 <main+0x798>
 8001704:	200008ba 	.word	0x200008ba
 8001708:	20000679 	.word	0x20000679
 800170c:	00e7eefe 	.word	0x00e7eefe
 8001710:	200005fc 	.word	0x200005fc
 8001714:	200005fa 	.word	0x200005fa
 8001718:	200006a2 	.word	0x200006a2
 800171c:	200005e0 	.word	0x200005e0
 8001720:	20000050 	.word	0x20000050
 8001724:	2000067c 	.word	0x2000067c
 8001728:	20000029 	.word	0x20000029
 800172c:	200005df 	.word	0x200005df
 8001730:	20000022 	.word	0x20000022
 8001734:	2000002c 	.word	0x2000002c
 8001738:	20000000 	.word	0x20000000
 800173c:	200005de 	.word	0x200005de
 8001740:	00737373 	.word	0x00737373
 8001744:	20000034 	.word	0x20000034
 8001748:	20000024 	.word	0x20000024
 800174c:	200005f8 	.word	0x200005f8
					 	fill_area(210,400,180,210,0xe7eefe);
 8001750:	4ba3      	ldr	r3, [pc, #652]	; (80019e0 <main+0x1050>)
					 desgn_ptr =	dropdown_desgn[2];
 8001752:	4aa4      	ldr	r2, [pc, #656]	; (80019e4 <main+0x1054>)
					 	fill_area(210,400,180,210,0xe7eefe);
 8001754:	9300      	str	r3, [sp, #0]
					 desgn_ptr =	dropdown_desgn[2];
 8001756:	4da4      	ldr	r5, [pc, #656]	; (80019e8 <main+0x1058>)
 8001758:	6892      	ldr	r2, [r2, #8]
 800175a:	602a      	str	r2, [r5, #0]
						active_role =2;
 800175c:	4aa3      	ldr	r2, [pc, #652]	; (80019ec <main+0x105c>)
					 	fill_area(210,400,180,210,0xe7eefe);
 800175e:	23d2      	movs	r3, #210	; 0xd2
						active_role =2;
 8001760:	2402      	movs	r4, #2
					 	fill_area(210,400,180,210,0xe7eefe);
 8001762:	4618      	mov	r0, r3
						active_role =2;
 8001764:	7014      	strb	r4, [r2, #0]
					 	fill_area(210,400,180,210,0xe7eefe);
 8001766:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800176a:	22b4      	movs	r2, #180	; 0xb4
 800176c:	f003 ff8e 	bl	800568c <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 8001770:	4b9f      	ldr	r3, [pc, #636]	; (80019f0 <main+0x1060>)
 8001772:	682a      	ldr	r2, [r5, #0]
 8001774:	21be      	movs	r1, #190	; 0xbe
 8001776:	20dc      	movs	r0, #220	; 0xdc
 8001778:	f004 fe3e 	bl	80063f8 <print_string>
					 dropdown(&dropdown_desgn[0],4,0,0,0);
 800177c:	2300      	movs	r3, #0
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4898      	ldr	r0, [pc, #608]	; (80019e4 <main+0x1054>)
 8001784:	2104      	movs	r1, #4
 8001786:	f006 fbab 	bl	8007ee0 <dropdown>
					 desgn_id =2;
 800178a:	4b9a      	ldr	r3, [pc, #616]	; (80019f4 <main+0x1064>)
 800178c:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 234+120 && touchY <= 280+120)
 800178e:	4b9a      	ldr	r3, [pc, #616]	; (80019f8 <main+0x1068>)
 8001790:	881b      	ldrh	r3, [r3, #0]
 8001792:	e4c4      	b.n	800111e <main+0x78e>
					 	fill_area(210,400,180,210,0xe7eefe);
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <main+0x1050>)
					 desgn_ptr =	dropdown_desgn[1];
 8001796:	4a93      	ldr	r2, [pc, #588]	; (80019e4 <main+0x1054>)
					 	fill_area(210,400,180,210,0xe7eefe);
 8001798:	9300      	str	r3, [sp, #0]
					 desgn_ptr =	dropdown_desgn[1];
 800179a:	4d93      	ldr	r5, [pc, #588]	; (80019e8 <main+0x1058>)
 800179c:	6852      	ldr	r2, [r2, #4]
 800179e:	602a      	str	r2, [r5, #0]
						active_role =1;
 80017a0:	4a92      	ldr	r2, [pc, #584]	; (80019ec <main+0x105c>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80017a2:	23d2      	movs	r3, #210	; 0xd2
						active_role =1;
 80017a4:	2401      	movs	r4, #1
					 	fill_area(210,400,180,210,0xe7eefe);
 80017a6:	4618      	mov	r0, r3
						active_role =1;
 80017a8:	7014      	strb	r4, [r2, #0]
					 	fill_area(210,400,180,210,0xe7eefe);
 80017aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017ae:	22b4      	movs	r2, #180	; 0xb4
 80017b0:	f003 ff6c 	bl	800568c <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 80017b4:	4b8e      	ldr	r3, [pc, #568]	; (80019f0 <main+0x1060>)
 80017b6:	682a      	ldr	r2, [r5, #0]
 80017b8:	21be      	movs	r1, #190	; 0xbe
 80017ba:	20dc      	movs	r0, #220	; 0xdc
 80017bc:	f004 fe1c 	bl	80063f8 <print_string>
					 dropdown(&dropdown_desgn[0],4,0,0,0);
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4887      	ldr	r0, [pc, #540]	; (80019e4 <main+0x1054>)
 80017c8:	2104      	movs	r1, #4
 80017ca:	f006 fb89 	bl	8007ee0 <dropdown>
					 desgn_id =1;
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <main+0x1064>)
 80017d0:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 234+80 && touchY <= 280+80)
 80017d2:	4b89      	ldr	r3, [pc, #548]	; (80019f8 <main+0x1068>)
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	e49d      	b.n	8001114 <main+0x784>
						active_role =0;
 80017d8:	4a84      	ldr	r2, [pc, #528]	; (80019ec <main+0x105c>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <main+0x1050>)
 80017dc:	9300      	str	r3, [sp, #0]
						active_role =0;
 80017de:	2400      	movs	r4, #0
						desgn_ptr =	dropdown_desgn[0];
 80017e0:	4981      	ldr	r1, [pc, #516]	; (80019e8 <main+0x1058>)
						active_role =0;
 80017e2:	7014      	strb	r4, [r2, #0]
						desgn_ptr =	dropdown_desgn[0];
 80017e4:	4a7f      	ldr	r2, [pc, #508]	; (80019e4 <main+0x1054>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80017e6:	23d2      	movs	r3, #210	; 0xd2
						desgn_ptr =	dropdown_desgn[0];
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	600a      	str	r2, [r1, #0]
 80017ec:	460d      	mov	r5, r1
					 	fill_area(210,400,180,210,0xe7eefe);
 80017ee:	4618      	mov	r0, r3
 80017f0:	22b4      	movs	r2, #180	; 0xb4
 80017f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017f6:	f003 ff49 	bl	800568c <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 80017fa:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <main+0x1060>)
 80017fc:	682a      	ldr	r2, [r5, #0]
 80017fe:	21be      	movs	r1, #190	; 0xbe
 8001800:	20dc      	movs	r0, #220	; 0xdc
 8001802:	f004 fdf9 	bl	80063f8 <print_string>
						dropdown(&dropdown_desgn[0],4,0,0,0);
 8001806:	4623      	mov	r3, r4
 8001808:	4876      	ldr	r0, [pc, #472]	; (80019e4 <main+0x1054>)
 800180a:	9400      	str	r4, [sp, #0]
 800180c:	4622      	mov	r2, r4
 800180e:	2104      	movs	r1, #4
 8001810:	f006 fb66 	bl	8007ee0 <dropdown>
						desgn_id =0;
 8001814:	4b77      	ldr	r3, [pc, #476]	; (80019f4 <main+0x1064>)
 8001816:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 234+40 && touchY <= 280+40)
 8001818:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <main+0x1068>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	e475      	b.n	800110a <main+0x77a>
					 	fill_area(499,655,204,254,0xe7eefe);
 800181e:	4b70      	ldr	r3, [pc, #448]	; (80019e0 <main+0x1050>)
 8001820:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[3];
 8001822:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <main+0x1054>)
 8001824:	4d70      	ldr	r5, [pc, #448]	; (80019e8 <main+0x1058>)
						active_role =3;
 8001826:	4e71      	ldr	r6, [pc, #452]	; (80019ec <main+0x105c>)
						desgn_ptr =	dropdown_desgn[3];
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	602b      	str	r3, [r5, #0]
						active_role =3;
 800182c:	2403      	movs	r4, #3
					 	fill_area(499,655,204,254,0xe7eefe);
 800182e:	23fe      	movs	r3, #254	; 0xfe
 8001830:	22cc      	movs	r2, #204	; 0xcc
 8001832:	f240 218f 	movw	r1, #655	; 0x28f
 8001836:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =3;
 800183a:	7034      	strb	r4, [r6, #0]
					 	fill_area(499,655,204,254,0xe7eefe);
 800183c:	f003 ff26 	bl	800568c <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 8001840:	682a      	ldr	r2, [r5, #0]
 8001842:	4b6b      	ldr	r3, [pc, #428]	; (80019f0 <main+0x1060>)
 8001844:	21d6      	movs	r1, #214	; 0xd6
 8001846:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 800184a:	f004 fdd5 	bl	80063f8 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 800184e:	2320      	movs	r3, #32
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	4864      	ldr	r0, [pc, #400]	; (80019e4 <main+0x1054>)
 8001854:	23d9      	movs	r3, #217	; 0xd9
 8001856:	f240 1229 	movw	r2, #297	; 0x129
 800185a:	2104      	movs	r1, #4
 800185c:	f006 fb40 	bl	8007ee0 <dropdown>
 8001860:	e414      	b.n	800108c <main+0x6fc>
					 	fill_area(499,655,204,254,0xe7eefe);
 8001862:	4b5f      	ldr	r3, [pc, #380]	; (80019e0 <main+0x1050>)
 8001864:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[2];
 8001866:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <main+0x1054>)
 8001868:	4d5f      	ldr	r5, [pc, #380]	; (80019e8 <main+0x1058>)
						active_role =2;
 800186a:	4e60      	ldr	r6, [pc, #384]	; (80019ec <main+0x105c>)
						desgn_ptr =	dropdown_desgn[2];
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	602b      	str	r3, [r5, #0]
						active_role =2;
 8001870:	2402      	movs	r4, #2
					 	fill_area(499,655,204,254,0xe7eefe);
 8001872:	23fe      	movs	r3, #254	; 0xfe
 8001874:	22cc      	movs	r2, #204	; 0xcc
 8001876:	f240 218f 	movw	r1, #655	; 0x28f
 800187a:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =2;
 800187e:	7034      	strb	r4, [r6, #0]
					 	fill_area(499,655,204,254,0xe7eefe);
 8001880:	f003 ff04 	bl	800568c <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 8001884:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <main+0x1060>)
 8001886:	682a      	ldr	r2, [r5, #0]
 8001888:	21d6      	movs	r1, #214	; 0xd6
 800188a:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 800188e:	f004 fdb3 	bl	80063f8 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 8001892:	2320      	movs	r3, #32
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	4853      	ldr	r0, [pc, #332]	; (80019e4 <main+0x1054>)
 8001898:	23d9      	movs	r3, #217	; 0xd9
 800189a:	f240 1229 	movw	r2, #297	; 0x129
 800189e:	2104      	movs	r1, #4
 80018a0:	f006 fb1e 	bl	8007ee0 <dropdown>
				 if(touchY >= 266+120 && touchY <= 312+120)
 80018a4:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <main+0x1068>)
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	f7ff bbeb 	b.w	8001082 <main+0x6f2>
					 	fill_area(499,655,204,254,0xe7eefe);
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <main+0x1050>)
 80018ae:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[1];
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <main+0x1054>)
 80018b2:	4d4d      	ldr	r5, [pc, #308]	; (80019e8 <main+0x1058>)
						active_role =1;
 80018b4:	4e4d      	ldr	r6, [pc, #308]	; (80019ec <main+0x105c>)
						desgn_ptr =	dropdown_desgn[1];
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	602b      	str	r3, [r5, #0]
						active_role =1;
 80018ba:	2401      	movs	r4, #1
					 	fill_area(499,655,204,254,0xe7eefe);
 80018bc:	23fe      	movs	r3, #254	; 0xfe
 80018be:	22cc      	movs	r2, #204	; 0xcc
 80018c0:	f240 218f 	movw	r1, #655	; 0x28f
 80018c4:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =1;
 80018c8:	7034      	strb	r4, [r6, #0]
					 	fill_area(499,655,204,254,0xe7eefe);
 80018ca:	f003 fedf 	bl	800568c <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <main+0x1060>)
 80018d0:	682a      	ldr	r2, [r5, #0]
 80018d2:	21d6      	movs	r1, #214	; 0xd6
 80018d4:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 80018d8:	f004 fd8e 	bl	80063f8 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 80018dc:	2320      	movs	r3, #32
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4840      	ldr	r0, [pc, #256]	; (80019e4 <main+0x1054>)
 80018e2:	23d9      	movs	r3, #217	; 0xd9
 80018e4:	f240 1229 	movw	r2, #297	; 0x129
 80018e8:	2104      	movs	r1, #4
 80018ea:	f006 faf9 	bl	8007ee0 <dropdown>
				 if(touchY >= 266+80 && touchY <= 312+80)
 80018ee:	4b42      	ldr	r3, [pc, #264]	; (80019f8 <main+0x1068>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	f7ff bbc1 	b.w	8001078 <main+0x6e8>
					 	fill_area(499,655,204,254,0xe7eefe);
 80018f6:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <main+0x1050>)
 80018f8:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[0];
 80018fa:	4b3a      	ldr	r3, [pc, #232]	; (80019e4 <main+0x1054>)
 80018fc:	4e3a      	ldr	r6, [pc, #232]	; (80019e8 <main+0x1058>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6033      	str	r3, [r6, #0]
						active_role =0;
 8001902:	4e3a      	ldr	r6, [pc, #232]	; (80019ec <main+0x105c>)
 8001904:	2500      	movs	r5, #0
 8001906:	7035      	strb	r5, [r6, #0]
						print_string(510,214,desgn_ptr,0x737373);
 8001908:	4e37      	ldr	r6, [pc, #220]	; (80019e8 <main+0x1058>)
					 	fill_area(499,655,204,254,0xe7eefe);
 800190a:	23fe      	movs	r3, #254	; 0xfe
 800190c:	22cc      	movs	r2, #204	; 0xcc
 800190e:	f240 218f 	movw	r1, #655	; 0x28f
 8001912:	f240 10f3 	movw	r0, #499	; 0x1f3
 8001916:	f003 feb9 	bl	800568c <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <main+0x1060>)
 800191c:	6832      	ldr	r2, [r6, #0]
 800191e:	21d6      	movs	r1, #214	; 0xd6
 8001920:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001924:	f004 fd68 	bl	80063f8 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 8001928:	2320      	movs	r3, #32
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	482d      	ldr	r0, [pc, #180]	; (80019e4 <main+0x1054>)
 800192e:	23d9      	movs	r3, #217	; 0xd9
 8001930:	4621      	mov	r1, r4
 8001932:	f240 1229 	movw	r2, #297	; 0x129
 8001936:	f006 fad3 	bl	8007ee0 <dropdown>
				 if(touchY >= 266+40 && touchY <= 312+40)
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <main+0x1068>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	f7ff bb96 	b.w	800106e <main+0x6de>
						fill_area(499,655,384,434,0xe7eefe);
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <main+0x1050>)
 8001944:	9300      	str	r3, [sp, #0]
						card_ptr = dropdown_CardThumb[1];
 8001946:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <main+0x106c>)
 8001948:	4d2d      	ldr	r5, [pc, #180]	; (8001a00 <main+0x1070>)
						active_role =1;
 800194a:	4e28      	ldr	r6, [pc, #160]	; (80019ec <main+0x105c>)
						card_ptr = dropdown_CardThumb[1];
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	602b      	str	r3, [r5, #0]
						active_role =1;
 8001950:	2401      	movs	r4, #1
						fill_area(499,655,384,434,0xe7eefe);
 8001952:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8001956:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800195a:	f240 218f 	movw	r1, #655	; 0x28f
 800195e:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =1;
 8001962:	7034      	strb	r4, [r6, #0]
						fill_area(499,655,384,434,0xe7eefe);
 8001964:	f003 fe92 	bl	800568c <fill_area>
						print_string(510,400,card_ptr,0x737373);
 8001968:	682a      	ldr	r2, [r5, #0]
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <main+0x1060>)
 800196c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001970:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001974:	f004 fd40 	bl	80063f8 <print_string>
					 dropdown(&dropdown_CardThumb[0],2,297,217,50);
 8001978:	2332      	movs	r3, #50	; 0x32
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	481f      	ldr	r0, [pc, #124]	; (80019fc <main+0x106c>)
 800197e:	23d9      	movs	r3, #217	; 0xd9
 8001980:	f240 1229 	movw	r2, #297	; 0x129
 8001984:	2102      	movs	r1, #2
 8001986:	f006 faab 	bl	8007ee0 <dropdown>
 800198a:	f7ff b96f 	b.w	8000c6c <main+0x2dc>
						fill_area(499,655,384,434,0xe7eefe);
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <main+0x1050>)
 8001990:	9300      	str	r3, [sp, #0]
					 card_ptr = dropdown_CardThumb[0];
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <main+0x106c>)
 8001994:	4d1a      	ldr	r5, [pc, #104]	; (8001a00 <main+0x1070>)
						active_role =0;
 8001996:	4e15      	ldr	r6, [pc, #84]	; (80019ec <main+0x105c>)
					 card_ptr = dropdown_CardThumb[0];
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	602b      	str	r3, [r5, #0]
						active_role =0;
 800199c:	2400      	movs	r4, #0
						fill_area(499,655,384,434,0xe7eefe);
 800199e:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 80019a2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80019a6:	f240 218f 	movw	r1, #655	; 0x28f
 80019aa:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =0;
 80019ae:	7034      	strb	r4, [r6, #0]
						fill_area(499,655,384,434,0xe7eefe);
 80019b0:	f003 fe6c 	bl	800568c <fill_area>
						print_string(510,400,card_ptr,0x737373);
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <main+0x1060>)
 80019b6:	682a      	ldr	r2, [r5, #0]
 80019b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80019bc:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 80019c0:	f004 fd1a 	bl	80063f8 <print_string>
					 dropdown(&dropdown_CardThumb[0],2,297,217,50);
 80019c4:	2332      	movs	r3, #50	; 0x32
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <main+0x106c>)
 80019ca:	23d9      	movs	r3, #217	; 0xd9
 80019cc:	f240 1229 	movw	r2, #297	; 0x129
 80019d0:	2102      	movs	r1, #2
 80019d2:	f006 fa85 	bl	8007ee0 <dropdown>
				 if(touchY >= 284+40 && touchY <= 330+40)
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <main+0x1068>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	f7ff b942 	b.w	8000c62 <main+0x2d2>
 80019de:	bf00      	nop
 80019e0:	00e7eefe 	.word	0x00e7eefe
 80019e4:	20000034 	.word	0x20000034
 80019e8:	20000024 	.word	0x20000024
 80019ec:	200005de 	.word	0x200005de
 80019f0:	00737373 	.word	0x00737373
 80019f4:	200005f8 	.word	0x200005f8
 80019f8:	200008ba 	.word	0x200008ba
 80019fc:	2000002c 	.word	0x2000002c
 8001a00:	20000000 	.word	0x20000000
						fill_area(499,655,294,344,0xe7eefe);
 8001a04:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <main+0x1274>)
 8001a06:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[1];
 8001a08:	4b7f      	ldr	r3, [pc, #508]	; (8001c08 <main+0x1278>)
 8001a0a:	4d80      	ldr	r5, [pc, #512]	; (8001c0c <main+0x127c>)
						active_role =1;
 8001a0c:	4e80      	ldr	r6, [pc, #512]	; (8001c10 <main+0x1280>)
						role_ptr =	dropdown_role[1];
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	602b      	str	r3, [r5, #0]
						active_role =1;
 8001a12:	2401      	movs	r4, #1
						fill_area(499,655,294,344,0xe7eefe);
 8001a14:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001a18:	f44f 7293 	mov.w	r2, #294	; 0x126
 8001a1c:	f240 218f 	movw	r1, #655	; 0x28f
 8001a20:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =1;
 8001a24:	7034      	strb	r4, [r6, #0]
						fill_area(499,655,294,344,0xe7eefe);
 8001a26:	f003 fe31 	bl	800568c <fill_area>
						print_string(510,307,role_ptr,0x737373);
 8001a2a:	4b7a      	ldr	r3, [pc, #488]	; (8001c14 <main+0x1284>)
 8001a2c:	682a      	ldr	r2, [r5, #0]
 8001a2e:	f240 1133 	movw	r1, #307	; 0x133
 8001a32:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001a36:	f004 fcdf 	bl	80063f8 <print_string>
						dropdown(&dropdown_role[0],3,297,217,-80);
 8001a3a:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	4871      	ldr	r0, [pc, #452]	; (8001c08 <main+0x1278>)
 8001a42:	23d9      	movs	r3, #217	; 0xd9
 8001a44:	f240 1229 	movw	r2, #297	; 0x129
 8001a48:	2103      	movs	r1, #3
 8001a4a:	f006 fa49 	bl	8007ee0 <dropdown>
				 if(touchY >= 154+80 && touchY <= 200+80)
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <main+0x1288>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	3bea      	subs	r3, #234	; 0xea
 8001a54:	2b2e      	cmp	r3, #46	; 0x2e
 8001a56:	f63f aaf8 	bhi.w	800104a <main+0x6ba>
						fill_area(499,655,294,344,0xe7eefe);
 8001a5a:	4b6a      	ldr	r3, [pc, #424]	; (8001c04 <main+0x1274>)
 8001a5c:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[2];
 8001a5e:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <main+0x1278>)
 8001a60:	4d6a      	ldr	r5, [pc, #424]	; (8001c0c <main+0x127c>)
						active_role =2;
 8001a62:	4e6b      	ldr	r6, [pc, #428]	; (8001c10 <main+0x1280>)
						role_ptr =	dropdown_role[2];
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	602b      	str	r3, [r5, #0]
						active_role =2;
 8001a68:	2402      	movs	r4, #2
						fill_area(499,655,294,344,0xe7eefe);
 8001a6a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001a6e:	f44f 7293 	mov.w	r2, #294	; 0x126
 8001a72:	f240 218f 	movw	r1, #655	; 0x28f
 8001a76:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =2;
 8001a7a:	7034      	strb	r4, [r6, #0]
						fill_area(499,655,294,344,0xe7eefe);
 8001a7c:	f003 fe06 	bl	800568c <fill_area>
						print_string(510,307,role_ptr,0x737373);
 8001a80:	682a      	ldr	r2, [r5, #0]
 8001a82:	4b64      	ldr	r3, [pc, #400]	; (8001c14 <main+0x1284>)
 8001a84:	f240 1133 	movw	r1, #307	; 0x133
 8001a88:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001a8c:	f004 fcb4 	bl	80063f8 <print_string>
						dropdown(&dropdown_role[0],3,297,217,-80);
 8001a90:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	485c      	ldr	r0, [pc, #368]	; (8001c08 <main+0x1278>)
 8001a98:	23d9      	movs	r3, #217	; 0xd9
 8001a9a:	f240 1229 	movw	r2, #297	; 0x129
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	f006 fa1e 	bl	8007ee0 <dropdown>
 8001aa4:	f7ff bad1 	b.w	800104a <main+0x6ba>
						fill_area(499,655,294,344,0xe7eefe);
 8001aa8:	4b56      	ldr	r3, [pc, #344]	; (8001c04 <main+0x1274>)
 8001aaa:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[0];
 8001aac:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <main+0x1278>)
 8001aae:	4d57      	ldr	r5, [pc, #348]	; (8001c0c <main+0x127c>)
						active_role =0;
 8001ab0:	4e57      	ldr	r6, [pc, #348]	; (8001c10 <main+0x1280>)
						role_ptr =	dropdown_role[0];
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	602b      	str	r3, [r5, #0]
						active_role =0;
 8001ab6:	2400      	movs	r4, #0
						fill_area(499,655,294,344,0xe7eefe);
 8001ab8:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001abc:	f44f 7293 	mov.w	r2, #294	; 0x126
 8001ac0:	f240 218f 	movw	r1, #655	; 0x28f
 8001ac4:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =0;
 8001ac8:	7034      	strb	r4, [r6, #0]
						fill_area(499,655,294,344,0xe7eefe);
 8001aca:	f003 fddf 	bl	800568c <fill_area>
						print_string(510,307,role_ptr,0x737373);
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <main+0x1284>)
 8001ad0:	682a      	ldr	r2, [r5, #0]
 8001ad2:	f240 1133 	movw	r1, #307	; 0x133
 8001ad6:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001ada:	f004 fc8d 	bl	80063f8 <print_string>
						dropdown(&dropdown_role[0],3,297,217,-80);
 8001ade:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4848      	ldr	r0, [pc, #288]	; (8001c08 <main+0x1278>)
 8001ae6:	23d9      	movs	r3, #217	; 0xd9
 8001ae8:	f240 1229 	movw	r2, #297	; 0x129
 8001aec:	2103      	movs	r1, #3
 8001aee:	f006 f9f7 	bl	8007ee0 <dropdown>
				 if(touchY >= 154+40 && touchY <= 200+40)
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <main+0x1288>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	f7ff ba9f 	b.w	8001038 <main+0x6a8>
						fill_area(210,400,270,310,0xe7eefe);
 8001afa:	4b42      	ldr	r3, [pc, #264]	; (8001c04 <main+0x1274>)
 8001afc:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[2];
 8001afe:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <main+0x1278>)
 8001b00:	4d42      	ldr	r5, [pc, #264]	; (8001c0c <main+0x127c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	602b      	str	r3, [r5, #0]
						active_role =2;
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <main+0x1280>)
 8001b08:	2402      	movs	r4, #2
 8001b0a:	701c      	strb	r4, [r3, #0]
						fill_area(210,400,270,310,0xe7eefe);
 8001b0c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001b10:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001b14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b18:	20d2      	movs	r0, #210	; 0xd2
 8001b1a:	f003 fdb7 	bl	800568c <fill_area>
						print_string(220,280,role_ptr,0x737373);
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <main+0x1284>)
 8001b20:	682a      	ldr	r2, [r5, #0]
 8001b22:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b26:	20dc      	movs	r0, #220	; 0xdc
 8001b28:	f004 fc66 	bl	80063f8 <print_string>
					 dropdown(&dropdown_role[0],3,0,0,-120);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f06f 0277 	mvn.w	r2, #119	; 0x77
 8001b32:	9200      	str	r2, [sp, #0]
 8001b34:	4834      	ldr	r0, [pc, #208]	; (8001c08 <main+0x1278>)
 8001b36:	461a      	mov	r2, r3
 8001b38:	2103      	movs	r1, #3
 8001b3a:	f006 f9d1 	bl	8007ee0 <dropdown>
						role_id =2;
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <main+0x128c>)
 8001b40:	701c      	strb	r4, [r3, #0]
 8001b42:	f7ff babe 	b.w	80010c2 <main+0x732>
						fill_area(210,400,270,310,0xe7eefe);
 8001b46:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <main+0x1274>)
 8001b48:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[1];
 8001b4a:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <main+0x1278>)
 8001b4c:	4d2f      	ldr	r5, [pc, #188]	; (8001c0c <main+0x127c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	602b      	str	r3, [r5, #0]
						active_role =1;
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <main+0x1280>)
 8001b54:	2401      	movs	r4, #1
 8001b56:	701c      	strb	r4, [r3, #0]
						fill_area(210,400,270,310,0xe7eefe);
 8001b58:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001b5c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001b60:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001b64:	20d2      	movs	r0, #210	; 0xd2
 8001b66:	f003 fd91 	bl	800568c <fill_area>
						print_string(220,280,role_ptr,0x737373);
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <main+0x1284>)
 8001b6c:	682a      	ldr	r2, [r5, #0]
 8001b6e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001b72:	20dc      	movs	r0, #220	; 0xdc
 8001b74:	f004 fc40 	bl	80063f8 <print_string>
					 dropdown(&dropdown_role[0],3,0,0,-120);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f06f 0277 	mvn.w	r2, #119	; 0x77
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	4821      	ldr	r0, [pc, #132]	; (8001c08 <main+0x1278>)
 8001b82:	461a      	mov	r2, r3
 8001b84:	2103      	movs	r1, #3
 8001b86:	f006 f9ab 	bl	8007ee0 <dropdown>
					 role_id =1;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <main+0x128c>)
 8001b8c:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 124+80 && touchY <= 170+80)
 8001b8e:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <main+0x1288>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f7ff ba92 	b.w	80010ba <main+0x72a>
						fill_area(210,400,270,310,0xe7eefe);
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <main+0x1274>)
 8001b98:	9300      	str	r3, [sp, #0]
						active_role =0;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <main+0x1280>)
					 role_ptr =	dropdown_role[0];
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <main+0x127c>)
						active_role =0;
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	701c      	strb	r4, [r3, #0]
					 role_ptr =	dropdown_role[0];
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <main+0x1278>)
 8001ba4:	4615      	mov	r5, r2
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6013      	str	r3, [r2, #0]
						fill_area(210,400,270,310,0xe7eefe);
 8001baa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001bae:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001bb2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001bb6:	20d2      	movs	r0, #210	; 0xd2
 8001bb8:	f003 fd68 	bl	800568c <fill_area>
						print_string(220,280,role_ptr,0x737373);
 8001bbc:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <main+0x1284>)
 8001bbe:	682a      	ldr	r2, [r5, #0]
 8001bc0:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001bc4:	20dc      	movs	r0, #220	; 0xdc
 8001bc6:	f004 fc17 	bl	80063f8 <print_string>
					 dropdown(&dropdown_role[0],3,0,0,-120);
 8001bca:	f06f 0377 	mvn.w	r3, #119	; 0x77
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <main+0x1278>)
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	f006 f982 	bl	8007ee0 <dropdown>
					 role_id =0;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <main+0x128c>)
 8001bde:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 124+40 && touchY <= 170+40)
 8001be0:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <main+0x1288>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	f7ff ba64 	b.w	80010b0 <main+0x720>
							fill_area(0,800,200,480,PURPLE);
 8001be8:	f003 fd50 	bl	800568c <fill_area>
							attendence_search();
 8001bec:	f006 f9d4 	bl	8007f98 <attendence_search>
							curr_page = 7;
 8001bf0:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <main+0x1290>)
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	7013      	strb	r3, [r2, #0]
				if(touchX >= 150 && touchX <= 215 && touchY >= 290+y && touchY <= 330+y) //caps  150,215,310+y,350+y
 8001bf6:	f8b9 3000 	ldrh.w	r3, [r9]
 8001bfa:	f7ff b866 	b.w	8000cca <main+0x33a>
					pos--;
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <main+0x1294>)
 8001c00:	7811      	ldrb	r1, [r2, #0]
 8001c02:	e453      	b.n	80014ac <main+0xb1c>
 8001c04:	00e7eefe 	.word	0x00e7eefe
 8001c08:	20000044 	.word	0x20000044
 8001c0c:	20000074 	.word	0x20000074
 8001c10:	200005de 	.word	0x200005de
 8001c14:	00737373 	.word	0x00737373
 8001c18:	200008ba 	.word	0x200008ba
 8001c1c:	200006a0 	.word	0x200006a0
 8001c20:	20000022 	.word	0x20000022
 8001c24:	20000679 	.word	0x20000679

08001c28 <error_handler>:
	}
}


void error_handler(void)
{
 8001c28:	b508      	push	{r3, lr}
	printf("In Error Handler\r\n");
 8001c2a:	4802      	ldr	r0, [pc, #8]	; (8001c34 <error_handler+0xc>)
 8001c2c:	f006 ffb4 	bl	8008b98 <puts>
	while(1);
 8001c30:	e7fe      	b.n	8001c30 <error_handler+0x8>
 8001c32:	bf00      	nop
 8001c34:	0800a0cc 	.word	0x0800a0cc

08001c38 <HAL_MspInit>:

extern SPI_HandleTypeDef spi2;
extern TIM_HandleTypeDef tim5;

void HAL_MspInit(void)
{
 8001c38:	b082      	sub	sp, #8

	__HAL_RCC_SYSCFG_CLK_ENABLE();		// exti line controller clock
 8001c3a:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <HAL_MspInit+0x34>)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	9100      	str	r1, [sp, #0]
 8001c40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44
 8001c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c4a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c4e:	9200      	str	r2, [sp, #0]
 8001c50:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();			// pwr  controller clock
 8001c52:	9101      	str	r1, [sp, #4]
 8001c54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	9b01      	ldr	r3, [sp, #4]

}
 8001c66:	b002      	add	sp, #8
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
	GPIO_InitTypeDef gpio_uart;

	if(huart->Instance == USART1)		/* currently using for debugging */
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_UART_MspInit+0x70>)
 8001c72:	6802      	ldr	r2, [r0, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d000      	beq.n	8001c7a <HAL_UART_MspInit+0xa>
 8001c78:	4770      	bx	lr
{
 8001c7a:	b510      	push	{r4, lr}
 8001c7c:	b088      	sub	sp, #32
	{
		// enable the peripheral clock
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001c82:	2400      	movs	r4, #0
 8001c84:	9400      	str	r4, [sp, #0]
 8001c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		gpio_uart.Mode 	=GPIO_MODE_AF_PP;
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
		gpio_uart.Pull = GPIO_PULLUP;
		gpio_uart.Alternate = GPIO_AF7_USART1;

		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001c88:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <HAL_UART_MspInit+0x74>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c92:	f002 0201 	and.w	r2, r2, #1
 8001c96:	9200      	str	r2, [sp, #0]
 8001c98:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_USART1_CLK_ENABLE();
 8001c9a:	9401      	str	r4, [sp, #4]
 8001c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c9e:	f042 0210 	orr.w	r2, r2, #16
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	9301      	str	r3, [sp, #4]
		gpio_uart.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001cac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001cbe:	a902      	add	r1, sp, #8
		gpio_uart.Alternate = GPIO_AF7_USART1;
 8001cc0:	2307      	movs	r3, #7
		__HAL_RCC_USART1_CLK_ENABLE();
 8001cc2:	9a01      	ldr	r2, [sp, #4]
		gpio_uart.Alternate = GPIO_AF7_USART1;
 8001cc4:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001cc6:	f000 f9f5 	bl	80020b4 <HAL_GPIO_Init>

		// enable NVIC irq line
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cca:	2025      	movs	r0, #37	; 0x25
 8001ccc:	f000 f9e4 	bl	8002098 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	2025      	movs	r0, #37	; 0x25
 8001cd6:	f000 f9a1 	bl	800201c <HAL_NVIC_SetPriority>
	}
}
 8001cda:	b008      	add	sp, #32
 8001cdc:	bd10      	pop	{r4, pc}
 8001cde:	bf00      	nop
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001ce8:	b510      	push	{r4, lr}
	GPIO_InitTypeDef spi_pins;

	if(hspi->Instance == SPI1)		/* using in RFID */
 8001cea:	4a2d      	ldr	r2, [pc, #180]	; (8001da0 <HAL_SPI_MspInit+0xb8>)
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	4293      	cmp	r3, r2
{
 8001cf0:	b08a      	sub	sp, #40	; 0x28
	if(hspi->Instance == SPI1)		/* using in RFID */
 8001cf2:	d004      	beq.n	8001cfe <HAL_SPI_MspInit+0x16>
		spi_pins.Alternate = GPIO_AF5_SPI1;

		HAL_GPIO_Init(GPIOB, &spi_pins);
	}

	if(hspi->Instance == SPI2)		/* using in touch  */
 8001cf4:	4a2b      	ldr	r2, [pc, #172]	; (8001da4 <HAL_SPI_MspInit+0xbc>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d027      	beq.n	8001d4a <HAL_SPI_MspInit+0x62>
		spi_pins.Alternate = GPIO_AF5_SPI2;

		HAL_GPIO_Init(GPIOB, &spi_pins);
	}

}
 8001cfa:	b00a      	add	sp, #40	; 0x28
 8001cfc:	bd10      	pop	{r4, pc}
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_SPI_MspInit+0xc0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	9200      	str	r2, [sp, #0]
 8001d04:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d06:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001d0a:	6459      	str	r1, [r3, #68]	; 0x44
 8001d0c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d0e:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001d12:	9100      	str	r1, [sp, #0]
 8001d14:	9900      	ldr	r1, [sp, #0]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	9201      	str	r2, [sp, #4]
 8001d18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d1a:	f041 0102 	orr.w	r1, r1, #2
 8001d1e:	6319      	str	r1, [r3, #48]	; 0x30
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		spi_pins.Pull = GPIO_NOPULL;
 8001d22:	9206      	str	r2, [sp, #24]
		spi_pins.Pin = (GPIO_PIN_3 | GPIO_PIN_4 |GPIO_PIN_5);
 8001d24:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001d90 <HAL_SPI_MspInit+0xa8>
 8001d28:	4604      	mov	r4, r0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	9301      	str	r3, [sp, #4]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001d30:	481e      	ldr	r0, [pc, #120]	; (8001dac <HAL_SPI_MspInit+0xc4>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	9a01      	ldr	r2, [sp, #4]
		spi_pins.Alternate = GPIO_AF5_SPI1;
 8001d34:	2305      	movs	r3, #5
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001d36:	a904      	add	r1, sp, #16
		spi_pins.Alternate = GPIO_AF5_SPI1;
 8001d38:	9308      	str	r3, [sp, #32]
		spi_pins.Pin = (GPIO_PIN_3 | GPIO_PIN_4 |GPIO_PIN_5);
 8001d3a:	ed8d 7b04 	vstr	d7, [sp, #16]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001d3e:	f000 f9b9 	bl	80020b4 <HAL_GPIO_Init>
	if(hspi->Instance == SPI2)		/* using in touch  */
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_SPI_MspInit+0xbc>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d1d7      	bne.n	8001cfa <HAL_SPI_MspInit+0x12>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_SPI_MspInit+0xc0>)
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001d4c:	4817      	ldr	r0, [pc, #92]	; (8001dac <HAL_SPI_MspInit+0xc4>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001d4e:	2200      	movs	r2, #0
 8001d50:	9202      	str	r2, [sp, #8]
 8001d52:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d54:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001d58:	6419      	str	r1, [r3, #64]	; 0x40
 8001d5a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d5c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001d60:	9102      	str	r1, [sp, #8]
 8001d62:	9902      	ldr	r1, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	9203      	str	r2, [sp, #12]
 8001d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d68:	f041 0102 	orr.w	r1, r1, #2
 8001d6c:	6319      	str	r1, [r3, #48]	; 0x30
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		spi_pins.Pull = GPIO_NOPULL;
 8001d70:	9206      	str	r2, [sp, #24]
		spi_pins.Pin = ( GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8001d72:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001d98 <HAL_SPI_MspInit+0xb0>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001d7c:	a904      	add	r1, sp, #16
		spi_pins.Alternate = GPIO_AF5_SPI2;
 8001d7e:	2305      	movs	r3, #5
		spi_pins.Pin = ( GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8001d80:	ed8d 7b04 	vstr	d7, [sp, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	9c03      	ldr	r4, [sp, #12]
		spi_pins.Alternate = GPIO_AF5_SPI2;
 8001d86:	9308      	str	r3, [sp, #32]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001d88:	f000 f994 	bl	80020b4 <HAL_GPIO_Init>
}
 8001d8c:	b00a      	add	sp, #40	; 0x28
 8001d8e:	bd10      	pop	{r4, pc}
 8001d90:	00000038 	.word	0x00000038
 8001d94:	00000002 	.word	0x00000002
 8001d98:	0000e000 	.word	0x0000e000
 8001d9c:	00000002 	.word	0x00000002
 8001da0:	40013000 	.word	0x40013000
 8001da4:	40003800 	.word	0x40003800
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020400 	.word	0x40020400

08001db0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM5)		/* 100ms - TimeBase */
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_TIM_Base_MspInit+0x3c>)
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d000      	beq.n	8001dba <HAL_TIM_Base_MspInit+0xa>
 8001db8:	4770      	bx	lr
{
 8001dba:	b500      	push	{lr}
 8001dbc:	b083      	sub	sp, #12
	{
		__HAL_RCC_TIM5_CLK_ENABLE();
 8001dbe:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	9201      	str	r2, [sp, #4]
 8001dc6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001dc8:	f041 0108 	orr.w	r1, r1, #8
 8001dcc:	6419      	str	r1, [r3, #64]	; 0x40
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	9301      	str	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001dd6:	2032      	movs	r0, #50	; 0x32
 8001dd8:	2105      	movs	r1, #5
		__HAL_RCC_TIM5_CLK_ENABLE();
 8001dda:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001ddc:	f000 f91e 	bl	800201c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001de0:	2032      	movs	r0, #50	; 0x32

	}

}
 8001de2:	b003      	add	sp, #12
 8001de4:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001de8:	f000 b956 	b.w	8002098 <HAL_NVIC_EnableIRQ>
 8001dec:	40000c00 	.word	0x40000c00

08001df0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001df4:	2500      	movs	r5, #0
 8001df6:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <HAL_InitTick+0x84>)
 8001df8:	9502      	str	r5, [sp, #8]
 8001dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001dfc:	4c1e      	ldr	r4, [pc, #120]	; (8001e78 <HAL_InitTick+0x88>)
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001dfe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e0a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001e0c:	9302      	str	r3, [sp, #8]
{
 8001e0e:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e10:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001e12:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e14:	f001 fa06 	bl	8003224 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e18:	f001 f9f4 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
  htim11.Instance = TIM11;
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_InitTick+0x8c>)
 8001e1e:	6022      	str	r2, [r4, #0]
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e20:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e22:	4817      	ldr	r0, [pc, #92]	; (8001e80 <HAL_InitTick+0x90>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
  htim11.Init.Prescaler = uwPrescalerValue;
  htim11.Init.ClockDivision = 0;
 8001e24:	6125      	str	r5, [r4, #16]
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001e26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e2a:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e2c:	fba0 2303 	umull	r2, r3, r0, r3
 8001e30:	0c9b      	lsrs	r3, r3, #18
 8001e32:	3b01      	subs	r3, #1
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim11);
 8001e34:	4620      	mov	r0, r4
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3a:	61a5      	str	r5, [r4, #24]
  status = HAL_TIM_Base_Init(&htim11);
 8001e3c:	f001 feb0 	bl	8003ba0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001e40:	4605      	mov	r5, r0
 8001e42:	b110      	cbz	r0, 8001e4a <HAL_InitTick+0x5a>
    }
  }

 /* Return function status */
  return status;
}
 8001e44:	4628      	mov	r0, r5
 8001e46:	b008      	add	sp, #32
 8001e48:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f001 ff26 	bl	8003c9c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001e50:	4605      	mov	r5, r0
 8001e52:	2800      	cmp	r0, #0
 8001e54:	d1f6      	bne.n	8001e44 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001e56:	201a      	movs	r0, #26
 8001e58:	f000 f91e 	bl	8002098 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5c:	2e0f      	cmp	r6, #15
 8001e5e:	d901      	bls.n	8001e64 <HAL_InitTick+0x74>
        status = HAL_ERROR;
 8001e60:	2501      	movs	r5, #1
 8001e62:	e7ef      	b.n	8001e44 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001e64:	462a      	mov	r2, r5
 8001e66:	4631      	mov	r1, r6
 8001e68:	201a      	movs	r0, #26
 8001e6a:	f000 f8d7 	bl	800201c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_InitTick+0x94>)
 8001e70:	601e      	str	r6, [r3, #0]
 8001e72:	e7e7      	b.n	8001e44 <HAL_InitTick+0x54>
 8001e74:	40023800 	.word	0x40023800
 8001e78:	20000870 	.word	0x20000870
 8001e7c:	40014800 	.word	0x40014800
 8001e80:	431bde83 	.word	0x431bde83
 8001e84:	200000a0 	.word	0x200000a0

08001e88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e88:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	1e16      	subs	r6, r2, #0
 8001e8c:	dd07      	ble.n	8001e9e <_read+0x16>
 8001e8e:	460c      	mov	r4, r1
 8001e90:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	42a5      	cmp	r5, r4
 8001e9c:	d1f9      	bne.n	8001e92 <_read+0xa>
  }

  return len;
}
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
 8001ea2:	bf00      	nop

08001ea4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	1e16      	subs	r6, r2, #0
 8001ea8:	dd07      	ble.n	8001eba <_write+0x16>
 8001eaa:	460c      	mov	r4, r1
 8001eac:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001eae:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001eb2:	f7fe fbbb 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	42ac      	cmp	r4, r5
 8001eb8:	d1f9      	bne.n	8001eae <_write+0xa>
  }
  return len;
}
 8001eba:	4630      	mov	r0, r6
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
 8001ebe:	bf00      	nop

08001ec0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop

08001ec8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ecc:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001ece:	2000      	movs	r0, #0
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	4770      	bx	lr

08001ed8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001ed8:	2000      	movs	r0, #0
 8001eda:	4770      	bx	lr

08001edc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <SystemInit+0x10>)
 8001ede:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ee2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <isTouched>:

uint16_t touchX = 0;
uint16_t touchY = 0;

bool isTouched(uint16_t touchX1,uint16_t touchX2,uint16_t touchY1,uint16_t touchY2)
{
 8001ef0:	b410      	push	{r4}
	if(touchX >= touchX1 && touchX <= touchX2 && touchY >= touchY1 && touchY <= touchY2){
 8001ef2:	4c0b      	ldr	r4, [pc, #44]	; (8001f20 <isTouched+0x30>)
 8001ef4:	f8b4 c000 	ldrh.w	ip, [r4]
 8001ef8:	4584      	cmp	ip, r0
 8001efa:	d301      	bcc.n	8001f00 <isTouched+0x10>
 8001efc:	458c      	cmp	ip, r1
 8001efe:	d903      	bls.n	8001f08 <isTouched+0x18>
		return 1;
	}
	return 0;
 8001f00:	2000      	movs	r0, #0
}
 8001f02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f06:	4770      	bx	lr
	if(touchX >= touchX1 && touchX <= touchX2 && touchY >= touchY1 && touchY <= touchY2){
 8001f08:	4906      	ldr	r1, [pc, #24]	; (8001f24 <isTouched+0x34>)
 8001f0a:	8808      	ldrh	r0, [r1, #0]
 8001f0c:	4290      	cmp	r0, r2
 8001f0e:	d3f7      	bcc.n	8001f00 <isTouched+0x10>
 8001f10:	4298      	cmp	r0, r3
 8001f12:	bf8c      	ite	hi
 8001f14:	2000      	movhi	r0, #0
 8001f16:	2001      	movls	r0, #1
}
 8001f18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	200008b8 	.word	0x200008b8
 8001f24:	200008ba 	.word	0x200008ba

08001f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f2e:	490e      	ldr	r1, [pc, #56]	; (8001f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f44:	4c0b      	ldr	r4, [pc, #44]	; (8001f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f52:	f7ff ffc3 	bl	8001edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f56:	f006 fd5f 	bl	8008a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f5a:	f7fe fd19 	bl	8000990 <main>
  bx  lr    
 8001f5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f68:	200005c0 	.word	0x200005c0
  ldr r2, =_sidata
 8001f6c:	0802d818 	.word	0x0802d818
  ldr r2, =_sbss
 8001f70:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8001f74:	200008d8 	.word	0x200008d8

08001f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f78:	e7fe      	b.n	8001f78 <ADC_IRQHandler>
	...

08001f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f7c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_Init+0x30>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f86:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f8e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f96:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f98:	2003      	movs	r0, #3
 8001f9a:	f000 f82d 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f7ff ff26 	bl	8001df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa4:	f7ff fe48 	bl	8001c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001fa8:	2000      	movs	r0, #0
 8001faa:	bd08      	pop	{r3, pc}
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_IncTick+0x10>)
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_IncTick+0x14>)
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	440b      	add	r3, r1
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	200008bc 	.word	0x200008bc
 8001fc4:	2000009c 	.word	0x2000009c

08001fc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fc8:	4b01      	ldr	r3, [pc, #4]	; (8001fd0 <HAL_GetTick+0x8>)
 8001fca:	6818      	ldr	r0, [r3, #0]
}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200008bc 	.word	0x200008bc

08001fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd4:	b538      	push	{r3, r4, r5, lr}
 8001fd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff fff6 	bl	8001fc8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fdc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001fde:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001fe0:	d002      	beq.n	8001fe8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <HAL_Delay+0x20>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	1b43      	subs	r3, r0, r5
 8001fee:	42a3      	cmp	r3, r4
 8001ff0:	d3fa      	bcc.n	8001fe8 <HAL_Delay+0x14>
  {
  }
}
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
 8001ff4:	2000009c 	.word	0x2000009c

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4907      	ldr	r1, [pc, #28]	; (8002018 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ffa:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002002:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800200e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002012:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <HAL_NVIC_SetPriority+0x74>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002024:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002026:	f1c3 0e07 	rsb	lr, r3, #7
 800202a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002032:	bf28      	it	cs
 8002034:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002038:	f1bc 0f06 	cmp.w	ip, #6
 800203c:	d91b      	bls.n	8002076 <HAL_NVIC_SetPriority+0x5a>
 800203e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 3cff 	mov.w	ip, #4294967295
 8002044:	fa0c fc03 	lsl.w	ip, ip, r3
 8002048:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 3cff 	mov.w	ip, #4294967295
 8002050:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002054:	ea21 010c 	bic.w	r1, r1, ip
 8002058:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800205a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002060:	db0c      	blt.n	800207c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002062:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002066:	0109      	lsls	r1, r1, #4
 8002068:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800206c:	b2c9      	uxtb	r1, r1
 800206e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002072:	f85d fb04 	ldr.w	pc, [sp], #4
 8002076:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002078:	4613      	mov	r3, r2
 800207a:	e7e7      	b.n	800204c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_NVIC_SetPriority+0x78>)
 800207e:	f000 000f 	and.w	r0, r0, #15
 8002082:	0109      	lsls	r1, r1, #4
 8002084:	4403      	add	r3, r0
 8002086:	b2c9      	uxtb	r1, r1
 8002088:	7619      	strb	r1, [r3, #24]
 800208a:	f85d fb04 	ldr.w	pc, [sp], #4
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00
 8002094:	e000ecfc 	.word	0xe000ecfc

08002098 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002098:	2800      	cmp	r0, #0
 800209a:	db08      	blt.n	80020ae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209c:	0941      	lsrs	r1, r0, #5
 800209e:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_NVIC_EnableIRQ+0x18>)
 80020a0:	f000 001f 	and.w	r0, r0, #31
 80020a4:	2301      	movs	r3, #1
 80020a6:	fa03 f000 	lsl.w	r0, r3, r0
 80020aa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020ae:	4770      	bx	lr
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b8:	2200      	movs	r2, #0
 80020ba:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020bc:	4e70      	ldr	r6, [pc, #448]	; (8002280 <HAL_GPIO_Init+0x1cc>)
{
 80020be:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c0:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80020c2:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	4689      	mov	r9, r1
 80020c8:	e004      	b.n	80020d4 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	3301      	adds	r3, #1
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	f102 0202 	add.w	r2, r2, #2
 80020d2:	d078      	beq.n	80021c6 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80020d4:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d8:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80020dc:	43a1      	bics	r1, r4
 80020de:	d1f4      	bne.n	80020ca <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e0:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80020e4:	f00c 0103 	and.w	r1, ip, #3
 80020e8:	1e4d      	subs	r5, r1, #1
 80020ea:	2d01      	cmp	r5, #1
 80020ec:	d96e      	bls.n	80021cc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ee:	2903      	cmp	r1, #3
 80020f0:	f040 80ae 	bne.w	8002250 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f4:	4091      	lsls	r1, r2
 80020f6:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80020f8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fc:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fe:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002102:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002104:	d0e1      	beq.n	80020ca <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4d5f      	ldr	r5, [pc, #380]	; (8002284 <HAL_GPIO_Init+0x1d0>)
 8002108:	2100      	movs	r1, #0
 800210a:	9103      	str	r1, [sp, #12]
 800210c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800210e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002112:	6469      	str	r1, [r5, #68]	; 0x44
 8002114:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002116:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800211a:	9103      	str	r1, [sp, #12]
 800211c:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	f023 0103 	bic.w	r1, r3, #3
 8002122:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002126:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800212a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002132:	00bf      	lsls	r7, r7, #2
 8002134:	250f      	movs	r5, #15
 8002136:	40bd      	lsls	r5, r7
 8002138:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800213c:	4d52      	ldr	r5, [pc, #328]	; (8002288 <HAL_GPIO_Init+0x1d4>)
 800213e:	42a8      	cmp	r0, r5
 8002140:	d017      	beq.n	8002172 <HAL_GPIO_Init+0xbe>
 8002142:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002146:	42a8      	cmp	r0, r5
 8002148:	f000 8086 	beq.w	8002258 <HAL_GPIO_Init+0x1a4>
 800214c:	4d4f      	ldr	r5, [pc, #316]	; (800228c <HAL_GPIO_Init+0x1d8>)
 800214e:	42a8      	cmp	r0, r5
 8002150:	f000 8087 	beq.w	8002262 <HAL_GPIO_Init+0x1ae>
 8002154:	4d4e      	ldr	r5, [pc, #312]	; (8002290 <HAL_GPIO_Init+0x1dc>)
 8002156:	42a8      	cmp	r0, r5
 8002158:	f000 808a 	beq.w	8002270 <HAL_GPIO_Init+0x1bc>
 800215c:	4d4d      	ldr	r5, [pc, #308]	; (8002294 <HAL_GPIO_Init+0x1e0>)
 800215e:	42a8      	cmp	r0, r5
 8002160:	bf0c      	ite	eq
 8002162:	f04f 0e04 	moveq.w	lr, #4
 8002166:	f04f 0e07 	movne.w	lr, #7
 800216a:	fa0e f707 	lsl.w	r7, lr, r7
 800216e:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002172:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002176:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002178:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217c:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002180:	bf0c      	ite	eq
 8002182:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002184:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002188:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 800218a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002190:	bf0c      	ite	eq
 8002192:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002194:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002198:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 800219a:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800219c:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80021a0:	bf0c      	ite	eq
 80021a2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80021a4:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 80021a8:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021aa:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ac:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b0:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80021b4:	bf0c      	ite	eq
 80021b6:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80021b8:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021bc:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80021be:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c0:	f102 0202 	add.w	r2, r2, #2
 80021c4:	d186      	bne.n	80020d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021c6:	b005      	add	sp, #20
 80021c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021cc:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80021d0:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d2:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d6:	2503      	movs	r5, #3
 80021d8:	fa05 fe02 	lsl.w	lr, r5, r2
 80021dc:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e0:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 80021e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80021e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f0:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80021f4:	409f      	lsls	r7, r3
 80021f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80021fa:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80021fc:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002202:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002206:	4097      	lsls	r7, r2
 8002208:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220c:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800220e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002210:	fa01 f102 	lsl.w	r1, r1, r2
 8002214:	f47f af70 	bne.w	80020f8 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8002218:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800221c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002220:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002224:	f8de 7020 	ldr.w	r7, [lr, #32]
 8002228:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800222a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800222e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002232:	fa07 f708 	lsl.w	r7, r7, r8
 8002236:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002238:	270f      	movs	r7, #15
 800223a:	fa07 f808 	lsl.w	r8, r7, r8
 800223e:	9f00      	ldr	r7, [sp, #0]
 8002240:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002244:	9f01      	ldr	r7, [sp, #4]
 8002246:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	f8ce 7020 	str.w	r7, [lr, #32]
 800224e:	e753      	b.n	80020f8 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	2503      	movs	r5, #3
 8002252:	4095      	lsls	r5, r2
 8002254:	43ed      	mvns	r5, r5
 8002256:	e7d1      	b.n	80021fc <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002258:	fa0a f707 	lsl.w	r7, sl, r7
 800225c:	ea48 0807 	orr.w	r8, r8, r7
 8002260:	e787      	b.n	8002172 <HAL_GPIO_Init+0xbe>
 8002262:	f04f 0e02 	mov.w	lr, #2
 8002266:	fa0e f707 	lsl.w	r7, lr, r7
 800226a:	ea48 0807 	orr.w	r8, r8, r7
 800226e:	e780      	b.n	8002172 <HAL_GPIO_Init+0xbe>
 8002270:	f04f 0e03 	mov.w	lr, #3
 8002274:	fa0e f707 	lsl.w	r7, lr, r7
 8002278:	ea48 0807 	orr.w	r8, r8, r7
 800227c:	e779      	b.n	8002172 <HAL_GPIO_Init+0xbe>
 800227e:	bf00      	nop
 8002280:	40013c00 	.word	0x40013c00
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020800 	.word	0x40020800
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002298:	b902      	cbnz	r2, 800229c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229a:	0409      	lsls	r1, r1, #16
 800229c:	6181      	str	r1, [r0, #24]
  }
}
 800229e:	4770      	bx	lr

080022a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022a4:	6804      	ldr	r4, [r0, #0]
{
 80022a6:	b083      	sub	sp, #12
 80022a8:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022aa:	6823      	ldr	r3, [r4, #0]
{
 80022ac:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80022b0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80022b8:	4606      	mov	r6, r0
 80022ba:	468a      	mov	sl, r1
 80022bc:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022be:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80022c0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80022c4:	d135      	bne.n	8002332 <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022c6:	6965      	ldr	r5, [r4, #20]
 80022c8:	07e8      	lsls	r0, r5, #31
 80022ca:	d5fc      	bpl.n	80022c6 <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022cc:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 80022d0:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80022d2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80022d6:	d003      	beq.n	80022e0 <I2C_RequestMemoryWrite+0x40>
 80022d8:	e04e      	b.n	8002378 <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022da:	6961      	ldr	r1, [r4, #20]
 80022dc:	054d      	lsls	r5, r1, #21
 80022de:	d45c      	bmi.n	800239a <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022e0:	6961      	ldr	r1, [r4, #20]
 80022e2:	078b      	lsls	r3, r1, #30
 80022e4:	d5f9      	bpl.n	80022da <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e6:	2300      	movs	r3, #0
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	6963      	ldr	r3, [r4, #20]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	69a3      	ldr	r3, [r4, #24]
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80022f8:	f040 8087 	bne.w	800240a <I2C_RequestMemoryWrite+0x16a>
 80022fc:	6963      	ldr	r3, [r4, #20]
 80022fe:	061a      	lsls	r2, r3, #24
 8002300:	d463      	bmi.n	80023ca <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002302:	6963      	ldr	r3, [r4, #20]
 8002304:	055b      	lsls	r3, r3, #21
 8002306:	d5f9      	bpl.n	80022fc <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002308:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800230a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800230c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002310:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002312:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002314:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002318:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800231c:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002328:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800232a:	2b04      	cmp	r3, #4
 800232c:	d066      	beq.n	80023fc <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 800232e:	2001      	movs	r0, #1
 8002330:	e01f      	b.n	8002372 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002332:	6963      	ldr	r3, [r4, #20]
 8002334:	07d9      	lsls	r1, r3, #31
 8002336:	d4c9      	bmi.n	80022cc <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002338:	f7ff fe46 	bl	8001fc8 <HAL_GetTick>
 800233c:	eba0 000b 	sub.w	r0, r0, fp
 8002340:	4581      	cmp	r9, r0
 8002342:	d304      	bcc.n	800234e <I2C_RequestMemoryWrite+0xae>
 8002344:	f1b9 0f00 	cmp.w	r9, #0
 8002348:	d001      	beq.n	800234e <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800234a:	6834      	ldr	r4, [r6, #0]
 800234c:	e7b8      	b.n	80022c0 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800234e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002350:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002352:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002354:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002358:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800235c:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800235e:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8002360:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002364:	f042 0220 	orr.w	r2, r2, #32
 8002368:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800236a:	680b      	ldr	r3, [r1, #0]
 800236c:	05dc      	lsls	r4, r3, #23
 800236e:	d435      	bmi.n	80023dc <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8002370:	2003      	movs	r0, #3
}
 8002372:	b003      	add	sp, #12
 8002374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002378:	6963      	ldr	r3, [r4, #20]
 800237a:	0798      	lsls	r0, r3, #30
 800237c:	d4b3      	bmi.n	80022e6 <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800237e:	6963      	ldr	r3, [r4, #20]
 8002380:	055a      	lsls	r2, r3, #21
 8002382:	d40a      	bmi.n	800239a <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002384:	f7ff fe20 	bl	8001fc8 <HAL_GetTick>
 8002388:	eba0 000b 	sub.w	r0, r0, fp
 800238c:	4581      	cmp	r9, r0
 800238e:	d34e      	bcc.n	800242e <I2C_RequestMemoryWrite+0x18e>
 8002390:	f1b9 0f00 	cmp.w	r9, #0
 8002394:	d04b      	beq.n	800242e <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002396:	6834      	ldr	r4, [r6, #0]
 8002398:	e79b      	b.n	80022d2 <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a0:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023a2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a8:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023aa:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ac:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023ae:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023b2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023b6:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80023b8:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023bc:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 80023c0:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c2:	6433      	str	r3, [r6, #64]	; 0x40
}
 80023c4:	b003      	add	sp, #12
 80023c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023ca:	f1b8 0f01 	cmp.w	r8, #1
 80023ce:	d109      	bne.n	80023e4 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d0:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 80023d2:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023d4:	6127      	str	r7, [r4, #16]
}
 80023d6:	b003      	add	sp, #12
 80023d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e0:	6433      	str	r3, [r6, #64]	; 0x40
 80023e2:	e7c5      	b.n	8002370 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023e4:	0a3b      	lsrs	r3, r7, #8
 80023e6:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80023ec:	d12e      	bne.n	800244c <I2C_RequestMemoryWrite+0x1ac>
 80023ee:	6963      	ldr	r3, [r4, #20]
 80023f0:	0619      	lsls	r1, r3, #24
 80023f2:	d4ed      	bmi.n	80023d0 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f4:	6963      	ldr	r3, [r4, #20]
 80023f6:	055a      	lsls	r2, r3, #21
 80023f8:	d5f9      	bpl.n	80023ee <I2C_RequestMemoryWrite+0x14e>
 80023fa:	e785      	b.n	8002308 <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023fc:	6832      	ldr	r2, [r6, #0]
 80023fe:	6813      	ldr	r3, [r2, #0]
 8002400:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8002404:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e7b3      	b.n	8002372 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800240a:	6963      	ldr	r3, [r4, #20]
 800240c:	061d      	lsls	r5, r3, #24
 800240e:	d4dc      	bmi.n	80023ca <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002410:	6963      	ldr	r3, [r4, #20]
 8002412:	0559      	lsls	r1, r3, #21
 8002414:	f53f af78 	bmi.w	8002308 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002418:	f7ff fdd6 	bl	8001fc8 <HAL_GetTick>
 800241c:	eba0 000b 	sub.w	r0, r0, fp
 8002420:	4581      	cmp	r9, r0
 8002422:	d325      	bcc.n	8002470 <I2C_RequestMemoryWrite+0x1d0>
 8002424:	f1b9 0f00 	cmp.w	r9, #0
 8002428:	d022      	beq.n	8002470 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800242a:	6834      	ldr	r4, [r6, #0]
 800242c:	e762      	b.n	80022f4 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800242e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002432:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002434:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800243e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	f043 0320 	orr.w	r3, r3, #32
 8002446:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8002448:	2001      	movs	r0, #1
 800244a:	e792      	b.n	8002372 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244c:	6963      	ldr	r3, [r4, #20]
 800244e:	061b      	lsls	r3, r3, #24
 8002450:	d4be      	bmi.n	80023d0 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002452:	6963      	ldr	r3, [r4, #20]
 8002454:	0558      	lsls	r0, r3, #21
 8002456:	f53f af57 	bmi.w	8002308 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245a:	f7ff fdb5 	bl	8001fc8 <HAL_GetTick>
 800245e:	eba0 000b 	sub.w	r0, r0, fp
 8002462:	4581      	cmp	r9, r0
 8002464:	d304      	bcc.n	8002470 <I2C_RequestMemoryWrite+0x1d0>
 8002466:	f1b9 0f00 	cmp.w	r9, #0
 800246a:	d001      	beq.n	8002470 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800246c:	6834      	ldr	r4, [r6, #0]
 800246e:	e7bb      	b.n	80023e8 <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002470:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002472:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002474:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002476:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800247a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800247e:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002480:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800248a:	e74d      	b.n	8002328 <I2C_RequestMemoryWrite+0x88>

0800248c <I2C_RequestMemoryRead>:
{
 800248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002490:	6804      	ldr	r4, [r0, #0]
{
 8002492:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249a:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249c:	6823      	ldr	r3, [r4, #0]
{
 800249e:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80024a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80024a8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ac:	6023      	str	r3, [r4, #0]
{
 80024ae:	4606      	mov	r6, r0
 80024b0:	468b      	mov	fp, r1
 80024b2:	4617      	mov	r7, r2
 80024b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80024b8:	d139      	bne.n	800252e <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ba:	6965      	ldr	r5, [r4, #20]
 80024bc:	07eb      	lsls	r3, r5, #31
 80024be:	d5fc      	bpl.n	80024ba <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024c0:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 80024c4:	6123      	str	r3, [r4, #16]
 80024c6:	fa5f fb8b 	uxtb.w	fp, fp
 80024ca:	f1ba 3fff 	cmp.w	sl, #4294967295
 80024ce:	d003      	beq.n	80024d8 <I2C_RequestMemoryRead+0x4c>
 80024d0:	e068      	b.n	80025a4 <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d2:	6961      	ldr	r1, [r4, #20]
 80024d4:	054a      	lsls	r2, r1, #21
 80024d6:	d450      	bmi.n	800257a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d8:	6961      	ldr	r1, [r4, #20]
 80024da:	0789      	lsls	r1, r1, #30
 80024dc:	d5f9      	bpl.n	80024d2 <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024de:	2300      	movs	r3, #0
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	6963      	ldr	r3, [r4, #20]
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	69a3      	ldr	r3, [r4, #24]
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80024f0:	f040 80b8 	bne.w	8002664 <I2C_RequestMemoryRead+0x1d8>
 80024f4:	6963      	ldr	r3, [r4, #20]
 80024f6:	0618      	lsls	r0, r3, #24
 80024f8:	d467      	bmi.n	80025ca <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024fa:	6963      	ldr	r3, [r4, #20]
 80024fc:	0559      	lsls	r1, r3, #21
 80024fe:	d5f9      	bpl.n	80024f4 <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002500:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8002502:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002504:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002508:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800250a:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800250c:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002510:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002514:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002516:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002520:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002522:	2b04      	cmp	r3, #4
 8002524:	d06c      	beq.n	8002600 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 8002526:	2001      	movs	r0, #1
}
 8002528:	b003      	add	sp, #12
 800252a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800252e:	6963      	ldr	r3, [r4, #20]
 8002530:	07dd      	lsls	r5, r3, #31
 8002532:	d4c5      	bmi.n	80024c0 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002534:	f7ff fd48 	bl	8001fc8 <HAL_GetTick>
 8002538:	eba0 0009 	sub.w	r0, r0, r9
 800253c:	4582      	cmp	sl, r0
 800253e:	d304      	bcc.n	800254a <I2C_RequestMemoryRead+0xbe>
 8002540:	f1ba 0f00 	cmp.w	sl, #0
 8002544:	d001      	beq.n	800254a <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002546:	6834      	ldr	r4, [r6, #0]
 8002548:	e7b4      	b.n	80024b4 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800254a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800254c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800254e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002550:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002554:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002558:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800255a:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 800255c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	f042 0220 	orr.w	r2, r2, #32
 8002564:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002566:	680b      	ldr	r3, [r1, #0]
 8002568:	05dc      	lsls	r4, r3, #23
 800256a:	d502      	bpl.n	8002572 <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800256c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002570:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8002572:	2003      	movs	r0, #3
}
 8002574:	b003      	add	sp, #12
 8002576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002580:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002582:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002584:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002586:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800258a:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800258c:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800258e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002592:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002596:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002598:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	6433      	str	r3, [r6, #64]	; 0x40
 80025a2:	e7c0      	b.n	8002526 <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025a4:	6963      	ldr	r3, [r4, #20]
 80025a6:	079b      	lsls	r3, r3, #30
 80025a8:	d499      	bmi.n	80024de <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025aa:	6963      	ldr	r3, [r4, #20]
 80025ac:	0558      	lsls	r0, r3, #21
 80025ae:	d4e4      	bmi.n	800257a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b0:	f7ff fd0a 	bl	8001fc8 <HAL_GetTick>
 80025b4:	eba0 0009 	sub.w	r0, r0, r9
 80025b8:	4582      	cmp	sl, r0
 80025ba:	f0c0 808b 	bcc.w	80026d4 <I2C_RequestMemoryRead+0x248>
 80025be:	f1ba 0f00 	cmp.w	sl, #0
 80025c2:	f000 8087 	beq.w	80026d4 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c6:	6834      	ldr	r4, [r6, #0]
 80025c8:	e77f      	b.n	80024ca <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ca:	f1b8 0f01 	cmp.w	r8, #1
 80025ce:	d10b      	bne.n	80025e8 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025d0:	b2ff      	uxtb	r7, r7
 80025d2:	6127      	str	r7, [r4, #16]
 80025d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80025d8:	d16a      	bne.n	80026b0 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025da:	6963      	ldr	r3, [r4, #20]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	d416      	bmi.n	800260e <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e0:	6963      	ldr	r3, [r4, #20]
 80025e2:	055f      	lsls	r7, r3, #21
 80025e4:	d5f9      	bpl.n	80025da <I2C_RequestMemoryRead+0x14e>
 80025e6:	e78b      	b.n	8002500 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80025e8:	0a3b      	lsrs	r3, r7, #8
 80025ea:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 80025f0:	d17f      	bne.n	80026f2 <I2C_RequestMemoryRead+0x266>
 80025f2:	6963      	ldr	r3, [r4, #20]
 80025f4:	061d      	lsls	r5, r3, #24
 80025f6:	d4eb      	bmi.n	80025d0 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f8:	6963      	ldr	r3, [r4, #20]
 80025fa:	0558      	lsls	r0, r3, #21
 80025fc:	d5f9      	bpl.n	80025f2 <I2C_RequestMemoryRead+0x166>
 80025fe:	e77f      	b.n	8002500 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002600:	6832      	ldr	r2, [r6, #0]
 8002602:	6813      	ldr	r3, [r2, #0]
 8002604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e78c      	b.n	8002528 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002614:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002616:	f1ba 3fff 	cmp.w	sl, #4294967295
 800261a:	d113      	bne.n	8002644 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261c:	6963      	ldr	r3, [r4, #20]
 800261e:	07d8      	lsls	r0, r3, #31
 8002620:	d5fc      	bpl.n	800261c <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002622:	f04b 0301 	orr.w	r3, fp, #1
 8002626:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002628:	f1ba 3fff 	cmp.w	sl, #4294967295
 800262c:	d003      	beq.n	8002636 <I2C_RequestMemoryRead+0x1aa>
 800262e:	e02b      	b.n	8002688 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002630:	6963      	ldr	r3, [r4, #20]
 8002632:	055b      	lsls	r3, r3, #21
 8002634:	d4a1      	bmi.n	800257a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002636:	6963      	ldr	r3, [r4, #20]
 8002638:	43db      	mvns	r3, r3
 800263a:	f013 0302 	ands.w	r3, r3, #2
 800263e:	d1f7      	bne.n	8002630 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 8002640:	4618      	mov	r0, r3
 8002642:	e771      	b.n	8002528 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002644:	6963      	ldr	r3, [r4, #20]
 8002646:	07d9      	lsls	r1, r3, #31
 8002648:	d4eb      	bmi.n	8002622 <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264a:	f7ff fcbd 	bl	8001fc8 <HAL_GetTick>
 800264e:	eba0 0009 	sub.w	r0, r0, r9
 8002652:	4582      	cmp	sl, r0
 8002654:	f4ff af79 	bcc.w	800254a <I2C_RequestMemoryRead+0xbe>
 8002658:	f1ba 0f00 	cmp.w	sl, #0
 800265c:	f43f af75 	beq.w	800254a <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002660:	6834      	ldr	r4, [r6, #0]
 8002662:	e7d8      	b.n	8002616 <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002664:	6963      	ldr	r3, [r4, #20]
 8002666:	061a      	lsls	r2, r3, #24
 8002668:	d4af      	bmi.n	80025ca <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800266a:	6963      	ldr	r3, [r4, #20]
 800266c:	055d      	lsls	r5, r3, #21
 800266e:	f53f af47 	bmi.w	8002500 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002672:	f7ff fca9 	bl	8001fc8 <HAL_GetTick>
 8002676:	eba0 0009 	sub.w	r0, r0, r9
 800267a:	4582      	cmp	sl, r0
 800267c:	d34c      	bcc.n	8002718 <I2C_RequestMemoryRead+0x28c>
 800267e:	f1ba 0f00 	cmp.w	sl, #0
 8002682:	d049      	beq.n	8002718 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002684:	6834      	ldr	r4, [r6, #0]
 8002686:	e731      	b.n	80024ec <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002688:	6963      	ldr	r3, [r4, #20]
 800268a:	43db      	mvns	r3, r3
 800268c:	f013 0302 	ands.w	r3, r3, #2
 8002690:	d0d6      	beq.n	8002640 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002692:	6963      	ldr	r3, [r4, #20]
 8002694:	055a      	lsls	r2, r3, #21
 8002696:	f53f af70 	bmi.w	800257a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7ff fc95 	bl	8001fc8 <HAL_GetTick>
 800269e:	eba0 0009 	sub.w	r0, r0, r9
 80026a2:	4582      	cmp	sl, r0
 80026a4:	d316      	bcc.n	80026d4 <I2C_RequestMemoryRead+0x248>
 80026a6:	f1ba 0f00 	cmp.w	sl, #0
 80026aa:	d013      	beq.n	80026d4 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ac:	6834      	ldr	r4, [r6, #0]
 80026ae:	e7bb      	b.n	8002628 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026b0:	6963      	ldr	r3, [r4, #20]
 80026b2:	061d      	lsls	r5, r3, #24
 80026b4:	d4ab      	bmi.n	800260e <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026b6:	6963      	ldr	r3, [r4, #20]
 80026b8:	055a      	lsls	r2, r3, #21
 80026ba:	f53f af21 	bmi.w	8002500 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7ff fc83 	bl	8001fc8 <HAL_GetTick>
 80026c2:	eba0 0009 	sub.w	r0, r0, r9
 80026c6:	4582      	cmp	sl, r0
 80026c8:	d326      	bcc.n	8002718 <I2C_RequestMemoryRead+0x28c>
 80026ca:	f1ba 0f00 	cmp.w	sl, #0
 80026ce:	d023      	beq.n	8002718 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026d0:	6834      	ldr	r4, [r6, #0]
 80026d2:	e77f      	b.n	80025d4 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d4:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80026d6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026da:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026de:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e2:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80026e4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026e8:	f043 0320 	orr.w	r3, r3, #32
 80026ec:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80026ee:	2001      	movs	r0, #1
 80026f0:	e71a      	b.n	8002528 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f2:	6963      	ldr	r3, [r4, #20]
 80026f4:	0619      	lsls	r1, r3, #24
 80026f6:	f53f af6b 	bmi.w	80025d0 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026fa:	6963      	ldr	r3, [r4, #20]
 80026fc:	055b      	lsls	r3, r3, #21
 80026fe:	f53f aeff 	bmi.w	8002500 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7ff fc61 	bl	8001fc8 <HAL_GetTick>
 8002706:	eba0 0009 	sub.w	r0, r0, r9
 800270a:	4582      	cmp	sl, r0
 800270c:	d304      	bcc.n	8002718 <I2C_RequestMemoryRead+0x28c>
 800270e:	f1ba 0f00 	cmp.w	sl, #0
 8002712:	d001      	beq.n	8002718 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002714:	6834      	ldr	r4, [r6, #0]
 8002716:	e769      	b.n	80025ec <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002718:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800271a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800271c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800271e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002722:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002726:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002728:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800272c:	f043 0320 	orr.w	r3, r3, #32
 8002730:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8002732:	e6f5      	b.n	8002520 <I2C_RequestMemoryRead+0x94>

08002734 <HAL_I2C_Mem_Write>:
{
 8002734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	4604      	mov	r4, r0
 800273a:	b083      	sub	sp, #12
 800273c:	4699      	mov	r9, r3
 800273e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002742:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002744:	460f      	mov	r7, r1
 8002746:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fc3e 	bl	8001fc8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800274c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002750:	2b20      	cmp	r3, #32
 8002752:	d004      	beq.n	800275e <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8002754:	2702      	movs	r7, #2
}
 8002756:	4638      	mov	r0, r7
 8002758:	b003      	add	sp, #12
 800275a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800275e:	4605      	mov	r5, r0
 8002760:	e005      	b.n	800276e <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7ff fc31 	bl	8001fc8 <HAL_GetTick>
 8002766:	1b40      	subs	r0, r0, r5
 8002768:	2819      	cmp	r0, #25
 800276a:	f200 80aa 	bhi.w	80028c2 <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276e:	6820      	ldr	r0, [r4, #0]
 8002770:	6983      	ldr	r3, [r0, #24]
 8002772:	ea6f 0c03 	mvn.w	ip, r3
 8002776:	f01c 0b02 	ands.w	fp, ip, #2
 800277a:	d0f2      	beq.n	8002762 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 800277c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d0e7      	beq.n	8002754 <HAL_I2C_Mem_Write+0x20>
 8002784:	2301      	movs	r3, #1
 8002786:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800278a:	6803      	ldr	r3, [r0, #0]
 800278c:	07db      	lsls	r3, r3, #31
 800278e:	d571      	bpl.n	8002874 <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002790:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002792:	6807      	ldr	r7, [r0, #0]
 8002794:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8002798:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800279a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800279c:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800279e:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027a0:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027a4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027a8:	2040      	movs	r0, #64	; 0x40
 80027aa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ae:	2000      	movs	r0, #0
 80027b0:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80027b2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027b6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80027b8:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ba:	4857      	ldr	r0, [pc, #348]	; (8002918 <HAL_I2C_Mem_Write+0x1e4>)
 80027bc:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027be:	464b      	mov	r3, r9
 80027c0:	4642      	mov	r2, r8
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff fd6c 	bl	80022a0 <I2C_RequestMemoryWrite>
 80027c8:	4607      	mov	r7, r0
 80027ca:	b9f8      	cbnz	r0, 800280c <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 80027cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 80a0 	beq.w	8002914 <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	1c72      	adds	r2, r6, #1
 80027d8:	d158      	bne.n	800288c <HAL_I2C_Mem_Write+0x158>
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	0610      	lsls	r0, r2, #24
 80027de:	d41a      	bmi.n	8002816 <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	0551      	lsls	r1, r2, #21
 80027e4:	d5f9      	bpl.n	80027da <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80027e6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e8:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80027ec:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80027f0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027f2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80027fc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002806:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002808:	2b04      	cmp	r3, #4
 800280a:	d038      	beq.n	800287e <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 800280c:	2701      	movs	r7, #1
}
 800280e:	4638      	mov	r0, r7
 8002810:	b003      	add	sp, #12
 8002812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002816:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800281a:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800281e:	4661      	mov	r1, ip
      hi2c->XferSize--;
 8002820:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002828:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800282a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800282c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800282e:	3a01      	subs	r2, #1
 8002830:	b292      	uxth	r2, r2
 8002832:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002834:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002836:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8002838:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283a:	0740      	lsls	r0, r0, #29
 800283c:	d517      	bpl.n	800286e <HAL_I2C_Mem_Write+0x13a>
 800283e:	b942      	cbnz	r2, 8002852 <HAL_I2C_Mem_Write+0x11e>
 8002840:	1c72      	adds	r2, r6, #1
 8002842:	d159      	bne.n	80028f8 <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002844:	695a      	ldr	r2, [r3, #20]
 8002846:	0750      	lsls	r0, r2, #29
 8002848:	d449      	bmi.n	80028de <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	0551      	lsls	r1, r2, #21
 800284e:	d5f9      	bpl.n	8002844 <HAL_I2C_Mem_Write+0x110>
 8002850:	e7c9      	b.n	80027e6 <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002852:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8002856:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8002858:	f10c 0102 	add.w	r1, ip, #2
 800285c:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800285e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002860:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 8002864:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8002866:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8002868:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 800286a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800286c:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800286e:	2a00      	cmp	r2, #0
 8002870:	d1b1      	bne.n	80027d6 <HAL_I2C_Mem_Write+0xa2>
 8002872:	e7e5      	b.n	8002840 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 8002874:	6803      	ldr	r3, [r0, #0]
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6003      	str	r3, [r0, #0]
 800287c:	e788      	b.n	8002790 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800287e:	6822      	ldr	r2, [r4, #0]
 8002880:	6813      	ldr	r3, [r2, #0]
 8002882:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8002886:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e764      	b.n	8002756 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	0612      	lsls	r2, r2, #24
 8002890:	d4c1      	bmi.n	8002816 <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	0551      	lsls	r1, r2, #21
 8002896:	d4a6      	bmi.n	80027e6 <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7ff fb96 	bl	8001fc8 <HAL_GetTick>
 800289c:	1b40      	subs	r0, r0, r5
 800289e:	4286      	cmp	r6, r0
 80028a0:	d301      	bcc.n	80028a6 <HAL_I2C_Mem_Write+0x172>
 80028a2:	2e00      	cmp	r6, #0
 80028a4:	d196      	bne.n	80027d4 <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028a6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80028a8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028aa:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028b0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80028b6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028ba:	f043 0320 	orr.w	r3, r3, #32
 80028be:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80028c0:	e7a1      	b.n	8002806 <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 80028c2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028c4:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028cc:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80028d2:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	6423      	str	r3, [r4, #64]	; 0x40
 80028dc:	e73a      	b.n	8002754 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028de:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e0:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80028ee:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80028f6:	e72e      	b.n	8002756 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	0752      	lsls	r2, r2, #29
 80028fc:	d4ef      	bmi.n	80028de <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	0551      	lsls	r1, r2, #21
 8002902:	f53f af70 	bmi.w	80027e6 <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7ff fb5f 	bl	8001fc8 <HAL_GetTick>
 800290a:	1b40      	subs	r0, r0, r5
 800290c:	4286      	cmp	r6, r0
 800290e:	d3ca      	bcc.n	80028a6 <HAL_I2C_Mem_Write+0x172>
 8002910:	2e00      	cmp	r6, #0
 8002912:	d0c8      	beq.n	80028a6 <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	e793      	b.n	8002840 <HAL_I2C_Mem_Write+0x10c>
 8002918:	ffff0000 	.word	0xffff0000

0800291c <HAL_I2C_Mem_Read>:
{
 800291c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002920:	4604      	mov	r4, r0
 8002922:	b087      	sub	sp, #28
 8002924:	4699      	mov	r9, r3
 8002926:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 800292a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800292c:	460f      	mov	r7, r1
 800292e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff fb4a 	bl	8001fc8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002934:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002938:	2b20      	cmp	r3, #32
 800293a:	d004      	beq.n	8002946 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 800293c:	2702      	movs	r7, #2
}
 800293e:	4638      	mov	r0, r7
 8002940:	b007      	add	sp, #28
 8002942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002946:	4606      	mov	r6, r0
 8002948:	e005      	b.n	8002956 <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff fb3d 	bl	8001fc8 <HAL_GetTick>
 800294e:	1b80      	subs	r0, r0, r6
 8002950:	2819      	cmp	r0, #25
 8002952:	f200 80d2 	bhi.w	8002afa <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002956:	f8d4 c000 	ldr.w	ip, [r4]
 800295a:	f8dc 0018 	ldr.w	r0, [ip, #24]
 800295e:	43c0      	mvns	r0, r0
 8002960:	f010 0b02 	ands.w	fp, r0, #2
 8002964:	d0f1      	beq.n	800294a <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8002966:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d0e6      	beq.n	800293c <HAL_I2C_Mem_Read+0x20>
 800296e:	2301      	movs	r3, #1
 8002970:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002974:	f8dc 3000 	ldr.w	r3, [ip]
 8002978:	07d9      	lsls	r1, r3, #31
 800297a:	d537      	bpl.n	80029ec <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800297c:	f8dc 0000 	ldr.w	r0, [ip]
 8002980:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8002984:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 8002988:	9810      	ldr	r0, [sp, #64]	; 0x40
 800298a:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800298c:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800298e:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002992:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002996:	2040      	movs	r0, #64	; 0x40
 8002998:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800299c:	2000      	movs	r0, #0
 800299e:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80029a0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80029a6:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a8:	4893      	ldr	r0, [pc, #588]	; (8002bf8 <HAL_I2C_Mem_Read+0x2dc>)
 80029aa:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029ac:	4639      	mov	r1, r7
 80029ae:	464b      	mov	r3, r9
 80029b0:	4642      	mov	r2, r8
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff fd6a 	bl	800248c <I2C_RequestMemoryRead>
 80029b8:	4607      	mov	r7, r0
 80029ba:	2800      	cmp	r0, #0
 80029bc:	f040 80ab 	bne.w	8002b16 <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 80029c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80029c2:	b9d2      	cbnz	r2, 80029fa <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	9002      	str	r0, [sp, #8]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	9202      	str	r2, [sp, #8]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	9202      	str	r2, [sp, #8]
 80029d0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029da:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80029dc:	2220      	movs	r2, #32
 80029de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80029e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80029ea:	e7a8      	b.n	800293e <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 80029ec:	f8dc 3000 	ldr.w	r3, [ip]
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	f8cc 3000 	str.w	r3, [ip]
 80029f8:	e7c0      	b.n	800297c <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 80029fa:	2a01      	cmp	r2, #1
 80029fc:	f000 812c 	beq.w	8002c58 <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8002a00:	2a02      	cmp	r2, #2
 8002a02:	f000 80bd 	beq.w	8002b80 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	9005      	str	r0, [sp, #20]
 8002a0a:	6959      	ldr	r1, [r3, #20]
 8002a0c:	9105      	str	r1, [sp, #20]
 8002a0e:	6999      	ldr	r1, [r3, #24]
 8002a10:	9105      	str	r1, [sp, #20]
 8002a12:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8002a14:	2a03      	cmp	r2, #3
 8002a16:	d849      	bhi.n	8002aac <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 8002a18:	2a01      	cmp	r2, #1
 8002a1a:	f000 80eb 	beq.w	8002bf4 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 8002a1e:	2a02      	cmp	r2, #2
 8002a20:	f000 8089 	beq.w	8002b36 <HAL_I2C_Mem_Read+0x21a>
 8002a24:	1c69      	adds	r1, r5, #1
 8002a26:	f040 80bb 	bne.w	8002ba0 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	0752      	lsls	r2, r2, #29
 8002a2e:	d5fc      	bpl.n	8002a2a <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a30:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a38:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002a3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002a40:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002a42:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002a44:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002a46:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002a48:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002a4a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002a4c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002a4e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002a50:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002a52:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a54:	6822      	ldr	r2, [r4, #0]
 8002a56:	f040 80af 	bne.w	8002bb8 <HAL_I2C_Mem_Read+0x29c>
 8002a5a:	6953      	ldr	r3, [r2, #20]
 8002a5c:	075b      	lsls	r3, r3, #29
 8002a5e:	d5fc      	bpl.n	8002a5a <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a68:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	6913      	ldr	r3, [r2, #16]
 8002a6c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002a6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002a70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002a72:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7c:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8002a7e:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8002a80:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8002a84:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002a86:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8002a8c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002a8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002a92:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002a94:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002a96:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002a98:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002a9a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002a9c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002a9e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002aa0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d099      	beq.n	80029da <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8002aa6:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aa8:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8002aaa:	d9b5      	bls.n	8002a18 <HAL_I2C_Mem_Read+0xfc>
 8002aac:	b95d      	cbnz	r5, 8002ac6 <HAL_I2C_Mem_Read+0x1aa>
 8002aae:	e0c5      	b.n	8002c3c <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	06d0      	lsls	r0, r2, #27
 8002ab4:	f100 80b2 	bmi.w	8002c1c <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab8:	f7ff fa86 	bl	8001fc8 <HAL_GetTick>
 8002abc:	1b80      	subs	r0, r0, r6
 8002abe:	4285      	cmp	r5, r0
 8002ac0:	f0c0 8086 	bcc.w	8002bd0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	0652      	lsls	r2, r2, #25
 8002aca:	d5f1      	bpl.n	8002ab0 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002acc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8002ad2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ad4:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8002ad6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002ad8:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ae0:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8002ae2:	3a01      	subs	r2, #1
 8002ae4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002ae6:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002aea:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8002aec:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002aee:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002af2:	d5d6      	bpl.n	8002aa2 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af4:	6903      	ldr	r3, [r0, #16]
 8002af6:	704b      	strb	r3, [r1, #1]
 8002af8:	e036      	b.n	8002b68 <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002afa:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002afc:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b04:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002b0a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	6423      	str	r3, [r4, #64]	; 0x40
 8002b14:	e712      	b.n	800293c <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8002b16:	2701      	movs	r7, #1
}
 8002b18:	4638      	mov	r0, r7
 8002b1a:	b007      	add	sp, #28
 8002b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	0750      	lsls	r0, r2, #29
 8002b24:	d40c      	bmi.n	8002b40 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7ff fa4f 	bl	8001fc8 <HAL_GetTick>
 8002b2a:	1b80      	subs	r0, r0, r6
 8002b2c:	4285      	cmp	r5, r0
 8002b2e:	d34f      	bcc.n	8002bd0 <HAL_I2C_Mem_Read+0x2b4>
 8002b30:	2d00      	cmp	r5, #0
 8002b32:	d04d      	beq.n	8002bd0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	1c69      	adds	r1, r5, #1
 8002b38:	d1f2      	bne.n	8002b20 <HAL_I2C_Mem_Read+0x204>
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	0752      	lsls	r2, r2, #29
 8002b3e:	d5fc      	bpl.n	8002b3a <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b46:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b4c:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8002b4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002b50:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002b58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5e:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8002b60:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b62:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8002b64:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b66:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002b68:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b6a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002b70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002b72:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002b74:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8002b76:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002b78:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8002b7a:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b7c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002b7e:	e790      	b.n	8002aa2 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002b88:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002b90:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	9004      	str	r0, [sp, #16]
 8002b94:	6959      	ldr	r1, [r3, #20]
 8002b96:	9104      	str	r1, [sp, #16]
 8002b98:	6999      	ldr	r1, [r3, #24]
 8002b9a:	9104      	str	r1, [sp, #16]
 8002b9c:	9904      	ldr	r1, [sp, #16]
 8002b9e:	e739      	b.n	8002a14 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	0750      	lsls	r0, r2, #29
 8002ba4:	f53f af44 	bmi.w	8002a30 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba8:	f7ff fa0e 	bl	8001fc8 <HAL_GetTick>
 8002bac:	1b80      	subs	r0, r0, r6
 8002bae:	4285      	cmp	r5, r0
 8002bb0:	d30e      	bcc.n	8002bd0 <HAL_I2C_Mem_Read+0x2b4>
 8002bb2:	b16d      	cbz	r5, 8002bd0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	e735      	b.n	8002a24 <HAL_I2C_Mem_Read+0x108>
 8002bb8:	6953      	ldr	r3, [r2, #20]
 8002bba:	0758      	lsls	r0, r3, #29
 8002bbc:	f53f af50 	bmi.w	8002a60 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc0:	f7ff fa02 	bl	8001fc8 <HAL_GetTick>
 8002bc4:	1b80      	subs	r0, r0, r6
 8002bc6:	4285      	cmp	r5, r0
 8002bc8:	d302      	bcc.n	8002bd0 <HAL_I2C_Mem_Read+0x2b4>
 8002bca:	2d00      	cmp	r5, #0
 8002bcc:	f47f af41 	bne.w	8002a52 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bd2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bd4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bda:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002be0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002be4:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002be6:	f043 0320 	orr.w	r3, r3, #32
}
 8002bea:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002bee:	b007      	add	sp, #28
 8002bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bf4:	b95d      	cbnz	r5, 8002c0e <HAL_I2C_Mem_Read+0x2f2>
 8002bf6:	e02b      	b.n	8002c50 <HAL_I2C_Mem_Read+0x334>
 8002bf8:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	06d2      	lsls	r2, r2, #27
 8002c00:	d40c      	bmi.n	8002c1c <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c02:	f7ff f9e1 	bl	8001fc8 <HAL_GetTick>
 8002c06:	1b80      	subs	r0, r0, r6
 8002c08:	4285      	cmp	r5, r0
 8002c0a:	d3e1      	bcc.n	8002bd0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	695a      	ldr	r2, [r3, #20]
 8002c10:	0651      	lsls	r1, r2, #25
 8002c12:	d5f3      	bpl.n	8002bfc <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c18:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002c1a:	e7a5      	b.n	8002b68 <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c22:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c24:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c32:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002c34:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002c38:	2701      	movs	r7, #1
 8002c3a:	e680      	b.n	800293e <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	0652      	lsls	r2, r2, #25
 8002c40:	f53f af44 	bmi.w	8002acc <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	06d1      	lsls	r1, r2, #27
 8002c48:	d4e8      	bmi.n	8002c1c <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4a:	f7ff f9bd 	bl	8001fc8 <HAL_GetTick>
 8002c4e:	e7bf      	b.n	8002bd0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	0650      	lsls	r0, r2, #25
 8002c54:	d5f6      	bpl.n	8002c44 <HAL_I2C_Mem_Read+0x328>
 8002c56:	e7dd      	b.n	8002c14 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002c60:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	9003      	str	r0, [sp, #12]
 8002c64:	6959      	ldr	r1, [r3, #20]
 8002c66:	9103      	str	r1, [sp, #12]
 8002c68:	6999      	ldr	r1, [r3, #24]
 8002c6a:	9103      	str	r1, [sp, #12]
 8002c6c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002c74:	6019      	str	r1, [r3, #0]
 8002c76:	e6cd      	b.n	8002a14 <HAL_I2C_Mem_Read+0xf8>

08002c78 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	f000 81a2 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x34a>
{
 8002c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	6803      	ldr	r3, [r0, #0]
 8002c84:	07dd      	lsls	r5, r3, #31
{
 8002c86:	b082      	sub	sp, #8
 8002c88:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8a:	d52f      	bpl.n	8002cec <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8c:	499e      	ldr	r1, [pc, #632]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002c8e:	688a      	ldr	r2, [r1, #8]
 8002c90:	f002 020c 	and.w	r2, r2, #12
 8002c94:	2a04      	cmp	r2, #4
 8002c96:	f000 80ed 	beq.w	8002e74 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9a:	688a      	ldr	r2, [r1, #8]
 8002c9c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca0:	2a08      	cmp	r2, #8
 8002ca2:	f000 80e3 	beq.w	8002e6c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca6:	6863      	ldr	r3, [r4, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cac:	f000 80ec 	beq.w	8002e88 <HAL_RCC_OscConfig+0x210>
 8002cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cb4:	f000 8175 	beq.w	8002fa2 <HAL_RCC_OscConfig+0x32a>
 8002cb8:	4d93      	ldr	r5, [pc, #588]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002cba:	682a      	ldr	r2, [r5, #0]
 8002cbc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cc0:	602a      	str	r2, [r5, #0]
 8002cc2:	682a      	ldr	r2, [r5, #0]
 8002cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 80e1 	bne.w	8002e92 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7ff f97a 	bl	8001fc8 <HAL_GetTick>
 8002cd4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e005      	b.n	8002ce4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f976 	bl	8001fc8 <HAL_GetTick>
 8002cdc:	1b80      	subs	r0, r0, r6
 8002cde:	2864      	cmp	r0, #100	; 0x64
 8002ce0:	f200 8101 	bhi.w	8002ee6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	039b      	lsls	r3, r3, #14
 8002ce8:	d4f6      	bmi.n	8002cd8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	079f      	lsls	r7, r3, #30
 8002cee:	d528      	bpl.n	8002d42 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf0:	4a85      	ldr	r2, [pc, #532]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002cf2:	6891      	ldr	r1, [r2, #8]
 8002cf4:	f011 0f0c 	tst.w	r1, #12
 8002cf8:	f000 8090 	beq.w	8002e1c <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfc:	6891      	ldr	r1, [r2, #8]
 8002cfe:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d02:	2908      	cmp	r1, #8
 8002d04:	f000 8086 	beq.w	8002e14 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d08:	68e3      	ldr	r3, [r4, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 810e 	beq.w	8002f2c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d10:	4b7e      	ldr	r3, [pc, #504]	; (8002f0c <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d12:	4e7d      	ldr	r6, [pc, #500]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002d18:	f7ff f956 	bl	8001fc8 <HAL_GetTick>
 8002d1c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1e:	e005      	b.n	8002d2c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d20:	f7ff f952 	bl	8001fc8 <HAL_GetTick>
 8002d24:	1b40      	subs	r0, r0, r5
 8002d26:	2802      	cmp	r0, #2
 8002d28:	f200 80dd 	bhi.w	8002ee6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2c:	6833      	ldr	r3, [r6, #0]
 8002d2e:	0798      	lsls	r0, r3, #30
 8002d30:	d5f6      	bpl.n	8002d20 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d32:	6833      	ldr	r3, [r6, #0]
 8002d34:	6922      	ldr	r2, [r4, #16]
 8002d36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002d3e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	071a      	lsls	r2, r3, #28
 8002d44:	d451      	bmi.n	8002dea <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d46:	0758      	lsls	r0, r3, #29
 8002d48:	d52f      	bpl.n	8002daa <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4a6f      	ldr	r2, [pc, #444]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002d4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d4e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002d52:	d07f      	beq.n	8002e54 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002d54:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4e6e      	ldr	r6, [pc, #440]	; (8002f10 <HAL_RCC_OscConfig+0x298>)
 8002d58:	6833      	ldr	r3, [r6, #0]
 8002d5a:	05d9      	lsls	r1, r3, #23
 8002d5c:	f140 80b3 	bpl.w	8002ec6 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	68a3      	ldr	r3, [r4, #8]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	f000 80c3 	beq.w	8002eee <HAL_RCC_OscConfig+0x276>
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	f000 812c 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x34e>
 8002d6e:	4e66      	ldr	r6, [pc, #408]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002d70:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	6732      	str	r2, [r6, #112]	; 0x70
 8002d78:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f040 80b9 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7ff f91f 	bl	8001fc8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d8e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d90:	e005      	b.n	8002d9e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7ff f919 	bl	8001fc8 <HAL_GetTick>
 8002d96:	1bc0      	subs	r0, r0, r7
 8002d98:	4540      	cmp	r0, r8
 8002d9a:	f200 80a4 	bhi.w	8002ee6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002da0:	0798      	lsls	r0, r3, #30
 8002da2:	d4f6      	bmi.n	8002d92 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	f040 8106 	bne.w	8002fb6 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002daa:	69a0      	ldr	r0, [r4, #24]
 8002dac:	b1c8      	cbz	r0, 8002de2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dae:	4d56      	ldr	r5, [pc, #344]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002db0:	68ab      	ldr	r3, [r5, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	f000 80c9 	beq.w	8002f4e <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_OscConfig+0x294>)
 8002dbe:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc4:	f000 8109 	beq.w	8002fda <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff f8fe 	bl	8001fc8 <HAL_GetTick>
 8002dcc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	e005      	b.n	8002ddc <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7ff f8fa 	bl	8001fc8 <HAL_GetTick>
 8002dd4:	1b00      	subs	r0, r0, r4
 8002dd6:	2802      	cmp	r0, #2
 8002dd8:	f200 8085 	bhi.w	8002ee6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	019b      	lsls	r3, r3, #6
 8002de0:	d4f6      	bmi.n	8002dd0 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002de2:	2000      	movs	r0, #0
}
 8002de4:	b002      	add	sp, #8
 8002de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dea:	6963      	ldr	r3, [r4, #20]
 8002dec:	b30b      	cbz	r3, 8002e32 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df0:	4e45      	ldr	r6, [pc, #276]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8002df2:	2201      	movs	r2, #1
 8002df4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002df8:	f7ff f8e6 	bl	8001fc8 <HAL_GetTick>
 8002dfc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e004      	b.n	8002e0a <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e00:	f7ff f8e2 	bl	8001fc8 <HAL_GetTick>
 8002e04:	1b40      	subs	r0, r0, r5
 8002e06:	2802      	cmp	r0, #2
 8002e08:	d86d      	bhi.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002e0c:	079b      	lsls	r3, r3, #30
 8002e0e:	d5f7      	bpl.n	8002e00 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	e798      	b.n	8002d46 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e14:	6852      	ldr	r2, [r2, #4]
 8002e16:	0256      	lsls	r6, r2, #9
 8002e18:	f53f af76 	bmi.w	8002d08 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e1c:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	0795      	lsls	r5, r2, #30
 8002e22:	d544      	bpl.n	8002eae <HAL_RCC_OscConfig+0x236>
 8002e24:	68e2      	ldr	r2, [r4, #12]
 8002e26:	2a01      	cmp	r2, #1
 8002e28:	d041      	beq.n	8002eae <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8002e2a:	2001      	movs	r0, #1
}
 8002e2c:	b002      	add	sp, #8
 8002e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002e32:	4a36      	ldr	r2, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4e34      	ldr	r6, [pc, #208]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8002e36:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002e3a:	f7ff f8c5 	bl	8001fc8 <HAL_GetTick>
 8002e3e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e40:	e004      	b.n	8002e4c <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7ff f8c1 	bl	8001fc8 <HAL_GetTick>
 8002e46:	1b40      	subs	r0, r0, r5
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	d84c      	bhi.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002e4e:	079f      	lsls	r7, r3, #30
 8002e50:	d4f7      	bmi.n	8002e42 <HAL_RCC_OscConfig+0x1ca>
 8002e52:	e7dd      	b.n	8002e10 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e68:	2501      	movs	r5, #1
 8002e6a:	e774      	b.n	8002d56 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6c:	684a      	ldr	r2, [r1, #4]
 8002e6e:	0250      	lsls	r0, r2, #9
 8002e70:	f57f af19 	bpl.w	8002ca6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	4a24      	ldr	r2, [pc, #144]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	0391      	lsls	r1, r2, #14
 8002e7a:	f57f af37 	bpl.w	8002cec <HAL_RCC_OscConfig+0x74>
 8002e7e:	6862      	ldr	r2, [r4, #4]
 8002e80:	2a00      	cmp	r2, #0
 8002e82:	f47f af33 	bne.w	8002cec <HAL_RCC_OscConfig+0x74>
 8002e86:	e7d0      	b.n	8002e2a <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002e8a:	6813      	ldr	r3, [r2, #0]
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002e92:	f7ff f899 	bl	8001fc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4e1c      	ldr	r6, [pc, #112]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002e98:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	e004      	b.n	8002ea6 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7ff f894 	bl	8001fc8 <HAL_GetTick>
 8002ea0:	1b40      	subs	r0, r0, r5
 8002ea2:	2864      	cmp	r0, #100	; 0x64
 8002ea4:	d81f      	bhi.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea6:	6833      	ldr	r3, [r6, #0]
 8002ea8:	039a      	lsls	r2, r3, #14
 8002eaa:	d5f7      	bpl.n	8002e9c <HAL_RCC_OscConfig+0x224>
 8002eac:	e71d      	b.n	8002cea <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4916      	ldr	r1, [pc, #88]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002eb0:	6920      	ldr	r0, [r4, #16]
 8002eb2:	680a      	ldr	r2, [r1, #0]
 8002eb4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002eb8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002ebc:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebe:	071a      	lsls	r2, r3, #28
 8002ec0:	f57f af41 	bpl.w	8002d46 <HAL_RCC_OscConfig+0xce>
 8002ec4:	e791      	b.n	8002dea <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec6:	6833      	ldr	r3, [r6, #0]
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002ece:	f7ff f87b 	bl	8001fc8 <HAL_GetTick>
 8002ed2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	6833      	ldr	r3, [r6, #0]
 8002ed6:	05da      	lsls	r2, r3, #23
 8002ed8:	f53f af42 	bmi.w	8002d60 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002edc:	f7ff f874 	bl	8001fc8 <HAL_GetTick>
 8002ee0:	1bc0      	subs	r0, r0, r7
 8002ee2:	2802      	cmp	r0, #2
 8002ee4:	d9f6      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002ee6:	2003      	movs	r0, #3
}
 8002ee8:	b002      	add	sp, #8
 8002eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eee:	4a06      	ldr	r2, [pc, #24]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
 8002ef0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002ef8:	f7ff f866 	bl	8001fc8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	4f02      	ldr	r7, [pc, #8]	; (8002f08 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002efe:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0x2a6>
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	42470000 	.word	0x42470000
 8002f10:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f14:	f7ff f858 	bl	8001fc8 <HAL_GetTick>
 8002f18:	1b80      	subs	r0, r0, r6
 8002f1a:	4540      	cmp	r0, r8
 8002f1c:	d8e3      	bhi.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f20:	079b      	lsls	r3, r3, #30
 8002f22:	d5f7      	bpl.n	8002f14 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002f24:	2d00      	cmp	r5, #0
 8002f26:	f43f af40 	beq.w	8002daa <HAL_RCC_OscConfig+0x132>
 8002f2a:	e044      	b.n	8002fb6 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002f2c:	4a42      	ldr	r2, [pc, #264]	; (8003038 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4e43      	ldr	r6, [pc, #268]	; (800303c <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002f30:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f32:	f7ff f849 	bl	8001fc8 <HAL_GetTick>
 8002f36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f38:	e004      	b.n	8002f44 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f3a:	f7ff f845 	bl	8001fc8 <HAL_GetTick>
 8002f3e:	1b40      	subs	r0, r0, r5
 8002f40:	2802      	cmp	r0, #2
 8002f42:	d8d0      	bhi.n	8002ee6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f44:	6833      	ldr	r3, [r6, #0]
 8002f46:	0799      	lsls	r1, r3, #30
 8002f48:	d4f7      	bmi.n	8002f3a <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	e6f9      	b.n	8002d42 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4e:	2801      	cmp	r0, #1
 8002f50:	f43f af48 	beq.w	8002de4 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002f54:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f58:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5c:	4291      	cmp	r1, r2
 8002f5e:	f47f af64 	bne.w	8002e2a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f64:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f68:	4291      	cmp	r1, r2
 8002f6a:	f47f af5e 	bne.w	8002e2a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f70:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002f74:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f76:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002f7a:	f47f af56 	bne.w	8002e2a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f80:	0852      	lsrs	r2, r2, #1
 8002f82:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002f86:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f88:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002f8c:	f47f af4d 	bne.w	8002e2a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f92:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f96:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002f9a:	bf14      	ite	ne
 8002f9c:	2001      	movne	r0, #1
 8002f9e:	2000      	moveq	r0, #0
 8002fa0:	e720      	b.n	8002de4 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_RCC_OscConfig+0x3c4>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fb2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb4:	e76d      	b.n	8002e92 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb6:	4a21      	ldr	r2, [pc, #132]	; (800303c <HAL_RCC_OscConfig+0x3c4>)
 8002fb8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc0:	e6f3      	b.n	8002daa <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
}
 8002fc4:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc6:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_RCC_OscConfig+0x3c4>)
 8002fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fca:	f042 0204 	orr.w	r2, r2, #4
 8002fce:	671a      	str	r2, [r3, #112]	; 0x70
 8002fd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd8:	e78e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8002fda:	f7fe fff5 	bl	8001fc8 <HAL_GetTick>
 8002fde:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe0:	e005      	b.n	8002fee <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe2:	f7fe fff1 	bl	8001fc8 <HAL_GetTick>
 8002fe6:	1b80      	subs	r0, r0, r6
 8002fe8:	2802      	cmp	r0, #2
 8002fea:	f63f af7c 	bhi.w	8002ee6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fee:	682b      	ldr	r3, [r5, #0]
 8002ff0:	0199      	lsls	r1, r3, #6
 8002ff2:	d4f6      	bmi.n	8002fe2 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ff4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002ff8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003000:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8003004:	0852      	lsrs	r2, r2, #1
 8003006:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800300a:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800300c:	490a      	ldr	r1, [pc, #40]	; (8003038 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003012:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003014:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003016:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003018:	f7fe ffd6 	bl	8001fc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301c:	4d07      	ldr	r5, [pc, #28]	; (800303c <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 800301e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003020:	e005      	b.n	800302e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe ffd1 	bl	8001fc8 <HAL_GetTick>
 8003026:	1b00      	subs	r0, r0, r4
 8003028:	2802      	cmp	r0, #2
 800302a:	f63f af5c 	bhi.w	8002ee6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302e:	682b      	ldr	r3, [r5, #0]
 8003030:	019a      	lsls	r2, r3, #6
 8003032:	d5f6      	bpl.n	8003022 <HAL_RCC_OscConfig+0x3aa>
 8003034:	e6d5      	b.n	8002de2 <HAL_RCC_OscConfig+0x16a>
 8003036:	bf00      	nop
 8003038:	42470000 	.word	0x42470000
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003040:	4916      	ldr	r1, [pc, #88]	; (800309c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003042:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003044:	688b      	ldr	r3, [r1, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b04      	cmp	r3, #4
 800304c:	d01b      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x46>
 800304e:	2b08      	cmp	r3, #8
 8003050:	d117      	bne.n	8003082 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003052:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003054:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003058:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800305c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003060:	d113      	bne.n	800308a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003062:	480f      	ldr	r0, [pc, #60]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x60>)
 8003064:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003068:	fba1 0100 	umull	r0, r1, r1, r0
 800306c:	f7fd f908 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003078:	3301      	adds	r3, #1
 800307a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800307c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003080:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003082:	4807      	ldr	r0, [pc, #28]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003084:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003086:	4807      	ldr	r0, [pc, #28]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003088:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4806      	ldr	r0, [pc, #24]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x64>)
 800308c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003090:	2300      	movs	r3, #0
 8003092:	fba1 0100 	umull	r0, r1, r1, r0
 8003096:	f7fd f8f3 	bl	8000280 <__aeabi_uldivmod>
 800309a:	e7e9      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x30>
 800309c:	40023800 	.word	0x40023800
 80030a0:	00f42400 	.word	0x00f42400
 80030a4:	017d7840 	.word	0x017d7840

080030a8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80030a8:	2800      	cmp	r0, #0
 80030aa:	f000 8087 	beq.w	80031bc <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030ae:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_RCC_ClockConfig+0x128>)
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	428b      	cmp	r3, r1
{
 80030b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030bc:	460d      	mov	r5, r1
 80030be:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	d209      	bcs.n	80030d6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	b2cb      	uxtb	r3, r1
 80030c4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	6813      	ldr	r3, [r2, #0]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	428b      	cmp	r3, r1
 80030ce:	d002      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80030d0:	2001      	movs	r0, #1
}
 80030d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d6:	6823      	ldr	r3, [r4, #0]
 80030d8:	0798      	lsls	r0, r3, #30
 80030da:	d514      	bpl.n	8003106 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030dc:	0759      	lsls	r1, r3, #29
 80030de:	d504      	bpl.n	80030ea <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	493c      	ldr	r1, [pc, #240]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 80030e2:	688a      	ldr	r2, [r1, #8]
 80030e4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80030e8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	071a      	lsls	r2, r3, #28
 80030ec:	d504      	bpl.n	80030f8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ee:	4939      	ldr	r1, [pc, #228]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 80030f0:	688a      	ldr	r2, [r1, #8]
 80030f2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80030f6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4936      	ldr	r1, [pc, #216]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 80030fa:	68a0      	ldr	r0, [r4, #8]
 80030fc:	688a      	ldr	r2, [r1, #8]
 80030fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003102:	4302      	orrs	r2, r0
 8003104:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	07df      	lsls	r7, r3, #31
 8003108:	d521      	bpl.n	800314e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	6862      	ldr	r2, [r4, #4]
 800310c:	2a01      	cmp	r2, #1
 800310e:	d057      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003110:	1e93      	subs	r3, r2, #2
 8003112:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 8003116:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003118:	d94d      	bls.n	80031b6 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	0799      	lsls	r1, r3, #30
 800311c:	d5d8      	bpl.n	80030d0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4e2d      	ldr	r6, [pc, #180]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 8003120:	68b3      	ldr	r3, [r6, #8]
 8003122:	f023 0303 	bic.w	r3, r3, #3
 8003126:	4313      	orrs	r3, r2
 8003128:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800312a:	f7fe ff4d 	bl	8001fc8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800312e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003132:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003134:	e004      	b.n	8003140 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003136:	f7fe ff47 	bl	8001fc8 <HAL_GetTick>
 800313a:	1bc0      	subs	r0, r0, r7
 800313c:	4540      	cmp	r0, r8
 800313e:	d844      	bhi.n	80031ca <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003140:	68b3      	ldr	r3, [r6, #8]
 8003142:	6862      	ldr	r2, [r4, #4]
 8003144:	f003 030c 	and.w	r3, r3, #12
 8003148:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800314c:	d1f3      	bne.n	8003136 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800314e:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <HAL_RCC_ClockConfig+0x128>)
 8003150:	6813      	ldr	r3, [r2, #0]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	42ab      	cmp	r3, r5
 8003158:	d906      	bls.n	8003168 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	b2eb      	uxtb	r3, r5
 800315c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	42ab      	cmp	r3, r5
 8003166:	d1b3      	bne.n	80030d0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	6823      	ldr	r3, [r4, #0]
 800316a:	075a      	lsls	r2, r3, #29
 800316c:	d506      	bpl.n	800317c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800316e:	4919      	ldr	r1, [pc, #100]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 8003170:	68e0      	ldr	r0, [r4, #12]
 8003172:	688a      	ldr	r2, [r1, #8]
 8003174:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003178:	4302      	orrs	r2, r0
 800317a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	071b      	lsls	r3, r3, #28
 800317e:	d507      	bpl.n	8003190 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 8003182:	6921      	ldr	r1, [r4, #16]
 8003184:	6893      	ldr	r3, [r2, #8]
 8003186:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800318a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800318e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003190:	f7ff ff56 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8003194:	4a0f      	ldr	r2, [pc, #60]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 8003196:	4c10      	ldr	r4, [pc, #64]	; (80031d8 <HAL_RCC_ClockConfig+0x130>)
 8003198:	6892      	ldr	r2, [r2, #8]
 800319a:	4910      	ldr	r1, [pc, #64]	; (80031dc <HAL_RCC_ClockConfig+0x134>)
 800319c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80031a0:	4603      	mov	r3, r0
 80031a2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 80031a4:	480e      	ldr	r0, [pc, #56]	; (80031e0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a6:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80031a8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031aa:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80031ac:	f7fe fe20 	bl	8001df0 <HAL_InitTick>
  return HAL_OK;
 80031b0:	2000      	movs	r0, #0
}
 80031b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	0198      	lsls	r0, r3, #6
 80031b8:	d4b1      	bmi.n	800311e <HAL_RCC_ClockConfig+0x76>
 80031ba:	e789      	b.n	80030d0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80031bc:	2001      	movs	r0, #1
}
 80031be:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCC_ClockConfig+0x12c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	039e      	lsls	r6, r3, #14
 80031c6:	d4aa      	bmi.n	800311e <HAL_RCC_ClockConfig+0x76>
 80031c8:	e782      	b.n	80030d0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80031ca:	2003      	movs	r0, #3
 80031cc:	e781      	b.n	80030d2 <HAL_RCC_ClockConfig+0x2a>
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00
 80031d4:	40023800 	.word	0x40023800
 80031d8:	0800a138 	.word	0x0800a138
 80031dc:	20000098 	.word	0x20000098
 80031e0:	200000a0 	.word	0x200000a0

080031e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e4:	4b04      	ldr	r3, [pc, #16]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80031e6:	4905      	ldr	r1, [pc, #20]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80031ec:	6808      	ldr	r0, [r1, #0]
 80031ee:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80031f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80031f4:	40d8      	lsrs	r0, r3
 80031f6:	4770      	bx	lr
 80031f8:	40023800 	.word	0x40023800
 80031fc:	20000098 	.word	0x20000098
 8003200:	0800a148 	.word	0x0800a148

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003206:	4905      	ldr	r1, [pc, #20]	; (800321c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800320c:	6808      	ldr	r0, [r1, #0]
 800320e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003212:	5cd3      	ldrb	r3, [r2, r3]
}
 8003214:	40d8      	lsrs	r0, r3
 8003216:	4770      	bx	lr
 8003218:	40023800 	.word	0x40023800
 800321c:	20000098 	.word	0x20000098
 8003220:	0800a148 	.word	0x0800a148

08003224 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003226:	220f      	movs	r2, #15
 8003228:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	f002 0203 	and.w	r2, r2, #3
 8003230:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003238:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003240:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	08db      	lsrs	r3, r3, #3
{
 8003246:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003248:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800324c:	4c05      	ldr	r4, [pc, #20]	; (8003264 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800324e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003250:	6823      	ldr	r3, [r4, #0]
}
 8003252:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	600b      	str	r3, [r1, #0]
}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40023800 	.word	0x40023800
 8003264:	40023c00 	.word	0x40023c00

08003268 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	461d      	mov	r5, r3
 8003270:	4616      	mov	r6, r2
 8003272:	460c      	mov	r4, r1
 8003274:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003276:	f7fe fea7 	bl	8001fc8 <HAL_GetTick>
 800327a:	4435      	add	r5, r6
 800327c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800327e:	f7fe fea3 	bl	8001fc8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003282:	4b28      	ldr	r3, [pc, #160]	; (8003324 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800328a:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 800328e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003290:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003292:	1c73      	adds	r3, r6, #1
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	d107      	bne.n	80032a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 8003298:	688b      	ldr	r3, [r1, #8]
 800329a:	ea34 0303 	bics.w	r3, r4, r3
 800329e:	d0fb      	beq.n	8003298 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 80032a0:	2000      	movs	r0, #0
}
 80032a2:	b002      	add	sp, #8
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032a8:	688b      	ldr	r3, [r1, #8]
 80032aa:	ea34 0303 	bics.w	r3, r4, r3
 80032ae:	d1f7      	bne.n	80032a0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b0:	f7fe fe8a 	bl	8001fc8 <HAL_GetTick>
 80032b4:	eba0 0008 	sub.w	r0, r0, r8
 80032b8:	42a8      	cmp	r0, r5
 80032ba:	d208      	bcs.n	80032ce <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 80032bc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80032be:	2b00      	cmp	r3, #0
      count--;
 80032c0:	9b01      	ldr	r3, [sp, #4]
 80032c2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80032c6:	bf08      	it	eq
 80032c8:	2500      	moveq	r5, #0
      count--;
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	e7e1      	b.n	8003292 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032ce:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032d2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032dc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032de:	d014      	beq.n	800330a <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80032e6:	d007      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 80032e8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80032ea:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80032ec:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80032f0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80032f4:	2003      	movs	r0, #3
 80032f6:	e7d4      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	e7ee      	b.n	80032e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003310:	d002      	beq.n	8003318 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003312:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003316:	d1e3      	bne.n	80032e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e7de      	b.n	80032e0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 8003322:	bf00      	nop
 8003324:	20000098 	.word	0x20000098

08003328 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003328:	2800      	cmp	r0, #0
 800332a:	d05c      	beq.n	80033e6 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800332c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800332e:	b570      	push	{r4, r5, r6, lr}
 8003330:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003332:	2900      	cmp	r1, #0
 8003334:	d047      	beq.n	80033c6 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003336:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003338:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800333c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003340:	2300      	movs	r3, #0
 8003342:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003344:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8003348:	2a00      	cmp	r2, #0
 800334a:	d042      	beq.n	80033d2 <HAL_SPI_Init+0xaa>
 800334c:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 800334e:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003350:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335e:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003360:	6863      	ldr	r3, [r4, #4]
 8003362:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003366:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800336a:	4313      	orrs	r3, r2
 800336c:	68e2      	ldr	r2, [r4, #12]
 800336e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003372:	4313      	orrs	r3, r2
 8003374:	6922      	ldr	r2, [r4, #16]
 8003376:	f002 0202 	and.w	r2, r2, #2
 800337a:	4313      	orrs	r3, r2
 800337c:	6962      	ldr	r2, [r4, #20]
 800337e:	f002 0201 	and.w	r2, r2, #1
 8003382:	431a      	orrs	r2, r3
 8003384:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003386:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800338a:	f003 0638 	and.w	r6, r3, #56	; 0x38
 800338e:	69a1      	ldr	r1, [r4, #24]
 8003390:	6a23      	ldr	r3, [r4, #32]
 8003392:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 8003396:	f401 7300 	and.w	r3, r1, #512	; 0x200
 800339a:	4313      	orrs	r3, r2
 800339c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800339e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033a0:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033a4:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033a8:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033ac:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ae:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033b0:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b2:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033b4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80033ba:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033bc:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033be:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033c0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 80033c4:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c6:	6843      	ldr	r3, [r0, #4]
 80033c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033cc:	d0b6      	beq.n	800333c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ce:	61c1      	str	r1, [r0, #28]
 80033d0:	e7b4      	b.n	800333c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80033d2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f7fe fc86 	bl	8001ce8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033dc:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033e0:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 80033e4:	e7b3      	b.n	800334e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <HAL_SPI_Transmit>:
{
 80033ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80033f2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80033f6:	2801      	cmp	r0, #1
{
 80033f8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80033fa:	f000 8087 	beq.w	800350c <HAL_SPI_Transmit+0x120>
 80033fe:	461d      	mov	r5, r3
 8003400:	2301      	movs	r3, #1
 8003402:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003406:	4688      	mov	r8, r1
 8003408:	4617      	mov	r7, r2
 800340a:	f7fe fddd 	bl	8001fc8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800340e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003412:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003414:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003416:	b2d8      	uxtb	r0, r3
 8003418:	d009      	beq.n	800342e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800341a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800341c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800341e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003420:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003424:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003428:	b002      	add	sp, #8
 800342a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800342e:	f1b8 0f00 	cmp.w	r8, #0
 8003432:	d0f3      	beq.n	800341c <HAL_SPI_Transmit+0x30>
 8003434:	2f00      	cmp	r7, #0
 8003436:	d0f1      	beq.n	800341c <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800343a:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800343c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003440:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003442:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003444:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003448:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 800344c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003450:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 8003452:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003454:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003456:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003458:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800345a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345c:	f000 8083 	beq.w	8003566 <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003460:	6803      	ldr	r3, [r0, #0]
 8003462:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 8003464:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003466:	d403      	bmi.n	8003470 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8003468:	6803      	ldr	r3, [r0, #0]
 800346a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003470:	68e3      	ldr	r3, [r4, #12]
 8003472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003476:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003478:	d04c      	beq.n	8003514 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8095 	beq.w	80035aa <HAL_SPI_Transmit+0x1be>
 8003480:	2f01      	cmp	r7, #1
 8003482:	f000 8092 	beq.w	80035aa <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 8003486:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003488:	b29b      	uxth	r3, r3
 800348a:	b1bb      	cbz	r3, 80034bc <HAL_SPI_Transmit+0xd0>
 800348c:	2d00      	cmp	r5, #0
 800348e:	f000 80cb 	beq.w	8003628 <HAL_SPI_Transmit+0x23c>
 8003492:	1c6f      	adds	r7, r5, #1
 8003494:	d17e      	bne.n	8003594 <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	0790      	lsls	r0, r2, #30
 800349c:	f140 8090 	bpl.w	80035c0 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034a0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034a2:	7812      	ldrb	r2, [r2, #0]
 80034a4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80034a6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80034aa:	3901      	subs	r1, #1
 80034ac:	b289      	uxth	r1, r1
 80034ae:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80034b0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034b2:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80034b4:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034b6:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80034b8:	2900      	cmp	r1, #0
 80034ba:	d1ec      	bne.n	8003496 <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034bc:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034be:	4b72      	ldr	r3, [pc, #456]	; (8003688 <HAL_SPI_Transmit+0x29c>)
 80034c0:	4972      	ldr	r1, [pc, #456]	; (800368c <HAL_SPI_Transmit+0x2a0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	fba1 1303 	umull	r1, r3, r1, r3
 80034c8:	0d5b      	lsrs	r3, r3, #21
 80034ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034d6:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034d8:	d107      	bne.n	80034ea <HAL_SPI_Transmit+0xfe>
 80034da:	e0c6      	b.n	800366a <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80034dc:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034de:	6822      	ldr	r2, [r4, #0]
      count--;
 80034e0:	3b01      	subs	r3, #1
 80034e2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034e4:	6893      	ldr	r3, [r2, #8]
 80034e6:	061b      	lsls	r3, r3, #24
 80034e8:	d502      	bpl.n	80034f0 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 80034ea:	9b01      	ldr	r3, [sp, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1f5      	bne.n	80034dc <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034f0:	68a3      	ldr	r3, [r4, #8]
 80034f2:	b933      	cbnz	r3, 8003502 <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f4:	6822      	ldr	r2, [r4, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68d3      	ldr	r3, [r2, #12]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	6893      	ldr	r3, [r2, #8]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003502:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003504:	3800      	subs	r0, #0
 8003506:	bf18      	it	ne
 8003508:	2001      	movne	r0, #1
error:
 800350a:	e787      	b.n	800341c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 800350c:	2002      	movs	r0, #2
}
 800350e:	b002      	add	sp, #8
 8003510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003514:	461a      	mov	r2, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d174      	bne.n	8003604 <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800351a:	4641      	mov	r1, r8
 800351c:	f831 7b02 	ldrh.w	r7, [r1], #2
 8003520:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003522:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003524:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003526:	3901      	subs	r1, #1
 8003528:	b289      	uxth	r1, r1
 800352a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800352c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800352e:	b289      	uxth	r1, r1
 8003530:	2900      	cmp	r1, #0
 8003532:	d0c4      	beq.n	80034be <HAL_SPI_Transmit+0xd2>
 8003534:	2d00      	cmp	r5, #0
 8003536:	f000 808b 	beq.w	8003650 <HAL_SPI_Transmit+0x264>
 800353a:	1c69      	adds	r1, r5, #1
 800353c:	d158      	bne.n	80035f0 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800353e:	6883      	ldr	r3, [r0, #8]
 8003540:	079a      	lsls	r2, r3, #30
 8003542:	f140 8089 	bpl.w	8003658 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003546:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003548:	f832 3b02 	ldrh.w	r3, [r2], #2
 800354c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800354e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003550:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003552:	3b01      	subs	r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003558:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ee      	bne.n	800353e <HAL_SPI_Transmit+0x152>
 8003560:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003562:	461a      	mov	r2, r3
 8003564:	e7ab      	b.n	80034be <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8003566:	6803      	ldr	r3, [r0, #0]
 8003568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800356c:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800356e:	6803      	ldr	r3, [r0, #0]
 8003570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003574:	6003      	str	r3, [r0, #0]
 8003576:	e773      	b.n	8003460 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003578:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800357a:	7812      	ldrb	r2, [r2, #0]
 800357c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800357e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003580:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003582:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003584:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8003586:	b29b      	uxth	r3, r3
 8003588:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800358a:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800358c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d093      	beq.n	80034bc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	0791      	lsls	r1, r2, #30
 800359a:	d4ed      	bmi.n	8003578 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800359c:	f7fe fd14 	bl	8001fc8 <HAL_GetTick>
 80035a0:	1b80      	subs	r0, r0, r6
 80035a2:	4285      	cmp	r5, r0
 80035a4:	d8f2      	bhi.n	800358c <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 80035a6:	2003      	movs	r0, #3
 80035a8:	e738      	b.n	800341c <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035aa:	f898 3000 	ldrb.w	r3, [r8]
 80035ae:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80035b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80035b4:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035b6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80035b8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035ba:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80035bc:	86e3      	strh	r3, [r4, #54]	; 0x36
 80035be:	e762      	b.n	8003486 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035c0:	f7fe fd02 	bl	8001fc8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80035c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af64 	bne.w	8003496 <HAL_SPI_Transmit+0xaa>
 80035ce:	e775      	b.n	80034bc <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035d2:	f832 3b02 	ldrh.w	r3, [r2], #2
 80035d6:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 80035da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80035e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0b9      	beq.n	8003560 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ec:	f8d4 c000 	ldr.w	ip, [r4]
 80035f0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80035f4:	079b      	lsls	r3, r3, #30
 80035f6:	d4eb      	bmi.n	80035d0 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f8:	f7fe fce6 	bl	8001fc8 <HAL_GetTick>
 80035fc:	1b80      	subs	r0, r0, r6
 80035fe:	4285      	cmp	r5, r0
 8003600:	d9d1      	bls.n	80035a6 <HAL_SPI_Transmit+0x1ba>
 8003602:	e7ef      	b.n	80035e4 <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003604:	2f01      	cmp	r7, #1
 8003606:	d191      	bne.n	800352c <HAL_SPI_Transmit+0x140>
 8003608:	e787      	b.n	800351a <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003610:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003612:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003614:	3b01      	subs	r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800361a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800361c:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 800361e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003620:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8003622:	2b00      	cmp	r3, #0
 8003624:	f43f af4a 	beq.w	80034bc <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	0792      	lsls	r2, r2, #30
 800362e:	d4ec      	bmi.n	800360a <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003630:	f7fe fcca 	bl	8001fc8 <HAL_GetTick>
 8003634:	e7b7      	b.n	80035a6 <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003636:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003638:	f831 2b02 	ldrh.w	r2, [r1], #2
 800363c:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800363e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003642:	3a01      	subs	r2, #1
 8003644:	b292      	uxth	r2, r2
 8003646:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003648:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800364a:	b292      	uxth	r2, r2
 800364c:	2a00      	cmp	r2, #0
 800364e:	d088      	beq.n	8003562 <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003650:	6882      	ldr	r2, [r0, #8]
 8003652:	0797      	lsls	r7, r2, #30
 8003654:	d5ec      	bpl.n	8003630 <HAL_SPI_Transmit+0x244>
 8003656:	e7ee      	b.n	8003636 <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003658:	f7fe fcb6 	bl	8001fc8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800365c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	f43f af7d 	beq.w	8003560 <HAL_SPI_Transmit+0x174>
 8003666:	6820      	ldr	r0, [r4, #0]
 8003668:	e769      	b.n	800353e <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800366a:	4633      	mov	r3, r6
 800366c:	462a      	mov	r2, r5
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff fdf9 	bl	8003268 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003676:	2800      	cmp	r0, #0
 8003678:	f43f af3a 	beq.w	80034f0 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800367c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003680:	4313      	orrs	r3, r2
 8003682:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003684:	6562      	str	r2, [r4, #84]	; 0x54
 8003686:	e733      	b.n	80034f0 <HAL_SPI_Transmit+0x104>
 8003688:	20000098 	.word	0x20000098
 800368c:	165e9f81 	.word	0x165e9f81

08003690 <HAL_SPI_TransmitReceive>:
{
 8003690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003694:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003696:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 800369a:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800369c:	2801      	cmp	r0, #1
{
 800369e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80036a0:	f000 8083 	beq.w	80037aa <HAL_SPI_TransmitReceive+0x11a>
 80036a4:	461f      	mov	r7, r3
 80036a6:	2301      	movs	r3, #1
 80036a8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80036ac:	4689      	mov	r9, r1
 80036ae:	4690      	mov	r8, r2
 80036b0:	f7fe fc8a 	bl	8001fc8 <HAL_GetTick>
 80036b4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80036b6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80036ba:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036bc:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80036be:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036c0:	d011      	beq.n	80036e6 <HAL_SPI_TransmitReceive+0x56>
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036c6:	d009      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 80036c8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80036ca:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80036cc:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80036ce:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036d2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80036d6:	b003      	add	sp, #12
 80036d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036dc:	68a2      	ldr	r2, [r4, #8]
 80036de:	2a00      	cmp	r2, #0
 80036e0:	d1f2      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x38>
 80036e2:	2904      	cmp	r1, #4
 80036e4:	d1f0      	bne.n	80036c8 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036e6:	f1b9 0f00 	cmp.w	r9, #0
 80036ea:	d062      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x122>
 80036ec:	f1b8 0f00 	cmp.w	r8, #0
 80036f0:	d05f      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x122>
 80036f2:	2f00      	cmp	r7, #0
 80036f4:	d05d      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f6:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036fa:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036fe:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003700:	bf1c      	itt	ne
 8003702:	2205      	movne	r2, #5
 8003704:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003708:	2200      	movs	r2, #0
 800370a:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800370c:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003710:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8003712:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003714:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003716:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8003718:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800371c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003720:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003722:	d403      	bmi.n	800372c <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8003724:	6811      	ldr	r1, [r2, #0]
 8003726:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800372a:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800372c:	68e1      	ldr	r1, [r4, #12]
 800372e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003732:	d04e      	beq.n	80037d2 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03e      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x126>
 8003738:	2f01      	cmp	r7, #1
 800373a:	d03c      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 800373c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800373e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	b91b      	cbnz	r3, 800374c <HAL_SPI_TransmitReceive+0xbc>
 8003744:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d07f      	beq.n	800384c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	6893      	ldr	r3, [r2, #8]
 8003750:	0799      	lsls	r1, r3, #30
 8003752:	d50f      	bpl.n	8003774 <HAL_SPI_TransmitReceive+0xe4>
 8003754:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003756:	b29b      	uxth	r3, r3
 8003758:	b163      	cbz	r3, 8003774 <HAL_SPI_TransmitReceive+0xe4>
 800375a:	b15f      	cbz	r7, 8003774 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800375c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8003762:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8003764:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003766:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8003768:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800376a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800376c:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800376e:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8003770:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003772:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003774:	6893      	ldr	r3, [r2, #8]
 8003776:	f013 0301 	ands.w	r3, r3, #1
 800377a:	d00d      	beq.n	8003798 <HAL_SPI_TransmitReceive+0x108>
 800377c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800377e:	b289      	uxth	r1, r1
 8003780:	b151      	cbz	r1, 8003798 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 8003782:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003784:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003786:	68d2      	ldr	r2, [r2, #12]
 8003788:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800378a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800378c:	3301      	adds	r3, #1
 800378e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003790:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003792:	3b01      	subs	r3, #1
 8003794:	b29b      	uxth	r3, r3
 8003796:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003798:	f7fe fc16 	bl	8001fc8 <HAL_GetTick>
 800379c:	1b80      	subs	r0, r0, r6
 800379e:	42a8      	cmp	r0, r5
 80037a0:	d314      	bcc.n	80037cc <HAL_SPI_TransmitReceive+0x13c>
 80037a2:	1c6a      	adds	r2, r5, #1
 80037a4:	d0cb      	beq.n	800373e <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 80037a6:	2003      	movs	r0, #3
 80037a8:	e78f      	b.n	80036ca <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 80037aa:	2002      	movs	r0, #2
}
 80037ac:	b003      	add	sp, #12
 80037ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80037b2:	2001      	movs	r0, #1
 80037b4:	e789      	b.n	80036ca <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b6:	f899 3000 	ldrb.w	r3, [r9]
 80037ba:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80037bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037be:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80037c0:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037c2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80037c4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037c6:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80037c8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80037ca:	e7b7      	b.n	800373c <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80037cc:	2d00      	cmp	r5, #0
 80037ce:	d1b6      	bne.n	800373e <HAL_SPI_TransmitReceive+0xae>
 80037d0:	e7e9      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d16c      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d6:	4649      	mov	r1, r9
 80037d8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80037dc:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80037de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e0:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80037e8:	1c6a      	adds	r2, r5, #1
{
 80037ea:	f04f 0701 	mov.w	r7, #1
 80037ee:	d025      	beq.n	800383c <HAL_SPI_TransmitReceive+0x1ac>
 80037f0:	e061      	b.n	80038b6 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	6893      	ldr	r3, [r2, #8]
 80037f6:	079b      	lsls	r3, r3, #30
 80037f8:	d50d      	bpl.n	8003816 <HAL_SPI_TransmitReceive+0x186>
 80037fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b153      	cbz	r3, 8003816 <HAL_SPI_TransmitReceive+0x186>
 8003800:	b14f      	cbz	r7, 8003816 <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003802:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003804:	f831 3b02 	ldrh.w	r3, [r1], #2
 8003808:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800380a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800380c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800380e:	3b01      	subs	r3, #1
 8003810:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8003812:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8003814:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003816:	6893      	ldr	r3, [r2, #8]
 8003818:	f013 0301 	ands.w	r3, r3, #1
 800381c:	d00c      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x1a8>
 800381e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003820:	b289      	uxth	r1, r1
 8003822:	b149      	cbz	r1, 8003838 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003824:	68d1      	ldr	r1, [r2, #12]
 8003826:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003828:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800382c:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800382e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003830:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003832:	3b01      	subs	r3, #1
 8003834:	b29b      	uxth	r3, r3
 8003836:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003838:	f7fe fbc6 	bl	8001fc8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800383c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1d6      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
 8003844:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1d2      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800384c:	4b33      	ldr	r3, [pc, #204]	; (800391c <HAL_SPI_TransmitReceive+0x28c>)
 800384e:	4a34      	ldr	r2, [pc, #208]	; (8003920 <HAL_SPI_TransmitReceive+0x290>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	0d5b      	lsrs	r3, r3, #21
 8003858:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800385c:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003860:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003862:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003864:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003868:	d114      	bne.n	8003894 <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800386a:	4633      	mov	r3, r6
 800386c:	462a      	mov	r2, r5
 800386e:	2180      	movs	r1, #128	; 0x80
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff fcf9 	bl	8003268 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003876:	b180      	cbz	r0, 800389a <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003878:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800387a:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387c:	4313      	orrs	r3, r2
 800387e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003880:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003882:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8003884:	e721      	b.n	80036ca <HAL_SPI_TransmitReceive+0x3a>
      count--;
 8003886:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003888:	6822      	ldr	r2, [r4, #0]
      count--;
 800388a:	3b01      	subs	r3, #1
 800388c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800388e:	6893      	ldr	r3, [r2, #8]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	d502      	bpl.n	800389a <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 8003894:	9b01      	ldr	r3, [sp, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f5      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389a:	68a0      	ldr	r0, [r4, #8]
 800389c:	2800      	cmp	r0, #0
 800389e:	d13a      	bne.n	8003916 <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	9000      	str	r0, [sp, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	9200      	str	r2, [sp, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	9b00      	ldr	r3, [sp, #0]
 80038ae:	e70c      	b.n	80036ca <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b0:	2f01      	cmp	r7, #1
 80038b2:	d199      	bne.n	80037e8 <HAL_SPI_TransmitReceive+0x158>
 80038b4:	e78f      	b.n	80037d6 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	b91b      	cbnz	r3, 80038c4 <HAL_SPI_TransmitReceive+0x234>
 80038bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d0c3      	beq.n	800384c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038c4:	6822      	ldr	r2, [r4, #0]
 80038c6:	6893      	ldr	r3, [r2, #8]
 80038c8:	0798      	lsls	r0, r3, #30
 80038ca:	d50d      	bpl.n	80038e8 <HAL_SPI_TransmitReceive+0x258>
 80038cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b153      	cbz	r3, 80038e8 <HAL_SPI_TransmitReceive+0x258>
 80038d2:	b14f      	cbz	r7, 80038e8 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038d6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80038da:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038dc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80038de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80038e4:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80038e6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e8:	6893      	ldr	r3, [r2, #8]
 80038ea:	f013 0301 	ands.w	r3, r3, #1
 80038ee:	d00c      	beq.n	800390a <HAL_SPI_TransmitReceive+0x27a>
 80038f0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80038f2:	b289      	uxth	r1, r1
 80038f4:	b149      	cbz	r1, 800390a <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038f6:	68d1      	ldr	r1, [r2, #12]
 80038f8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80038fa:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80038fe:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 8003900:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003902:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003904:	3b01      	subs	r3, #1
 8003906:	b29b      	uxth	r3, r3
 8003908:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800390a:	f7fe fb5d 	bl	8001fc8 <HAL_GetTick>
 800390e:	1b80      	subs	r0, r0, r6
 8003910:	42a8      	cmp	r0, r5
 8003912:	d3d0      	bcc.n	80038b6 <HAL_SPI_TransmitReceive+0x226>
 8003914:	e747      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003916:	2000      	movs	r0, #0
 8003918:	e6d7      	b.n	80036ca <HAL_SPI_TransmitReceive+0x3a>
 800391a:	bf00      	nop
 800391c:	20000098 	.word	0x20000098
 8003920:	165e9f81 	.word	0x165e9f81

08003924 <HAL_SPI_Receive>:
{
 8003924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003928:	6846      	ldr	r6, [r0, #4]
 800392a:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 800392e:	b082      	sub	sp, #8
 8003930:	4604      	mov	r4, r0
 8003932:	4690      	mov	r8, r2
 8003934:	461d      	mov	r5, r3
 8003936:	460f      	mov	r7, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003938:	d073      	beq.n	8003a22 <HAL_SPI_Receive+0xfe>
  __HAL_LOCK(hspi);
 800393a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800393e:	2b01      	cmp	r3, #1
 8003940:	d07b      	beq.n	8003a3a <HAL_SPI_Receive+0x116>
 8003942:	2301      	movs	r3, #1
 8003944:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003948:	f7fe fb3e 	bl	8001fc8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800394c:	f894 c051 	ldrb.w	ip, [r4, #81]	; 0x51
 8003950:	f1bc 0f01 	cmp.w	ip, #1
  tickstart = HAL_GetTick();
 8003954:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003956:	fa5f f08c 	uxtb.w	r0, ip
 800395a:	d009      	beq.n	8003970 <HAL_SPI_Receive+0x4c>
    errorcode = HAL_BUSY;
 800395c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800395e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003960:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003962:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003966:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800396a:	b002      	add	sp, #8
 800396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003970:	2f00      	cmp	r7, #0
 8003972:	d0f4      	beq.n	800395e <HAL_SPI_Receive+0x3a>
 8003974:	f1b8 0f00 	cmp.w	r8, #0
 8003978:	d0f1      	beq.n	800395e <HAL_SPI_Receive+0x3a>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397a:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800397c:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8003982:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 8003984:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003988:	f04f 0300 	mov.w	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800398c:	f04f 0104 	mov.w	r1, #4
 8003990:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 8003994:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003998:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800399a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800399c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxXferCount = Size;
 800399e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80039a2:	86e3      	strh	r3, [r4, #54]	; 0x36
    __HAL_SPI_DISABLE(hspi);
 80039a4:	4613      	mov	r3, r2
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039a6:	d107      	bne.n	80039b8 <HAL_SPI_Receive+0x94>
    __HAL_SPI_DISABLE(hspi);
 80039a8:	6811      	ldr	r1, [r2, #0]
 80039aa:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 80039ae:	6011      	str	r1, [r2, #0]
    SPI_1LINE_RX(hspi);
 80039b0:	6811      	ldr	r1, [r2, #0]
 80039b2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80039b6:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039b8:	6811      	ldr	r1, [r2, #0]
 80039ba:	064f      	lsls	r7, r1, #25
 80039bc:	d403      	bmi.n	80039c6 <HAL_SPI_Receive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 80039be:	6811      	ldr	r1, [r2, #0]
 80039c0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80039c4:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80039c6:	68e1      	ldr	r1, [r4, #12]
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d05a      	beq.n	8003a82 <HAL_SPI_Receive+0x15e>
    while (hspi->RxXferCount > 0U)
 80039cc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80039ce:	b289      	uxth	r1, r1
 80039d0:	b1a1      	cbz	r1, 80039fc <HAL_SPI_Receive+0xd8>
 80039d2:	2d00      	cmp	r5, #0
 80039d4:	f000 80b3 	beq.w	8003b3e <HAL_SPI_Receive+0x21a>
 80039d8:	1c68      	adds	r0, r5, #1
 80039da:	d140      	bne.n	8003a5e <HAL_SPI_Receive+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039dc:	6893      	ldr	r3, [r2, #8]
 80039de:	07d9      	lsls	r1, r3, #31
 80039e0:	d547      	bpl.n	8003a72 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039e4:	68d1      	ldr	r1, [r2, #12]
 80039e6:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->RxXferCount--;
 80039ea:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80039ee:	3901      	subs	r1, #1
 80039f0:	b289      	uxth	r1, r1
 80039f2:	87e1      	strh	r1, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80039f4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ef      	bne.n	80039dc <HAL_SPI_Receive+0xb8>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fc:	6863      	ldr	r3, [r4, #4]
 80039fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a02:	f000 80a0 	beq.w	8003b46 <HAL_SPI_Receive+0x222>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003a06:	4633      	mov	r3, r6
 8003a08:	462a      	mov	r2, r5
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	f7ff fc2b 	bl	8003268 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003a12:	2800      	cmp	r0, #0
 8003a14:	f040 80a7 	bne.w	8003b66 <HAL_SPI_Receive+0x242>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a18:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003a1a:	3800      	subs	r0, #0
 8003a1c:	bf18      	it	ne
 8003a1e:	2001      	movne	r0, #1
error :
 8003a20:	e79d      	b.n	800395e <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a22:	6883      	ldr	r3, [r0, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d188      	bne.n	800393a <HAL_SPI_Receive+0x16>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a28:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a2a:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a2c:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a2e:	f880 5051 	strb.w	r5, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a32:	460a      	mov	r2, r1
 8003a34:	f7ff fe2c 	bl	8003690 <HAL_SPI_TransmitReceive>
 8003a38:	e797      	b.n	800396a <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 8003a3a:	2002      	movs	r0, #2
}
 8003a3c:	b002      	add	sp, #8
 8003a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8003a4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a4c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003a54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0cf      	beq.n	80039fc <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	07d2      	lsls	r2, r2, #31
 8003a62:	d4ee      	bmi.n	8003a42 <HAL_SPI_Receive+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a64:	f7fe fab0 	bl	8001fc8 <HAL_GetTick>
 8003a68:	1b80      	subs	r0, r0, r6
 8003a6a:	4285      	cmp	r5, r0
 8003a6c:	d8f2      	bhi.n	8003a54 <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 8003a6e:	2003      	movs	r0, #3
 8003a70:	e775      	b.n	800395e <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a72:	f7fe faa9 	bl	8001fc8 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8003a76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0be      	beq.n	80039fc <HAL_SPI_Receive+0xd8>
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	e7ac      	b.n	80039dc <HAL_SPI_Receive+0xb8>
    while (hspi->RxXferCount > 0U)
 8003a82:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003a84:	b292      	uxth	r2, r2
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	d0b8      	beq.n	80039fc <HAL_SPI_Receive+0xd8>
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	d043      	beq.n	8003b16 <HAL_SPI_Receive+0x1f2>
 8003a8e:	1c6f      	adds	r7, r5, #1
 8003a90:	d00f      	beq.n	8003ab2 <HAL_SPI_Receive+0x18e>
 8003a92:	e027      	b.n	8003ae4 <HAL_SPI_Receive+0x1c0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003a96:	7b1b      	ldrb	r3, [r3, #12]
 8003a98:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8003a9a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003a9e:	3901      	subs	r1, #1
 8003aa0:	b289      	uxth	r1, r1
 8003aa2:	87e1      	strh	r1, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003aa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003aa6:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8003aa8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003aaa:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0a5      	beq.n	80039fc <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	07d0      	lsls	r0, r2, #31
 8003ab6:	d4ed      	bmi.n	8003a94 <HAL_SPI_Receive+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab8:	f7fe fa86 	bl	8001fc8 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8003abc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f5      	bne.n	8003ab0 <HAL_SPI_Receive+0x18c>
 8003ac4:	e79a      	b.n	80039fc <HAL_SPI_Receive+0xd8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ac6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ac8:	7b1b      	ldrb	r3, [r3, #12]
 8003aca:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8003acc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ace:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003ad0:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ad2:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ad8:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8003ada:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d08c      	beq.n	80039fc <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	07d1      	lsls	r1, r2, #31
 8003ae8:	d4ed      	bmi.n	8003ac6 <HAL_SPI_Receive+0x1a2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aea:	f7fe fa6d 	bl	8001fc8 <HAL_GetTick>
 8003aee:	1b80      	subs	r0, r0, r6
 8003af0:	4285      	cmp	r5, r0
 8003af2:	d9bc      	bls.n	8003a6e <HAL_SPI_Receive+0x14a>
 8003af4:	e7f1      	b.n	8003ada <HAL_SPI_Receive+0x1b6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003af6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003af8:	7b1b      	ldrb	r3, [r3, #12]
 8003afa:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8003afc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003afe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003b06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b08:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8003b0a:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b0c:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f43f af74 	beq.w	80039fc <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	07d2      	lsls	r2, r2, #31
 8003b1a:	d4ec      	bmi.n	8003af6 <HAL_SPI_Receive+0x1d2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1c:	f7fe fa54 	bl	8001fc8 <HAL_GetTick>
 8003b20:	e7a5      	b.n	8003a6e <HAL_SPI_Receive+0x14a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b24:	68d3      	ldr	r3, [r2, #12]
 8003b26:	f821 3b02 	strh.w	r3, [r1], #2
        hspi->RxXferCount--;
 8003b2a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b2c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003b34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f43f af5f 	beq.w	80039fc <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b3e:	6893      	ldr	r3, [r2, #8]
 8003b40:	07db      	lsls	r3, r3, #31
 8003b42:	d5eb      	bpl.n	8003b1c <HAL_SPI_Receive+0x1f8>
 8003b44:	e7ed      	b.n	8003b22 <HAL_SPI_Receive+0x1fe>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b46:	68a3      	ldr	r3, [r4, #8]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	d021      	beq.n	8003b92 <HAL_SPI_Receive+0x26e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b52:	d00f      	beq.n	8003b74 <HAL_SPI_Receive+0x250>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b54:	4633      	mov	r3, r6
 8003b56:	462a      	mov	r2, r5
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f7ff fb84 	bl	8003268 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	f43f af59 	beq.w	8003a18 <HAL_SPI_Receive+0xf4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b66:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b68:	f043 0320 	orr.w	r3, r3, #32
 8003b6c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	6563      	str	r3, [r4, #84]	; 0x54
 8003b72:	e751      	b.n	8003a18 <HAL_SPI_Receive+0xf4>
    __HAL_SPI_DISABLE(hspi);
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	6801      	ldr	r1, [r0, #0]
 8003b78:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003b7c:	6001      	str	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7e:	4633      	mov	r3, r6
 8003b80:	462a      	mov	r2, r5
 8003b82:	2101      	movs	r1, #1
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7ff fb6f 	bl	8003268 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f43f af44 	beq.w	8003a18 <HAL_SPI_Receive+0xf4>
 8003b90:	e7e9      	b.n	8003b66 <HAL_SPI_Receive+0x242>
    __HAL_SPI_DISABLE(hspi);
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	6813      	ldr	r3, [r2, #0]
 8003b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b9a:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b9c:	e7da      	b.n	8003b54 <HAL_SPI_Receive+0x230>
 8003b9e:	bf00      	nop

08003ba0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d076      	beq.n	8003c92 <HAL_TIM_Base_Init+0xf2>
{
 8003ba4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003baa:	4604      	mov	r4, r0
 8003bac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d055      	beq.n	8003c60 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb4:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb6:	4938      	ldr	r1, [pc, #224]	; (8003c98 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bbe:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003bc0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bc2:	d052      	beq.n	8003c6a <HAL_TIM_Base_Init+0xca>
 8003bc4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003bc8:	d021      	beq.n	8003c0e <HAL_TIM_Base_Init+0x6e>
 8003bca:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003bce:	428a      	cmp	r2, r1
 8003bd0:	d01d      	beq.n	8003c0e <HAL_TIM_Base_Init+0x6e>
 8003bd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003bd6:	428a      	cmp	r2, r1
 8003bd8:	d019      	beq.n	8003c0e <HAL_TIM_Base_Init+0x6e>
 8003bda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003bde:	428a      	cmp	r2, r1
 8003be0:	d015      	beq.n	8003c0e <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003be2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8003be6:	428a      	cmp	r2, r1
 8003be8:	d015      	beq.n	8003c16 <HAL_TIM_Base_Init+0x76>
 8003bea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003bee:	428a      	cmp	r2, r1
 8003bf0:	d011      	beq.n	8003c16 <HAL_TIM_Base_Init+0x76>
 8003bf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003bf6:	428a      	cmp	r2, r1
 8003bf8:	d00d      	beq.n	8003c16 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bfa:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bfc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c02:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003c04:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c06:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c08:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c0a:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c0c:	e010      	b.n	8003c30 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003c0e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c14:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c16:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c18:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c1e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c24:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c26:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003c28:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003c2a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c2c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c2e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c30:	2301      	movs	r3, #1
 8003c32:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c34:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003c3c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003c40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003c44:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003c5c:	2000      	movs	r0, #0
}
 8003c5e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003c60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003c64:	f7fe f8a4 	bl	8001db0 <HAL_TIM_Base_MspInit>
 8003c68:	e7a4      	b.n	8003bb4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003c6a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c72:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c78:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c7a:	69a1      	ldr	r1, [r4, #24]
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c80:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003c82:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c84:	68e3      	ldr	r3, [r4, #12]
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	6963      	ldr	r3, [r4, #20]
 8003c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c90:	e7ce      	b.n	8003c30 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8003c92:	2001      	movs	r0, #1
}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010000 	.word	0x40010000

08003c9c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c9c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d127      	bne.n	8003cf4 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca6:	4915      	ldr	r1, [pc, #84]	; (8003cfc <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cae:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb8:	d011      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x42>
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbe:	d00e      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x42>
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	; (8003d00 <HAL_TIM_Base_Start_IT+0x64>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00b      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x42>
 8003cc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x42>
 8003cce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_Base_Start_IT+0x42>
 8003cd6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d104      	bne.n	8003ce8 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce4:	2a06      	cmp	r2, #6
 8003ce6:	d007      	beq.n	8003cf8 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8003cee:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	4770      	bx	lr
    return HAL_ERROR;
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	4770      	bx	lr
  return HAL_OK;
 8003cf8:	2000      	movs	r0, #0
}
 8003cfa:	4770      	bx	lr
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40000400 	.word	0x40000400

08003d04 <HAL_TIM_OC_DelayElapsedCallback>:
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop

08003d08 <HAL_TIM_IC_CaptureCallback>:
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop

08003d0c <HAL_TIM_PWM_PulseFinishedCallback>:
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop

08003d10 <HAL_TIM_TriggerCallback>:
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop

08003d14 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d14:	6803      	ldr	r3, [r0, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	0791      	lsls	r1, r2, #30
{
 8003d1a:	b510      	push	{r4, lr}
 8003d1c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d1e:	d502      	bpl.n	8003d26 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	0792      	lsls	r2, r2, #30
 8003d24:	d45f      	bmi.n	8003de6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	0750      	lsls	r0, r2, #29
 8003d2a:	d502      	bpl.n	8003d32 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	0751      	lsls	r1, r2, #29
 8003d30:	d446      	bmi.n	8003dc0 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	0712      	lsls	r2, r2, #28
 8003d36:	d502      	bpl.n	8003d3e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	0710      	lsls	r0, r2, #28
 8003d3c:	d42e      	bmi.n	8003d9c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	06d2      	lsls	r2, r2, #27
 8003d42:	d502      	bpl.n	8003d4a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	06d0      	lsls	r0, r2, #27
 8003d48:	d418      	bmi.n	8003d7c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	07d1      	lsls	r1, r2, #31
 8003d4e:	d502      	bpl.n	8003d56 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	07d2      	lsls	r2, r2, #31
 8003d54:	d45d      	bmi.n	8003e12 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	0610      	lsls	r0, r2, #24
 8003d5a:	d502      	bpl.n	8003d62 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	0611      	lsls	r1, r2, #24
 8003d60:	d45f      	bmi.n	8003e22 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	0652      	lsls	r2, r2, #25
 8003d66:	d502      	bpl.n	8003d6e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	0650      	lsls	r0, r2, #25
 8003d6c:	d461      	bmi.n	8003e32 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	0691      	lsls	r1, r2, #26
 8003d72:	d502      	bpl.n	8003d7a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	0692      	lsls	r2, r2, #26
 8003d78:	d443      	bmi.n	8003e02 <HAL_TIM_IRQHandler+0xee>
}
 8003d7a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d7c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d80:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d82:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d84:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d8e:	d064      	beq.n	8003e5a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d90:	f7ff ffba 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d94:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d96:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d98:	7722      	strb	r2, [r4, #28]
 8003d9a:	e7d6      	b.n	8003d4a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d9c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da0:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003da4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dac:	d152      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	f7ff ffa9 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db2:	4620      	mov	r0, r4
 8003db4:	f7ff ffaa 	bl	8003d0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dba:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dbc:	7722      	strb	r2, [r4, #28]
 8003dbe:	e7be      	b.n	8003d3e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc0:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc4:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dc6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dd2:	d13c      	bne.n	8003e4e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd4:	f7ff ff96 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff ff97 	bl	8003d0c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de2:	7722      	strb	r2, [r4, #28]
 8003de4:	e7a5      	b.n	8003d32 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003de6:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dea:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dec:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dee:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	079b      	lsls	r3, r3, #30
 8003df4:	d025      	beq.n	8003e42 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	f7ff ff87 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfa:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dfc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	7722      	strb	r2, [r4, #28]
 8003e00:	e791      	b.n	8003d26 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e02:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003e06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e08:	611a      	str	r2, [r3, #16]
}
 8003e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003e0e:	f000 b82b 	b.w	8003e68 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e12:	f06f 0201 	mvn.w	r2, #1
 8003e16:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f7fc fd5d 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	e799      	b.n	8003d56 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e26:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 f81f 	bl	8003e6c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	e797      	b.n	8003d62 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e36:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff ff69 	bl	8003d10 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	e795      	b.n	8003d6e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e42:	f7ff ff5f 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7ff ff60 	bl	8003d0c <HAL_TIM_PWM_PulseFinishedCallback>
 8003e4c:	e7d5      	b.n	8003dfa <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4e:	f7ff ff5b 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003e52:	e7c4      	b.n	8003dde <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e54:	f7ff ff58 	bl	8003d08 <HAL_TIM_IC_CaptureCallback>
 8003e58:	e7ae      	b.n	8003db8 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5a:	f7ff ff53 	bl	8003d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f7ff ff54 	bl	8003d0c <HAL_TIM_PWM_PulseFinishedCallback>
 8003e64:	e796      	b.n	8003d94 <HAL_TIM_IRQHandler+0x80>
 8003e66:	bf00      	nop

08003e68 <HAL_TIMEx_CommutCallback>:
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop

08003e6c <HAL_TIMEx_BreakCallback>:
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop

08003e70 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e70:	2800      	cmp	r0, #0
 8003e72:	f000 808f 	beq.w	8003f94 <HAL_UART_Init+0x124>
{
 8003e76:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e78:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e7c:	4604      	mov	r4, r0
 8003e7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8081 	beq.w	8003f8a <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e88:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8a:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003e8c:	2224      	movs	r2, #36	; 0x24
 8003e8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003e92:	68da      	ldr	r2, [r3, #12]
 8003e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e98:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9a:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003ea2:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ea4:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea6:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ea8:	4302      	orrs	r2, r0
 8003eaa:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003eac:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eae:	4302      	orrs	r2, r0
 8003eb0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003eb2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003eb6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eba:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ec4:	4934      	ldr	r1, [pc, #208]	; (8003f98 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ec6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eca:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ecc:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ece:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed0:	d035      	beq.n	8003f3e <HAL_UART_Init+0xce>
 8003ed2:	4a32      	ldr	r2, [pc, #200]	; (8003f9c <HAL_UART_Init+0x12c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d032      	beq.n	8003f3e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ed8:	f7ff f984 	bl	80031e4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003edc:	69e3      	ldr	r3, [r4, #28]
 8003ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee2:	d032      	beq.n	8003f4a <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ee4:	6863      	ldr	r3, [r4, #4]
 8003ee6:	2119      	movs	r1, #25
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	fba0 0101 	umull	r0, r1, r0, r1
 8003eee:	0f9b      	lsrs	r3, r3, #30
 8003ef0:	f7fc f9c6 	bl	8000280 <__aeabi_uldivmod>
 8003ef4:	492a      	ldr	r1, [pc, #168]	; (8003fa0 <HAL_UART_Init+0x130>)
 8003ef6:	fba1 3200 	umull	r3, r2, r1, r0
 8003efa:	0952      	lsrs	r2, r2, #5
 8003efc:	2564      	movs	r5, #100	; 0x64
 8003efe:	fb05 0012 	mls	r0, r5, r2, r0
 8003f02:	0100      	lsls	r0, r0, #4
 8003f04:	3032      	adds	r0, #50	; 0x32
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	fba1 1000 	umull	r1, r0, r1, r0
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8003f12:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f22:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003f24:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f26:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003f2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f30:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f32:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f36:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8003f3a:	4628      	mov	r0, r5
}
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f3e:	f7ff f961 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f42:	69e3      	ldr	r3, [r4, #28]
 8003f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f48:	d1cc      	bne.n	8003ee4 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f4a:	6862      	ldr	r2, [r4, #4]
 8003f4c:	2119      	movs	r1, #25
 8003f4e:	1892      	adds	r2, r2, r2
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	415b      	adcs	r3, r3
 8003f56:	fba0 0101 	umull	r0, r1, r0, r1
 8003f5a:	f7fc f991 	bl	8000280 <__aeabi_uldivmod>
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <HAL_UART_Init+0x130>)
 8003f60:	fba3 2100 	umull	r2, r1, r3, r0
 8003f64:	094d      	lsrs	r5, r1, #5
 8003f66:	2264      	movs	r2, #100	; 0x64
 8003f68:	fb02 0215 	mls	r2, r2, r5, r0
 8003f6c:	00d2      	lsls	r2, r2, #3
 8003f6e:	3232      	adds	r2, #50	; 0x32
 8003f70:	fba3 3202 	umull	r3, r2, r3, r2
 8003f74:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8003f78:	0912      	lsrs	r2, r2, #4
 8003f7a:	6823      	ldr	r3, [r4, #0]
 8003f7c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8003f80:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8003f84:	440a      	add	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	e7c4      	b.n	8003f14 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8003f8a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003f8e:	f7fd fe6f 	bl	8001c70 <HAL_UART_MspInit>
 8003f92:	e779      	b.n	8003e88 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8003f94:	2001      	movs	r0, #1
}
 8003f96:	4770      	bx	lr
 8003f98:	40011000 	.word	0x40011000
 8003f9c:	40011400 	.word	0x40011400
 8003fa0:	51eb851f 	.word	0x51eb851f

08003fa4 <HAL_UART_Transmit>:
{
 8003fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa8:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003faa:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8003fae:	2820      	cmp	r0, #32
 8003fb0:	d177      	bne.n	80040a2 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8003fb2:	4689      	mov	r9, r1
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	d040      	beq.n	800403a <HAL_UART_Transmit+0x96>
 8003fb8:	4614      	mov	r4, r2
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	d03d      	beq.n	800403a <HAL_UART_Transmit+0x96>
 8003fbe:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8003fc0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d06c      	beq.n	80040a2 <HAL_UART_Transmit+0xfe>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fce:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003fdc:	f7fd fff4 	bl	8001fc8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe0:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8003fe2:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8003fe8:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8003fea:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fec:	d05c      	beq.n	80040a8 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8003fee:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8003ff0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8003ff2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8003ff4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d07e      	beq.n	80040fa <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffc:	682c      	ldr	r4, [r5, #0]
 8003ffe:	1c72      	adds	r2, r6, #1
 8004000:	d11e      	bne.n	8004040 <HAL_UART_Transmit+0x9c>
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	0613      	lsls	r3, r2, #24
 8004006:	d5fc      	bpl.n	8004002 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8004008:	f1b9 0f00 	cmp.w	r9, #0
 800400c:	d044      	beq.n	8004098 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800400e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8004012:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8004014:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8004016:	3b01      	subs	r3, #1
 8004018:	b29b      	uxth	r3, r3
 800401a:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800401c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ec      	bne.n	8003ffe <HAL_UART_Transmit+0x5a>
 8004024:	1c71      	adds	r1, r6, #1
 8004026:	d145      	bne.n	80040b4 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	065a      	lsls	r2, r3, #25
 800402c:	d5fc      	bpl.n	8004028 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800402e:	2320      	movs	r3, #32
 8004030:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8004034:	2000      	movs	r0, #0
}
 8004036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800403a:	2001      	movs	r0, #1
}
 800403c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	0618      	lsls	r0, r3, #24
 8004044:	d4e0      	bmi.n	8004008 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004046:	b12e      	cbz	r6, 8004054 <HAL_UART_Transmit+0xb0>
 8004048:	f7fd ffbe 	bl	8001fc8 <HAL_GetTick>
 800404c:	1bc0      	subs	r0, r0, r7
 800404e:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004050:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004052:	d2d4      	bcs.n	8003ffe <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	f104 030c 	add.w	r3, r4, #12
 8004058:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800405c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004060:	f104 010c 	add.w	r1, r4, #12
 8004064:	e841 3200 	strex	r2, r3, [r1]
 8004068:	2a00      	cmp	r2, #0
 800406a:	d1f3      	bne.n	8004054 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	f104 0314 	add.w	r3, r4, #20
 8004070:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004078:	f104 0114 	add.w	r1, r4, #20
 800407c:	e841 3200 	strex	r2, r3, [r1]
 8004080:	2a00      	cmp	r2, #0
 8004082:	d1f3      	bne.n	800406c <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8004084:	2320      	movs	r3, #32
 8004086:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800408a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800408e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8004092:	2003      	movs	r0, #3
}
 8004094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004098:	f838 3b02 	ldrh.w	r3, [r8], #2
 800409c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a0:	e7b7      	b.n	8004012 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 80040a2:	2002      	movs	r0, #2
}
 80040a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	692b      	ldr	r3, [r5, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d19f      	bne.n	8003fee <HAL_UART_Transmit+0x4a>
 80040ae:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80040b0:	4699      	mov	r9, r3
 80040b2:	e79c      	b.n	8003fee <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	065b      	lsls	r3, r3, #25
 80040b8:	d4b9      	bmi.n	800402e <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040ba:	b12e      	cbz	r6, 80040c8 <HAL_UART_Transmit+0x124>
 80040bc:	f7fd ff84 	bl	8001fc8 <HAL_GetTick>
 80040c0:	1bc0      	subs	r0, r0, r7
 80040c2:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c4:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040c6:	d2ad      	bcs.n	8004024 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	f104 030c 	add.w	r3, r4, #12
 80040cc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d4:	f104 010c 	add.w	r1, r4, #12
 80040d8:	e841 3200 	strex	r2, r3, [r1]
 80040dc:	2a00      	cmp	r2, #0
 80040de:	d1f3      	bne.n	80040c8 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	f104 0314 	add.w	r3, r4, #20
 80040e4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	f104 0114 	add.w	r1, r4, #20
 80040f0:	e841 3200 	strex	r2, r3, [r1]
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	d1f3      	bne.n	80040e0 <HAL_UART_Transmit+0x13c>
 80040f8:	e7c4      	b.n	8004084 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fa:	682c      	ldr	r4, [r5, #0]
 80040fc:	e792      	b.n	8004024 <HAL_UART_Transmit+0x80>
 80040fe:	bf00      	nop

08004100 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 8004100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    GPIOB->ODR &= ~(1UL << 0);
 8004104:	4cb8      	ldr	r4, [pc, #736]	; (80043e8 <rc522_request+0x2e8>)
 8004106:	6963      	ldr	r3, [r4, #20]
{
 8004108:	b082      	sub	sp, #8
	    GPIOB->ODR &= ~(1UL << 0);
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004110:	f240 731a 	movw	r3, #1818	; 0x71a
{
 8004114:	4689      	mov	r9, r1
 8004116:	4605      	mov	r5, r0
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004118:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800411c:	2202      	movs	r2, #2
 800411e:	2364      	movs	r3, #100	; 0x64
 8004120:	a901      	add	r1, sp, #4
 8004122:	48b2      	ldr	r0, [pc, #712]	; (80043ec <rc522_request+0x2ec>)
 8004124:	f7ff f962 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004128:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800412a:	48b0      	ldr	r0, [pc, #704]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6163      	str	r3, [r4, #20]
  bool status=false;
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
  tagType[0] = reqMode;
 8004132:	f889 5000 	strb.w	r5, [r9]
	    GPIOB->ODR &= ~(1UL << 0);
 8004136:	6962      	ldr	r2, [r4, #20]
 8004138:	f022 0201 	bic.w	r2, r2, #1
 800413c:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800413e:	f24f 7204 	movw	r2, #63236	; 0xf704
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004142:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004144:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004148:	a901      	add	r1, sp, #4
 800414a:	2202      	movs	r2, #2
 800414c:	f7ff f94e 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004150:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004152:	48a6      	ldr	r0, [pc, #664]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800415a:	6963      	ldr	r3, [r4, #20]
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004162:	f04f 0888 	mov.w	r8, #136	; 0x88
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004166:	2364      	movs	r3, #100	; 0x64
 8004168:	2201      	movs	r2, #1
 800416a:	f10d 0103 	add.w	r1, sp, #3
	uint8_t dataRd=0;
 800416e:	2600      	movs	r6, #0
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004170:	f88d 8003 	strb.w	r8, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004174:	f7ff f93a 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004178:	2364      	movs	r3, #100	; 0x64
 800417a:	2201      	movs	r2, #1
 800417c:	a901      	add	r1, sp, #4
 800417e:	489b      	ldr	r0, [pc, #620]	; (80043ec <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 8004180:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004184:	f7ff fbce 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004188:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800418a:	4898      	ldr	r0, [pc, #608]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004192:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004194:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004198:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 800419c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80041a0:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80041a2:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80041a4:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80041a8:	2202      	movs	r2, #2
 80041aa:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80041ac:	2508      	movs	r5, #8
 80041ae:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80041b2:	f7ff f91b 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80041b6:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80041b8:	488c      	ldr	r0, [pc, #560]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80041c0:	6963      	ldr	r3, [r4, #20]
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80041c8:	2201      	movs	r2, #1
 80041ca:	2364      	movs	r3, #100	; 0x64
 80041cc:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80041d0:	2594      	movs	r5, #148	; 0x94
 80041d2:	f88d 5003 	strb.w	r5, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80041d6:	f7ff f909 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80041da:	2364      	movs	r3, #100	; 0x64
 80041dc:	2201      	movs	r2, #1
 80041de:	a901      	add	r1, sp, #4
 80041e0:	4882      	ldr	r0, [pc, #520]	; (80043ec <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 80041e2:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80041e6:	f7ff fb9d 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80041ea:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80041ec:	487f      	ldr	r0, [pc, #508]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80041f4:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 80041f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80041fa:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 80041fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004202:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004204:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004206:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800420a:	2202      	movs	r2, #2
 800420c:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800420e:	2514      	movs	r5, #20
 8004210:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004214:	f7ff f8ea 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004218:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800421a:	4874      	ldr	r0, [pc, #464]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004222:	6963      	ldr	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004224:	2502      	movs	r5, #2
	    GPIOB->ODR &= ~(1UL << 0);
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800422c:	462a      	mov	r2, r5
 800422e:	2364      	movs	r3, #100	; 0x64
 8004230:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004232:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004236:	f7ff f8d9 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800423a:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800423c:	486b      	ldr	r0, [pc, #428]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004244:	6963      	ldr	r3, [r4, #20]

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8004246:	f899 2000 	ldrb.w	r2, [r9]
	    GPIOB->ODR &= ~(1UL << 0);
 800424a:	f023 0301 	bic.w	r3, r3, #1
 800424e:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004250:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004252:	f88d 2005 	strb.w	r2, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004256:	2364      	movs	r3, #100	; 0x64
 8004258:	462a      	mov	r2, r5
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800425a:	2712      	movs	r7, #18
 800425c:	f88d 7004 	strb.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004260:	f7ff f8c4 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004264:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004266:	4861      	ldr	r0, [pc, #388]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800426e:	6963      	ldr	r3, [r4, #20]
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004276:	462a      	mov	r2, r5
 8004278:	2364      	movs	r3, #100	; 0x64
 800427a:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800427c:	f640 4702 	movw	r7, #3074	; 0xc02
 8004280:	f8ad 7004 	strh.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004284:	f7ff f8b2 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004288:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800428a:	4858      	ldr	r0, [pc, #352]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004292:	6963      	ldr	r3, [r4, #20]
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800429a:	2201      	movs	r2, #1
 800429c:	2364      	movs	r3, #100	; 0x64
 800429e:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80042a2:	279a      	movs	r7, #154	; 0x9a
 80042a4:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80042a8:	f7ff f8a0 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80042ac:	2364      	movs	r3, #100	; 0x64
 80042ae:	2201      	movs	r2, #1
 80042b0:	a901      	add	r1, sp, #4
 80042b2:	484e      	ldr	r0, [pc, #312]	; (80043ec <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 80042b4:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80042b8:	f7ff fb34 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80042bc:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042be:	484b      	ldr	r0, [pc, #300]	; (80043ec <rc522_request+0x2ec>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80042c0:	4f4a      	ldr	r7, [pc, #296]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80042c8:	6961      	ldr	r1, [r4, #20]
  return dataRd;
 80042ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80042ce:	f021 0101 	bic.w	r1, r1, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 80042d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80042d6:	6161      	str	r1, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042d8:	462a      	mov	r2, r5
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80042da:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042de:	a901      	add	r1, sp, #4
 80042e0:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80042e2:	251a      	movs	r5, #26
 80042e4:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042e8:	f7ff f880 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80042ec:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80042ee:	483f      	ldr	r0, [pc, #252]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80042f6:	6963      	ldr	r3, [r4, #20]
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80042fe:	2201      	movs	r2, #1
 8004300:	2364      	movs	r3, #100	; 0x64
 8004302:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004306:	f88d 8003 	strb.w	r8, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800430a:	f7ff f86f 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800430e:	2364      	movs	r3, #100	; 0x64
 8004310:	4836      	ldr	r0, [pc, #216]	; (80043ec <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 8004312:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004316:	2201      	movs	r2, #1
 8004318:	a901      	add	r1, sp, #4
 800431a:	f7ff fb03 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004326:	f89d 6004 	ldrb.w	r6, [sp, #4]
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
    i--;
 800432a:	2563      	movs	r5, #99	; 0x63
 800432c:	e018      	b.n	8004360 <rc522_request+0x260>
	    GPIOB->ODR &= ~(1UL << 0);
 800432e:	6966      	ldr	r6, [r4, #20]
 8004330:	f026 0601 	bic.w	r6, r6, #1
 8004334:	6166      	str	r6, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004336:	f88d 8003 	strb.w	r8, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800433a:	f7ff f857 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800433e:	2364      	movs	r3, #100	; 0x64
 8004340:	2201      	movs	r2, #1
 8004342:	a901      	add	r1, sp, #4
 8004344:	4638      	mov	r0, r7
	uint8_t dataRd=0;
 8004346:	f88d a004 	strb.w	sl, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800434a:	f7ff faeb 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800434e:	6963      	ldr	r3, [r4, #20]
    i--;
 8004350:	3d01      	subs	r5, #1
	    GPIOB->ODR |= (1UL << 0);
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6163      	str	r3, [r4, #20]
    i--;
 8004358:	b2ad      	uxth	r5, r5
  return dataRd;
 800435a:	f89d 6004 	ldrb.w	r6, [sp, #4]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800435e:	b15d      	cbz	r5, 8004378 <rc522_request+0x278>
 8004360:	f016 0f31 	tst.w	r6, #49	; 0x31
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004364:	f04f 0364 	mov.w	r3, #100	; 0x64
 8004368:	f04f 0201 	mov.w	r2, #1
 800436c:	f10d 0103 	add.w	r1, sp, #3
 8004370:	4638      	mov	r0, r7
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004372:	f006 0a31 	and.w	sl, r6, #49	; 0x31
 8004376:	d0da      	beq.n	800432e <rc522_request+0x22e>
	    GPIOB->ODR &= ~(1UL << 0);
 8004378:	4f1b      	ldr	r7, [pc, #108]	; (80043e8 <rc522_request+0x2e8>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800437a:	481c      	ldr	r0, [pc, #112]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR &= ~(1UL << 0);
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	f022 0201 	bic.w	r2, r2, #1
 8004382:	617a      	str	r2, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004384:	2364      	movs	r3, #100	; 0x64
 8004386:	2201      	movs	r2, #1
 8004388:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800438c:	249a      	movs	r4, #154	; 0x9a
 800438e:	f88d 4003 	strb.w	r4, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004392:	f7ff f82b 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004396:	2400      	movs	r4, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004398:	2364      	movs	r3, #100	; 0x64
 800439a:	2201      	movs	r2, #1
 800439c:	a901      	add	r1, sp, #4
 800439e:	4813      	ldr	r0, [pc, #76]	; (80043ec <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 80043a0:	f88d 4004 	strb.w	r4, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80043a4:	f7ff fabe 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80043a8:	697b      	ldr	r3, [r7, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80043aa:	4810      	ldr	r0, [pc, #64]	; (80043ec <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80043ac:	f043 0301 	orr.w	r3, r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80043b2:	697a      	ldr	r2, [r7, #20]
  return dataRd;
 80043b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80043b8:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 80043bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80043c0:	617a      	str	r2, [r7, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80043c2:	f88d 3005 	strb.w	r3, [sp, #5]
 80043c6:	231a      	movs	r3, #26
 80043c8:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80043cc:	2202      	movs	r2, #2
 80043ce:	2364      	movs	r3, #100	; 0x64
 80043d0:	a901      	add	r1, sp, #4
 80043d2:	f7ff f80b 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	617b      	str	r3, [r7, #20]

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0

  if (i != 0)  {
 80043de:	b93d      	cbnz	r5, 80043f0 <rc522_request+0x2f0>
    status = false;
 80043e0:	2000      	movs	r0, #0
}
 80043e2:	b002      	add	sp, #8
 80043e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043e8:	40020400 	.word	0x40020400
 80043ec:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 80043f0:	697b      	ldr	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80043f2:	484f      	ldr	r0, [pc, #316]	; (8004530 <rc522_request+0x430>)
	    GPIOB->ODR &= ~(1UL << 0);
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80043fa:	2201      	movs	r2, #1
 80043fc:	2364      	movs	r3, #100	; 0x64
 80043fe:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004402:	258c      	movs	r5, #140	; 0x8c
 8004404:	f88d 5003 	strb.w	r5, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004408:	f7fe fff0 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800440c:	2364      	movs	r3, #100	; 0x64
 800440e:	4848      	ldr	r0, [pc, #288]	; (8004530 <rc522_request+0x430>)
	uint8_t dataRd=0;
 8004410:	f88d 4004 	strb.w	r4, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004414:	2201      	movs	r2, #1
 8004416:	a901      	add	r1, sp, #4
 8004418:	f7ff fa84 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	617b      	str	r3, [r7, #20]
  return dataRd;
 8004424:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8004428:	f013 051b 	ands.w	r5, r3, #27
 800442c:	d1d8      	bne.n	80043e0 <rc522_request+0x2e0>
	    GPIOB->ODR &= ~(1UL << 0);
 800442e:	697b      	ldr	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004430:	483f      	ldr	r0, [pc, #252]	; (8004530 <rc522_request+0x430>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	617b      	str	r3, [r7, #20]
      status = true;
      if (n & irqEn & 0x01) {
 8004438:	43f4      	mvns	r4, r6
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800443a:	2364      	movs	r3, #100	; 0x64
 800443c:	2201      	movs	r2, #1
 800443e:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004442:	2694      	movs	r6, #148	; 0x94
 8004444:	f88d 6003 	strb.w	r6, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004448:	f7fe ffd0 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800444c:	2364      	movs	r3, #100	; 0x64
 800444e:	2201      	movs	r2, #1
 8004450:	a901      	add	r1, sp, #4
 8004452:	4837      	ldr	r0, [pc, #220]	; (8004530 <rc522_request+0x430>)
	uint8_t dataRd=0;
 8004454:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004458:	f7ff fa64 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800445c:	697b      	ldr	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800445e:	4834      	ldr	r0, [pc, #208]	; (8004530 <rc522_request+0x430>)
	    GPIOB->ODR |= (1UL << 0);
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	617b      	str	r3, [r7, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004466:	697b      	ldr	r3, [r7, #20]
  return dataRd;
 8004468:	f89d 8004 	ldrb.w	r8, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 800446c:	f023 0301 	bic.w	r3, r3, #1
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004470:	2698      	movs	r6, #152	; 0x98
	    GPIOB->ODR &= ~(1UL << 0);
 8004472:	617b      	str	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004474:	2201      	movs	r2, #1
 8004476:	2364      	movs	r3, #100	; 0x64
 8004478:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800447c:	f88d 6003 	strb.w	r6, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004480:	f7fe ffb4 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004484:	2364      	movs	r3, #100	; 0x64
 8004486:	482a      	ldr	r0, [pc, #168]	; (8004530 <rc522_request+0x430>)
	uint8_t dataRd=0;
 8004488:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800448c:	2201      	movs	r2, #1
 800448e:	a901      	add	r1, sp, #4
 8004490:	f7ff fa48 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004494:	697b      	ldr	r3, [r7, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004496:	4d27      	ldr	r5, [pc, #156]	; (8004534 <rc522_request+0x434>)
	    GPIOB->ODR |= (1UL << 0);
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	617b      	str	r3, [r7, #20]
  return dataRd;
 800449e:	f89d 3004 	ldrb.w	r3, [sp, #4]

      if (command == PCD_TRANSCEIVE) {
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
       // uint8_t l = n;
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
        if (lastBits) {
 80044a2:	f013 0307 	ands.w	r3, r3, #7
          *backLen = (n - 1) * 8 + lastBits;
 80044a6:	bf18      	it	ne
 80044a8:	f108 36ff 	addne.w	r6, r8, #4294967295
        if (n > MFRC522_MAX_LEN) {
          n = MFRC522_MAX_LEN;
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) 
 80044ac:	4647      	mov	r7, r8
          *backLen = (n - 1) * 8 + lastBits;
 80044ae:	bf16      	itet	ne
 80044b0:	eb03 03c6 	addne.w	r3, r3, r6, lsl #3
          *backLen = n * 8;
 80044b4:	ea4f 06c8 	moveq.w	r6, r8, lsl #3
          *backLen = (n - 1) * 8 + lastBits;
 80044b8:	b29e      	uxthne	r6, r3
        for (i = 0; i < n; i++) 
 80044ba:	2f10      	cmp	r7, #16
 80044bc:	bf28      	it	cs
 80044be:	2710      	movcs	r7, #16
 80044c0:	2f01      	cmp	r7, #1
 80044c2:	bf38      	it	cc
 80044c4:	2701      	movcc	r7, #1
 80044c6:	3f01      	subs	r7, #1
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80044c8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004530 <rc522_request+0x430>
 80044cc:	fa19 f787 	uxtah	r7, r9, r7
      if (n & irqEn & 0x01) {
 80044d0:	f004 0401 	and.w	r4, r4, #1
        for (i = 0; i < n; i++) 
 80044d4:	f109 39ff 	add.w	r9, r9, #4294967295
	    GPIOB->ODR &= ~(1UL << 0);
 80044d8:	696b      	ldr	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 80044da:	2092      	movs	r0, #146	; 0x92
	    GPIOB->ODR &= ~(1UL << 0);
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80044e2:	2201      	movs	r2, #1
 80044e4:	2364      	movs	r3, #100	; 0x64
 80044e6:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80044ea:	f88d 0003 	strb.w	r0, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80044ee:	4640      	mov	r0, r8
 80044f0:	f7fe ff7c 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f88d 3004 	strb.w	r3, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80044fa:	2201      	movs	r2, #1
 80044fc:	2364      	movs	r3, #100	; 0x64
 80044fe:	a901      	add	r1, sp, #4
 8004500:	4640      	mov	r0, r8
 8004502:	f7ff fa0f 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004506:	696b      	ldr	r3, [r5, #20]
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	616b      	str	r3, [r5, #20]
  return dataRd;
 800450e:	f89d 3004 	ldrb.w	r3, [sp, #4]
				{
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
//          if (l == 4)
//            printf("%02x ", d);
          backData[i] = d;
 8004512:	f809 3f01 	strb.w	r3, [r9, #1]!
        for (i = 0; i < n; i++) 
 8004516:	454f      	cmp	r7, r9
 8004518:	d1de      	bne.n	80044d8 <rc522_request+0x3d8>
  if ((status != true) || (backBits != 0x10)) {
 800451a:	2c00      	cmp	r4, #0
 800451c:	f43f af60 	beq.w	80043e0 <rc522_request+0x2e0>
 8004520:	f1a6 0010 	sub.w	r0, r6, #16
 8004524:	fab0 f080 	clz	r0, r0
 8004528:	0940      	lsrs	r0, r0, #5
}
 800452a:	b002      	add	sp, #8
 800452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004530:	200006a8 	.word	0x200006a8
 8004534:	40020400 	.word	0x40020400

08004538 <rc522_antiColl>:

  return status;
}

bool rc522_antiColl(uint8_t* serNum)
{
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    GPIOB->ODR &= ~(1UL << 0);
 800453c:	4cc0      	ldr	r4, [pc, #768]	; (8004840 <rc522_antiColl+0x308>)
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800453e:	f8df a304 	ldr.w	sl, [pc, #772]	; 8004844 <rc522_antiColl+0x30c>
	    GPIOB->ODR &= ~(1UL << 0);
 8004542:	6963      	ldr	r3, [r4, #20]
{
 8004544:	b083      	sub	sp, #12
	    GPIOB->ODR &= ~(1UL << 0);
 8004546:	f023 0301 	bic.w	r3, r3, #1
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800454a:	211a      	movs	r1, #26
	    GPIOB->ODR &= ~(1UL << 0);
 800454c:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800454e:	2202      	movs	r2, #2
 8004550:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004552:	f8ad 1004 	strh.w	r1, [sp, #4]
{
 8004556:	4606      	mov	r6, r0
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004558:	a901      	add	r1, sp, #4
 800455a:	48ba      	ldr	r0, [pc, #744]	; (8004844 <rc522_antiColl+0x30c>)
 800455c:	f7fe ff46 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004560:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004562:	48b8      	ldr	r0, [pc, #736]	; (8004844 <rc522_antiColl+0x30c>)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]

  serNum[0] = PICC_ANTICOLL;
 8004564:	46b0      	mov	r8, r6
	    GPIOB->ODR |= (1UL << 0);
 8004566:	f043 0301 	orr.w	r3, r3, #1
  serNum[0] = PICC_ANTICOLL;
 800456a:	f242 0293 	movw	r2, #8339	; 0x2093
	    GPIOB->ODR |= (1UL << 0);
 800456e:	6163      	str	r3, [r4, #20]
  serNum[0] = PICC_ANTICOLL;
 8004570:	f828 2901 	strh.w	r2, [r8], #-1
	    GPIOB->ODR &= ~(1UL << 0);
 8004574:	6963      	ldr	r3, [r4, #20]
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800457c:	f24f 7304 	movw	r3, #63236	; 0xf704
 8004580:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004584:	2202      	movs	r2, #2
 8004586:	2364      	movs	r3, #100	; 0x64
 8004588:	a901      	add	r1, sp, #4
 800458a:	f7fe ff2f 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800458e:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004590:	48ac      	ldr	r0, [pc, #688]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004598:	6963      	ldr	r3, [r4, #20]
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 80045a0:	2388      	movs	r3, #136	; 0x88
 80045a2:	f88d 3003 	strb.w	r3, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80045a6:	2201      	movs	r2, #1
 80045a8:	2364      	movs	r3, #100	; 0x64
 80045aa:	f10d 0103 	add.w	r1, sp, #3
 80045ae:	f7fe ff1d 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80045b2:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80045b4:	2364      	movs	r3, #100	; 0x64
 80045b6:	2201      	movs	r2, #1
 80045b8:	a901      	add	r1, sp, #4
 80045ba:	48a2      	ldr	r0, [pc, #648]	; (8004844 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 80045bc:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80045c0:	f7ff f9b0 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80045c4:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80045c6:	489f      	ldr	r0, [pc, #636]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80045ce:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 80045d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80045d4:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 80045d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80045dc:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80045de:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80045e0:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80045e4:	2202      	movs	r2, #2
 80045e6:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80045e8:	2708      	movs	r7, #8
 80045ea:	f88d 7004 	strb.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80045ee:	f7fe fefd 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80045f2:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80045f4:	4893      	ldr	r0, [pc, #588]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80045fc:	6963      	ldr	r3, [r4, #20]
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004604:	2201      	movs	r2, #1
 8004606:	2364      	movs	r3, #100	; 0x64
 8004608:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800460c:	2794      	movs	r7, #148	; 0x94
 800460e:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004612:	f7fe feeb 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004616:	2364      	movs	r3, #100	; 0x64
 8004618:	2201      	movs	r2, #1
 800461a:	a901      	add	r1, sp, #4
 800461c:	4889      	ldr	r0, [pc, #548]	; (8004844 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 800461e:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004622:	f7ff f97f 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004626:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004628:	4886      	ldr	r0, [pc, #536]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004630:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004632:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004636:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 800463a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 800463e:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004640:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004642:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004646:	2202      	movs	r2, #2
 8004648:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800464a:	2514      	movs	r5, #20
 800464c:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004650:	f7fe fecc 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004654:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004656:	487b      	ldr	r0, [pc, #492]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 8004658:	f043 0301 	orr.w	r3, r3, #1
 800465c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800465e:	6963      	ldr	r3, [r4, #20]
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004666:	2202      	movs	r2, #2
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004668:	2364      	movs	r3, #100	; 0x64
 800466a:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800466c:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004670:	f7fe febc 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004674:	6963      	ldr	r3, [r4, #20]
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 800467c:	4645      	mov	r5, r8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800467e:	f04f 0912 	mov.w	r9, #18
	    GPIOB->ODR &= ~(1UL << 0);
 8004682:	6962      	ldr	r2, [r4, #20]
 8004684:	462f      	mov	r7, r5
 8004686:	f022 0201 	bic.w	r2, r2, #1
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 800468a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
	    GPIOB->ODR &= ~(1UL << 0);
 800468e:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004690:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004692:	f88d 0005 	strb.w	r0, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004696:	2202      	movs	r2, #2
 8004698:	a901      	add	r1, sp, #4
 800469a:	4650      	mov	r0, sl
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800469c:	f88d 9004 	strb.w	r9, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046a0:	f7fe fea4 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80046a4:	6963      	ldr	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 80046a6:	42b7      	cmp	r7, r6
	    GPIOB->ODR |= (1UL << 0);
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 80046ae:	d1e8      	bne.n	8004682 <rc522_antiColl+0x14a>
	    GPIOB->ODR &= ~(1UL << 0);
 80046b0:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046b2:	4864      	ldr	r0, [pc, #400]	; (8004844 <rc522_antiColl+0x30c>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80046b4:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8004844 <rc522_antiColl+0x30c>
	    GPIOB->ODR &= ~(1UL << 0);
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046be:	2202      	movs	r2, #2
 80046c0:	2364      	movs	r3, #100	; 0x64
 80046c2:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80046c4:	f640 4502 	movw	r5, #3074	; 0xc02
 80046c8:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046cc:	f7fe fe8e 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80046d0:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80046d2:	485c      	ldr	r0, [pc, #368]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80046da:	6963      	ldr	r3, [r4, #20]
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80046e2:	2201      	movs	r2, #1
 80046e4:	2364      	movs	r3, #100	; 0x64
 80046e6:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80046ea:	259a      	movs	r5, #154	; 0x9a
 80046ec:	f88d 5003 	strb.w	r5, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80046f0:	f7fe fe7c 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80046f4:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80046f6:	2364      	movs	r3, #100	; 0x64
 80046f8:	2201      	movs	r2, #1
 80046fa:	a901      	add	r1, sp, #4
 80046fc:	4851      	ldr	r0, [pc, #324]	; (8004844 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 80046fe:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004702:	f7ff f90f 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004706:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004708:	484e      	ldr	r0, [pc, #312]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004710:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004712:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004716:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 800471a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 800471e:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004720:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004722:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004726:	2202      	movs	r2, #2
 8004728:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800472a:	271a      	movs	r7, #26
 800472c:	f88d 7004 	strb.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004730:	f7fe fe5c 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004734:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004736:	4843      	ldr	r0, [pc, #268]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800473e:	6963      	ldr	r3, [r4, #20]
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004746:	2201      	movs	r2, #1
 8004748:	2364      	movs	r3, #100	; 0x64
 800474a:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800474e:	2788      	movs	r7, #136	; 0x88
 8004750:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004754:	f7fe fe4a 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004758:	2364      	movs	r3, #100	; 0x64
 800475a:	483a      	ldr	r0, [pc, #232]	; (8004844 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 800475c:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004760:	2201      	movs	r2, #1
 8004762:	a901      	add	r1, sp, #4
 8004764:	f7ff f8de 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004768:	6963      	ldr	r3, [r4, #20]
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004770:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  return dataRd;
 8004774:	f89d b004 	ldrb.w	fp, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004778:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
    i--;
 800477c:	2463      	movs	r4, #99	; 0x63
 800477e:	e01a      	b.n	80047b6 <rc522_antiColl+0x27e>
	    GPIOB->ODR &= ~(1UL << 0);
 8004780:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004784:	f02c 0c01 	bic.w	ip, ip, #1
 8004788:	f8c5 c014 	str.w	ip, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 800478c:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004790:	f7fe fe2c 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004794:	2364      	movs	r3, #100	; 0x64
 8004796:	2201      	movs	r2, #1
 8004798:	a901      	add	r1, sp, #4
 800479a:	4648      	mov	r0, r9
	uint8_t dataRd=0;
 800479c:	f88d a004 	strb.w	sl, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80047a0:	f7ff f8c0 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80047a4:	696b      	ldr	r3, [r5, #20]
    i--;
 80047a6:	3c01      	subs	r4, #1
	    GPIOB->ODR |= (1UL << 0);
 80047a8:	f043 0301 	orr.w	r3, r3, #1
 80047ac:	616b      	str	r3, [r5, #20]
    i--;
 80047ae:	b2a4      	uxth	r4, r4
  return dataRd;
 80047b0:	f89d b004 	ldrb.w	fp, [sp, #4]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80047b4:	b15c      	cbz	r4, 80047ce <rc522_antiColl+0x296>
 80047b6:	f01b 0f31 	tst.w	fp, #49	; 0x31
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047ba:	f04f 0364 	mov.w	r3, #100	; 0x64
 80047be:	f04f 0201 	mov.w	r2, #1
 80047c2:	f10d 0103 	add.w	r1, sp, #3
 80047c6:	4648      	mov	r0, r9
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80047c8:	f00b 0a31 	and.w	sl, fp, #49	; 0x31
 80047cc:	d0d8      	beq.n	8004780 <rc522_antiColl+0x248>
	    GPIOB->ODR &= ~(1UL << 0);
 80047ce:	4d1c      	ldr	r5, [pc, #112]	; (8004840 <rc522_antiColl+0x308>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047d0:	481c      	ldr	r0, [pc, #112]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR &= ~(1UL << 0);
 80047d2:	696a      	ldr	r2, [r5, #20]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	616a      	str	r2, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047da:	2364      	movs	r3, #100	; 0x64
 80047dc:	2201      	movs	r2, #1
 80047de:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80047e2:	279a      	movs	r7, #154	; 0x9a
 80047e4:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047e8:	f7fe fe00 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80047ec:	2700      	movs	r7, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80047ee:	2364      	movs	r3, #100	; 0x64
 80047f0:	2201      	movs	r2, #1
 80047f2:	a901      	add	r1, sp, #4
 80047f4:	4813      	ldr	r0, [pc, #76]	; (8004844 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 80047f6:	f88d 7004 	strb.w	r7, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80047fa:	f7ff f893 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80047fe:	696b      	ldr	r3, [r5, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004800:	4810      	ldr	r0, [pc, #64]	; (8004844 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 8004802:	f043 0301 	orr.w	r3, r3, #1
 8004806:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004808:	696a      	ldr	r2, [r5, #20]
  return dataRd;
 800480a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 800480e:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004816:	616a      	str	r2, [r5, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004818:	f88d 3005 	strb.w	r3, [sp, #5]
 800481c:	231a      	movs	r3, #26
 800481e:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004822:	2202      	movs	r2, #2
 8004824:	2364      	movs	r3, #100	; 0x64
 8004826:	a901      	add	r1, sp, #4
 8004828:	f7fe fde0 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800482c:	696b      	ldr	r3, [r5, #20]
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	616b      	str	r3, [r5, #20]
  if (i != 0)  {
 8004834:	b944      	cbnz	r4, 8004848 <rc522_antiColl+0x310>
  bool status = false;
 8004836:	2000      	movs	r0, #0
    if (serNumCheck != serNum[i]) {
      status = false;
    }
  }
  return status;
}
 8004838:	b003      	add	sp, #12
 800483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483e:	bf00      	nop
 8004840:	40020400 	.word	0x40020400
 8004844:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 8004848:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800484a:	484b      	ldr	r0, [pc, #300]	; (8004978 <rc522_antiColl+0x440>)
	    GPIOB->ODR &= ~(1UL << 0);
 800484c:	f023 0301 	bic.w	r3, r3, #1
 8004850:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004852:	2201      	movs	r2, #1
 8004854:	2364      	movs	r3, #100	; 0x64
 8004856:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800485a:	248c      	movs	r4, #140	; 0x8c
 800485c:	f88d 4003 	strb.w	r4, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004860:	f7fe fdc4 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004864:	2364      	movs	r3, #100	; 0x64
 8004866:	4844      	ldr	r0, [pc, #272]	; (8004978 <rc522_antiColl+0x440>)
	uint8_t dataRd=0;
 8004868:	f88d 7004 	strb.w	r7, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800486c:	2201      	movs	r2, #1
 800486e:	a901      	add	r1, sp, #4
 8004870:	f7ff f858 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004874:	696b      	ldr	r3, [r5, #20]
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	616b      	str	r3, [r5, #20]
  return dataRd;
 800487c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8004880:	f013 091b 	ands.w	r9, r3, #27
 8004884:	d1d7      	bne.n	8004836 <rc522_antiColl+0x2fe>
	    GPIOB->ODR &= ~(1UL << 0);
 8004886:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004888:	483b      	ldr	r0, [pc, #236]	; (8004978 <rc522_antiColl+0x440>)
	    GPIOB->ODR &= ~(1UL << 0);
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004890:	2201      	movs	r2, #1
 8004892:	2364      	movs	r3, #100	; 0x64
 8004894:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004898:	2794      	movs	r7, #148	; 0x94
 800489a:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800489e:	f7fe fda5 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80048a2:	2364      	movs	r3, #100	; 0x64
 80048a4:	2201      	movs	r2, #1
 80048a6:	a901      	add	r1, sp, #4
 80048a8:	4833      	ldr	r0, [pc, #204]	; (8004978 <rc522_antiColl+0x440>)
	uint8_t dataRd=0;
 80048aa:	f88d 9004 	strb.w	r9, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80048ae:	f7ff f839 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80048b2:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80048b4:	4830      	ldr	r0, [pc, #192]	; (8004978 <rc522_antiColl+0x440>)
	    GPIOB->ODR |= (1UL << 0);
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80048bc:	696b      	ldr	r3, [r5, #20]
  return dataRd;
 80048be:	f89d 7004 	ldrb.w	r7, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	616b      	str	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 80048c8:	f04f 0c98 	mov.w	ip, #152	; 0x98
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80048cc:	2364      	movs	r3, #100	; 0x64
 80048ce:	2201      	movs	r2, #1
 80048d0:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80048d4:	f88d c003 	strb.w	ip, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80048d8:	f7fe fd88 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80048dc:	2364      	movs	r3, #100	; 0x64
 80048de:	4826      	ldr	r0, [pc, #152]	; (8004978 <rc522_antiColl+0x440>)
	uint8_t dataRd=0;
 80048e0:	f88d 9004 	strb.w	r9, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80048e4:	2201      	movs	r2, #1
 80048e6:	a901      	add	r1, sp, #4
 80048e8:	f7ff f81c 	bl	8003924 <HAL_SPI_Receive>
        for (i = 0; i < n; i++) 
 80048ec:	2f10      	cmp	r7, #16
 80048ee:	bf28      	it	cs
 80048f0:	2710      	movcs	r7, #16
	    GPIOB->ODR |= (1UL << 0);
 80048f2:	696b      	ldr	r3, [r5, #20]
        for (i = 0; i < n; i++) 
 80048f4:	2f01      	cmp	r7, #1
 80048f6:	bf38      	it	cc
 80048f8:	2701      	movcc	r7, #1
 80048fa:	f107 39ff 	add.w	r9, r7, #4294967295
      if (n & irqEn & 0x01) {
 80048fe:	ea6f 040b 	mvn.w	r4, fp
	    GPIOB->ODR |= (1UL << 0);
 8004902:	f043 0301 	orr.w	r3, r3, #1
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004906:	4f1c      	ldr	r7, [pc, #112]	; (8004978 <rc522_antiColl+0x440>)
	    GPIOB->ODR |= (1UL << 0);
 8004908:	616b      	str	r3, [r5, #20]
      if (n & irqEn & 0x01) {
 800490a:	f004 0401 	and.w	r4, r4, #1
        for (i = 0; i < n; i++) 
 800490e:	fa16 f989 	uxtah	r9, r6, r9
	    GPIOB->ODR &= ~(1UL << 0);
 8004912:	696b      	ldr	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004914:	2092      	movs	r0, #146	; 0x92
	    GPIOB->ODR &= ~(1UL << 0);
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800491c:	2201      	movs	r2, #1
 800491e:	2364      	movs	r3, #100	; 0x64
 8004920:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004924:	f88d 0003 	strb.w	r0, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004928:	4638      	mov	r0, r7
 800492a:	f7fe fd5f 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 800492e:	2300      	movs	r3, #0
 8004930:	f88d 3004 	strb.w	r3, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004934:	2201      	movs	r2, #1
 8004936:	2364      	movs	r3, #100	; 0x64
 8004938:	a901      	add	r1, sp, #4
 800493a:	4638      	mov	r0, r7
 800493c:	f7fe fff2 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004940:	696b      	ldr	r3, [r5, #20]
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	616b      	str	r3, [r5, #20]
  return dataRd;
 8004948:	f89d 3004 	ldrb.w	r3, [sp, #4]
          backData[i] = d;
 800494c:	f808 3f01 	strb.w	r3, [r8, #1]!
        for (i = 0; i < n; i++) 
 8004950:	45c1      	cmp	r9, r8
 8004952:	d1de      	bne.n	8004912 <rc522_antiColl+0x3da>
  if (status == true) {
 8004954:	2c00      	cmp	r4, #0
 8004956:	f43f af6e 	beq.w	8004836 <rc522_antiColl+0x2fe>
      serNumCheck ^= serNum[i];
 800495a:	7833      	ldrb	r3, [r6, #0]
 800495c:	7870      	ldrb	r0, [r6, #1]
 800495e:	78b1      	ldrb	r1, [r6, #2]
 8004960:	78f2      	ldrb	r2, [r6, #3]
 8004962:	4058      	eors	r0, r3
 8004964:	4048      	eors	r0, r1
    if (serNumCheck != serNum[i]) {
 8004966:	7933      	ldrb	r3, [r6, #4]
 8004968:	4050      	eors	r0, r2
 800496a:	1a18      	subs	r0, r3, r0
 800496c:	fab0 f080 	clz	r0, r0
 8004970:	0940      	lsrs	r0, r0, #5
}
 8004972:	b003      	add	sp, #12
 8004974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004978:	200006a8 	.word	0x200006a8

0800497c <rc522_halt>:

void rc522_halt(void)
{
 800497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	b084      	sub	sp, #16
	    GPIOB->ODR &= ~(1UL << 0);
 8004982:	4c5c      	ldr	r4, [pc, #368]	; (8004af4 <rc522_halt+0x178>)
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004984:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8004af8 <rc522_halt+0x17c>
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8004988:	2350      	movs	r3, #80	; 0x50
 800498a:	f8ad 300c 	strh.w	r3, [sp, #12]
	    GPIOB->ODR &= ~(1UL << 0);
 800498e:	6963      	ldr	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004990:	208a      	movs	r0, #138	; 0x8a
	    GPIOB->ODR &= ~(1UL << 0);
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004998:	2201      	movs	r2, #1
 800499a:	2364      	movs	r3, #100	; 0x64
 800499c:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 80049a0:	f88d 0007 	strb.w	r0, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80049a4:	4854      	ldr	r0, [pc, #336]	; (8004af8 <rc522_halt+0x17c>)
 80049a6:	f7fe fd21 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80049aa:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80049ac:	2364      	movs	r3, #100	; 0x64
 80049ae:	2201      	movs	r2, #1
 80049b0:	a902      	add	r1, sp, #8
 80049b2:	4851      	ldr	r0, [pc, #324]	; (8004af8 <rc522_halt+0x17c>)
	uint8_t dataRd=0;
 80049b4:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80049b8:	f7fe ffb4 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80049bc:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80049be:	484e      	ldr	r0, [pc, #312]	; (8004af8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 80049c0:	f043 0301 	orr.w	r3, r3, #1
 80049c4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80049c6:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 80049c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 80049cc:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 80049d0:	f023 0304 	bic.w	r3, r3, #4
	    GPIOB->ODR &= ~(1UL << 0);
 80049d4:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80049d6:	a902      	add	r1, sp, #8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80049d8:	f88d 3009 	strb.w	r3, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80049dc:	2202      	movs	r2, #2
 80049de:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80049e0:	260a      	movs	r6, #10
 80049e2:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80049e6:	f7fe fd01 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80049ea:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80049ec:	4842      	ldr	r0, [pc, #264]	; (8004af8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80049f4:	6963      	ldr	r3, [r4, #20]
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 80049fc:	2394      	movs	r3, #148	; 0x94
 80049fe:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004a02:	2201      	movs	r2, #1
 8004a04:	2364      	movs	r3, #100	; 0x64
 8004a06:	f10d 0107 	add.w	r1, sp, #7
 8004a0a:	f7fe fcef 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004a0e:	2364      	movs	r3, #100	; 0x64
 8004a10:	2201      	movs	r2, #1
 8004a12:	a902      	add	r1, sp, #8
 8004a14:	4838      	ldr	r0, [pc, #224]	; (8004af8 <rc522_halt+0x17c>)
	uint8_t dataRd=0;
 8004a16:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004a1a:	f7fe ff83 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004a1e:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004a20:	4835      	ldr	r0, [pc, #212]	; (8004af8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004a28:	6963      	ldr	r3, [r4, #20]
  return dataRd;
 8004a2a:	f89d 2008 	ldrb.w	r2, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6163      	str	r3, [r4, #20]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8004a34:	f062 027f 	orn	r2, r2, #127	; 0x7f
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004a38:	2314      	movs	r3, #20
 8004a3a:	f88d 3008 	strb.w	r3, [sp, #8]
 8004a3e:	f88d 2009 	strb.w	r2, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004a42:	2364      	movs	r3, #100	; 0x64
 8004a44:	2202      	movs	r2, #2
 8004a46:	a902      	add	r1, sp, #8
 8004a48:	f7fe fcd0 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004a4c:	6963      	ldr	r3, [r4, #20]
 8004a4e:	af03      	add	r7, sp, #12
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6163      	str	r3, [r4, #20]
  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8004a56:	f10d 080e 	add.w	r8, sp, #14
 8004a5a:	463d      	mov	r5, r7
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004a5c:	2612      	movs	r6, #18
	    GPIOB->ODR &= ~(1UL << 0);
 8004a5e:	6963      	ldr	r3, [r4, #20]
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8004a60:	f815 cb01 	ldrb.w	ip, [r5], #1
	    GPIOB->ODR &= ~(1UL << 0);
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	2364      	movs	r3, #100	; 0x64
 8004a6e:	a902      	add	r1, sp, #8
 8004a70:	4648      	mov	r0, r9
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004a72:	f88d 6008 	strb.w	r6, [sp, #8]
 8004a76:	f88d c009 	strb.w	ip, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004a7a:	f7fe fcb7 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004a7e:	6963      	ldr	r3, [r4, #20]
  for (i = 0; i < len; i++) {
 8004a80:	45a8      	cmp	r8, r5
	    GPIOB->ODR |= (1UL << 0);
 8004a82:	f043 0301 	orr.w	r3, r3, #1
 8004a86:	6163      	str	r3, [r4, #20]
  for (i = 0; i < len; i++) {
 8004a88:	d1e9      	bne.n	8004a5e <rc522_halt+0xe2>
	    GPIOB->ODR &= ~(1UL << 0);
 8004a8a:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004a8c:	481a      	ldr	r0, [pc, #104]	; (8004af8 <rc522_halt+0x17c>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004a8e:	4d19      	ldr	r5, [pc, #100]	; (8004af4 <rc522_halt+0x178>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004a90:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004af8 <rc522_halt+0x17c>
	    GPIOB->ODR &= ~(1UL << 0);
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004a9a:	f240 3302 	movw	r3, #770	; 0x302
 8004a9e:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	2364      	movs	r3, #100	; 0x64
 8004aa6:	a902      	add	r1, sp, #8
 8004aa8:	f7fe fca0 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004aac:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004aae:	4812      	ldr	r0, [pc, #72]	; (8004af8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004ab6:	6963      	ldr	r3, [r4, #20]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004abe:	2201      	movs	r2, #1
 8004ac0:	2364      	movs	r3, #100	; 0x64
 8004ac2:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004ac6:	f04f 098a 	mov.w	r9, #138	; 0x8a
 8004aca:	f88d 9007 	strb.w	r9, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004ace:	f7fe fc8d 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f88d 3008 	strb.w	r3, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ad8:	4807      	ldr	r0, [pc, #28]	; (8004af8 <rc522_halt+0x17c>)
 8004ada:	2364      	movs	r3, #100	; 0x64
 8004adc:	2201      	movs	r2, #1
 8004ade:	a902      	add	r1, sp, #8
 8004ae0:	f7fe ff20 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004ae4:	6963      	ldr	r3, [r4, #20]
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004aec:	f89d 6008 	ldrb.w	r6, [sp, #8]
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);

  //Wait CRC calculation is complete
  i = 0xFF;
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8004af0:	24fe      	movs	r4, #254	; 0xfe
 8004af2:	e01d      	b.n	8004b30 <rc522_halt+0x1b4>
 8004af4:	40020400 	.word	0x40020400
 8004af8:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 8004afc:	696e      	ldr	r6, [r5, #20]
 8004afe:	f026 0601 	bic.w	r6, r6, #1
 8004b02:	616e      	str	r6, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004b04:	f88d 9007 	strb.w	r9, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b08:	f7fe fc70 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004b0c:	2364      	movs	r3, #100	; 0x64
 8004b0e:	2201      	movs	r2, #1
 8004b10:	a902      	add	r1, sp, #8
 8004b12:	4640      	mov	r0, r8
	uint8_t dataRd=0;
 8004b14:	f88d a008 	strb.w	sl, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004b18:	f7fe ff04 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004b1c:	696b      	ldr	r3, [r5, #20]
    i--;
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004b1e:	3c01      	subs	r4, #1
	    GPIOB->ODR |= (1UL << 0);
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	616b      	str	r3, [r5, #20]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004b26:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  return dataRd;
 8004b2a:	f89d 6008 	ldrb.w	r6, [sp, #8]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004b2e:	d00a      	beq.n	8004b46 <rc522_halt+0x1ca>
 8004b30:	f006 0a04 	and.w	sl, r6, #4
 8004b34:	0776      	lsls	r6, r6, #29
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b36:	f04f 0364 	mov.w	r3, #100	; 0x64
 8004b3a:	f04f 0201 	mov.w	r2, #1
 8004b3e:	f10d 0107 	add.w	r1, sp, #7
 8004b42:	4640      	mov	r0, r8
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004b44:	d5da      	bpl.n	8004afc <rc522_halt+0x180>
	    GPIOB->ODR &= ~(1UL << 0);
 8004b46:	4ca5      	ldr	r4, [pc, #660]	; (8004ddc <rc522_halt+0x460>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b48:	48a5      	ldr	r0, [pc, #660]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004b4a:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004b4c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8004de0 <rc522_halt+0x464>
	    GPIOB->ODR &= ~(1UL << 0);
 8004b50:	f022 0201 	bic.w	r2, r2, #1
 8004b54:	6162      	str	r2, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004b56:	22c4      	movs	r2, #196	; 0xc4
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b58:	2364      	movs	r3, #100	; 0x64
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004b5a:	f88d 2007 	strb.w	r2, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b5e:	f10d 0107 	add.w	r1, sp, #7
 8004b62:	2201      	movs	r2, #1
 8004b64:	f7fe fc42 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004b68:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004b6a:	2364      	movs	r3, #100	; 0x64
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	a902      	add	r1, sp, #8
 8004b70:	489b      	ldr	r0, [pc, #620]	; (8004de0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004b72:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004b76:	f7fe fed5 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004b7a:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b7c:	4898      	ldr	r0, [pc, #608]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004b7e:	f043 0301 	orr.w	r3, r3, #1
 8004b82:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004b84:	f89d 3008 	ldrb.w	r3, [sp, #8]

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8004b88:	f88d 300e 	strb.w	r3, [sp, #14]
	    GPIOB->ODR &= ~(1UL << 0);
 8004b8c:	6963      	ldr	r3, [r4, #20]
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004b94:	23c2      	movs	r3, #194	; 0xc2
 8004b96:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2364      	movs	r3, #100	; 0x64
 8004b9e:	f10d 0107 	add.w	r1, sp, #7
 8004ba2:	f7fe fc23 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ba6:	2364      	movs	r3, #100	; 0x64
 8004ba8:	2201      	movs	r2, #1
 8004baa:	a902      	add	r1, sp, #8
 8004bac:	488c      	ldr	r0, [pc, #560]	; (8004de0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004bae:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004bb2:	f7fe feb7 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004bb6:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004bb8:	4889      	ldr	r0, [pc, #548]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004bc0:	f89d 3008 	ldrb.w	r3, [sp, #8]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8004bc4:	f88d 300f 	strb.w	r3, [sp, #15]
	    GPIOB->ODR &= ~(1UL << 0);
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004bd0:	f24f 7304 	movw	r3, #63236	; 0xf704
 8004bd4:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004bd8:	2202      	movs	r2, #2
 8004bda:	2364      	movs	r3, #100	; 0x64
 8004bdc:	a902      	add	r1, sp, #8
 8004bde:	f7fe fc05 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004be2:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004be4:	487e      	ldr	r0, [pc, #504]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004be6:	f043 0301 	orr.w	r3, r3, #1
 8004bea:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004bec:	6963      	ldr	r3, [r4, #20]
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004bf4:	2388      	movs	r3, #136	; 0x88
 8004bf6:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2364      	movs	r3, #100	; 0x64
 8004bfe:	f10d 0107 	add.w	r1, sp, #7
 8004c02:	f7fe fbf3 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c06:	2364      	movs	r3, #100	; 0x64
 8004c08:	2201      	movs	r2, #1
 8004c0a:	a902      	add	r1, sp, #8
 8004c0c:	4874      	ldr	r0, [pc, #464]	; (8004de0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004c0e:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c12:	f7fe fe87 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004c16:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004c18:	4871      	ldr	r0, [pc, #452]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004c20:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004c22:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004c26:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004c2e:	2608      	movs	r6, #8
	    GPIOB->ODR &= ~(1UL << 0);
 8004c30:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004c32:	a902      	add	r1, sp, #8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004c34:	f88d 3009 	strb.w	r3, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004c38:	2202      	movs	r2, #2
 8004c3a:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004c3c:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004c40:	f7fe fbd4 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004c44:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c46:	4866      	ldr	r0, [pc, #408]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004c4e:	6963      	ldr	r3, [r4, #20]
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004c56:	2394      	movs	r3, #148	; 0x94
 8004c58:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	2364      	movs	r3, #100	; 0x64
 8004c60:	f10d 0107 	add.w	r1, sp, #7
 8004c64:	f7fe fbc2 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c68:	eb0d 0106 	add.w	r1, sp, r6
 8004c6c:	2364      	movs	r3, #100	; 0x64
 8004c6e:	2201      	movs	r2, #1
 8004c70:	485b      	ldr	r0, [pc, #364]	; (8004de0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004c72:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c76:	f7fe fe55 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004c7a:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004c7c:	4858      	ldr	r0, [pc, #352]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004c84:	6963      	ldr	r3, [r4, #20]
  return dataRd;
 8004c86:	f89d 2008 	ldrb.w	r2, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	6163      	str	r3, [r4, #20]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8004c90:	f062 027f 	orn	r2, r2, #127	; 0x7f
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004c94:	2314      	movs	r3, #20
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004c96:	eb0d 0106 	add.w	r1, sp, r6
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004c9a:	f88d 3008 	strb.w	r3, [sp, #8]
 8004c9e:	f88d 2009 	strb.w	r2, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004ca2:	2364      	movs	r3, #100	; 0x64
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f7fe fba1 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004caa:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004cac:	484c      	ldr	r0, [pc, #304]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004cb4:	6963      	ldr	r3, [r4, #20]
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004cbc:	2202      	movs	r2, #2
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004cbe:	2364      	movs	r3, #100	; 0x64
 8004cc0:	eb0d 0106 	add.w	r1, sp, r6
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004cc4:	f8ad 2008 	strh.w	r2, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004cc8:	f7fe fb90 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004ccc:	6963      	ldr	r3, [r4, #20]
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	f107 0904 	add.w	r9, r7, #4
 8004cd6:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 8004cd8:	463d      	mov	r5, r7
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004cda:	2612      	movs	r6, #18
	    GPIOB->ODR &= ~(1UL << 0);
 8004cdc:	6963      	ldr	r3, [r4, #20]
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8004cde:	f815 cb01 	ldrb.w	ip, [r5], #1
	    GPIOB->ODR &= ~(1UL << 0);
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004ce8:	2202      	movs	r2, #2
 8004cea:	2364      	movs	r3, #100	; 0x64
 8004cec:	a902      	add	r1, sp, #8
 8004cee:	4640      	mov	r0, r8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004cf0:	f88d 6008 	strb.w	r6, [sp, #8]
 8004cf4:	f88d c009 	strb.w	ip, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004cf8:	f7fe fb78 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004cfc:	6963      	ldr	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 8004cfe:	454d      	cmp	r5, r9
	    GPIOB->ODR |= (1UL << 0);
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 8004d06:	d1e9      	bne.n	8004cdc <rc522_halt+0x360>
	    GPIOB->ODR &= ~(1UL << 0);
 8004d08:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d0a:	4835      	ldr	r0, [pc, #212]	; (8004de0 <rc522_halt+0x464>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004d0c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004de0 <rc522_halt+0x464>
	    GPIOB->ODR &= ~(1UL << 0);
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d16:	f640 4302 	movw	r3, #3074	; 0xc02
 8004d1a:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d1e:	2202      	movs	r2, #2
 8004d20:	2364      	movs	r3, #100	; 0x64
 8004d22:	a902      	add	r1, sp, #8
 8004d24:	f7fe fb62 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004d28:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004d2a:	482d      	ldr	r0, [pc, #180]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d32:	6963      	ldr	r3, [r4, #20]
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004d3a:	239a      	movs	r3, #154	; 0x9a
 8004d3c:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004d40:	2201      	movs	r2, #1
 8004d42:	2364      	movs	r3, #100	; 0x64
 8004d44:	f10d 0107 	add.w	r1, sp, #7
 8004d48:	f7fe fb50 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004d4c:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004d4e:	2364      	movs	r3, #100	; 0x64
 8004d50:	2201      	movs	r2, #1
 8004d52:	a902      	add	r1, sp, #8
 8004d54:	4822      	ldr	r0, [pc, #136]	; (8004de0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004d56:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004d5a:	f7fe fde3 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004d5e:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d60:	481f      	ldr	r0, [pc, #124]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004d62:	f043 0301 	orr.w	r3, r3, #1
 8004d66:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d68:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004d6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8004d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004d76:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d78:	a902      	add	r1, sp, #8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d7a:	f88d 3009 	strb.w	r3, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d7e:	2202      	movs	r2, #2
 8004d80:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d82:	261a      	movs	r6, #26
 8004d84:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d88:	f7fe fb30 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004d8c:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004d8e:	4814      	ldr	r0, [pc, #80]	; (8004de0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d96:	6963      	ldr	r3, [r4, #20]
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2364      	movs	r3, #100	; 0x64
 8004da2:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004da6:	f04f 0888 	mov.w	r8, #136	; 0x88
 8004daa:	f88d 8007 	strb.w	r8, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004dae:	f7fe fb1d 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004db2:	2364      	movs	r3, #100	; 0x64
 8004db4:	480a      	ldr	r0, [pc, #40]	; (8004de0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004db6:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004dba:	2201      	movs	r2, #1
 8004dbc:	a902      	add	r1, sp, #8
 8004dbe:	f7fe fdb1 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004dc2:	6963      	ldr	r3, [r4, #20]
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004dca:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  return dataRd;
 8004dce:	f89d 6008 	ldrb.w	r6, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004dd2:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
    i--;
 8004dd6:	2463      	movs	r4, #99	; 0x63
 8004dd8:	e01d      	b.n	8004e16 <rc522_halt+0x49a>
 8004dda:	bf00      	nop
 8004ddc:	40020400 	.word	0x40020400
 8004de0:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 8004de4:	696e      	ldr	r6, [r5, #20]
 8004de6:	f026 0601 	bic.w	r6, r6, #1
 8004dea:	616e      	str	r6, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004dec:	f88d 8007 	strb.w	r8, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004df0:	f7fe fafc 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004df4:	2364      	movs	r3, #100	; 0x64
 8004df6:	2201      	movs	r2, #1
 8004df8:	a902      	add	r1, sp, #8
 8004dfa:	4648      	mov	r0, r9
	uint8_t dataRd=0;
 8004dfc:	f88d a008 	strb.w	sl, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004e00:	f7fe fd90 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004e04:	696b      	ldr	r3, [r5, #20]
    i--;
 8004e06:	3c01      	subs	r4, #1
	    GPIOB->ODR |= (1UL << 0);
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	616b      	str	r3, [r5, #20]
    i--;
 8004e0e:	b2a4      	uxth	r4, r4
  return dataRd;
 8004e10:	f89d 6008 	ldrb.w	r6, [sp, #8]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004e14:	b15c      	cbz	r4, 8004e2e <rc522_halt+0x4b2>
 8004e16:	f016 0f31 	tst.w	r6, #49	; 0x31
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e1a:	f04f 0364 	mov.w	r3, #100	; 0x64
 8004e1e:	f04f 0201 	mov.w	r2, #1
 8004e22:	f10d 0107 	add.w	r1, sp, #7
 8004e26:	4648      	mov	r0, r9
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004e28:	f006 0a31 	and.w	sl, r6, #49	; 0x31
 8004e2c:	d0da      	beq.n	8004de4 <rc522_halt+0x468>
	    GPIOB->ODR &= ~(1UL << 0);
 8004e2e:	4d5f      	ldr	r5, [pc, #380]	; (8004fac <rc522_halt+0x630>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e30:	485f      	ldr	r0, [pc, #380]	; (8004fb0 <rc522_halt+0x634>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004e32:	696a      	ldr	r2, [r5, #20]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	616a      	str	r2, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e3a:	2364      	movs	r3, #100	; 0x64
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004e42:	269a      	movs	r6, #154	; 0x9a
 8004e44:	f88d 6007 	strb.w	r6, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e48:	f7fe fad0 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004e4c:	2600      	movs	r6, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004e4e:	2364      	movs	r3, #100	; 0x64
 8004e50:	2201      	movs	r2, #1
 8004e52:	a902      	add	r1, sp, #8
 8004e54:	4856      	ldr	r0, [pc, #344]	; (8004fb0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8004e56:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004e5a:	f7fe fd63 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004e5e:	696b      	ldr	r3, [r5, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004e60:	4853      	ldr	r0, [pc, #332]	; (8004fb0 <rc522_halt+0x634>)
	    GPIOB->ODR |= (1UL << 0);
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004e68:	696a      	ldr	r2, [r5, #20]
  return dataRd;
 8004e6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004e72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004e76:	616a      	str	r2, [r5, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004e78:	f88d 3009 	strb.w	r3, [sp, #9]
 8004e7c:	231a      	movs	r3, #26
 8004e7e:	f88d 3008 	strb.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004e82:	2202      	movs	r2, #2
 8004e84:	2364      	movs	r3, #100	; 0x64
 8004e86:	a902      	add	r1, sp, #8
 8004e88:	f7fe fab0 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004e8c:	696b      	ldr	r3, [r5, #20]
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	616b      	str	r3, [r5, #20]
  if (i != 0)  {
 8004e94:	b914      	cbnz	r4, 8004e9c <rc522_halt+0x520>
}
 8004e96:	b004      	add	sp, #16
 8004e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    GPIOB->ODR &= ~(1UL << 0);
 8004e9c:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e9e:	4844      	ldr	r0, [pc, #272]	; (8004fb0 <rc522_halt+0x634>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2364      	movs	r3, #100	; 0x64
 8004eaa:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004eae:	248c      	movs	r4, #140	; 0x8c
 8004eb0:	f88d 4007 	strb.w	r4, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004eb4:	f7fe fa9a 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004eb8:	2364      	movs	r3, #100	; 0x64
 8004eba:	483d      	ldr	r0, [pc, #244]	; (8004fb0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8004ebc:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	a902      	add	r1, sp, #8
 8004ec4:	f7fe fd2e 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004ec8:	696b      	ldr	r3, [r5, #20]
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	616b      	str	r3, [r5, #20]
  return dataRd;
 8004ed0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8004ed4:	f013 061b 	ands.w	r6, r3, #27
 8004ed8:	d1dd      	bne.n	8004e96 <rc522_halt+0x51a>
	    GPIOB->ODR &= ~(1UL << 0);
 8004eda:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004edc:	4834      	ldr	r0, [pc, #208]	; (8004fb0 <rc522_halt+0x634>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2364      	movs	r3, #100	; 0x64
 8004ee8:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004eec:	2494      	movs	r4, #148	; 0x94
 8004eee:	f88d 4007 	strb.w	r4, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004ef2:	f7fe fa7b 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ef6:	2364      	movs	r3, #100	; 0x64
 8004ef8:	2201      	movs	r2, #1
 8004efa:	a902      	add	r1, sp, #8
 8004efc:	482c      	ldr	r0, [pc, #176]	; (8004fb0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8004efe:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004f02:	f7fe fd0f 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004f06:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f08:	4829      	ldr	r0, [pc, #164]	; (8004fb0 <rc522_halt+0x634>)
	    GPIOB->ODR |= (1UL << 0);
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004f10:	696b      	ldr	r3, [r5, #20]
  return dataRd;
 8004f12:	f89d 4008 	ldrb.w	r4, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	616b      	str	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004f1c:	f04f 0c98 	mov.w	ip, #152	; 0x98
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f20:	2364      	movs	r3, #100	; 0x64
 8004f22:	2201      	movs	r2, #1
 8004f24:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004f28:	f88d c007 	strb.w	ip, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f2c:	f7fe fa5e 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004f30:	2364      	movs	r3, #100	; 0x64
 8004f32:	481f      	ldr	r0, [pc, #124]	; (8004fb0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8004f34:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004f38:	2201      	movs	r2, #1
 8004f3a:	a902      	add	r1, sp, #8
 8004f3c:	f7fe fcf2 	bl	8003924 <HAL_SPI_Receive>
        for (i = 0; i < n; i++) 
 8004f40:	2c10      	cmp	r4, #16
 8004f42:	bf28      	it	cs
 8004f44:	2410      	movcs	r4, #16
	    GPIOB->ODR |= (1UL << 0);
 8004f46:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f48:	4e19      	ldr	r6, [pc, #100]	; (8004fb0 <rc522_halt+0x634>)
        for (i = 0; i < n; i++) 
 8004f4a:	2c01      	cmp	r4, #1
 8004f4c:	bf38      	it	cc
 8004f4e:	2401      	movcc	r4, #1
 8004f50:	f104 38ff 	add.w	r8, r4, #4294967295
	    GPIOB->ODR |= (1UL << 0);
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	1c7c      	adds	r4, r7, #1
 8004f5a:	616b      	str	r3, [r5, #20]
        for (i = 0; i < n; i++) 
 8004f5c:	fa14 f888 	uxtah	r8, r4, r8
 8004f60:	e000      	b.n	8004f64 <rc522_halt+0x5e8>
 8004f62:	3401      	adds	r4, #1
	    GPIOB->ODR &= ~(1UL << 0);
 8004f64:	696b      	ldr	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004f66:	2292      	movs	r2, #146	; 0x92
	    GPIOB->ODR &= ~(1UL << 0);
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f6e:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004f72:	f88d 2007 	strb.w	r2, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f76:	2364      	movs	r3, #100	; 0x64
 8004f78:	2201      	movs	r2, #1
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	f7fe fa36 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004f80:	2200      	movs	r2, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004f82:	2364      	movs	r3, #100	; 0x64
	uint8_t dataRd=0;
 8004f84:	f88d 2008 	strb.w	r2, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004f88:	a902      	add	r1, sp, #8
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f7fe fcc9 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004f92:	696b      	ldr	r3, [r5, #20]
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	616b      	str	r3, [r5, #20]
  return dataRd;
 8004f9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
          backData[i] = d;
 8004f9e:	703b      	strb	r3, [r7, #0]
        for (i = 0; i < n; i++) 
 8004fa0:	45a0      	cmp	r8, r4
 8004fa2:	4627      	mov	r7, r4
 8004fa4:	d1dd      	bne.n	8004f62 <rc522_halt+0x5e6>
}
 8004fa6:	b004      	add	sp, #16
 8004fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fac:	40020400 	.word	0x40020400
 8004fb0:	200006a8 	.word	0x200006a8

08004fb4 <rc522_checkCard>:
{
 8004fb4:	b538      	push	{r3, r4, r5, lr}
    status = rc522_request(PICC_REQIDL, id);
 8004fb6:	4601      	mov	r1, r0
{
 8004fb8:	4605      	mov	r5, r0
    status = rc522_request(PICC_REQIDL, id);
 8004fba:	2026      	movs	r0, #38	; 0x26
 8004fbc:	f7ff f8a0 	bl	8004100 <rc522_request>
    if (status == true) {
 8004fc0:	b920      	cbnz	r0, 8004fcc <rc522_checkCard+0x18>
 8004fc2:	4604      	mov	r4, r0
    rc522_halt();      //Command card into hibernation
 8004fc4:	f7ff fcda 	bl	800497c <rc522_halt>
}
 8004fc8:	4620      	mov	r0, r4
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
      status = rc522_antiColl(id);
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f7ff fab3 	bl	8004538 <rc522_antiColl>
 8004fd2:	4604      	mov	r4, r0
    rc522_halt();      //Command card into hibernation
 8004fd4:	f7ff fcd2 	bl	800497c <rc522_halt>
}
 8004fd8:	4620      	mov	r0, r4
 8004fda:	bd38      	pop	{r3, r4, r5, pc}

08004fdc <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 8004fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * SPI  -> SPI
	 * PA8  ->RST
	 * PB0  ->CS
	 * */
																							//SPI_Init();
  MFRC522_RST_LOW();
 8004fde:	4c6f      	ldr	r4, [pc, #444]	; (800519c <rc522_init+0x1c0>)
 8004fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
{
 8004fe4:	b083      	sub	sp, #12
  HAL_Delay(10);
  MFRC522_RST_HIGH();
 8004fe6:	2502      	movs	r5, #2
  MFRC522_RST_LOW();
 8004fe8:	61a3      	str	r3, [r4, #24]
  HAL_Delay(10);
 8004fea:	200a      	movs	r0, #10
 8004fec:	f7fc fff2 	bl	8001fd4 <HAL_Delay>
	HAL_Delay(10);
 8004ff0:	200a      	movs	r0, #10
  MFRC522_RST_HIGH();
 8004ff2:	61a5      	str	r5, [r4, #24]
	HAL_Delay(10);
 8004ff4:	f7fc ffee 	bl	8001fd4 <HAL_Delay>
	    GPIOB->ODR &= ~(1UL << 0);
 8004ff8:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004ffa:	4869      	ldr	r0, [pc, #420]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004ffc:	f023 0301 	bic.w	r3, r3, #1
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005000:	f640 7102 	movw	r1, #3842	; 0xf02
	    GPIOB->ODR &= ~(1UL << 0);
 8005004:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005006:	462a      	mov	r2, r5
 8005008:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800500a:	f8ad 1004 	strh.w	r1, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800500e:	a901      	add	r1, sp, #4
 8005010:	f7fe f9ec 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005014:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005016:	4862      	ldr	r0, [pc, #392]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800501e:	6962      	ldr	r2, [r4, #20]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005026:	f248 0254 	movw	r2, #32852	; 0x8054
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800502a:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800502c:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005030:	a901      	add	r1, sp, #4
 8005032:	462a      	mov	r2, r5
 8005034:	f7fe f9da 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005038:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800503a:	4859      	ldr	r0, [pc, #356]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8005042:	6962      	ldr	r2, [r4, #20]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800504a:	f64a 1256 	movw	r2, #43350	; 0xa956
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800504e:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005050:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005054:	a901      	add	r1, sp, #4
 8005056:	462a      	mov	r2, r5
 8005058:	f7fe f9c8 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800505c:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800505e:	4850      	ldr	r0, [pc, #320]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8005066:	6962      	ldr	r2, [r4, #20]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800506e:	f64e 025a 	movw	r2, #59482	; 0xe85a
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005072:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005074:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005078:	a901      	add	r1, sp, #4
 800507a:	462a      	mov	r2, r5
 800507c:	f7fe f9b6 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005080:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005082:	4847      	ldr	r0, [pc, #284]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005084:	f042 0201 	orr.w	r2, r2, #1
 8005088:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800508a:	6962      	ldr	r2, [r4, #20]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005092:	f44f 7256 	mov.w	r2, #856	; 0x358
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005096:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005098:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800509c:	a901      	add	r1, sp, #4
 800509e:	462a      	mov	r2, r5
 80050a0:	f7fe f9a4 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80050a4:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050a6:	483e      	ldr	r0, [pc, #248]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80050ae:	6962      	ldr	r2, [r4, #20]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80050b6:	f244 022a 	movw	r2, #16426	; 0x402a
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050ba:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80050bc:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050c0:	a901      	add	r1, sp, #4
 80050c2:	462a      	mov	r2, r5
 80050c4:	f7fe f992 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80050c8:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050ca:	4835      	ldr	r0, [pc, #212]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 80050cc:	f042 0201 	orr.w	r2, r2, #1
 80050d0:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80050d2:	6962      	ldr	r2, [r4, #20]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80050da:	f643 5222 	movw	r2, #15650	; 0x3d22
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050de:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80050e0:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050e4:	a901      	add	r1, sp, #4
 80050e6:	462a      	mov	r2, r5
 80050e8:	f7fe f980 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80050ec:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80050ee:	482c      	ldr	r0, [pc, #176]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80050f6:	6963      	ldr	r3, [r4, #20]
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80050fe:	2201      	movs	r2, #1
 8005100:	2364      	movs	r3, #100	; 0x64
 8005102:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8005106:	27a8      	movs	r7, #168	; 0xa8
 8005108:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800510c:	f7fe f96e 	bl	80033ec <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8005110:	2300      	movs	r3, #0
 8005112:	f88d 3004 	strb.w	r3, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005116:	4822      	ldr	r0, [pc, #136]	; (80051a0 <rc522_init+0x1c4>)
 8005118:	2364      	movs	r3, #100	; 0x64
 800511a:	2201      	movs	r2, #1
 800511c:	a901      	add	r1, sp, #4
 800511e:	f7fe fc01 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8005122:	6963      	ldr	r3, [r4, #20]
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6163      	str	r3, [r4, #20]
  return dataRd;
 800512a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (!(temp & 0x03)) {
 800512e:	f013 0603 	ands.w	r6, r3, #3
 8005132:	d001      	beq.n	8005138 <rc522_init+0x15c>

  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);

  rc522_antennaON();   //Open the antenna
}
 8005134:	b003      	add	sp, #12
 8005136:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    GPIOB->ODR &= ~(1UL << 0);
 8005138:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800513a:	4819      	ldr	r0, [pc, #100]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR &= ~(1UL << 0);
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8005142:	f10d 0103 	add.w	r1, sp, #3
 8005146:	2364      	movs	r3, #100	; 0x64
 8005148:	2201      	movs	r2, #1
  reg = ((reg << 1) & 0x7E) | 0x80;
 800514a:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800514e:	f7fe f94d 	bl	80033ec <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005152:	a901      	add	r1, sp, #4
 8005154:	2364      	movs	r3, #100	; 0x64
 8005156:	2201      	movs	r2, #1
 8005158:	4811      	ldr	r0, [pc, #68]	; (80051a0 <rc522_init+0x1c4>)
	uint8_t dataRd=0;
 800515a:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800515e:	f7fe fbe1 	bl	8003924 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8005162:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005164:	480e      	ldr	r0, [pc, #56]	; (80051a0 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800516c:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800516e:	462a      	mov	r2, r5
	    GPIOB->ODR &= ~(1UL << 0);
 8005170:	f023 0301 	bic.w	r3, r3, #1
  return dataRd;
 8005174:	f89d 5004 	ldrb.w	r5, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8005178:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800517a:	2328      	movs	r3, #40	; 0x28
 800517c:	f88d 3004 	strb.w	r3, [sp, #4]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8005180:	f045 0503 	orr.w	r5, r5, #3
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005184:	a901      	add	r1, sp, #4
 8005186:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005188:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800518c:	f7fe f92e 	bl	80033ec <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005190:	6963      	ldr	r3, [r4, #20]
 8005192:	f043 0301 	orr.w	r3, r3, #1
 8005196:	6163      	str	r3, [r4, #20]
}
 8005198:	b003      	add	sp, #12
 800519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800519c:	40020400 	.word	0x40020400
 80051a0:	200006a8 	.word	0x200006a8

080051a4 <uart_init>:
 * This function configures the hardware resources
 * @param huart: UART handle pointer
 * @retval None
 */
void uart_init(USART_TypeDef * instance, uint32_t baud_rate)
{
 80051a4:	b570      	push	{r4, r5, r6, lr}
    switch ((uint32_t)instance)
 80051a6:	4b5b      	ldr	r3, [pc, #364]	; (8005314 <uart_init+0x170>)
{
 80051a8:	b08a      	sub	sp, #40	; 0x28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051aa:	2400      	movs	r4, #0
    switch ((uint32_t)instance)
 80051ac:	4298      	cmp	r0, r3
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ae:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80051b2:	e9cd 4406 	strd	r4, r4, [sp, #24]
{
 80051b6:	4605      	mov	r5, r0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b8:	9408      	str	r4, [sp, #32]
{
 80051ba:	460e      	mov	r6, r1
    switch ((uint32_t)instance)
 80051bc:	d066      	beq.n	800528c <uart_init+0xe8>
 80051be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c2:	4298      	cmp	r0, r3
 80051c4:	d022      	beq.n	800520c <uart_init+0x68>
        error_handler();
 80051c6:	f7fc fd2f 	bl	8001c28 <error_handler>

    uart_t * handle = uart_get_handle(instance);
    UART_HandleTypeDef * huart = &(handle->huart);

    if (instance == USART1)
 80051ca:	4b52      	ldr	r3, [pc, #328]	; (8005314 <uart_init+0x170>)
 80051cc:	429d      	cmp	r5, r3
 80051ce:	d021      	beq.n	8005214 <uart_init+0x70>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0x3, 0);
        HAL_NVIC_EnableIRQ(USART1_IRQn);
    }
    else if (instance == USART6)
 80051d0:	4b51      	ldr	r3, [pc, #324]	; (8005318 <uart_init+0x174>)
 80051d2:	429d      	cmp	r5, r3
 80051d4:	d05c      	beq.n	8005290 <uart_init+0xec>
        /* USART3 interrupt Init */
        HAL_NVIC_SetPriority(USART6_IRQn, 0x3, 0);
        HAL_NVIC_EnableIRQ(USART6_IRQn);
    }

    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	68d9      	ldr	r1, [r3, #12]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_RXNE);
 80051da:	f06f 0020 	mvn.w	r0, #32
    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051de:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051e2:	60d9      	str	r1, [r3, #12]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_RXNE);
 80051e4:	6018      	str	r0, [r3, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80051e6:	68d9      	ldr	r1, [r3, #12]
 80051e8:	f041 0120 	orr.w	r1, r1, #32
 80051ec:	60d9      	str	r1, [r3, #12]

    handle->tx_head = 0;
 80051ee:	2200      	movs	r2, #0
    handle->rx_head = 0;
    handle->tx_tail = 0;
    handle->rx_tail = 0;

    handle->timeout = UART_DEFAULT_TIMEOUT;
 80051f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    handle->tx_head = 0;
 80051f4:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    handle->timeout = UART_DEFAULT_TIMEOUT;
 80051f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    handle->rx_head = 0;
 80051fc:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    handle->tx_tail = 0;
 8005200:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    handle->rx_tail = 0;
 8005204:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
}
 8005208:	b00a      	add	sp, #40	; 0x28
 800520a:	bd70      	pop	{r4, r5, r6, pc}
    if (instance == USART1)
 800520c:	4b41      	ldr	r3, [pc, #260]	; (8005314 <uart_init+0x170>)
    switch ((uint32_t)instance)
 800520e:	4c43      	ldr	r4, [pc, #268]	; (800531c <uart_init+0x178>)
    if (instance == USART1)
 8005210:	429d      	cmp	r5, r3
 8005212:	d1dd      	bne.n	80051d0 <uart_init+0x2c>
        __HAL_RCC_USART1_CLK_ENABLE();
 8005214:	2500      	movs	r5, #0
 8005216:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800521a:	9500      	str	r5, [sp, #0]
 800521c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521e:	4840      	ldr	r0, [pc, #256]	; (8005320 <uart_init+0x17c>)
        __HAL_RCC_USART1_CLK_ENABLE();
 8005220:	f042 0210 	orr.w	r2, r2, #16
 8005224:	645a      	str	r2, [r3, #68]	; 0x44
 8005226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005228:	f002 0210 	and.w	r2, r2, #16
 800522c:	9200      	str	r2, [sp, #0]
 800522e:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8005230:	9501      	str	r5, [sp, #4]
 8005232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005234:	f042 0201 	orr.w	r2, r2, #1
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8005244:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005248:	2302      	movs	r3, #2
 800524a:	e9cd 2304 	strd	r2, r3, [sp, #16]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800524e:	2307      	movs	r3, #7
 8005250:	9308      	str	r3, [sp, #32]
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8005252:	2201      	movs	r2, #1
 8005254:	2303      	movs	r3, #3
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005256:	a904      	add	r1, sp, #16
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8005258:	e9cd 2306 	strd	r2, r3, [sp, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800525c:	f7fc ff2a 	bl	80020b4 <HAL_GPIO_Init>
        huart->Init.Mode = UART_MODE_TX_RX;
 8005260:	230c      	movs	r3, #12
        huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005262:	e9c4 6501 	strd	r6, r5, [r4, #4]
        huart->Init.Parity = UART_PARITY_NONE;
 8005266:	e9c4 5503 	strd	r5, r5, [r4, #12]
        huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800526a:	e9c4 3505 	strd	r3, r5, [r4, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800526e:	61e5      	str	r5, [r4, #28]
        if (HAL_UART_Init(huart) != HAL_OK)
 8005270:	4620      	mov	r0, r4
 8005272:	f7fe fdfd 	bl	8003e70 <HAL_UART_Init>
 8005276:	2800      	cmp	r0, #0
 8005278:	d145      	bne.n	8005306 <uart_init+0x162>
        HAL_NVIC_SetPriority(USART1_IRQn, 0x3, 0);
 800527a:	2200      	movs	r2, #0
 800527c:	2103      	movs	r1, #3
 800527e:	2025      	movs	r0, #37	; 0x25
 8005280:	f7fc fecc 	bl	800201c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005284:	2025      	movs	r0, #37	; 0x25
 8005286:	f7fc ff07 	bl	8002098 <HAL_NVIC_EnableIRQ>
 800528a:	e7a4      	b.n	80051d6 <uart_init+0x32>
    case (uint32_t)USART1: return &uart1_handle;
 800528c:	4c25      	ldr	r4, [pc, #148]	; (8005324 <uart_init+0x180>)
 800528e:	e79c      	b.n	80051ca <uart_init+0x26>
        __HAL_RCC_USART6_CLK_ENABLE();
 8005290:	2500      	movs	r5, #0
 8005292:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8005296:	9502      	str	r5, [sp, #8]
 8005298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529a:	4821      	ldr	r0, [pc, #132]	; (8005320 <uart_init+0x17c>)
        __HAL_RCC_USART6_CLK_ENABLE();
 800529c:	f042 0220 	orr.w	r2, r2, #32
 80052a0:	645a      	str	r2, [r3, #68]	; 0x44
 80052a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a4:	f002 0220 	and.w	r2, r2, #32
 80052a8:	9202      	str	r2, [sp, #8]
 80052aa:	9a02      	ldr	r2, [sp, #8]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ac:	9503      	str	r5, [sp, #12]
 80052ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	9303      	str	r3, [sp, #12]
 80052be:	9b03      	ldr	r3, [sp, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80052c0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80052c4:	2302      	movs	r3, #2
 80052c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
        GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80052ca:	2308      	movs	r3, #8
 80052cc:	9308      	str	r3, [sp, #32]
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80052ce:	2201      	movs	r2, #1
 80052d0:	2303      	movs	r3, #3
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d2:	a904      	add	r1, sp, #16
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80052d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d8:	f7fc feec 	bl	80020b4 <HAL_GPIO_Init>
        huart->Init.Mode = UART_MODE_TX_RX;
 80052dc:	230c      	movs	r3, #12
        huart->Init.WordLength = UART_WORDLENGTH_8B;
 80052de:	e9c4 6501 	strd	r6, r5, [r4, #4]
        huart->Init.Parity = UART_PARITY_NONE;
 80052e2:	e9c4 5503 	strd	r5, r5, [r4, #12]
        huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052e6:	e9c4 3505 	strd	r3, r5, [r4, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80052ea:	61e5      	str	r5, [r4, #28]
        if (HAL_UART_Init(huart) != HAL_OK)
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7fe fdbf 	bl	8003e70 <HAL_UART_Init>
 80052f2:	b958      	cbnz	r0, 800530c <uart_init+0x168>
        HAL_NVIC_SetPriority(USART6_IRQn, 0x3, 0);
 80052f4:	2047      	movs	r0, #71	; 0x47
 80052f6:	2200      	movs	r2, #0
 80052f8:	2103      	movs	r1, #3
 80052fa:	f7fc fe8f 	bl	800201c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART6_IRQn);
 80052fe:	2047      	movs	r0, #71	; 0x47
 8005300:	f7fc feca 	bl	8002098 <HAL_NVIC_EnableIRQ>
 8005304:	e767      	b.n	80051d6 <uart_init+0x32>
            error_handler();
 8005306:	f7fc fc8f 	bl	8001c28 <error_handler>
 800530a:	e7b6      	b.n	800527a <uart_init+0xd6>
            error_handler();
 800530c:	f7fc fc8c 	bl	8001c28 <error_handler>
 8005310:	e7f0      	b.n	80052f4 <uart_init+0x150>
 8005312:	bf00      	nop
 8005314:	40011000 	.word	0x40011000
 8005318:	40011400 	.word	0x40011400
 800531c:	200002f4 	.word	0x200002f4
 8005320:	40020000 	.word	0x40020000
 8005324:	200000a4 	.word	0x200000a4

08005328 <uart_write>:

uint16_t uart_write(USART_TypeDef * instance, const uint8_t * bytes, uint16_t len)
{
    uint16_t n = 0;

    while (len--)
 8005328:	2a00      	cmp	r2, #0
 800532a:	d03c      	beq.n	80053a6 <uart_write+0x7e>
{
 800532c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    switch ((uint32_t)instance)
 8005330:	f8df a084 	ldr.w	sl, [pc, #132]	; 80053b8 <uart_write+0x90>
    case (uint32_t)USART1: return &uart1_handle;
 8005334:	f8df b084 	ldr.w	fp, [pc, #132]	; 80053bc <uart_write+0x94>
    switch ((uint32_t)instance)
 8005338:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80053c0 <uart_write+0x98>
 800533c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80053c4 <uart_write+0x9c>
 8005340:	1e4e      	subs	r6, r1, #1
    uint16_t n = 0;
 8005342:	2400      	movs	r4, #0
    switch ((uint32_t)instance)
 8005344:	4550      	cmp	r0, sl
 8005346:	d125      	bne.n	8005394 <uart_write+0x6c>
    case (uint32_t)USART1: return &uart1_handle;
 8005348:	4659      	mov	r1, fp

uint16_t uart_write_byte(USART_TypeDef * instance, uint8_t c)
{
    uart_t * handle = uart_get_handle(instance);

    uint16_t curr_head = handle->tx_head;
 800534a:	f8b1 e046 	ldrh.w	lr, [r1, #70]	; 0x46
    uint16_t curr_tail = handle->tx_tail;
 800534e:	f8b1 3048 	ldrh.w	r3, [r1, #72]	; 0x48
        if (uart_write_byte(instance, *bytes++)) n++;
 8005352:	f816 7f01 	ldrb.w	r7, [r6, #1]!

    /* If the buffer and the data register is empty, just write the byte
     * to the data register and be done. This shortcut helps
     * significantly improve the effective datarate at high (>
     * 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.*/
    if (curr_head == curr_tail && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE) != RESET)
 8005356:	680d      	ldr	r5, [r1, #0]
    uint16_t curr_head = handle->tx_head;
 8005358:	fa1f fe8e 	uxth.w	lr, lr
    uint16_t curr_tail = handle->tx_tail;
 800535c:	b29b      	uxth	r3, r3
    if (curr_head == curr_tail && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE) != RESET)
 800535e:	459e      	cmp	lr, r3
 8005360:	d01c      	beq.n	800539c <uart_write+0x74>
    {
        instance->DR = c;
        return 1;
    }

    uint16_t i = (curr_head + 1) % UART_MAX_TX_SIZE;
 8005362:	f10e 0c01 	add.w	ip, lr, #1
 8005366:	fa5f fc8c 	uxtb.w	ip, ip

    /* If the output buffer is full, there's nothing for it other than to
       wait for the interrupt handler to empty it a bit */
    while (i == handle->tx_tail) {    }
 800536a:	f8b1 3048 	ldrh.w	r3, [r1, #72]	; 0x48
 800536e:	b29b      	uxth	r3, r3
 8005370:	459c      	cmp	ip, r3
 8005372:	d0fa      	beq.n	800536a <uart_write+0x42>

    handle->tx_buf[curr_head] = c;
 8005374:	448e      	add	lr, r1
 8005376:	f88e 704e 	strb.w	r7, [lr, #78]	; 0x4e
    handle->tx_head = i;
 800537a:	f8a1 c046 	strh.w	ip, [r1, #70]	; 0x46

    __HAL_UART_ENABLE_IT(&handle->huart, UART_IT_TXE);
 800537e:	68eb      	ldr	r3, [r5, #12]
 8005380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005384:	60eb      	str	r3, [r5, #12]
        if (uart_write_byte(instance, *bytes++)) n++;
 8005386:	3401      	adds	r4, #1
 8005388:	b2a4      	uxth	r4, r4
    while (len--)
 800538a:	42a2      	cmp	r2, r4
 800538c:	d1da      	bne.n	8005344 <uart_write+0x1c>
}
 800538e:	4610      	mov	r0, r2
 8005390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((uint32_t)instance)
 8005394:	4548      	cmp	r0, r9
 8005396:	d108      	bne.n	80053aa <uart_write+0x82>
 8005398:	4641      	mov	r1, r8
 800539a:	e7d6      	b.n	800534a <uart_write+0x22>
    if (curr_head == curr_tail && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE) != RESET)
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	061b      	lsls	r3, r3, #24
 80053a0:	d5df      	bpl.n	8005362 <uart_write+0x3a>
        instance->DR = c;
 80053a2:	6047      	str	r7, [r0, #4]
        return 1;
 80053a4:	e7ef      	b.n	8005386 <uart_write+0x5e>
}
 80053a6:	4610      	mov	r0, r2
 80053a8:	4770      	bx	lr
        error_handler();
 80053aa:	f7fc fc3d 	bl	8001c28 <error_handler>
    uint16_t curr_head = handle->tx_head;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b4:	deff      	udf	#255	; 0xff
 80053b6:	bf00      	nop
 80053b8:	40011000 	.word	0x40011000
 80053bc:	200000a4 	.word	0x200000a4
 80053c0:	40011400 	.word	0x40011400
 80053c4:	200002f4 	.word	0x200002f4

080053c8 <USART1_IRQHandler>:
    handle->timeout = timeout;
}

static void generic_usart_handler(uart_t * handle)
{
    USART_TypeDef * instance = handle->huart.Instance;
 80053c8:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <USART1_IRQHandler+0xac>)
        }
    }
}

void USART1_IRQHandler(void)
{
 80053ca:	b410      	push	{r4}
    USART_TypeDef * instance = handle->huart.Instance;
 80053cc:	6813      	ldr	r3, [r2, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 80053ce:	68d9      	ldr	r1, [r3, #12]
 80053d0:	068c      	lsls	r4, r1, #26
{
 80053d2:	b083      	sub	sp, #12
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 80053d4:	d53a      	bpl.n	800544c <USART1_IRQHandler+0x84>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_RXNE))
 80053d6:	6819      	ldr	r1, [r3, #0]
 80053d8:	0688      	lsls	r0, r1, #26
 80053da:	d537      	bpl.n	800544c <USART1_IRQHandler+0x84>
        unsigned char c = instance->DR & 0xFF;
 80053dc:	685c      	ldr	r4, [r3, #4]
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 80053de:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
        if (i != handle->rx_tail) {
 80053e2:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 80053e6:	3101      	adds	r1, #1
 80053e8:	b2c9      	uxtb	r1, r1
        if (i != handle->rx_tail) {
 80053ea:	b280      	uxth	r0, r0
 80053ec:	4281      	cmp	r1, r0
 80053ee:	d007      	beq.n	8005400 <USART1_IRQHandler+0x38>
            handle->rx_buf[handle->rx_head] = c;
 80053f0:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
            handle->rx_head = i;
 80053f4:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
            handle->rx_buf[handle->rx_head] = c;
 80053f8:	fa12 f180 	uxtah	r1, r2, r0
        unsigned char c = instance->DR & 0xFF;
 80053fc:	f881 414e 	strb.w	r4, [r1, #334]	; 0x14e
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 8005400:	2100      	movs	r1, #0
 8005402:	9100      	str	r1, [sp, #0]
 8005404:	6819      	ldr	r1, [r3, #0]
 8005406:	9100      	str	r1, [sp, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
 800540a:	9100      	str	r1, [sp, #0]
 800540c:	9900      	ldr	r1, [sp, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_TXE)
 800540e:	68d9      	ldr	r1, [r3, #12]
 8005410:	0608      	lsls	r0, r1, #24
 8005412:	d517      	bpl.n	8005444 <USART1_IRQHandler+0x7c>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE))
 8005414:	6819      	ldr	r1, [r3, #0]
 8005416:	0609      	lsls	r1, r1, #24
 8005418:	d514      	bpl.n	8005444 <USART1_IRQHandler+0x7c>
        unsigned char c = handle->tx_buf[handle->tx_tail];
 800541a:	f8b2 0048 	ldrh.w	r0, [r2, #72]	; 0x48
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 800541e:	f8b2 1048 	ldrh.w	r1, [r2, #72]	; 0x48
        unsigned char c = handle->tx_buf[handle->tx_tail];
 8005422:	fa12 f080 	uxtah	r0, r2, r0
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 8005426:	3101      	adds	r1, #1
 8005428:	b2c9      	uxtb	r1, r1
        unsigned char c = handle->tx_buf[handle->tx_tail];
 800542a:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 800542e:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
        instance->DR = c;
 8005432:	6058      	str	r0, [r3, #4]
        if (handle->tx_head == handle->tx_tail) {
 8005434:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
 8005438:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 800543c:	b289      	uxth	r1, r1
 800543e:	b292      	uxth	r2, r2
 8005440:	4291      	cmp	r1, r2
 8005442:	d011      	beq.n	8005468 <USART1_IRQHandler+0xa0>
    uart_t * handle = uart_get_handle(USART1);
    generic_usart_handler(handle);
}
 8005444:	b003      	add	sp, #12
 8005446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800544a:	4770      	bx	lr
    else if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	0689      	lsls	r1, r1, #26
 8005450:	d5dd      	bpl.n	800540e <USART1_IRQHandler+0x46>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_ORE))
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	070c      	lsls	r4, r1, #28
 8005456:	d5da      	bpl.n	800540e <USART1_IRQHandler+0x46>
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 8005458:	2100      	movs	r1, #0
 800545a:	9101      	str	r1, [sp, #4]
 800545c:	6819      	ldr	r1, [r3, #0]
 800545e:	9101      	str	r1, [sp, #4]
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	9101      	str	r1, [sp, #4]
 8005464:	9901      	ldr	r1, [sp, #4]
 8005466:	e7d2      	b.n	800540e <USART1_IRQHandler+0x46>
            __HAL_UART_DISABLE_IT(&handle->huart, UART_IT_TXE);
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800546e:	60da      	str	r2, [r3, #12]
}
 8005470:	e7e8      	b.n	8005444 <USART1_IRQHandler+0x7c>
 8005472:	bf00      	nop
 8005474:	200000a4 	.word	0x200000a4

08005478 <USART6_IRQHandler>:
    USART_TypeDef * instance = handle->huart.Instance;
 8005478:	4a2a      	ldr	r2, [pc, #168]	; (8005524 <USART6_IRQHandler+0xac>)

void USART6_IRQHandler(void)
{
 800547a:	b410      	push	{r4}
    USART_TypeDef * instance = handle->huart.Instance;
 800547c:	6813      	ldr	r3, [r2, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 800547e:	68d9      	ldr	r1, [r3, #12]
 8005480:	068c      	lsls	r4, r1, #26
{
 8005482:	b083      	sub	sp, #12
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 8005484:	d53a      	bpl.n	80054fc <USART6_IRQHandler+0x84>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_RXNE))
 8005486:	6819      	ldr	r1, [r3, #0]
 8005488:	0688      	lsls	r0, r1, #26
 800548a:	d537      	bpl.n	80054fc <USART6_IRQHandler+0x84>
        unsigned char c = instance->DR & 0xFF;
 800548c:	685c      	ldr	r4, [r3, #4]
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 800548e:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
        if (i != handle->rx_tail) {
 8005492:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 8005496:	3101      	adds	r1, #1
 8005498:	b2c9      	uxtb	r1, r1
        if (i != handle->rx_tail) {
 800549a:	b280      	uxth	r0, r0
 800549c:	4281      	cmp	r1, r0
 800549e:	d007      	beq.n	80054b0 <USART6_IRQHandler+0x38>
            handle->rx_buf[handle->rx_head] = c;
 80054a0:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
            handle->rx_head = i;
 80054a4:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
            handle->rx_buf[handle->rx_head] = c;
 80054a8:	fa12 f180 	uxtah	r1, r2, r0
        unsigned char c = instance->DR & 0xFF;
 80054ac:	f881 414e 	strb.w	r4, [r1, #334]	; 0x14e
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 80054b0:	2100      	movs	r1, #0
 80054b2:	9100      	str	r1, [sp, #0]
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	9100      	str	r1, [sp, #0]
 80054b8:	6859      	ldr	r1, [r3, #4]
 80054ba:	9100      	str	r1, [sp, #0]
 80054bc:	9900      	ldr	r1, [sp, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_TXE)
 80054be:	68d9      	ldr	r1, [r3, #12]
 80054c0:	0608      	lsls	r0, r1, #24
 80054c2:	d517      	bpl.n	80054f4 <USART6_IRQHandler+0x7c>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE))
 80054c4:	6819      	ldr	r1, [r3, #0]
 80054c6:	0609      	lsls	r1, r1, #24
 80054c8:	d514      	bpl.n	80054f4 <USART6_IRQHandler+0x7c>
        unsigned char c = handle->tx_buf[handle->tx_tail];
 80054ca:	f8b2 0048 	ldrh.w	r0, [r2, #72]	; 0x48
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 80054ce:	f8b2 1048 	ldrh.w	r1, [r2, #72]	; 0x48
        unsigned char c = handle->tx_buf[handle->tx_tail];
 80054d2:	fa12 f080 	uxtah	r0, r2, r0
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 80054d6:	3101      	adds	r1, #1
 80054d8:	b2c9      	uxtb	r1, r1
        unsigned char c = handle->tx_buf[handle->tx_tail];
 80054da:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 80054de:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
        instance->DR = c;
 80054e2:	6058      	str	r0, [r3, #4]
        if (handle->tx_head == handle->tx_tail) {
 80054e4:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
 80054e8:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 80054ec:	b289      	uxth	r1, r1
 80054ee:	b292      	uxth	r2, r2
 80054f0:	4291      	cmp	r1, r2
 80054f2:	d011      	beq.n	8005518 <USART6_IRQHandler+0xa0>
    uart_t * handle = uart_get_handle(USART6);
    generic_usart_handler(handle);
}
 80054f4:	b003      	add	sp, #12
 80054f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054fa:	4770      	bx	lr
    else if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 80054fc:	68d9      	ldr	r1, [r3, #12]
 80054fe:	0689      	lsls	r1, r1, #26
 8005500:	d5dd      	bpl.n	80054be <USART6_IRQHandler+0x46>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_ORE))
 8005502:	6819      	ldr	r1, [r3, #0]
 8005504:	070c      	lsls	r4, r1, #28
 8005506:	d5da      	bpl.n	80054be <USART6_IRQHandler+0x46>
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 8005508:	2100      	movs	r1, #0
 800550a:	9101      	str	r1, [sp, #4]
 800550c:	6819      	ldr	r1, [r3, #0]
 800550e:	9101      	str	r1, [sp, #4]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	9101      	str	r1, [sp, #4]
 8005514:	9901      	ldr	r1, [sp, #4]
 8005516:	e7d2      	b.n	80054be <USART6_IRQHandler+0x46>
            __HAL_UART_DISABLE_IT(&handle->huart, UART_IT_TXE);
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800551e:	60da      	str	r2, [r3, #12]
}
 8005520:	e7e8      	b.n	80054f4 <USART6_IRQHandler+0x7c>
 8005522:	bf00      	nop
 8005524:	200002f4 	.word	0x200002f4

08005528 <Set_Font>:
		#include "stdbool.h"
		
		static sFONT *Current_Font;
		void Set_Font (sFONT *fonts)
		{
			Current_Font = fonts;
 8005528:	4b01      	ldr	r3, [pc, #4]	; (8005530 <Set_Font+0x8>)
 800552a:	6018      	str	r0, [r3, #0]
		}
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	200008c0 	.word	0x200008c0

08005534 <set_window>:
			__asm("nop");
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
		}
		
		void set_window(u16 x1, u16 x2, u16 y1, u16 y2)
		{
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005538:	4f2e      	ldr	r7, [pc, #184]	; (80055f4 <set_window+0xc0>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800553a:	4d2f      	ldr	r5, [pc, #188]	; (80055f8 <set_window+0xc4>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800553c:	4c2f      	ldr	r4, [pc, #188]	; (80055fc <set_window+0xc8>)
		{
 800553e:	469c      	mov	ip, r3
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005540:	f44f 7680 	mov.w	r6, #256	; 0x100
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005544:	232a      	movs	r3, #42	; 0x2a
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005546:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800554a:	617b      	str	r3, [r7, #20]
		{
 800554c:	4688      	mov	r8, r1
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800554e:	61ae      	str	r6, [r5, #24]
		{
 8005550:	4696      	mov	lr, r2
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005552:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8005556:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005558:	f44f 4960 	mov.w	r9, #57344	; 0xe000
			write_cmd(0x2a); 															//SET page address
			write_data((x1)>>8); 													//SET start page address=0
 800555c:	0a03      	lsrs	r3, r0, #8
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800555e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005562:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005566:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800556a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800556c:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800556e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005570:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8005572:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005574:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005578:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800557a:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800557c:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800557e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005580:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8005582:	bf00      	nop
			write_data(x1);
			write_data((x2)>>8); 													//SET end page address=800
 8005584:	ea4f 2018 	mov.w	r0, r8, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005588:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800558a:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800558c:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800558e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005590:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8005592:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005594:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005596:	f8c7 8014 	str.w	r8, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800559a:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800559c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800559e:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80055a0:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80055a2:	202b      	movs	r0, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80055a4:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80055a6:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80055a8:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80055aa:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80055ae:	bf00      	nop
			write_data(x2);

			write_cmd(0x2b); 															//SET column address
			write_data((y1)>>8); 													//SET start column address=0
 80055b0:	ea4f 201e 	mov.w	r0, lr, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80055b4:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80055b8:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80055ba:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80055bc:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80055be:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80055c0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80055c2:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80055c4:	f8c7 e014 	str.w	lr, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80055c8:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80055ca:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80055cc:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80055ce:	bf00      	nop
			write_data(y1);
			write_data((y2)>>8); 													//SET end column address=480
 80055d0:	ea4f 201c 	mov.w	r0, ip, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80055d4:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80055d6:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80055d8:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80055da:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80055dc:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80055de:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80055e0:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80055e2:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80055e6:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80055e8:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80055ea:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80055ec:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80055ee:	61a3      	str	r3, [r4, #24]
			write_data(y2); 
		}
 80055f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f4:	40020000 	.word	0x40020000
 80055f8:	40020400 	.word	0x40020400
 80055fc:	40020800 	.word	0x40020800

08005600 <fill_screen>:
		}
		
		void fill_screen(u32 color)
		{
			register u32 i;
			set_window(0,800,0,480);
 8005600:	2200      	movs	r2, #0
		{
 8005602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			set_window(0,800,0,480);
 8005606:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800560a:	4c1c      	ldr	r4, [pc, #112]	; (800567c <fill_screen+0x7c>)
		{
 800560c:	4680      	mov	r8, r0
			set_window(0,800,0,480);
 800560e:	f44f 7148 	mov.w	r1, #800	; 0x320
 8005612:	4610      	mov	r0, r2
 8005614:	f7ff ff8e 	bl	8005534 <set_window>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005618:	4a19      	ldr	r2, [pc, #100]	; (8005680 <fill_screen+0x80>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800561a:	4b1a      	ldr	r3, [pc, #104]	; (8005684 <fill_screen+0x84>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800561c:	212c      	movs	r1, #44	; 0x2c
 800561e:	6161      	str	r1, [r4, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005620:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005628:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800562a:	6198      	str	r0, [r3, #24]
			__asm("nop");
 800562c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800562e:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8005632:	6198      	str	r0, [r3, #24]
			write_data((color)>>8);
 8005634:	4814      	ldr	r0, [pc, #80]	; (8005688 <fill_screen+0x88>)
			write_data((color)>>16);
 8005636:	ea4f 4e18 	mov.w	lr, r8, lsr #16
			write_data((color)>>8);
 800563a:	ea4f 2c18 	mov.w	ip, r8, lsr #8
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800563e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005642:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005646:	f44f 4520 	mov.w	r5, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800564a:	f8c4 e014 	str.w	lr, [r4, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800564e:	619f      	str	r7, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005650:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005652:	619e      	str	r6, [r3, #24]
			__asm("nop");
 8005654:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005656:	619d      	str	r5, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005658:	f8c4 c014 	str.w	ip, [r4, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800565c:	619f      	str	r7, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800565e:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005660:	619e      	str	r6, [r3, #24]
			__asm("nop");
 8005662:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005664:	619d      	str	r5, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005666:	f8c4 8014 	str.w	r8, [r4, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800566a:	619f      	str	r7, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800566c:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800566e:	619e      	str	r6, [r3, #24]
			__asm("nop");
 8005670:	bf00      	nop
			write_cmd(0x2c);
			for(i=0;i<801*481;i++)
 8005672:	3801      	subs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005674:	619d      	str	r5, [r3, #24]
			for(i=0;i<801*481;i++)
 8005676:	d1e8      	bne.n	800564a <fill_screen+0x4a>
					add_color(color);
		}
 8005678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800567c:	40020000 	.word	0x40020000
 8005680:	40020400 	.word	0x40020400
 8005684:	40020800 	.word	0x40020800
 8005688:	0005e101 	.word	0x0005e101

0800568c <fill_area>:
		
		void fill_area(u32 sx, u32 ex, u32 sy,u32 ey,u32 color)
		{
 800568c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005690:	4d24      	ldr	r5, [pc, #144]	; (8005724 <fill_area+0x98>)
		{
 8005692:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005696:	4e24      	ldr	r6, [pc, #144]	; (8005728 <fill_area+0x9c>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005698:	4c24      	ldr	r4, [pc, #144]	; (800572c <fill_area+0xa0>)
		{
 800569a:	4683      	mov	fp, r0
 800569c:	4689      	mov	r9, r1
 800569e:	4692      	mov	sl, r2
 80056a0:	461f      	mov	r7, r3
			register int i;
			set_window(sx, ex, sy, ey);
 80056a2:	b292      	uxth	r2, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	b289      	uxth	r1, r1
 80056a8:	b280      	uxth	r0, r0
 80056aa:	f7ff ff43 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80056ae:	232c      	movs	r3, #44	; 0x2c
 80056b0:	616b      	str	r3, [r5, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80056b2:	f44f 7080 	mov.w	r0, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80056b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80056ba:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80056bc:	61a3      	str	r3, [r4, #24]
			__asm("nop");
 80056be:	bf00      	nop
			write_cmd(0x2c);
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 80056c0:	3701      	adds	r7, #1
 80056c2:	eba9 090b 	sub.w	r9, r9, fp
 80056c6:	eba7 070a 	sub.w	r7, r7, sl
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80056ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 80056ce:	fb09 7707 	mla	r7, r9, r7, r7
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80056d2:	61a3      	str	r3, [r4, #24]
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 80056d4:	b327      	cbz	r7, 8005720 <fill_area+0x94>
			write_data((color)>>16);
 80056d6:	ea4f 4918 	mov.w	r9, r8, lsr #16
			write_data((color)>>8);
 80056da:	ea4f 2e18 	mov.w	lr, r8, lsr #8
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 80056de:	f04f 0c00 	mov.w	ip, #0
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80056e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80056e6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80056ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80056ee:	f8c5 9014 	str.w	r9, [r5, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80056f2:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80056f4:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80056f6:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 80056f8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80056fa:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80056fc:	f8c5 e014 	str.w	lr, [r5, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005700:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005702:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005704:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 8005706:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005708:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800570a:	f8c5 8014 	str.w	r8, [r5, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800570e:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005710:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005712:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 8005714:	bf00      	nop
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 8005716:	f10c 0c01 	add.w	ip, ip, #1
 800571a:	45bc      	cmp	ip, r7
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800571c:	61a3      	str	r3, [r4, #24]
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 800571e:	d1e6      	bne.n	80056ee <fill_area+0x62>
				add_color(color);
		}
 8005720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005724:	40020000 	.word	0x40020000
 8005728:	40020400 	.word	0x40020400
 800572c:	40020800 	.word	0x40020800

08005730 <set_pixel>:
		{
				fill_screen(WHITE);
		}
		
		void set_pixel(u16 x, u16 y, u32 color)
		{
 8005730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005734:	4e3f      	ldr	r6, [pc, #252]	; (8005834 <set_pixel+0x104>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005736:	4c40      	ldr	r4, [pc, #256]	; (8005838 <set_pixel+0x108>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005738:	232a      	movs	r3, #42	; 0x2a
 800573a:	6173      	str	r3, [r6, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800573c:	4b3f      	ldr	r3, [pc, #252]	; (800583c <set_pixel+0x10c>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800573e:	f44f 7580 	mov.w	r5, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005742:	f04f 4960 	mov.w	r9, #3758096384	; 0xe0000000
		{
 8005746:	4686      	mov	lr, r0
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005748:	61a5      	str	r5, [r4, #24]
		{
 800574a:	4608      	mov	r0, r1
 800574c:	4694      	mov	ip, r2
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800574e:	f8c3 9018 	str.w	r9, [r3, #24]
			__asm("nop");
 8005752:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005754:	f44f 4860 	mov.w	r8, #57344	; 0xe000
			write_data((x1)>>8); 													//SET start page address=0
 8005758:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800575c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005760:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005764:	f8c3 8018 	str.w	r8, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005768:	f8c6 a014 	str.w	sl, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800576c:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800576e:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005770:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8005772:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005774:	f44f 4720 	mov.w	r7, #40960	; 0xa000
 8005778:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800577a:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800577e:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005780:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005782:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8005784:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005786:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005788:	f8c6 a014 	str.w	sl, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800578c:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800578e:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005790:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8005792:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005794:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005796:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800579a:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800579c:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800579e:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80057a0:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80057a2:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80057a6:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80057a8:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80057ac:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80057ae:	f8c3 9018 	str.w	r9, [r3, #24]
			__asm("nop");
 80057b2:	bf00      	nop
			write_data((y1)>>8); 													//SET start column address=0
 80057b4:	ea4f 2e10 	mov.w	lr, r0, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80057b8:	f8c3 8018 	str.w	r8, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80057bc:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80057c0:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80057c2:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80057c4:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80057c6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80057c8:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80057ca:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80057cc:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80057ce:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80057d0:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80057d2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80057d4:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80057d6:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80057da:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80057dc:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80057de:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80057e0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80057e2:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80057e4:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80057e6:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80057e8:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80057ea:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80057ec:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80057ee:	202c      	movs	r0, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80057f0:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80057f2:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80057f4:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80057f6:	f8c3 9018 	str.w	r9, [r3, #24]
			__asm("nop");
 80057fa:	bf00      	nop
			write_data((color)>>16);
 80057fc:	ea4f 401c 	mov.w	r0, ip, lsr #16
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005800:	f8c3 8018 	str.w	r8, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005804:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005806:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005808:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800580a:	619a      	str	r2, [r3, #24]
			__asm("nop");
 800580c:	bf00      	nop
			write_data((color)>>8);
 800580e:	ea4f 201c 	mov.w	r0, ip, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005812:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005814:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005816:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005818:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800581a:	619a      	str	r2, [r3, #24]
			__asm("nop");
 800581c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800581e:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005820:	f8c6 c014 	str.w	ip, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005824:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005826:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005828:	619a      	str	r2, [r3, #24]
			__asm("nop");
 800582a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800582c:	619f      	str	r7, [r3, #24]
			set_window(x, x, y, y);
			write_cmd(0x2c);														// memory write start 
			add_color(color);
		}
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	bf00      	nop
 8005834:	40020000 	.word	0x40020000
 8005838:	40020400 	.word	0x40020400
 800583c:	40020800 	.word	0x40020800

08005840 <draw_hl>:
		
		
		void draw_hl(s16 x, s16 y, s16 l, u32 color)
		{
 8005840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005844:	b087      	sub	sp, #28
			register int i;
			for (i=0; i<= l; i++)
 8005846:	2a00      	cmp	r2, #0
		{
 8005848:	9301      	str	r3, [sp, #4]
			for (i=0; i<= l; i++)
 800584a:	f2c0 808d 	blt.w	8005968 <draw_hl+0x128>
 800584e:	461c      	mov	r4, r3
				set_pixel(x+i, y, color);
 8005850:	fa1f fb81 	uxth.w	fp, r1
			write_data((y1)>>8); 													//SET start column address=0
 8005854:	f3c1 2a07 	ubfx	sl, r1, #8, #8
				set_pixel(x+i, y, color);
 8005858:	b281      	uxth	r1, r0
 800585a:	9105      	str	r1, [sp, #20]
 800585c:	1c51      	adds	r1, r2, #1
			write_data((color)>>16);
 800585e:	4622      	mov	r2, r4
			write_data((color)>>8);
 8005860:	0a12      	lsrs	r2, r2, #8
 8005862:	9104      	str	r1, [sp, #16]
			write_data((color)>>16);
 8005864:	0c24      	lsrs	r4, r4, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005866:	4842      	ldr	r0, [pc, #264]	; (8005970 <draw_hl+0x130>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005868:	4942      	ldr	r1, [pc, #264]	; (8005974 <draw_hl+0x134>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800586a:	4b43      	ldr	r3, [pc, #268]	; (8005978 <draw_hl+0x138>)
			write_data((color)>>8);
 800586c:	9203      	str	r2, [sp, #12]
			write_data((color)>>16);
 800586e:	9402      	str	r4, [sp, #8]
			for (i=0; i<= l; i++)
 8005870:	f04f 0c00 	mov.w	ip, #0
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005874:	f44f 7280 	mov.w	r2, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005878:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800587c:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005880:	242a      	movs	r4, #42	; 0x2a
 8005882:	6144      	str	r4, [r0, #20]
				set_pixel(x+i, y, color);
 8005884:	9c05      	ldr	r4, [sp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005886:	618a      	str	r2, [r1, #24]
				set_pixel(x+i, y, color);
 8005888:	eb04 070c 	add.w	r7, r4, ip
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800588c:	f8c3 8018 	str.w	r8, [r3, #24]
				set_pixel(x+i, y, color);
 8005890:	b2bf      	uxth	r7, r7
			__asm("nop");
 8005892:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005894:	f44f 4680 	mov.w	r6, #16384	; 0x4000
			write_data((x1)>>8); 													//SET start page address=0
 8005898:	ea4f 2917 	mov.w	r9, r7, lsr #8
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800589c:	f04f 4520 	mov.w	r5, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80058a0:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80058a4:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80058a8:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80058aa:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80058ac:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80058ae:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80058b0:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 80058b4:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80058b6:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80058b8:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80058ba:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80058bc:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80058be:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80058c0:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80058c2:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80058c6:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80058c8:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80058ca:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80058cc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80058ce:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80058d0:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80058d2:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80058d4:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80058d6:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80058d8:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80058da:	272b      	movs	r7, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80058dc:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80058de:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80058e0:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80058e2:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 80058e6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80058e8:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80058ec:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80058f0:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80058f2:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80058f4:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80058f6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80058f8:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80058fa:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80058fe:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005900:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005902:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005904:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005906:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005908:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800590c:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800590e:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005910:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005912:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005914:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005916:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800591a:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800591c:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800591e:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005920:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005922:	272c      	movs	r7, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005924:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005926:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005928:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800592a:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 800592e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005930:	9f02      	ldr	r7, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005932:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005936:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005938:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800593a:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800593c:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800593e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005940:	9f03      	ldr	r7, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005942:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005944:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005946:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005948:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800594a:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800594c:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800594e:	9f01      	ldr	r7, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005950:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005952:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005954:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005956:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005958:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800595a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800595c:	619c      	str	r4, [r3, #24]
			for (i=0; i<= l; i++)
 800595e:	9c04      	ldr	r4, [sp, #16]
 8005960:	f10c 0c01 	add.w	ip, ip, #1
 8005964:	45a4      	cmp	ip, r4
 8005966:	d18b      	bne.n	8005880 <draw_hl+0x40>

		}
 8005968:	b007      	add	sp, #28
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	bf00      	nop
 8005970:	40020000 	.word	0x40020000
 8005974:	40020400 	.word	0x40020400
 8005978:	40020800 	.word	0x40020800

0800597c <draw_vl>:
		
		void draw_vl(s16 x, s16 y, s16 l,u32 color)
		{
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	b087      	sub	sp, #28
			register int i;
			for (i=0; i<= l; i++)
 8005982:	2a00      	cmp	r2, #0
		{
 8005984:	9301      	str	r3, [sp, #4]
			for (i=0; i<= l; i++)
 8005986:	f2c0 808f 	blt.w	8005aa8 <draw_vl+0x12c>
 800598a:	461c      	mov	r4, r3
				set_pixel(x, y+i, color);
 800598c:	b289      	uxth	r1, r1
 800598e:	9105      	str	r1, [sp, #20]
 8005990:	1c51      	adds	r1, r2, #1
			write_data((color)>>16);
 8005992:	4622      	mov	r2, r4
			write_data((color)>>8);
 8005994:	0a12      	lsrs	r2, r2, #8
				set_pixel(x, y+i, color);
 8005996:	fa1f fb80 	uxth.w	fp, r0
			write_data((x1)>>8); 													//SET start page address=0
 800599a:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 800599e:	9104      	str	r1, [sp, #16]
			write_data((color)>>16);
 80059a0:	0c24      	lsrs	r4, r4, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80059a2:	4843      	ldr	r0, [pc, #268]	; (8005ab0 <draw_vl+0x134>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80059a4:	4943      	ldr	r1, [pc, #268]	; (8005ab4 <draw_vl+0x138>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80059a6:	4b44      	ldr	r3, [pc, #272]	; (8005ab8 <draw_vl+0x13c>)
			write_data((color)>>8);
 80059a8:	9203      	str	r2, [sp, #12]
			write_data((color)>>16);
 80059aa:	9402      	str	r4, [sp, #8]
			for (i=0; i<= l; i++)
 80059ac:	f04f 0c00 	mov.w	ip, #0
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80059b0:	f44f 7280 	mov.w	r2, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80059b4:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80059b8:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80059bc:	242a      	movs	r4, #42	; 0x2a
 80059be:	6144      	str	r4, [r0, #20]
				set_pixel(x, y+i, color);
 80059c0:	9c05      	ldr	r4, [sp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80059c2:	618a      	str	r2, [r1, #24]
				set_pixel(x, y+i, color);
 80059c4:	eb04 070c 	add.w	r7, r4, ip
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80059c8:	f8c3 8018 	str.w	r8, [r3, #24]
				set_pixel(x, y+i, color);
 80059cc:	b2bf      	uxth	r7, r7
			__asm("nop");
 80059ce:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80059d0:	f44f 4680 	mov.w	r6, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80059d4:	f04f 4520 	mov.w	r5, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80059d8:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80059dc:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80059e0:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80059e2:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80059e4:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80059e6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80059e8:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 80059ec:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80059ee:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80059f2:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80059f4:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80059f6:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80059f8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80059fa:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80059fc:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a00:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a02:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a04:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a06:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a08:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a0a:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a0e:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a10:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a12:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a14:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005a16:	f04f 092b 	mov.w	r9, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a1a:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005a1c:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a20:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a22:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 8005a26:	bf00      	nop
			write_data((y1)>>8); 													//SET start column address=0
 8005a28:	ea4f 2917 	mov.w	r9, r7, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a2c:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a30:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a34:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a36:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a38:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a3a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a3c:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a3e:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a40:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a42:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a44:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a46:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a48:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a4a:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a4e:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a50:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a52:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a54:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a56:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a58:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a5a:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a5c:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a5e:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a60:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005a62:	272c      	movs	r7, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a64:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005a66:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a68:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a6a:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 8005a6e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a70:	9f02      	ldr	r7, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a72:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a76:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a78:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a7a:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a7c:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a7e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a80:	9f03      	ldr	r7, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a82:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a84:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a86:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a88:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a8a:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a8c:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a8e:	9f01      	ldr	r7, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a90:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005a92:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005a94:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005a96:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005a98:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8005a9a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005a9c:	619c      	str	r4, [r3, #24]
			for (i=0; i<= l; i++)
 8005a9e:	9c04      	ldr	r4, [sp, #16]
 8005aa0:	f10c 0c01 	add.w	ip, ip, #1
 8005aa4:	45a4      	cmp	ip, r4
 8005aa6:	d189      	bne.n	80059bc <draw_vl+0x40>
		}
 8005aa8:	b007      	add	sp, #28
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	bf00      	nop
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020400 	.word	0x40020400
 8005ab8:	40020800 	.word	0x40020800

08005abc <draw_rect>:
		
		void draw_rect(u32 x1, u32 x2,u32 y1, u32 y2,u32 color)
		{
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	b085      	sub	sp, #20
			if (x1>x2)
 8005ac2:	4288      	cmp	r0, r1
		{
 8005ac4:	9303      	str	r3, [sp, #12]
			if (x1>x2)
 8005ac6:	d902      	bls.n	8005ace <draw_rect+0x12>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	4608      	mov	r0, r1
 8005acc:	4619      	mov	r1, r3
				swap(int, x1, x2);
			if (y1>y2)
 8005ace:	9c03      	ldr	r4, [sp, #12]
 8005ad0:	42a2      	cmp	r2, r4
 8005ad2:	d902      	bls.n	8005ada <draw_rect+0x1e>
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	9303      	str	r3, [sp, #12]
 8005ad8:	4622      	mov	r2, r4
				swap(int, y1, y2);
			

			draw_hl(x1, y1, x2-x1,color);
 8005ada:	fa1f fa81 	uxth.w	sl, r1
 8005ade:	b285      	uxth	r5, r0
 8005ae0:	ebaa 0905 	sub.w	r9, sl, r5
 8005ae4:	fa0f f989 	sxth.w	r9, r9
			for (i=0; i<= l; i++)
 8005ae8:	f1b9 0f00 	cmp.w	r9, #0
 8005aec:	f2c0 8130 	blt.w	8005d50 <draw_rect+0x294>
			write_data((color)>>16);
 8005af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005af2:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8005d64 <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005af6:	4f99      	ldr	r7, [pc, #612]	; (8005d5c <draw_rect+0x2a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005af8:	4c99      	ldr	r4, [pc, #612]	; (8005d60 <draw_rect+0x2a4>)
			for (i=0; i<= l; i++)
 8005afa:	9502      	str	r5, [sp, #8]
			write_data((color)>>16);
 8005afc:	0c1b      	lsrs	r3, r3, #16
 8005afe:	9300      	str	r3, [sp, #0]
			write_data((color)>>8);
 8005b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b02:	f109 0901 	add.w	r9, r9, #1
 8005b06:	0a1b      	lsrs	r3, r3, #8
			draw_hl(x1, y2, x2-x1,color);
			draw_vl(x1, y1, y2-y1,color);
 8005b08:	fa1f fb82 	uxth.w	fp, r2
			for (i=0; i<= l; i++)
 8005b0c:	ee07 aa90 	vmov	s15, sl
			write_data((color)>>8);
 8005b10:	9301      	str	r3, [sp, #4]
			for (i=0; i<= l; i++)
 8005b12:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8005b16:	464b      	mov	r3, r9
 8005b18:	2600      	movs	r6, #0
 8005b1a:	46d9      	mov	r9, fp
 8005b1c:	469b      	mov	fp, r3
				set_pixel(x+i, y, color);
 8005b1e:	9b02      	ldr	r3, [sp, #8]
 8005b20:	1999      	adds	r1, r3, r6
 8005b22:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8005b24:	464a      	mov	r2, r9
 8005b26:	4608      	mov	r0, r1
 8005b28:	464b      	mov	r3, r9
 8005b2a:	f7ff fd03 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005b2e:	222c      	movs	r2, #44	; 0x2c
 8005b30:	f8c8 2014 	str.w	r2, [r8, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005b34:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005b38:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005b3c:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005b3e:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8005b40:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005b42:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005b46:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005b48:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005b4a:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005b4e:	f8c8 3014 	str.w	r3, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b56:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005b58:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005b5a:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005b5c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005b5e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005b62:	9d01      	ldr	r5, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005b64:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005b66:	f8c8 5014 	str.w	r5, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005b6a:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005b6c:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005b6e:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005b70:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005b72:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005b74:	f8c8 a014 	str.w	sl, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005b78:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005b7a:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005b7c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005b7e:	bf00      	nop
			for (i=0; i<= l; i++)
 8005b80:	3601      	adds	r6, #1
 8005b82:	455e      	cmp	r6, fp
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005b84:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8005b86:	d1ca      	bne.n	8005b1e <draw_rect+0x62>
			draw_vl(x1, y1, y2-y1,color);
 8005b88:	465b      	mov	r3, fp
 8005b8a:	46cb      	mov	fp, r9
 8005b8c:	4699      	mov	r9, r3
 8005b8e:	9d02      	ldr	r5, [sp, #8]
 8005b90:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005b94:	f8cd b008 	str.w	fp, [sp, #8]
 8005b98:	46ca      	mov	sl, r9
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005b9a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8005d64 <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005b9e:	4e6f      	ldr	r6, [pc, #444]	; (8005d5c <draw_rect+0x2a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005ba0:	4c6f      	ldr	r4, [pc, #444]	; (8005d60 <draw_rect+0x2a4>)
			draw_vl(x1, y1, y2-y1,color);
 8005ba2:	f8dd b000 	ldr.w	fp, [sp]
 8005ba6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005baa:	2700      	movs	r7, #0
				set_pixel(x+i, y, color);
 8005bac:	19e9      	adds	r1, r5, r7
 8005bae:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4608      	mov	r0, r1
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	f7ff fcbd 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005bba:	222c      	movs	r2, #44	; 0x2c
 8005bbc:	f8c8 2014 	str.w	r2, [r8, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005bc4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005bc8:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005bca:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8005bcc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005bce:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005bd2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005bd6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005bda:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005bdc:	f8c8 b014 	str.w	fp, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005be0:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005be4:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005be6:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005be8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005bea:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8005bee:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005bf0:	f8c8 9014 	str.w	r9, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005bf4:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005bf8:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005bfa:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005bfc:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005bfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005c00:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005c02:	f8c8 3014 	str.w	r3, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005c06:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005c0a:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005c0c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005c0e:	bf00      	nop
			for (i=0; i<= l; i++)
 8005c10:	3701      	adds	r7, #1
 8005c12:	4557      	cmp	r7, sl
 8005c14:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005c16:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8005c18:	d1c8      	bne.n	8005bac <draw_rect+0xf0>
 8005c1a:	ee17 aa90 	vmov	sl, s15
 8005c1e:	f8dd b008 	ldr.w	fp, [sp, #8]
			draw_vl(x1, y1, y2-y1,color);
 8005c22:	eba3 060b 	sub.w	r6, r3, fp
 8005c26:	b236      	sxth	r6, r6
			for (i=0; i<= l; i++)
 8005c28:	2e00      	cmp	r6, #0
 8005c2a:	f2c0 808e 	blt.w	8005d4a <draw_rect+0x28e>
			write_data((color)>>16);
 8005c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005c30:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005d64 <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005c34:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8005d5c <draw_rect+0x2a0>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005c38:	4c49      	ldr	r4, [pc, #292]	; (8005d60 <draw_rect+0x2a4>)
			write_data((color)>>16);
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	9300      	str	r3, [sp, #0]
			write_data((color)>>8);
 8005c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c40:	0a1b      	lsrs	r3, r3, #8
			for (i=0; i<= l; i++)
 8005c42:	ee07 aa90 	vmov	s15, sl
 8005c46:	3601      	adds	r6, #1
			write_data((color)>>8);
 8005c48:	9302      	str	r3, [sp, #8]
			for (i=0; i<= l; i++)
 8005c4a:	2700      	movs	r7, #0
 8005c4c:	46aa      	mov	sl, r5
 8005c4e:	9301      	str	r3, [sp, #4]
				set_pixel(x, y+i, color);
 8005c50:	eb0b 0307 	add.w	r3, fp, r7
 8005c54:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 8005c56:	461a      	mov	r2, r3
 8005c58:	4651      	mov	r1, sl
 8005c5a:	4650      	mov	r0, sl
 8005c5c:	f7ff fc6a 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005c60:	222c      	movs	r2, #44	; 0x2c
 8005c62:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005c66:	f44f 7380 	mov.w	r3, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005c6a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005c6e:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005c72:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8005c74:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005c76:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005c7a:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005c7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005c80:	9a00      	ldr	r2, [sp, #0]
 8005c82:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005c86:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005c8a:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005c8c:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005c90:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005c92:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005c94:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005c98:	9d01      	ldr	r5, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005c9a:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005c9c:	f8c9 5014 	str.w	r5, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005ca0:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005ca2:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005ca6:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005ca8:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005caa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005cac:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005cae:	f8c9 5014 	str.w	r5, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005cb2:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005cb4:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005cb8:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005cba:	bf00      	nop
			for (i=0; i<= l; i++)
 8005cbc:	3701      	adds	r7, #1
 8005cbe:	42b7      	cmp	r7, r6
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005cc0:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8005cc2:	d1c5      	bne.n	8005c50 <draw_rect+0x194>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005cc4:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8005d64 <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005cc8:	4f24      	ldr	r7, [pc, #144]	; (8005d5c <draw_rect+0x2a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005cca:	4c25      	ldr	r4, [pc, #148]	; (8005d60 <draw_rect+0x2a4>)
 8005ccc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005cd0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8005cd4:	ee17 1a90 	vmov	r1, s15
 8005cd8:	2500      	movs	r5, #0
				set_pixel(x, y+i, color);
 8005cda:	eb0b 0305 	add.w	r3, fp, r5
 8005cde:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	9101      	str	r1, [sp, #4]
 8005ce6:	f7ff fc25 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005cea:	202c      	movs	r0, #44	; 0x2c
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005cec:	f44f 7380 	mov.w	r3, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005cf0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005cf4:	f8c8 0014 	str.w	r0, [r8, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005cf8:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005cfa:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8005cfc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005cfe:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005d02:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005d04:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005d08:	9a00      	ldr	r2, [sp, #0]
 8005d0a:	f8c8 2014 	str.w	r2, [r8, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005d0e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005d12:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005d16:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005d18:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005d1a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005d1c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8005d20:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005d22:	f8c8 9014 	str.w	r9, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005d26:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005d2a:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005d2c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005d2e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005d30:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005d32:	f8c8 a014 	str.w	sl, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005d36:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005d3a:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005d3c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8005d3e:	bf00      	nop
			for (i=0; i<= l; i++)
 8005d40:	3501      	adds	r5, #1
 8005d42:	42b5      	cmp	r5, r6
 8005d44:	9901      	ldr	r1, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005d46:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8005d48:	d1c7      	bne.n	8005cda <draw_rect+0x21e>
			draw_vl(x2, y1, y2-y1,color);	
		}		
 8005d4a:	b005      	add	sp, #20
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			draw_vl(x1, y1, y2-y1,color);
 8005d50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005d54:	fa1f fb82 	uxth.w	fp, r2
 8005d58:	e763      	b.n	8005c22 <draw_rect+0x166>
 8005d5a:	bf00      	nop
 8005d5c:	40020400 	.word	0x40020400
 8005d60:	40020800 	.word	0x40020800
 8005d64:	40020000 	.word	0x40020000

08005d68 <fill_roundrect>:
				draw_vl(x2, y1+5, y2-y1-10,color);
			}
		}
		
		void fill_roundrect(u32 x1, u32 x2,u32 y1, u32 y2,u32 fill_color, u32 edge_color)
		{
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	b08f      	sub	sp, #60	; 0x3c
			register int i,j;
			
			for(i=0;i<5;i++)
				for(j=0;j<=i;j++)
				{
					set_pixel(x1+4-i, y1+j, edge_color);
 8005d6e:	b284      	uxth	r4, r0
 8005d70:	9408      	str	r4, [sp, #32]
		{
 8005d72:	9c18      	ldr	r4, [sp, #96]	; 0x60
			fill_area(x1, x2, y1,y2 , fill_color);		// single color fill
 8005d74:	9400      	str	r4, [sp, #0]
					set_pixel(x1+4-i, y1+j, edge_color);
 8005d76:	b295      	uxth	r5, r2
					set_pixel(x2+i-4, y1+j, edge_color);
 8005d78:	b28c      	uxth	r4, r1
		{
 8005d7a:	930d      	str	r3, [sp, #52]	; 0x34
					set_pixel(x1+4-i, y1+j, edge_color);
 8005d7c:	950a      	str	r5, [sp, #40]	; 0x28
					set_pixel(x2+i-4, y1+j, edge_color);
 8005d7e:	9409      	str	r4, [sp, #36]	; 0x24
			fill_area(x1, x2, y1,y2 , fill_color);		// single color fill
 8005d80:	f7ff fc84 	bl	800568c <fill_area>
			for(i=0;i<5;i++)
 8005d84:	1c6b      	adds	r3, r5, #1
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	9306      	str	r3, [sp, #24]
 8005d8a:	1dab      	adds	r3, r5, #6
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	9307      	str	r3, [sp, #28]
			write_data((color)>>16);
 8005d90:	9b19      	ldr	r3, [sp, #100]	; 0x64
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005d92:	f8df a298 	ldr.w	sl, [pc, #664]	; 800602c <fill_roundrect+0x2c4>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005d96:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006030 <fill_roundrect+0x2c8>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005d9a:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8006034 <fill_roundrect+0x2cc>
			write_data((color)>>16);
 8005d9e:	0c1b      	lsrs	r3, r3, #16
 8005da0:	9303      	str	r3, [sp, #12]
			write_data((color)>>8);
 8005da2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	9304      	str	r3, [sp, #16]
 8005da8:	1d6b      	adds	r3, r5, #5
 8005daa:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dac:	1b63      	subs	r3, r4, r5
 8005dae:	930c      	str	r3, [sp, #48]	; 0x30
				for(j=0;j<=i;j++)
 8005db0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005db2:	9b08      	ldr	r3, [sp, #32]
 8005db4:	4413      	add	r3, r2
 8005db6:	9a06      	ldr	r2, [sp, #24]
 8005db8:	1a9b      	subs	r3, r3, r2
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ee07 3a90 	vmov	s15, r3
 8005dc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dc2:	3b05      	subs	r3, #5
 8005dc4:	4413      	add	r3, r2
 8005dc6:	fa1f fb83 	uxth.w	fp, r3
		{
 8005dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			set_window(x, x, y, y);
 8005dcc:	9305      	str	r3, [sp, #20]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	ee17 1a90 	vmov	r1, s15
 8005dd4:	ee17 0a90 	vmov	r0, s15
 8005dd8:	f7ff fbac 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005ddc:	232c      	movs	r3, #44	; 0x2c
 8005dde:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005de2:	f44f 7480 	mov.w	r4, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005de6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005dea:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005dee:	f8c8 3018 	str.w	r3, [r8, #24]
			__asm("nop");
 8005df2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005df4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005df8:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005dfc:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e00:	9b03      	ldr	r3, [sp, #12]
 8005e02:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e06:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005e0a:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005e0e:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e12:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8005e16:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005e18:	f44f 4520 	mov.w	r5, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e1c:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005e1e:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e22:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005e26:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005e2a:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e2e:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8005e32:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e34:	9919      	ldr	r1, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005e36:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e3a:	f8ca 1014 	str.w	r1, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005e3e:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005e42:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e46:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8005e4a:	bf00      	nop
			set_window(x, x, y, y);
 8005e4c:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005e4e:	f8c8 5018 	str.w	r5, [r8, #24]
			set_window(x, x, y, y);
 8005e52:	4659      	mov	r1, fp
 8005e54:	461a      	mov	r2, r3
 8005e56:	4658      	mov	r0, fp
 8005e58:	f7ff fb6c 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005e5c:	212c      	movs	r1, #44	; 0x2c
 8005e5e:	f8ca 1014 	str.w	r1, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e62:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005e66:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e6a:	f8c8 1018 	str.w	r1, [r8, #24]
			__asm("nop");
 8005e6e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005e70:	f44f 4160 	mov.w	r1, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e74:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005e76:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e7a:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005e7e:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005e82:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e86:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8005e8a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e8c:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005e8e:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005e92:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005e96:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005e9a:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005e9e:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8005ea2:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005ea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005ea6:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005eaa:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005eae:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005eb2:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005eb6:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8005eba:	bf00      	nop
				for(j=0;j<=i;j++)
 8005ebc:	9b05      	ldr	r3, [sp, #20]
 8005ebe:	9a06      	ldr	r2, [sp, #24]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005ec0:	f8c8 5018 	str.w	r5, [r8, #24]
				for(j=0;j<=i;j++)
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	f47f af7f 	bne.w	8005dcc <fill_roundrect+0x64>
			for(i=0;i<5;i++)
 8005ece:	9a07      	ldr	r2, [sp, #28]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	9306      	str	r3, [sp, #24]
 8005ed8:	f47f af6a 	bne.w	8005db0 <fill_roundrect+0x48>
 8005edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005ede:	f8df b14c 	ldr.w	fp, [pc, #332]	; 800602c <fill_roundrect+0x2c4>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005ee2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8006030 <fill_roundrect+0x2c8>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005ee6:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8006034 <fill_roundrect+0x2cc>
 8005eea:	3b05      	subs	r3, #5
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	9307      	str	r3, [sp, #28]
				}
			for(i=0;i< 5;i++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9306      	str	r3, [sp, #24]
				for(j=5;j>i;j--)
 8005ef4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
				{			
					set_pixel(x1+i, y2+j-5, edge_color);
 8005ef8:	9a08      	ldr	r2, [sp, #32]
					set_pixel(x2-i, y2-5+j, edge_color);
 8005efa:	9909      	ldr	r1, [sp, #36]	; 0x24
					set_pixel(x1+i, y2+j-5, edge_color);
 8005efc:	189a      	adds	r2, r3, r2
					set_pixel(x2-i, y2-5+j, edge_color);
 8005efe:	1acb      	subs	r3, r1, r3
					set_pixel(x1+i, y2+j-5, edge_color);
 8005f00:	b292      	uxth	r2, r2
					set_pixel(x2-i, y2-5+j, edge_color);
 8005f02:	b29b      	uxth	r3, r3
					set_pixel(x1+i, y2+j-5, edge_color);
 8005f04:	ee07 2a90 	vmov	s15, r2
					set_pixel(x2-i, y2-5+j, edge_color);
 8005f08:	ee07 3a10 	vmov	s14, r3
				for(j=5;j>i;j--)
 8005f0c:	f04f 0905 	mov.w	r9, #5
					set_pixel(x1+i, y2+j-5, edge_color);
 8005f10:	9b07      	ldr	r3, [sp, #28]
 8005f12:	444b      	add	r3, r9
 8005f14:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 8005f16:	461a      	mov	r2, r3
 8005f18:	ee17 1a90 	vmov	r1, s15
 8005f1c:	ee17 0a90 	vmov	r0, s15
 8005f20:	9305      	str	r3, [sp, #20]
 8005f22:	f7ff fb07 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005f26:	232c      	movs	r3, #44	; 0x2c
 8005f28:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005f2c:	f44f 7480 	mov.w	r4, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005f30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005f34:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005f38:	f8ca 3018 	str.w	r3, [sl, #24]
			__asm("nop");
 8005f3c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005f3e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005f42:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005f46:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005f4a:	9b03      	ldr	r3, [sp, #12]
 8005f4c:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005f50:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005f54:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005f58:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005f5c:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8005f60:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005f62:	f44f 4520 	mov.w	r5, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005f66:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005f68:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005f6c:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005f70:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005f74:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005f78:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8005f7c:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005f7e:	9919      	ldr	r1, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005f80:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005f84:	f8cb 1014 	str.w	r1, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005f88:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005f8c:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005f90:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8005f94:	bf00      	nop
			set_window(x, x, y, y);
 8005f96:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005f98:	f8ca 5018 	str.w	r5, [sl, #24]
			set_window(x, x, y, y);
 8005f9c:	ee17 1a10 	vmov	r1, s14
 8005fa0:	ee17 0a10 	vmov	r0, s14
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f7ff fac5 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8005faa:	212c      	movs	r1, #44	; 0x2c
 8005fac:	f8cb 1014 	str.w	r1, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005fb0:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005fb4:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005fb8:	f8ca 1018 	str.w	r1, [sl, #24]
			__asm("nop");
 8005fbc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005fbe:	f44f 4160 	mov.w	r1, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005fc2:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005fc4:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005fc8:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005fcc:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005fd0:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005fd4:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8005fd8:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005fda:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005fdc:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005fe0:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005fe4:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8005fe8:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8005fec:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8005ff0:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005ff2:	9b19      	ldr	r3, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8005ff4:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8005ff8:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8005ffc:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006000:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006004:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8006008:	bf00      	nop
				for(j=5;j>i;j--)
 800600a:	9b06      	ldr	r3, [sp, #24]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800600c:	f8ca 5018 	str.w	r5, [sl, #24]
				for(j=5;j>i;j--)
 8006010:	f109 39ff 	add.w	r9, r9, #4294967295
 8006014:	4599      	cmp	r9, r3
 8006016:	f73f af7b 	bgt.w	8005f10 <fill_roundrect+0x1a8>
			for(i=0;i< 5;i++)
 800601a:	3301      	adds	r3, #1
 800601c:	2b05      	cmp	r3, #5
 800601e:	9306      	str	r3, [sp, #24]
 8006020:	f47f af68 	bne.w	8005ef4 <fill_roundrect+0x18c>
				} 
		}
 8006024:	b00f      	add	sp, #60	; 0x3c
 8006026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602a:	bf00      	nop
 800602c:	40020000 	.word	0x40020000
 8006030:	40020400 	.word	0x40020400
 8006034:	40020800 	.word	0x40020800

08006038 <draw_line>:
				CurX++;
			}
		}
			
		void draw_line( u32 x1, u32 y1, u32 x2, u32 y2 , u32 color )
		{
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			uint8_t yLonger = 0;
			int incrementVal, endVal;
			int shortLen = y2-y1;
 800603c:	1a5b      	subs	r3, r3, r1
			int longLen = x2-x1;
 800603e:	1a17      	subs	r7, r2, r0
			int decInc;
			int j = 0, i = 0;

			if(ABS(shortLen) > ABS(longLen)) {
 8006040:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8006044:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
 8006048:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800604c:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
 8006050:	4294      	cmp	r4, r2
		{
 8006052:	b087      	sub	sp, #28
			if(ABS(shortLen) > ABS(longLen)) {
 8006054:	f340 80ad 	ble.w	80061b2 <draw_line+0x17a>
 8006058:	461a      	mov	r2, r3
				int swap = shortLen;
				shortLen = longLen;
 800605a:	463b      	mov	r3, r7
				longLen = swap;
 800605c:	4617      	mov	r7, r2
				yLonger = 1;
			}

			endVal = longLen;

			if(longLen < 0) {
 800605e:	2f00      	cmp	r7, #0
				yLonger = 1;
 8006060:	f04f 0501 	mov.w	r5, #1
			if(longLen < 0) {
 8006064:	f2c0 80aa 	blt.w	80061bc <draw_line+0x184>
				incrementVal = -1;
				longLen = -longLen;
				endVal--;
			} else {
				incrementVal = 1;
				endVal++;
 8006068:	f107 0901 	add.w	r9, r7, #1
			}

			if(longLen == 0)
 800606c:	f040 80af 	bne.w	80061ce <draw_line+0x196>
 8006070:	f04f 0901 	mov.w	r9, #1
				incrementVal = 1;
 8006074:	46c8      	mov	r8, r9
			else
				decInc = (shortLen << 16) / longLen;

			if(yLonger) {
				for(i = 0;i != endVal;i += incrementVal) {
					set_pixel(x1 + (j >> 16),y1 + i,color);
 8006076:	b283      	uxth	r3, r0
			if(yLonger) {
 8006078:	2d00      	cmp	r5, #0
 800607a:	d04d      	beq.n	8006118 <draw_line+0xe0>
					set_pixel(x1 + (j >> 16),y1 + i,color);
 800607c:	9303      	str	r3, [sp, #12]
 800607e:	b28b      	uxth	r3, r1
 8006080:	9304      	str	r3, [sp, #16]
			write_data((color)>>16);
 8006082:	9b10      	ldr	r3, [sp, #64]	; 0x40
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006084:	f8df a158 	ldr.w	sl, [pc, #344]	; 80061e0 <draw_line+0x1a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006088:	4e53      	ldr	r6, [pc, #332]	; (80061d8 <draw_line+0x1a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800608a:	4c54      	ldr	r4, [pc, #336]	; (80061dc <draw_line+0x1a4>)
			int j = 0, i = 0;
 800608c:	9705      	str	r7, [sp, #20]
			write_data((color)>>16);
 800608e:	0c1b      	lsrs	r3, r3, #16
 8006090:	9301      	str	r3, [sp, #4]
			write_data((color)>>8);
 8006092:	9b10      	ldr	r3, [sp, #64]	; 0x40
				for(i = 0;i != endVal;i += incrementVal) {
 8006094:	2500      	movs	r5, #0
			write_data((color)>>8);
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	9302      	str	r3, [sp, #8]
			int j = 0, i = 0;
 800609a:	46ab      	mov	fp, r5
					set_pixel(x1 + (j >> 16),y1 + i,color);
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	eb03 412b 	add.w	r1, r3, fp, asr #16
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	442b      	add	r3, r5
 80060a6:	b289      	uxth	r1, r1
 80060a8:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 80060aa:	461a      	mov	r2, r3
 80060ac:	4608      	mov	r0, r1
 80060ae:	f7ff fa41 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80060b2:	232c      	movs	r3, #44	; 0x2c
 80060b4:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060c0:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060c2:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80060c4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060c6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80060ca:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060d0:	9a01      	ldr	r2, [sp, #4]
 80060d2:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060d6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060da:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060dc:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060de:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 80060e0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060e2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060e6:	9f02      	ldr	r7, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060e8:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060ea:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060ee:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060f0:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060f2:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 80060f4:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060f6:	9f10      	ldr	r7, [sp, #64]	; 0x40
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060f8:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060fa:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060fe:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006100:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006102:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 8006104:	bf00      	nop
					j += decInc;
 8006106:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006108:	61a2      	str	r2, [r4, #24]
				for(i = 0;i != endVal;i += incrementVal) {
 800610a:	4445      	add	r5, r8
 800610c:	454d      	cmp	r5, r9
					j += decInc;
 800610e:	449b      	add	fp, r3
				for(i = 0;i != endVal;i += incrementVal) {
 8006110:	d1c4      	bne.n	800609c <draw_line+0x64>
				for(i = 0;i != endVal;i += incrementVal) {
					set_pixel(x1 + i,y1 + (j >> 16),color);
					j += decInc;
				}
			}
		} 
 8006112:	b007      	add	sp, #28
 8006114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					set_pixel(x1 + (j >> 16),y1 + i,color);
 8006118:	9302      	str	r3, [sp, #8]
 800611a:	b28b      	uxth	r3, r1
 800611c:	9301      	str	r3, [sp, #4]
			write_data((color)>>16);
 800611e:	9b10      	ldr	r3, [sp, #64]	; 0x40
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006120:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80061e0 <draw_line+0x1a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006124:	4e2c      	ldr	r6, [pc, #176]	; (80061d8 <draw_line+0x1a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006126:	4c2d      	ldr	r4, [pc, #180]	; (80061dc <draw_line+0x1a4>)
			int j = 0, i = 0;
 8006128:	9705      	str	r7, [sp, #20]
			write_data((color)>>16);
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	9303      	str	r3, [sp, #12]
			write_data((color)>>8);
 800612e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006130:	0a1b      	lsrs	r3, r3, #8
 8006132:	9304      	str	r3, [sp, #16]
			int j = 0, i = 0;
 8006134:	46ab      	mov	fp, r5
					set_pixel(x1 + i,y1 + (j >> 16),color);
 8006136:	9b02      	ldr	r3, [sp, #8]
 8006138:	1959      	adds	r1, r3, r5
 800613a:	9b01      	ldr	r3, [sp, #4]
 800613c:	eb03 432b 	add.w	r3, r3, fp, asr #16
 8006140:	b289      	uxth	r1, r1
 8006142:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 8006144:	461a      	mov	r2, r3
 8006146:	4608      	mov	r0, r1
 8006148:	f7ff f9f4 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800614c:	232c      	movs	r3, #44	; 0x2c
 800614e:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006152:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800615a:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800615c:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 800615e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006160:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006164:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006166:	f44f 4080 	mov.w	r0, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800616a:	9a03      	ldr	r2, [sp, #12]
 800616c:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006170:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006174:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006176:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006178:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 800617a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800617c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006180:	9f04      	ldr	r7, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006182:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006184:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006188:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800618a:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800618c:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 800618e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006190:	9f10      	ldr	r7, [sp, #64]	; 0x40
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006192:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006194:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006198:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800619a:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800619c:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 800619e:	bf00      	nop
					j += decInc;
 80061a0:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80061a2:	61a2      	str	r2, [r4, #24]
				for(i = 0;i != endVal;i += incrementVal) {
 80061a4:	4445      	add	r5, r8
 80061a6:	454d      	cmp	r5, r9
					j += decInc;
 80061a8:	449b      	add	fp, r3
				for(i = 0;i != endVal;i += incrementVal) {
 80061aa:	d1c4      	bne.n	8006136 <draw_line+0xfe>
		} 
 80061ac:	b007      	add	sp, #28
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(longLen < 0) {
 80061b2:	2f00      	cmp	r7, #0
			uint8_t yLonger = 0;
 80061b4:	f04f 0500 	mov.w	r5, #0
			if(longLen < 0) {
 80061b8:	f6bf af56 	bge.w	8006068 <draw_line+0x30>
				longLen = -longLen;
 80061bc:	427a      	negs	r2, r7
				endVal--;
 80061be:	f107 39ff 	add.w	r9, r7, #4294967295
				incrementVal = -1;
 80061c2:	f04f 38ff 	mov.w	r8, #4294967295
				decInc = (shortLen << 16) / longLen;
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	fb93 f7f2 	sdiv	r7, r3, r2
 80061cc:	e753      	b.n	8006076 <draw_line+0x3e>
 80061ce:	463a      	mov	r2, r7
				incrementVal = 1;
 80061d0:	f04f 0801 	mov.w	r8, #1
 80061d4:	e7f7      	b.n	80061c6 <draw_line+0x18e>
 80061d6:	bf00      	nop
 80061d8:	40020400 	.word	0x40020400
 80061dc:	40020800 	.word	0x40020800
 80061e0:	40020000 	.word	0x40020000

080061e4 <fill_circle>:
		{
 80061e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			D = 3 - (r << 1);
 80061e8:	0056      	lsls	r6, r2, #1
		{
 80061ea:	b084      	sub	sp, #16
 80061ec:	4615      	mov	r5, r2
 80061ee:	4682      	mov	sl, r0
 80061f0:	4689      	mov	r9, r1
 80061f2:	4698      	mov	r8, r3
			D = 3 - (r << 1);
 80061f4:	f1c6 0603 	rsb	r6, r6, #3
			CurX = 0;
 80061f8:	2400      	movs	r4, #0
				if(CurY > 0)
 80061fa:	b98d      	cbnz	r5, 8006220 <fill_circle+0x3c>
				if(CurX > 0)
 80061fc:	bb4c      	cbnz	r4, 8006252 <fill_circle+0x6e>
				if (D < 0)
 80061fe:	2e00      	cmp	r6, #0
					D += (CurX << 2) + 6;
 8006200:	f106 0106 	add.w	r1, r6, #6
					D += ((CurX - CurY) << 2) + 10;
 8006204:	eba4 0205 	sub.w	r2, r4, r5
 8006208:	f106 030a 	add.w	r3, r6, #10
				if (D < 0)
 800620c:	db3f      	blt.n	800628e <fill_circle+0xaa>
					CurY--;
 800620e:	3d01      	subs	r5, #1
				CurX++;
 8006210:	3401      	adds	r4, #1
			while (CurX <= CurY)
 8006212:	42a5      	cmp	r5, r4
					D += ((CurX - CurY) << 2) + 10;
 8006214:	eb03 0682 	add.w	r6, r3, r2, lsl #2
			while (CurX <= CurY)
 8006218:	d2ef      	bcs.n	80061fa <fill_circle+0x16>
		}
 800621a:	b004      	add	sp, #16
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						draw_line(x-CurX, y+CurY, x-CurX, y-CurY, color);
 8006220:	ebaa 0704 	sub.w	r7, sl, r4
 8006224:	eb09 0105 	add.w	r1, r9, r5
 8006228:	eba9 0305 	sub.w	r3, r9, r5
 800622c:	463a      	mov	r2, r7
 800622e:	4638      	mov	r0, r7
 8006230:	f8cd 8000 	str.w	r8, [sp]
 8006234:	9303      	str	r3, [sp, #12]
 8006236:	9102      	str	r1, [sp, #8]
 8006238:	f7ff fefe 	bl	8006038 <draw_line>
						draw_line(x+CurX, y+CurY, x+CurX, y-CurY, color);
 800623c:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 8006240:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8006244:	4610      	mov	r0, r2
 8006246:	f8cd 8000 	str.w	r8, [sp]
 800624a:	f7ff fef5 	bl	8006038 <draw_line>
				if(CurX > 0)
 800624e:	2c00      	cmp	r4, #0
 8006250:	d0d5      	beq.n	80061fe <fill_circle+0x1a>
					draw_line(x-CurY, y+CurX, x-CurY, y-CurX, color);
 8006252:	ebaa 0205 	sub.w	r2, sl, r5
 8006256:	eb09 0104 	add.w	r1, r9, r4
 800625a:	eba9 0304 	sub.w	r3, r9, r4
 800625e:	4610      	mov	r0, r2
 8006260:	f8cd 8000 	str.w	r8, [sp]
 8006264:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8006268:	f7ff fee6 	bl	8006038 <draw_line>
					draw_line(x+CurY, y+CurX, x+CurY, y-CurX, color);
 800626c:	eb0a 0205 	add.w	r2, sl, r5
 8006270:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8006274:	4610      	mov	r0, r2
 8006276:	f8cd 8000 	str.w	r8, [sp]
 800627a:	f7ff fedd 	bl	8006038 <draw_line>
				if (D < 0)
 800627e:	2e00      	cmp	r6, #0
					D += (CurX << 2) + 6;
 8006280:	f106 0106 	add.w	r1, r6, #6
					D += ((CurX - CurY) << 2) + 10;
 8006284:	eba4 0205 	sub.w	r2, r4, r5
 8006288:	f106 030a 	add.w	r3, r6, #10
				if (D < 0)
 800628c:	dabf      	bge.n	800620e <fill_circle+0x2a>
					D += (CurX << 2) + 6;
 800628e:	eb01 0684 	add.w	r6, r1, r4, lsl #2
				CurX++;
 8006292:	3401      	adds	r4, #1
			while (CurX <= CurY)
 8006294:	42ac      	cmp	r4, r5
 8006296:	d8c0      	bhi.n	800621a <fill_circle+0x36>
				if(CurY > 0)
 8006298:	2d00      	cmp	r5, #0
 800629a:	d0af      	beq.n	80061fc <fill_circle+0x18>
 800629c:	e7c0      	b.n	8006220 <fill_circle+0x3c>
 800629e:	bf00      	nop

080062a0 <draw_char>:
			}
			print_string(x, y, st, color);
		}

		void draw_char(uint16_t x, uint16_t y, const uint16_t *c, u32 color)
		{
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			register u32 index = 0, i = 0;

			for(index = 0; index < Current_Font->Height; index++)
 80062a4:	f8df b124 	ldr.w	fp, [pc, #292]	; 80063cc <draw_char+0x12c>
		{
 80062a8:	4699      	mov	r9, r3
 80062aa:	460b      	mov	r3, r1
			for(index = 0; index < Current_Font->Height; index++)
 80062ac:	f8db 1000 	ldr.w	r1, [fp]
		{
 80062b0:	4682      	mov	sl, r0
			for(index = 0; index < Current_Font->Height; index++)
 80062b2:	88c8      	ldrh	r0, [r1, #6]
		{
 80062b4:	b085      	sub	sp, #20
			for(index = 0; index < Current_Font->Height; index++)
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d07e      	beq.n	80063b8 <draw_char+0x118>
			write_data((color)>>16);
 80062ba:	ea4f 4019 	mov.w	r0, r9, lsr #16
 80062be:	4617      	mov	r7, r2
 80062c0:	9000      	str	r0, [sp, #0]
			{
				for(i = 0; i < Current_Font->Width; i++)
 80062c2:	888a      	ldrh	r2, [r1, #4]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80062c4:	4e3e      	ldr	r6, [pc, #248]	; (80063c0 <draw_char+0x120>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80062c6:	4c3f      	ldr	r4, [pc, #252]	; (80063c4 <draw_char+0x124>)
			write_data((color)>>8);
 80062c8:	ea4f 2019 	mov.w	r0, r9, lsr #8
 80062cc:	9001      	str	r0, [sp, #4]
			for(index = 0; index < Current_Font->Height; index++)
 80062ce:	2000      	movs	r0, #0
 80062d0:	9003      	str	r0, [sp, #12]
				for(i = 0; i < Current_Font->Width; i++)
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	d070      	beq.n	80063b8 <draw_char+0x118>
				{
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 80062d6:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80063d0 <draw_char+0x130>
				for(i = 0; i < Current_Font->Width; i++)
 80062da:	2500      	movs	r5, #0
 80062dc:	e048      	b.n	8006370 <draw_char+0xd0>
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 80062de:	2a0c      	cmp	r2, #12
 80062e0:	d943      	bls.n	800636a <draw_char+0xca>
					(((c[index] & (0x1 << i)) == 0x00)&&(Current_Font->Width > 12 )))  == 0x00)
 80062e2:	fa4c fc05 	asr.w	ip, ip, r5
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 80062e6:	f01c 0f01 	tst.w	ip, #1
 80062ea:	d03e      	beq.n	800636a <draw_char+0xca>
					{
						if(Current_Font->Height > 24)
 80062ec:	88ca      	ldrh	r2, [r1, #6]
			set_window(x, x, y, y);
 80062ee:	9302      	str	r3, [sp, #8]
						if(Current_Font->Height > 24)
 80062f0:	2a18      	cmp	r2, #24
							set_pixel( x-i,y+index, color);
 80062f2:	bf8c      	ite	hi
 80062f4:	ebaa 0105 	subhi.w	r1, sl, r5
						else
							set_pixel( x+i,y+index, color);
 80062f8:	eb0a 0105 	addls.w	r1, sl, r5
 80062fc:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 80062fe:	461a      	mov	r2, r3
 8006300:	4608      	mov	r0, r1
 8006302:	f7ff f917 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006306:	4930      	ldr	r1, [pc, #192]	; (80063c8 <draw_char+0x128>)
 8006308:	222c      	movs	r2, #44	; 0x2c
 800630a:	614a      	str	r2, [r1, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800630c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006314:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006316:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006318:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800631a:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800631e:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006320:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006322:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006326:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800632a:	614b      	str	r3, [r1, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800632c:	f8c4 e018 	str.w	lr, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006330:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006332:	f8c4 c018 	str.w	ip, [r4, #24]
			__asm("nop");
 8006336:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006338:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800633c:	9b01      	ldr	r3, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800633e:	61a0      	str	r0, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006340:	614b      	str	r3, [r1, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006342:	f8c4 e018 	str.w	lr, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006346:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006348:	f8c4 c018 	str.w	ip, [r4, #24]
			__asm("nop");
 800634c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800634e:	61a0      	str	r0, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006350:	f8c1 9014 	str.w	r9, [r1, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006354:	f8c4 e018 	str.w	lr, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006358:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800635a:	f8c4 c018 	str.w	ip, [r4, #24]
			__asm("nop");
 800635e:	bf00      	nop
				for(i = 0; i < Current_Font->Width; i++)
 8006360:	f8db 1000 	ldr.w	r1, [fp]
 8006364:	9b02      	ldr	r3, [sp, #8]
 8006366:	888a      	ldrh	r2, [r1, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006368:	61a0      	str	r0, [r4, #24]
				for(i = 0; i < Current_Font->Width; i++)
 800636a:	3501      	adds	r5, #1
 800636c:	42aa      	cmp	r2, r5
 800636e:	d917      	bls.n	80063a0 <draw_char+0x100>
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 8006370:	fba8 c002 	umull	ip, r0, r8, r2
 8006374:	08c0      	lsrs	r0, r0, #3
 8006376:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 800637a:	2080      	movs	r0, #128	; 0x80
 800637c:	fa00 f00c 	lsl.w	r0, r0, ip
 8006380:	f8b7 c000 	ldrh.w	ip, [r7]
 8006384:	4128      	asrs	r0, r5
 8006386:	ea10 0f0c 	tst.w	r0, ip
 800638a:	d0a8      	beq.n	80062de <draw_char+0x3e>
					(((c[index] & (0x1 << i)) == 0x00)&&(Current_Font->Width > 12 )))  == 0x00)
 800638c:	fa4c fc05 	asr.w	ip, ip, r5
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 8006390:	f01c 0f01 	tst.w	ip, #1
 8006394:	d1aa      	bne.n	80062ec <draw_char+0x4c>
					(((c[index] & (0x1 << i)) == 0x00)&&(Current_Font->Width > 12 )))  == 0x00)
 8006396:	2a0c      	cmp	r2, #12
 8006398:	d9a8      	bls.n	80062ec <draw_char+0x4c>
				for(i = 0; i < Current_Font->Width; i++)
 800639a:	3501      	adds	r5, #1
 800639c:	42aa      	cmp	r2, r5
 800639e:	d8e7      	bhi.n	8006370 <draw_char+0xd0>
			for(index = 0; index < Current_Font->Height; index++)
 80063a0:	9803      	ldr	r0, [sp, #12]
 80063a2:	3001      	adds	r0, #1
 80063a4:	4605      	mov	r5, r0
 80063a6:	9003      	str	r0, [sp, #12]
 80063a8:	88c8      	ldrh	r0, [r1, #6]
 80063aa:	4285      	cmp	r5, r0
 80063ac:	d204      	bcs.n	80063b8 <draw_char+0x118>
 80063ae:	3301      	adds	r3, #1
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3702      	adds	r7, #2
				for(i = 0; i < Current_Font->Width; i++)
 80063b4:	2a00      	cmp	r2, #0
 80063b6:	d18e      	bne.n	80062d6 <draw_char+0x36>
					}
				}
			}
		}
 80063b8:	b005      	add	sp, #20
 80063ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063be:	bf00      	nop
 80063c0:	40020400 	.word	0x40020400
 80063c4:	40020800 	.word	0x40020800
 80063c8:	40020000 	.word	0x40020000
 80063cc:	200008c0 	.word	0x200008c0
 80063d0:	aaaaaaab 	.word	0xaaaaaaab

080063d4 <print_char>:

		void print_char(uint16_t x, uint16_t y, uint8_t c, u32 color)
		{
 80063d4:	b410      	push	{r4}
			c -= 32;
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 80063d6:	4c07      	ldr	r4, [pc, #28]	; (80063f4 <print_char+0x20>)
 80063d8:	6824      	ldr	r4, [r4, #0]
			c -= 32;
 80063da:	3a20      	subs	r2, #32
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 80063dc:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80063e0:	6824      	ldr	r4, [r4, #0]
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	fb0c f202 	mul.w	r2, ip, r2
 80063e8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		}
 80063ec:	f85d 4b04 	ldr.w	r4, [sp], #4
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 80063f0:	f7ff bf56 	b.w	80062a0 <draw_char>
 80063f4:	200008c0 	.word	0x200008c0

080063f8 <print_string>:

		void print_string(uint16_t x, uint16_t y, char *ptr,u32 color)
		{
 80063f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			 register u16 refcolumn = x;
			while (*ptr != 0)
 80063fc:	7814      	ldrb	r4, [r2, #0]
 80063fe:	b1cc      	cbz	r4, 8006434 <print_string+0x3c>
 8006400:	4699      	mov	r9, r3
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <print_string+0x40>)
 8006404:	681e      	ldr	r6, [r3, #0]
 8006406:	4617      	mov	r7, r2
 8006408:	4605      	mov	r5, r0
 800640a:	4688      	mov	r8, r1
 800640c:	88f3      	ldrh	r3, [r6, #6]
 800640e:	6832      	ldr	r2, [r6, #0]
			c -= 32;
 8006410:	3c20      	subs	r4, #32
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 8006412:	b2e4      	uxtb	r4, r4
 8006414:	fb03 f404 	mul.w	r4, r3, r4
 8006418:	4628      	mov	r0, r5
 800641a:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800641e:	464b      	mov	r3, r9
 8006420:	4641      	mov	r1, r8
 8006422:	f7ff ff3d 	bl	80062a0 <draw_char>
			{
				/* Display one character on LCD */
				print_char(x,y, *ptr, color);
				/* Decrement the column position by 16 */
				refcolumn += Current_Font->Width;
 8006426:	88b0      	ldrh	r0, [r6, #4]
			while (*ptr != 0)
 8006428:	f817 4f01 	ldrb.w	r4, [r7, #1]!
				refcolumn += Current_Font->Width;
 800642c:	4428      	add	r0, r5
 800642e:	b285      	uxth	r5, r0
			while (*ptr != 0)
 8006430:	2c00      	cmp	r4, #0
 8006432:	d1eb      	bne.n	800640c <print_string+0x14>
				x += Current_Font->Width;
				/* Point on the next character */
				ptr++;
			}
		}
 8006434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006438:	200008c0 	.word	0x200008c0

0800643c <print_image>:
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		void print_image(u32 x, u32 y, u32 x_res, u32 y_res,const u32 *ptr_image)
		{
 800643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006440:	4616      	mov	r6, r2
			register u32 cnt =0;
			set_window(x,x + x_res-1, y,y + y_res-1);
 8006442:	b280      	uxth	r0, r0
 8006444:	b28a      	uxth	r2, r1
		{
 8006446:	4699      	mov	r9, r3
			set_window(x,x + x_res-1, y,y + y_res-1);
 8006448:	1e71      	subs	r1, r6, #1
 800644a:	3b01      	subs	r3, #1
 800644c:	4413      	add	r3, r2
 800644e:	4401      	add	r1, r0
 8006450:	b29b      	uxth	r3, r3
 8006452:	b289      	uxth	r1, r1
		{
 8006454:	9f08      	ldr	r7, [sp, #32]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006456:	4c20      	ldr	r4, [pc, #128]	; (80064d8 <print_image+0x9c>)
			set_window(x,x + x_res-1, y,y + y_res-1);
 8006458:	f7ff f86c 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800645c:	481f      	ldr	r0, [pc, #124]	; (80064dc <print_image+0xa0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800645e:	4920      	ldr	r1, [pc, #128]	; (80064e0 <print_image+0xa4>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006460:	232c      	movs	r3, #44	; 0x2c
 8006462:	6143      	str	r3, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006464:	f44f 7580 	mov.w	r5, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800646c:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800646e:	618b      	str	r3, [r1, #24]
			__asm("nop");
 8006470:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006472:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			write_cmd(0x2c);
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 8006476:	fb09 f906 	mul.w	r9, r9, r6
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800647a:	618b      	str	r3, [r1, #24]
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 800647c:	f1b9 0f00 	cmp.w	r9, #0
 8006480:	d028      	beq.n	80064d4 <print_image+0x98>
 8006482:	f04f 0e00 	mov.w	lr, #0
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006486:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800648a:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800648e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			{
				add_color(*(ptr_image));
 8006492:	f857 3b04 	ldr.w	r3, [r7], #4
			write_data((color)>>16);
 8006496:	ea4f 4813 	mov.w	r8, r3, lsr #16
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800649a:	f8c0 8014 	str.w	r8, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800649e:	f8c1 c018 	str.w	ip, [r1, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80064a2:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80064a4:	618e      	str	r6, [r1, #24]
			__asm("nop");
 80064a6:	bf00      	nop
			write_data((color)>>8);
 80064a8:	ea4f 2813 	mov.w	r8, r3, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80064ac:	618a      	str	r2, [r1, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80064ae:	f8c0 8014 	str.w	r8, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80064b2:	f8c1 c018 	str.w	ip, [r1, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80064b6:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80064b8:	618e      	str	r6, [r1, #24]
			__asm("nop");
 80064ba:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80064bc:	618a      	str	r2, [r1, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80064be:	6143      	str	r3, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80064c0:	f8c1 c018 	str.w	ip, [r1, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80064c4:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80064c6:	618e      	str	r6, [r1, #24]
			__asm("nop");
 80064c8:	bf00      	nop
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 80064ca:	f10e 0e01 	add.w	lr, lr, #1
 80064ce:	45ce      	cmp	lr, r9
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80064d0:	618a      	str	r2, [r1, #24]
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 80064d2:	d1de      	bne.n	8006492 <print_image+0x56>
				ptr_image++;
			}
		}
 80064d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064d8:	40020400 	.word	0x40020400
 80064dc:	40020000 	.word	0x40020000
 80064e0:	40020800 	.word	0x40020800

080064e4 <ssd1963_setup>:
			
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@		
		void ssd1963_setup (void)
		{
 80064e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RST << 16;
 80064e8:	4dc1      	ldr	r5, [pc, #772]	; (80067f0 <ssd1963_setup+0x30c>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80064ea:	4fc2      	ldr	r7, [pc, #776]	; (80067f4 <ssd1963_setup+0x310>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80064ec:	4cc2      	ldr	r4, [pc, #776]	; (80067f8 <ssd1963_setup+0x314>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RST << 16;
 80064ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f2:	61ab      	str	r3, [r5, #24]
			HAL_Delay(10);
 80064f4:	200a      	movs	r0, #10
 80064f6:	f7fb fd6d 	bl	8001fd4 <HAL_Delay>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RST;
 80064fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064fe:	61ab      	str	r3, [r5, #24]
			HAL_Delay(10);
 8006500:	200a      	movs	r0, #10
 8006502:	f7fb fd67 	bl	8001fd4 <HAL_Delay>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006506:	f44f 7680 	mov.w	r6, #256	; 0x100
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800650a:	23e2      	movs	r3, #226	; 0xe2
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800650c:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006510:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006512:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006514:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006518:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800651a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800651e:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006520:	f44f 4980 	mov.w	r9, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006524:	231e      	movs	r3, #30
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006526:	f04f 4b20 	mov.w	fp, #2684354560	; 0xa0000000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800652a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800652c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006530:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006532:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006536:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006538:	f44f 4820 	mov.w	r8, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800653c:	2102      	movs	r1, #2
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800653e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006542:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006544:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006548:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800654a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800654e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006550:	2054      	movs	r0, #84	; 0x54
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006552:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006556:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006558:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800655c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800655e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006562:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006564:	23e0      	movs	r3, #224	; 0xe0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006566:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800656a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800656c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800656e:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006572:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006574:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006578:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800657a:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800657c:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800657e:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006582:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006584:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006588:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800658a:	f8c4 8018 	str.w	r8, [r4, #24]
				write_data(0x1E);	    											//N=0x36 for 6.5M, 0x23 for 10M crystal
				write_data(0x02);
				write_data(0x54);
			write_cmd(0xE0);														// PLL enable
				write_data(0x01);
				HAL_Delay(1);
 800658e:	f7fb fd21 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006592:	23e0      	movs	r3, #224	; 0xe0
 8006594:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006596:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006598:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800659c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800659e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80065a2:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065a4:	2303      	movs	r3, #3
 80065a6:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80065a8:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065ac:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065ae:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80065b2:	bf00      	nop
			write_cmd(0xE0);
				write_data(0x03);
				HAL_Delay(1);
 80065b4:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065b6:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 80065ba:	f7fb fd0b 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80065be:	2001      	movs	r0, #1
 80065c0:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065c2:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065c4:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80065c8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80065ce:	61a3      	str	r3, [r4, #24]
			write_cmd(0x01);														// software reset
				HAL_Delay(1);
 80065d0:	f7fb fd00 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80065d4:	23e6      	movs	r3, #230	; 0xe6
 80065d6:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065d8:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065da:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80065de:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065e0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80065e4:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065e6:	2303      	movs	r3, #3
 80065e8:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80065ea:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065ee:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065f0:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80065f4:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065f6:	23ff      	movs	r3, #255	; 0xff
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065f8:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065fc:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80065fe:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006602:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006604:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006608:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800660a:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800660e:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006610:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006614:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006616:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800661a:	bf00      	nop
			write_cmd(0xE6);														//PLL setting for PCLK, depends on resolution
				write_data(0x03);
				write_data(0xFF);
				write_data(0xFF);
				HAL_Delay(1);
 800661c:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800661e:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 8006622:	f7fb fcd7 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006626:	23b0      	movs	r3, #176	; 0xb0
 8006628:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800662a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800662c:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006630:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006632:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006636:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006638:	2320      	movs	r3, #32
 800663a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800663c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006640:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006642:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006646:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006648:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800664a:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800664e:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006650:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006654:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006656:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800665a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800665c:	2303      	movs	r3, #3
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800665e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006662:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006664:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006668:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800666a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800666e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006670:	231f      	movs	r3, #31
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006672:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006676:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006678:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800667c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800667e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006682:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006684:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006686:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800668a:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800668c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006690:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006692:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006696:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006698:	23df      	movs	r3, #223	; 0xdf
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800669a:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800669e:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80066a0:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066a4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066a6:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80066aa:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80066ac:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80066b0:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80066b2:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066b6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066b8:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80066bc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80066be:	f8c4 8018 	str.w	r8, [r4, #24]
				write_data(0x03);														//Set HDP	799
				write_data(0x1F);
				write_data(0x01);														//Set VDP	479
				write_data(0xDF);
				write_data(0x00);
				HAL_Delay(1);
 80066c2:	f7fb fc87 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80066c6:	23b4      	movs	r3, #180	; 0xb4
 80066c8:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066ca:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066cc:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80066d0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80066d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80066d6:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80066d8:	2303      	movs	r3, #3
 80066da:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80066dc:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066e0:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066e2:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80066e6:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80066e8:	23a0      	movs	r3, #160	; 0xa0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80066ea:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80066ee:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80066f0:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066f4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066f6:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80066fa:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80066fc:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80066fe:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006702:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006704:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006708:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800670a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800670e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006710:	232e      	movs	r3, #46	; 0x2e
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006712:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006716:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006718:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800671c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800671e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006722:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006724:	2330      	movs	r3, #48	; 0x30
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006726:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800672a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800672c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006730:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006732:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006736:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006738:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800673c:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800673e:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006742:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006744:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006748:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800674a:	230f      	movs	r3, #15
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800674c:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006750:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006752:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006756:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006758:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800675c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800675e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006762:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006764:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006768:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800676a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800676e:	bf00      	nop
				write_data(0x2E);
				write_data(0x30);														//Set HPW	48
				write_data(0x00);														//Set LPS	15
				write_data(0x0F);
				write_data(0x00);
				HAL_Delay(1);
 8006770:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006772:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 8006776:	f7fb fc2d 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800677a:	23b6      	movs	r3, #182	; 0xb6
 800677c:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800677e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006780:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006784:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006786:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800678a:	2102      	movs	r1, #2
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800678c:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800678e:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006790:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006794:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006796:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800679a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800679c:	230d      	movs	r3, #13
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800679e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067a2:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067a4:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067a8:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067aa:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80067ae:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067b0:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067b2:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067b6:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067b8:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067bc:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067be:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80067c2:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067c4:	2110      	movs	r1, #16
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067c6:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067ca:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067cc:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067d0:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067d2:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80067d6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067d8:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067dc:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067de:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067e2:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067e4:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80067e8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067ea:	f8c4 8018 	str.w	r8, [r4, #24]
 80067ee:	e005      	b.n	80067fc <ssd1963_setup+0x318>
 80067f0:	40020400 	.word	0x40020400
 80067f4:	40020000 	.word	0x40020000
 80067f8:	40020800 	.word	0x40020800
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067fc:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067fe:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006802:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006804:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006808:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800680a:	2308      	movs	r3, #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800680c:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006810:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006812:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006816:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006818:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800681c:	bf00      	nop
				write_data(0x00);														//Set VPS	16
				write_data(0x10);
				write_data(0x10);														//Set VPW	16
				write_data(0x00);														//Set FPS	8
				write_data(0x08);
				HAL_Delay(1);
 800681e:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006820:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 8006824:	f7fb fbd6 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006828:	23ba      	movs	r3, #186	; 0xba
 800682a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800682c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800682e:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006832:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006834:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006838:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800683a:	230f      	movs	r3, #15
 800683c:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800683e:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006842:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006844:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006848:	bf00      	nop
			write_cmd(0xBA);
				write_data(0x0F);														//GPIO[3:0] out 1
				HAL_Delay(1);
 800684a:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800684c:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 8006850:	f7fb fbc0 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006854:	21b8      	movs	r1, #184	; 0xb8
 8006856:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006858:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800685a:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800685e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006860:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006864:	f04f 0c07 	mov.w	ip, #7
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006868:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800686a:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800686e:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006872:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006874:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006878:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800687a:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800687c:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006880:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006882:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006886:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006888:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800688c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800688e:	f8c4 8018 	str.w	r8, [r4, #24]
			write_cmd(0xB8);
				write_data(0x07);	   											 //GPIO3=input, GPIO[2:0]=output
				write_data(0x01);														//GPIO0 normal
				HAL_Delay(1);
 8006892:	f7fb fb9f 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006896:	f04f 0c36 	mov.w	ip, #54	; 0x36
 800689a:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800689e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80068a0:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80068a4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80068a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80068aa:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80068ac:	2308      	movs	r3, #8
 80068ae:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80068b0:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80068b4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80068b6:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80068ba:	bf00      	nop
			write_cmd(0x36);														//rotation
				write_data(0x08);		//write_data(0x2A);
				HAL_Delay(1);
 80068bc:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80068be:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 80068c2:	f7fb fb87 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80068c6:	23f0      	movs	r3, #240	; 0xf0
 80068c8:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80068ca:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80068cc:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80068d0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80068d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80068d6:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80068d8:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80068da:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80068dc:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80068e0:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80068e2:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80068e6:	bf00      	nop
			
			write_cmd(0xF0);														//pixel data interface
				write_data(0x00);
				HAL_Delay(1);
 80068e8:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80068ea:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 80068ee:	f7fb fb71 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80068f2:	21b8      	movs	r1, #184	; 0xb8
 80068f4:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80068f6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80068f8:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80068fc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80068fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006902:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006904:	230f      	movs	r3, #15
 8006906:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006908:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800690c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800690e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006912:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006914:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006916:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800691a:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800691c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006920:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006922:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006926:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006928:	f8c4 8018 	str.w	r8, [r4, #24]
			write_cmd(0xB8);
				write_data(0x0f);   											 //GPIO is controlled by host GPIO[3:0]=output   GPIO[0]=1  LCD ON  GPIO[0]=1  LCD OFF 
				write_data(0x01);   											 //GPIO0 normal
				HAL_Delay(1);
 800692c:	f7fb fb52 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006930:	23ba      	movs	r3, #186	; 0xba
 8006932:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006934:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006936:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800693a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800693c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006940:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006942:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006944:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006946:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800694a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800694c:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006950:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006952:	f8c4 8018 	str.w	r8, [r4, #24]
			write_cmd(0xBA);
				write_data(0x01);    												//GPIO[0] out 1 --- LCD display on/off control PIN
				HAL_Delay(1);
 8006956:	f7fb fb3d 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800695a:	2129      	movs	r1, #41	; 0x29
 800695c:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800695e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006960:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006964:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006966:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800696a:	f04f 0cbe 	mov.w	ip, #190	; 0xbe
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800696e:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006970:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006974:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006976:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800697a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800697c:	f04f 0c06 	mov.w	ip, #6
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006980:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006982:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006986:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800698a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800698c:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006990:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006992:	23f0      	movs	r3, #240	; 0xf0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006994:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006998:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800699a:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800699e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80069a0:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80069a4:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80069a6:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80069a8:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80069ac:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80069ae:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80069b2:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80069b4:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80069b8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80069ba:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80069be:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80069c0:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80069c4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80069c6:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80069ca:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80069cc:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80069d0:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80069d2:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80069d6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80069d8:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80069dc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80069de:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80069e2:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80069e4:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80069e8:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80069ea:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80069ee:	bf00      	nop
				write_data(0xf0);
				write_data(0x00);
				write_data(0xf0);
				write_data(0x00);
				write_data(0x00);
				HAL_Delay(1);
 80069f0:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80069f2:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 80069f6:	f7fb faed 	bl	8001fd4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80069fa:	20d0      	movs	r0, #208	; 0xd0
 80069fc:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80069fe:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a00:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006a04:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006a0a:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006a0c:	230d      	movs	r3, #13
 8006a0e:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006a10:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a14:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a16:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8006a1a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a1c:	232c      	movs	r3, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a1e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a22:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a24:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a26:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006a2a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a2c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a30:	2129      	movs	r1, #41	; 0x29
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a32:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a34:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a36:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a38:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8006a3c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a3e:	61a3      	str	r3, [r4, #24]
			write_cmd(0xd0); 
				write_data(0x0d);	
			write_cmd(0x2C); 
			write_cmd(0x29);
		}	
 8006a40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006a44 <symbol>:
				fill_area(390,500,200,290, BLACK);		
			}	
		}

		void symbol (u32 x, u32 y,s8 sym, u32 color)
		{
 8006a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if(sym == '+')
 8006a48:	2a2b      	cmp	r2, #43	; 0x2b
		{
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	461c      	mov	r4, r3
 8006a50:	460d      	mov	r5, r1
			if(sym == '+')
 8006a52:	f000 8123 	beq.w	8006c9c <symbol+0x258>
				draw_vl(x+8,y-7,16,color);
				draw_vl(x+9,y-7,16,color);
				draw_vl(x+6,y-7,16,color);
				draw_vl(x+7,y-7,16,color);
			}	
			if(sym == '-')
 8006a56:	2a2d      	cmp	r2, #45	; 0x2d
 8006a58:	f040 80f2 	bne.w	8006c40 <symbol+0x1fc>
				set_pixel(x+i, y, color);
 8006a5c:	b286      	uxth	r6, r0
			write_data((color)>>16);
 8006a5e:	0c1a      	lsrs	r2, r3, #16
			write_data((color)>>8);
 8006a60:	ea4f 2a13 	mov.w	sl, r3, lsr #8
				set_pixel(x+i, y, color);
 8006a64:	b28d      	uxth	r5, r1
 8006a66:	f106 0810 	add.w	r8, r6, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a6a:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006c98 <symbol+0x254>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a6e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8006c94 <symbol+0x250>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a72:	4f87      	ldr	r7, [pc, #540]	; (8006c90 <symbol+0x24c>)
				set_pixel(x+i, y, color);
 8006a74:	9604      	str	r6, [sp, #16]
 8006a76:	462b      	mov	r3, r5
			write_data((color)>>16);
 8006a78:	9203      	str	r2, [sp, #12]
				set_pixel(x+i, y, color);
 8006a7a:	4635      	mov	r5, r6
 8006a7c:	fa1f f888 	uxth.w	r8, r8
 8006a80:	4656      	mov	r6, sl
 8006a82:	46a2      	mov	sl, r4
 8006a84:	4614      	mov	r4, r2
			set_window(x, x, y, y);
 8006a86:	461a      	mov	r2, r3
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	9302      	str	r3, [sp, #8]
 8006a8e:	f7fe fd51 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a92:	222c      	movs	r2, #44	; 0x2c
 8006a94:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a98:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006aa0:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006aa4:	61ba      	str	r2, [r7, #24]
			__asm("nop");
 8006aa6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006aa8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006aac:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ab0:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ab4:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006ab6:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006aba:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006abe:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ac2:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006ac4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ac6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006aca:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006acc:	f8cb 6014 	str.w	r6, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006ad0:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ad4:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ad8:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006ada:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006adc:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006ade:	f8cb a014 	str.w	sl, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006ae2:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ae6:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006aea:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006aec:	bf00      	nop
			for (i=0; i<= l; i++)
 8006aee:	3501      	adds	r5, #1
 8006af0:	b2ad      	uxth	r5, r5
 8006af2:	4545      	cmp	r5, r8
 8006af4:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006af6:	61ba      	str	r2, [r7, #24]
			for (i=0; i<= l; i++)
 8006af8:	d1c5      	bne.n	8006a86 <symbol+0x42>
			{	
				draw_hl(x,y,15,color);
				draw_hl(x,y+1,15,color);
 8006afa:	4654      	mov	r4, sl
 8006afc:	46b2      	mov	sl, r6
 8006afe:	9e04      	ldr	r6, [sp, #16]
 8006b00:	f103 0901 	add.w	r9, r3, #1
 8006b04:	461d      	mov	r5, r3
 8006b06:	fa1f f989 	uxth.w	r9, r9
 8006b0a:	4637      	mov	r7, r6
				set_pixel(x+i, y, color);
 8006b0c:	4638      	mov	r0, r7
			for (i=0; i<= l; i++)
 8006b0e:	3701      	adds	r7, #1
				set_pixel(x+i, y, color);
 8006b10:	4622      	mov	r2, r4
 8006b12:	4649      	mov	r1, r9
			for (i=0; i<= l; i++)
 8006b14:	b2bf      	uxth	r7, r7
				set_pixel(x+i, y, color);
 8006b16:	f7fe fe0b 	bl	8005730 <set_pixel>
			for (i=0; i<= l; i++)
 8006b1a:	45b8      	cmp	r8, r7
 8006b1c:	d1f6      	bne.n	8006b0c <symbol+0xc8>
				draw_hl(x,y+2,15,color);
 8006b1e:	1cab      	adds	r3, r5, #2
 8006b20:	4631      	mov	r1, r6
 8006b22:	9604      	str	r6, [sp, #16]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006b24:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006c98 <symbol+0x254>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b28:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8006c94 <symbol+0x250>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b2c:	4f58      	ldr	r7, [pc, #352]	; (8006c90 <symbol+0x24c>)
				draw_hl(x,y+2,15,color);
 8006b2e:	4656      	mov	r6, sl
 8006b30:	46a2      	mov	sl, r4
 8006b32:	9c03      	ldr	r4, [sp, #12]
 8006b34:	ee07 5a90 	vmov	s15, r5
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	460d      	mov	r5, r1
			set_window(x, x, y, y);
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4629      	mov	r1, r5
 8006b40:	4628      	mov	r0, r5
 8006b42:	9302      	str	r3, [sp, #8]
 8006b44:	f7fe fcf6 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006b48:	222c      	movs	r2, #44	; 0x2c
 8006b4a:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b56:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b5a:	61ba      	str	r2, [r7, #24]
			__asm("nop");
 8006b5c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b5e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b62:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b66:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b6a:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006b6c:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b70:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b74:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b78:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006b7a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b7c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006b80:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006b82:	f8cb 6014 	str.w	r6, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b86:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b8a:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b8e:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006b90:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b92:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006b94:	f8cb a014 	str.w	sl, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b98:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b9c:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ba0:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006ba2:	bf00      	nop
			for (i=0; i<= l; i++)
 8006ba4:	1c69      	adds	r1, r5, #1
 8006ba6:	b28d      	uxth	r5, r1
 8006ba8:	45a8      	cmp	r8, r5
 8006baa:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bac:	61ba      	str	r2, [r7, #24]
			for (i=0; i<= l; i++)
 8006bae:	d1c5      	bne.n	8006b3c <symbol+0xf8>
				draw_hl(x,y+3,15,color);
 8006bb0:	ee17 5a90 	vmov	r5, s15
 8006bb4:	3503      	adds	r5, #3
 8006bb6:	4654      	mov	r4, sl
 8006bb8:	fa1f fb85 	uxth.w	fp, r5
 8006bbc:	46b2      	mov	sl, r6
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bbe:	465b      	mov	r3, fp
				draw_hl(x,y+3,15,color);
 8006bc0:	9e04      	ldr	r6, [sp, #16]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006bc2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8006c98 <symbol+0x254>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006bc6:	4d33      	ldr	r5, [pc, #204]	; (8006c94 <symbol+0x250>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bc8:	4f31      	ldr	r7, [pc, #196]	; (8006c90 <symbol+0x24c>)
 8006bca:	46a3      	mov	fp, r4
 8006bcc:	9c03      	ldr	r4, [sp, #12]
			set_window(x, x, y, y);
 8006bce:	9302      	str	r3, [sp, #8]
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f7fe fcad 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006bda:	222c      	movs	r2, #44	; 0x2c
 8006bdc:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006be0:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006be4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006be8:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bea:	61ba      	str	r2, [r7, #24]
			__asm("nop");
 8006bec:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bee:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006bf2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bf6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bfa:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006bfc:	f8c9 4014 	str.w	r4, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006c00:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c04:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c06:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006c08:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c0a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c0e:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006c10:	f8c9 a014 	str.w	sl, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006c14:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c18:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c1a:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006c1c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c1e:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006c20:	f8c9 b014 	str.w	fp, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006c24:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c28:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c2a:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8006c2c:	bf00      	nop
			for (i=0; i<= l; i++)
 8006c2e:	3601      	adds	r6, #1
 8006c30:	b2b6      	uxth	r6, r6
 8006c32:	45b0      	cmp	r8, r6
 8006c34:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c36:	61ba      	str	r2, [r7, #24]
			for (i=0; i<= l; i++)
 8006c38:	d1c9      	bne.n	8006bce <symbol+0x18a>
				draw_line(x, y+2, x-7, y+9, color);
				draw_line(x, y+3, x-6, y+9, color);
			}
			
			
		}
 8006c3a:	b007      	add	sp, #28
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(sym == 'D')
 8006c40:	2a44      	cmp	r2, #68	; 0x44
 8006c42:	f040 81d6 	bne.w	8006ff2 <symbol+0x5ae>
 8006c46:	351e      	adds	r5, #30
 8006c48:	ea4f 0940 	mov.w	r9, r0, lsl #1
 8006c4c:	eba5 0a00 	sub.w	sl, r5, r0
					fill_area(x-10+i,x+5,y+20,y+20+i,color);
 8006c50:	f100 0805 	add.w	r8, r0, #5
 8006c54:	f101 0714 	add.w	r7, r1, #20
 8006c58:	f109 090a 	add.w	r9, r9, #10
 8006c5c:	f1a0 0509 	sub.w	r5, r0, #9
 8006c60:	3606      	adds	r6, #6
 8006c62:	eb0a 0305 	add.w	r3, sl, r5
 8006c66:	4628      	mov	r0, r5
 8006c68:	463a      	mov	r2, r7
 8006c6a:	4641      	mov	r1, r8
 8006c6c:	9400      	str	r4, [sp, #0]
 8006c6e:	9302      	str	r3, [sp, #8]
 8006c70:	f7fe fd0c 	bl	800568c <fill_area>
					fill_area(x+5,x+20-i,y+20,y+20+i,color);
 8006c74:	eba9 0105 	sub.w	r1, r9, r5
 8006c78:	9b02      	ldr	r3, [sp, #8]
 8006c7a:	9400      	str	r4, [sp, #0]
 8006c7c:	463a      	mov	r2, r7
 8006c7e:	4640      	mov	r0, r8
				for(int i=1; i<=15; i++)
 8006c80:	3501      	adds	r5, #1
					fill_area(x+5,x+20-i,y+20,y+20+i,color);
 8006c82:	f7fe fd03 	bl	800568c <fill_area>
				for(int i=1; i<=15; i++)
 8006c86:	42b5      	cmp	r5, r6
 8006c88:	d1eb      	bne.n	8006c62 <symbol+0x21e>
		}
 8006c8a:	b007      	add	sp, #28
 8006c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c90:	40020800 	.word	0x40020800
 8006c94:	40020400 	.word	0x40020400
 8006c98:	40020000 	.word	0x40020000
				set_pixel(x+i, y, color);
 8006c9c:	b281      	uxth	r1, r0
 8006c9e:	b2ad      	uxth	r5, r5
 8006ca0:	f101 0910 	add.w	r9, r1, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006ca4:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8006f6c <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ca8:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8006f70 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006cac:	4eae      	ldr	r6, [pc, #696]	; (8006f68 <symbol+0x524>)
				set_pixel(x+i, y, color);
 8006cae:	9104      	str	r1, [sp, #16]
			write_data((color)>>16);
 8006cb0:	0c1f      	lsrs	r7, r3, #16
			write_data((color)>>8);
 8006cb2:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8006cb6:	fa1f f989 	uxth.w	r9, r9
				set_pixel(x+i, y, color);
 8006cba:	462b      	mov	r3, r5
 8006cbc:	4625      	mov	r5, r4
 8006cbe:	460c      	mov	r4, r1
			set_window(x, x, y, y);
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	9302      	str	r3, [sp, #8]
 8006cc8:	f7fe fc34 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006ccc:	222c      	movs	r2, #44	; 0x2c
 8006cce:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006cd6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006cda:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006cde:	61b2      	str	r2, [r6, #24]
			__asm("nop");
 8006ce0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ce2:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006ce6:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006cea:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006cee:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006cf0:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006cf4:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006cf8:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006cfc:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006cfe:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d00:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006d04:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006d06:	f8cb 8014 	str.w	r8, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006d0a:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d0e:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d12:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006d14:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d16:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006d18:	f8cb 5014 	str.w	r5, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006d1c:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d20:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d24:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006d26:	bf00      	nop
			for (i=0; i<= l; i++)
 8006d28:	3401      	adds	r4, #1
 8006d2a:	b2a4      	uxth	r4, r4
 8006d2c:	454c      	cmp	r4, r9
 8006d2e:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d30:	61b2      	str	r2, [r6, #24]
			for (i=0; i<= l; i++)
 8006d32:	d1c5      	bne.n	8006cc0 <symbol+0x27c>
				draw_hl(x,y+1,15,color);
 8006d34:	f103 0a01 	add.w	sl, r3, #1
 8006d38:	9e04      	ldr	r6, [sp, #16]
 8006d3a:	462c      	mov	r4, r5
 8006d3c:	fa1f fa8a 	uxth.w	sl, sl
 8006d40:	461d      	mov	r5, r3
				set_pixel(x+i, y, color);
 8006d42:	4630      	mov	r0, r6
			for (i=0; i<= l; i++)
 8006d44:	3601      	adds	r6, #1
				set_pixel(x+i, y, color);
 8006d46:	4622      	mov	r2, r4
 8006d48:	4651      	mov	r1, sl
			for (i=0; i<= l; i++)
 8006d4a:	b2b6      	uxth	r6, r6
				set_pixel(x+i, y, color);
 8006d4c:	f7fe fcf0 	bl	8005730 <set_pixel>
			for (i=0; i<= l; i++)
 8006d50:	454e      	cmp	r6, r9
 8006d52:	d1f6      	bne.n	8006d42 <symbol+0x2fe>
				draw_hl(x,y+2,15,color);
 8006d54:	f105 0a02 	add.w	sl, r5, #2
 8006d58:	9e04      	ldr	r6, [sp, #16]
 8006d5a:	fa1f fa8a 	uxth.w	sl, sl
				set_pixel(x+i, y, color);
 8006d5e:	4630      	mov	r0, r6
			for (i=0; i<= l; i++)
 8006d60:	3601      	adds	r6, #1
				set_pixel(x+i, y, color);
 8006d62:	4622      	mov	r2, r4
 8006d64:	4651      	mov	r1, sl
			for (i=0; i<= l; i++)
 8006d66:	b2b6      	uxth	r6, r6
				set_pixel(x+i, y, color);
 8006d68:	f7fe fce2 	bl	8005730 <set_pixel>
			for (i=0; i<= l; i++)
 8006d6c:	454e      	cmp	r6, r9
 8006d6e:	d1f6      	bne.n	8006d5e <symbol+0x31a>
				draw_hl(x,y+3,15,color);
 8006d70:	f105 0a03 	add.w	sl, r5, #3
 8006d74:	9e04      	ldr	r6, [sp, #16]
 8006d76:	fa1f fa8a 	uxth.w	sl, sl
				set_pixel(x+i, y, color);
 8006d7a:	4630      	mov	r0, r6
			for (i=0; i<= l; i++)
 8006d7c:	3601      	adds	r6, #1
				set_pixel(x+i, y, color);
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4651      	mov	r1, sl
			for (i=0; i<= l; i++)
 8006d82:	b2b6      	uxth	r6, r6
				set_pixel(x+i, y, color);
 8006d84:	f7fe fcd4 	bl	8005730 <set_pixel>
			for (i=0; i<= l; i++)
 8006d88:	454e      	cmp	r6, r9
 8006d8a:	d1f6      	bne.n	8006d7a <symbol+0x336>
				draw_vl(x+8,y-7,16,color);
 8006d8c:	9b04      	ldr	r3, [sp, #16]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006d8e:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8006f6c <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d92:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8006f70 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d96:	4e74      	ldr	r6, [pc, #464]	; (8006f68 <symbol+0x524>)
				draw_vl(x+8,y-7,16,color);
 8006d98:	f1a5 0907 	sub.w	r9, r5, #7
 8006d9c:	fa1f f989 	uxth.w	r9, r9
 8006da0:	f103 0108 	add.w	r1, r3, #8
 8006da4:	350a      	adds	r5, #10
 8006da6:	464b      	mov	r3, r9
 8006da8:	b289      	uxth	r1, r1
 8006daa:	e9cd 8402 	strd	r8, r4, [sp, #8]
 8006dae:	f8cd 9014 	str.w	r9, [sp, #20]
 8006db2:	b2ad      	uxth	r5, r5
 8006db4:	4689      	mov	r9, r1
 8006db6:	4698      	mov	r8, r3
			set_window(x, x, y, y);
 8006db8:	4642      	mov	r2, r8
 8006dba:	4648      	mov	r0, r9
 8006dbc:	4643      	mov	r3, r8
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	f7fe fbb8 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006dc4:	222c      	movs	r2, #44	; 0x2c
 8006dc6:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006dca:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dd2:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006dd6:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006dd8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006dda:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006dde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006de2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006de6:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006de8:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006dec:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006dee:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006df2:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006df4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006df6:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006dfa:	9c02      	ldr	r4, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006dfc:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006dfe:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006e02:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e04:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e08:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006e0a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e0c:	9c03      	ldr	r4, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e0e:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e10:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006e14:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e16:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e1a:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006e1c:	bf00      	nop
			for (i=0; i<= l; i++)
 8006e1e:	f108 0301 	add.w	r3, r8, #1
 8006e22:	fa1f f883 	uxth.w	r8, r3
 8006e26:	4545      	cmp	r5, r8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e28:	61b0      	str	r0, [r6, #24]
			for (i=0; i<= l; i++)
 8006e2a:	d1c5      	bne.n	8006db8 <symbol+0x374>
				draw_vl(x+9,y-7,16,color);
 8006e2c:	e9dd 3904 	ldrd	r3, r9, [sp, #16]
 8006e30:	f103 0109 	add.w	r1, r3, #9
 8006e34:	b289      	uxth	r1, r1
 8006e36:	464b      	mov	r3, r9
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006e38:	f8df b130 	ldr.w	fp, [pc, #304]	; 8006f6c <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e3c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8006f70 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e40:	4e49      	ldr	r6, [pc, #292]	; (8006f68 <symbol+0x524>)
				draw_vl(x+9,y-7,16,color);
 8006e42:	4689      	mov	r9, r1
 8006e44:	4698      	mov	r8, r3
			set_window(x, x, y, y);
 8006e46:	4642      	mov	r2, r8
 8006e48:	4648      	mov	r0, r9
 8006e4a:	4643      	mov	r3, r8
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	f7fe fb71 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006e52:	222c      	movs	r2, #44	; 0x2c
 8006e54:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e58:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e60:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e64:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006e66:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e68:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e70:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e74:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e76:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006e7a:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e7c:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e80:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006e82:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e84:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e88:	9c02      	ldr	r4, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e8a:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e8c:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006e90:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e92:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e96:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006e98:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e9a:	9c03      	ldr	r4, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e9c:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e9e:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006ea2:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ea4:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ea8:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006eaa:	bf00      	nop
			for (i=0; i<= l; i++)
 8006eac:	f108 0301 	add.w	r3, r8, #1
 8006eb0:	fa1f f883 	uxth.w	r8, r3
 8006eb4:	4545      	cmp	r5, r8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006eb6:	61b0      	str	r0, [r6, #24]
			for (i=0; i<= l; i++)
 8006eb8:	d1c5      	bne.n	8006e46 <symbol+0x402>
				draw_vl(x+6,y-7,16,color);
 8006eba:	e9dd 3904 	ldrd	r3, r9, [sp, #16]
 8006ebe:	1d99      	adds	r1, r3, #6
 8006ec0:	b289      	uxth	r1, r1
 8006ec2:	464b      	mov	r3, r9
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006ec4:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8006f6c <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ec8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8006f70 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ecc:	4e26      	ldr	r6, [pc, #152]	; (8006f68 <symbol+0x524>)
				draw_vl(x+6,y-7,16,color);
 8006ece:	4689      	mov	r9, r1
 8006ed0:	4698      	mov	r8, r3
			set_window(x, x, y, y);
 8006ed2:	4642      	mov	r2, r8
 8006ed4:	4648      	mov	r0, r9
 8006ed6:	4643      	mov	r3, r8
 8006ed8:	4649      	mov	r1, r9
 8006eda:	f7fe fb2b 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006ede:	222c      	movs	r2, #44	; 0x2c
 8006ee0:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ee4:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eec:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ef0:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006ef2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ef4:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006ef8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006efc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f00:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f02:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006f06:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f08:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f0c:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006f0e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f10:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f14:	9c02      	ldr	r4, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f16:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f18:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006f1c:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f1e:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f22:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006f24:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f26:	9c03      	ldr	r4, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f28:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f2a:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006f2e:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f30:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f34:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8006f36:	bf00      	nop
			for (i=0; i<= l; i++)
 8006f38:	f108 0301 	add.w	r3, r8, #1
 8006f3c:	fa1f f883 	uxth.w	r8, r3
 8006f40:	4545      	cmp	r5, r8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f42:	61b0      	str	r0, [r6, #24]
			for (i=0; i<= l; i++)
 8006f44:	d1c5      	bne.n	8006ed2 <symbol+0x48e>
				draw_vl(x+7,y-7,16,color);
 8006f46:	e9dd 8402 	ldrd	r8, r4, [sp, #8]
 8006f4a:	9904      	ldr	r1, [sp, #16]
 8006f4c:	f8dd 9014 	ldr.w	r9, [sp, #20]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006f50:	f8df b018 	ldr.w	fp, [pc, #24]	; 8006f6c <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f54:	f8df a018 	ldr.w	sl, [pc, #24]	; 8006f70 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f58:	4e03      	ldr	r6, [pc, #12]	; (8006f68 <symbol+0x524>)
 8006f5a:	4623      	mov	r3, r4
				draw_vl(x+7,y-7,16,color);
 8006f5c:	3107      	adds	r1, #7
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f5e:	4644      	mov	r4, r8
				draw_vl(x+7,y-7,16,color);
 8006f60:	b289      	uxth	r1, r1
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f62:	4698      	mov	r8, r3
 8006f64:	e006      	b.n	8006f74 <symbol+0x530>
 8006f66:	bf00      	nop
 8006f68:	40020800 	.word	0x40020800
 8006f6c:	40020000 	.word	0x40020000
 8006f70:	40020400 	.word	0x40020400
			set_window(x, x, y, y);
 8006f74:	464b      	mov	r3, r9
 8006f76:	464a      	mov	r2, r9
 8006f78:	4608      	mov	r0, r1
 8006f7a:	9102      	str	r1, [sp, #8]
 8006f7c:	f7fe fada 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006f80:	222c      	movs	r2, #44	; 0x2c
 8006f82:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f86:	f44f 7380 	mov.w	r3, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f8e:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f92:	61b2      	str	r2, [r6, #24]
			__asm("nop");
 8006f94:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f96:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006f9a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f9e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006fa2:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006fa4:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006fa8:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006fac:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006fb0:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006fb2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006fb4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006fb8:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006fba:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006fbe:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006fc2:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006fc6:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006fc8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006fca:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006fcc:	f8cb 8014 	str.w	r8, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006fd0:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006fd4:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006fd8:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006fda:	bf00      	nop
			for (i=0; i<= l; i++)
 8006fdc:	f109 0901 	add.w	r9, r9, #1
 8006fe0:	fa1f f989 	uxth.w	r9, r9
 8006fe4:	454d      	cmp	r5, r9
 8006fe6:	9902      	ldr	r1, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006fe8:	61b2      	str	r2, [r6, #24]
			for (i=0; i<= l; i++)
 8006fea:	d1c3      	bne.n	8006f74 <symbol+0x530>
		}
 8006fec:	b007      	add	sp, #28
 8006fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(sym == '<')   /// for LEFT Arrow  symbol
 8006ff2:	2a3c      	cmp	r2, #60	; 0x3c
 8006ff4:	d144      	bne.n	8007080 <symbol+0x63c>
				draw_line(x, y, x+9, y-9, color);
 8006ff6:	f100 0709 	add.w	r7, r0, #9
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	463a      	mov	r2, r7
 8006ffe:	f1a1 0309 	sub.w	r3, r1, #9
				draw_line(x+1, y, x+9, y-8, color);
 8007002:	f106 0a01 	add.w	sl, r6, #1
				draw_line(x, y, x+9, y-9, color);
 8007006:	f7ff f817 	bl	8006038 <draw_line>
				draw_line(x+2, y, x+9, y-7, color);
 800700a:	f106 0902 	add.w	r9, r6, #2
				draw_line(x+1, y, x+9, y-8, color);
 800700e:	f1a5 0308 	sub.w	r3, r5, #8
 8007012:	463a      	mov	r2, r7
 8007014:	4629      	mov	r1, r5
 8007016:	4650      	mov	r0, sl
 8007018:	9400      	str	r4, [sp, #0]
 800701a:	f7ff f80d 	bl	8006038 <draw_line>
				draw_line(x+2, y, x+9, y-7, color);
 800701e:	9400      	str	r4, [sp, #0]
 8007020:	1feb      	subs	r3, r5, #7
 8007022:	463a      	mov	r2, r7
 8007024:	4629      	mov	r1, r5
 8007026:	4648      	mov	r0, r9
 8007028:	f7ff f806 	bl	8006038 <draw_line>
				draw_line(x+3, y, x+9, y-6, color);
 800702c:	f106 0803 	add.w	r8, r6, #3
 8007030:	9400      	str	r4, [sp, #0]
				draw_line(x-3, y, x-9, y-6, color);
 8007032:	1fab      	subs	r3, r5, #6
 8007034:	463a      	mov	r2, r7
 8007036:	4629      	mov	r1, r5
 8007038:	4640      	mov	r0, r8
 800703a:	f7fe fffd 	bl	8006038 <draw_line>
				draw_line(x, y, x-9, y+9, color);
 800703e:	4630      	mov	r0, r6
 8007040:	f105 0309 	add.w	r3, r5, #9
 8007044:	463a      	mov	r2, r7
 8007046:	4629      	mov	r1, r5
 8007048:	9400      	str	r4, [sp, #0]
 800704a:	f7fe fff5 	bl	8006038 <draw_line>
				draw_line(x-1, y, x-9, y+8, color);
 800704e:	4650      	mov	r0, sl
 8007050:	f105 0308 	add.w	r3, r5, #8
 8007054:	463a      	mov	r2, r7
 8007056:	4629      	mov	r1, r5
 8007058:	9400      	str	r4, [sp, #0]
 800705a:	f7fe ffed 	bl	8006038 <draw_line>
				draw_line(x-2, y, x-9, y+7, color);
 800705e:	4648      	mov	r0, r9
 8007060:	1deb      	adds	r3, r5, #7
 8007062:	463a      	mov	r2, r7
 8007064:	4629      	mov	r1, r5
 8007066:	9400      	str	r4, [sp, #0]
 8007068:	f7fe ffe6 	bl	8006038 <draw_line>
				draw_line(x-3, y, x-9, y+6, color);
 800706c:	9400      	str	r4, [sp, #0]
 800706e:	1dab      	adds	r3, r5, #6
 8007070:	463a      	mov	r2, r7
 8007072:	4629      	mov	r1, r5
 8007074:	4640      	mov	r0, r8
 8007076:	f7fe ffdf 	bl	8006038 <draw_line>
		}
 800707a:	b007      	add	sp, #28
 800707c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(sym == '>')   /// for RIGHT Arrow  symbol
 8007080:	2a3e      	cmp	r2, #62	; 0x3e
 8007082:	d11e      	bne.n	80070c2 <symbol+0x67e>
        draw_line(x, y, x-9, y-9, color);
 8007084:	f1a0 0709 	sub.w	r7, r0, #9
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	463a      	mov	r2, r7
 800708c:	f1a1 0309 	sub.w	r3, r1, #9
				draw_line(x-1, y, x-9, y-8, color);
 8007090:	f106 3aff 	add.w	sl, r6, #4294967295
        draw_line(x, y, x-9, y-9, color);
 8007094:	f7fe ffd0 	bl	8006038 <draw_line>
				draw_line(x-2, y, x-9, y-7, color);
 8007098:	f1a6 0902 	sub.w	r9, r6, #2
				draw_line(x-1, y, x-9, y-8, color);
 800709c:	f1a5 0308 	sub.w	r3, r5, #8
 80070a0:	463a      	mov	r2, r7
 80070a2:	4629      	mov	r1, r5
 80070a4:	4650      	mov	r0, sl
 80070a6:	9400      	str	r4, [sp, #0]
 80070a8:	f7fe ffc6 	bl	8006038 <draw_line>
				draw_line(x-2, y, x-9, y-7, color);
 80070ac:	9400      	str	r4, [sp, #0]
 80070ae:	1feb      	subs	r3, r5, #7
 80070b0:	463a      	mov	r2, r7
 80070b2:	4629      	mov	r1, r5
 80070b4:	4648      	mov	r0, r9
 80070b6:	f7fe ffbf 	bl	8006038 <draw_line>
				draw_line(x-3, y, x-9, y-6, color);
 80070ba:	f1a6 0803 	sub.w	r8, r6, #3
 80070be:	9400      	str	r4, [sp, #0]
 80070c0:	e7b7      	b.n	8007032 <symbol+0x5ee>
			if(sym == '^')   /// for UP Arrow  symbol
 80070c2:	2a5e      	cmp	r2, #94	; 0x5e
 80070c4:	f47f adb9 	bne.w	8006c3a <symbol+0x1f6>
        draw_line(x, y, x+9, y+9, color);
 80070c8:	f101 0709 	add.w	r7, r1, #9
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	f100 0209 	add.w	r2, r0, #9
 80070d2:	463b      	mov	r3, r7
				draw_line(x, y+1, x+8, y+9, color);
 80070d4:	f105 0a01 	add.w	sl, r5, #1
        draw_line(x, y, x+9, y+9, color);
 80070d8:	f7fe ffae 	bl	8006038 <draw_line>
				draw_line(x, y+2, x+7, y+9, color);
 80070dc:	f105 0902 	add.w	r9, r5, #2
				draw_line(x, y+1, x+8, y+9, color);
 80070e0:	463b      	mov	r3, r7
 80070e2:	f106 0208 	add.w	r2, r6, #8
 80070e6:	4651      	mov	r1, sl
 80070e8:	4630      	mov	r0, r6
 80070ea:	9400      	str	r4, [sp, #0]
 80070ec:	f7fe ffa4 	bl	8006038 <draw_line>
				draw_line(x, y+3, x+6, y+9, color);
 80070f0:	f105 0803 	add.w	r8, r5, #3
				draw_line(x, y+2, x+7, y+9, color);
 80070f4:	463b      	mov	r3, r7
 80070f6:	1df2      	adds	r2, r6, #7
 80070f8:	4649      	mov	r1, r9
 80070fa:	4630      	mov	r0, r6
 80070fc:	9400      	str	r4, [sp, #0]
 80070fe:	f7fe ff9b 	bl	8006038 <draw_line>
				draw_line(x, y+3, x+6, y+9, color);
 8007102:	463b      	mov	r3, r7
 8007104:	1db2      	adds	r2, r6, #6
 8007106:	4641      	mov	r1, r8
 8007108:	4630      	mov	r0, r6
 800710a:	9400      	str	r4, [sp, #0]
 800710c:	f7fe ff94 	bl	8006038 <draw_line>
				draw_line(x, y, x-9, y+9, color);
 8007110:	4629      	mov	r1, r5
 8007112:	463b      	mov	r3, r7
 8007114:	f1a6 0209 	sub.w	r2, r6, #9
 8007118:	4630      	mov	r0, r6
 800711a:	9400      	str	r4, [sp, #0]
 800711c:	f7fe ff8c 	bl	8006038 <draw_line>
				draw_line(x, y+1, x-8, y+9, color);
 8007120:	4651      	mov	r1, sl
 8007122:	463b      	mov	r3, r7
 8007124:	f1a6 0208 	sub.w	r2, r6, #8
 8007128:	4630      	mov	r0, r6
 800712a:	9400      	str	r4, [sp, #0]
 800712c:	f7fe ff84 	bl	8006038 <draw_line>
				draw_line(x, y+2, x-7, y+9, color);
 8007130:	4649      	mov	r1, r9
 8007132:	463b      	mov	r3, r7
 8007134:	1ff2      	subs	r2, r6, #7
 8007136:	4630      	mov	r0, r6
 8007138:	9400      	str	r4, [sp, #0]
 800713a:	f7fe ff7d 	bl	8006038 <draw_line>
				draw_line(x, y+3, x-6, y+9, color);
 800713e:	9400      	str	r4, [sp, #0]
 8007140:	463b      	mov	r3, r7
 8007142:	1fb2      	subs	r2, r6, #6
 8007144:	4641      	mov	r1, r8
 8007146:	4630      	mov	r0, r6
 8007148:	f7fe ff76 	bl	8006038 <draw_line>
		}
 800714c:	e575      	b.n	8006c3a <symbol+0x1f6>
 800714e:	bf00      	nop

08007150 <fill_roundrect2>:
			draw_roundrect(x,x+len,y,y+15,color);
			fill_area(x+2,x+len-2,y+2,y+13,0x00627d);
		}
			
void fill_roundrect2(u32 x1,u32 x2,u32 y1,u32 y2,u32 fill_color)
{
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	b08b      	sub	sp, #44	; 0x2c
 8007156:	461c      	mov	r4, r3
 8007158:	9306      	str	r3, [sp, #24]
	if ((x2-x1)>4 && (y2-y1)>4)
 800715a:	1a0b      	subs	r3, r1, r0
 800715c:	2b04      	cmp	r3, #4
 800715e:	f240 813b 	bls.w	80073d8 <fill_roundrect2+0x288>
 8007162:	1aa3      	subs	r3, r4, r2
 8007164:	2b04      	cmp	r3, #4
 8007166:	f240 8137 	bls.w	80073d8 <fill_roundrect2+0x288>
			case 0:
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
				draw_hl(x1+2, y2-i, x2-x1-4,fill_color);
				break;
			case 1:
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 800716a:	b280      	uxth	r0, r0
		for (int i=0; i<((y2-y1)/2)+1; i++)
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	3301      	adds	r3, #1
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 8007170:	1a09      	subs	r1, r1, r0
 8007172:	b289      	uxth	r1, r1
		for (int i=0; i<((y2-y1)/2)+1; i++)
 8007174:	9309      	str	r3, [sp, #36]	; 0x24
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 8007176:	b293      	uxth	r3, r2
 8007178:	ee07 3a90 	vmov	s15, r3
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 800717c:	1e8b      	subs	r3, r1, #2
			for (i=0; i<= l; i++)
 800717e:	b21b      	sxth	r3, r3
 8007180:	9303      	str	r3, [sp, #12]
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 8007182:	1f0b      	subs	r3, r1, #4
			for (i=0; i<= l; i++)
 8007184:	b21b      	sxth	r3, r3
 8007186:	9302      	str	r3, [sp, #8]
				draw_hl(x1+1, y2-i, x2-x1-2,fill_color);
				break;
			default:
				draw_hl(x1, y1+i, x2-x1,fill_color);
 8007188:	b20b      	sxth	r3, r1
 800718a:	9307      	str	r3, [sp, #28]
			write_data((color)>>16);
 800718c:	9b14      	ldr	r3, [sp, #80]	; 0x50
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800718e:	4e94      	ldr	r6, [pc, #592]	; (80073e0 <fill_roundrect2+0x290>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007190:	4d94      	ldr	r5, [pc, #592]	; (80073e4 <fill_roundrect2+0x294>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007192:	4c95      	ldr	r4, [pc, #596]	; (80073e8 <fill_roundrect2+0x298>)
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 8007194:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 8007198:	9001      	str	r0, [sp, #4]
			write_data((color)>>16);
 800719a:	ea4f 4813 	mov.w	r8, r3, lsr #16
			write_data((color)>>8);
 800719e:	0a1f      	lsrs	r7, r3, #8
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 80071a0:	2300      	movs	r3, #0
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	463b      	mov	r3, r7
 80071a6:	4647      	mov	r7, r8
 80071a8:	4698      	mov	r8, r3
 80071aa:	9b05      	ldr	r3, [sp, #20]
			switch(i)
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8092 	beq.w	80072d6 <fill_roundrect2+0x186>
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	f000 811a 	beq.w	80073ec <fill_roundrect2+0x29c>
				draw_hl(x1, y1+i, x2-x1,fill_color);
 80071b8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80071bc:	9308      	str	r3, [sp, #32]
 80071be:	ee17 2a90 	vmov	r2, s15
 80071c2:	4413      	add	r3, r2
			for (i=0; i<= l; i++)
 80071c4:	9a07      	ldr	r2, [sp, #28]
 80071c6:	2a00      	cmp	r2, #0
				draw_hl(x1, y1+i, x2-x1,fill_color);
 80071c8:	b29b      	uxth	r3, r3
			for (i=0; i<= l; i++)
 80071ca:	db77      	blt.n	80072bc <fill_roundrect2+0x16c>
 80071cc:	f102 0b01 	add.w	fp, r2, #1
 80071d0:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 80071d4:	9a01      	ldr	r2, [sp, #4]
			set_window(x, x, y, y);
 80071d6:	9304      	str	r3, [sp, #16]
				set_pixel(x+i, y, color);
 80071d8:	eb02 010a 	add.w	r1, r2, sl
 80071dc:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 80071de:	461a      	mov	r2, r3
 80071e0:	4608      	mov	r0, r1
 80071e2:	f7fe f9a7 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80071e6:	222c      	movs	r2, #44	; 0x2c
 80071e8:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80071ea:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80071ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80071f2:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80071f4:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80071f6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80071f8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80071fc:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007200:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007204:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007206:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007208:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800720c:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800720e:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8007210:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007212:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007216:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007218:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800721c:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007220:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007222:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8007224:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007226:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007228:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800722c:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007230:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007232:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8007234:	bf00      	nop
			for (i=0; i<= l; i++)
 8007236:	f10a 0a01 	add.w	sl, sl, #1
 800723a:	45da      	cmp	sl, fp
 800723c:	9b04      	ldr	r3, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800723e:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8007240:	d1c8      	bne.n	80071d4 <fill_roundrect2+0x84>
				draw_hl(x1, y2-i, x2-x1,fill_color);
 8007242:	9b06      	ldr	r3, [sp, #24]
 8007244:	9a08      	ldr	r2, [sp, #32]
 8007246:	1a9a      	subs	r2, r3, r2
 8007248:	b292      	uxth	r2, r2
 800724a:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 800724e:	9b01      	ldr	r3, [sp, #4]
			set_window(x, x, y, y);
 8007250:	9204      	str	r2, [sp, #16]
				set_pixel(x+i, y, color);
 8007252:	eb03 010a 	add.w	r1, r3, sl
 8007256:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8007258:	4613      	mov	r3, r2
 800725a:	4608      	mov	r0, r1
 800725c:	f7fe f96a 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007260:	232c      	movs	r3, #44	; 0x2c
 8007262:	6173      	str	r3, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007264:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007268:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800726c:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800726e:	61a3      	str	r3, [r4, #24]
			__asm("nop");
 8007270:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007272:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007276:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800727a:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800727e:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007280:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007282:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007286:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007288:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800728a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800728c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8007290:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007292:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007296:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800729a:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800729c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800729e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80072a0:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80072a2:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80072a6:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80072aa:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80072ac:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80072ae:	bf00      	nop
			for (i=0; i<= l; i++)
 80072b0:	f10a 0a01 	add.w	sl, sl, #1
 80072b4:	45da      	cmp	sl, fp
 80072b6:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80072b8:	61a3      	str	r3, [r4, #24]
			for (i=0; i<= l; i++)
 80072ba:	d1c8      	bne.n	800724e <fill_roundrect2+0xfe>
		for (int i=0; i<((y2-y1)/2)+1; i++)
 80072bc:	9b05      	ldr	r3, [sp, #20]
 80072be:	f103 0a01 	add.w	sl, r3, #1
 80072c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c4:	459a      	cmp	sl, r3
 80072c6:	f080 8087 	bcs.w	80073d8 <fill_roundrect2+0x288>
 80072ca:	4653      	mov	r3, sl
			switch(i)
 80072cc:	f8cd a014 	str.w	sl, [sp, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f47f af6e 	bne.w	80071b2 <fill_roundrect2+0x62>
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	f103 0b02 	add.w	fp, r3, #2
			for (i=0; i<= l; i++)
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	2b00      	cmp	r3, #0
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 80072e0:	fa1f fb8b 	uxth.w	fp, fp
			for (i=0; i<= l; i++)
 80072e4:	db75      	blt.n	80073d2 <fill_roundrect2+0x282>
 80072e6:	f8dd a014 	ldr.w	sl, [sp, #20]
 80072ea:	ee17 3a90 	vmov	r3, s15
				set_pixel(x+i, y, color);
 80072ee:	eb0b 010a 	add.w	r1, fp, sl
 80072f2:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 80072f4:	461a      	mov	r2, r3
 80072f6:	4608      	mov	r0, r1
 80072f8:	9304      	str	r3, [sp, #16]
 80072fa:	f7fe f91b 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80072fe:	222c      	movs	r2, #44	; 0x2c
 8007300:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007302:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007306:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800730a:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800730c:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 800730e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007310:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007314:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007318:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800731c:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800731e:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007320:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007324:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007326:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8007328:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800732a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800732e:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007330:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007334:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007338:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800733a:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800733c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800733e:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007340:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007344:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007348:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800734a:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800734c:	bf00      	nop
			for (i=0; i<= l; i++)
 800734e:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007350:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8007352:	f10a 0a01 	add.w	sl, sl, #1
 8007356:	459a      	cmp	sl, r3
 8007358:	9b04      	ldr	r3, [sp, #16]
 800735a:	ddc8      	ble.n	80072ee <fill_roundrect2+0x19e>
				draw_hl(x1+2, y2-i, x2-x1-4,fill_color);
 800735c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8007360:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 8007364:	eb0b 010a 	add.w	r1, fp, sl
 8007368:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 800736a:	461a      	mov	r2, r3
 800736c:	4608      	mov	r0, r1
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	f7fe f8e0 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007374:	222c      	movs	r2, #44	; 0x2c
 8007376:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007378:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800737c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007380:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007382:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8007384:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007386:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800738a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800738e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007392:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007394:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007396:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800739a:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800739c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800739e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073a0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80073a4:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80073a6:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80073aa:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80073ae:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073b0:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80073b2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073b4:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80073b6:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80073ba:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80073be:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073c0:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80073c2:	bf00      	nop
			for (i=0; i<= l; i++)
 80073c4:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073c6:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 80073c8:	f10a 0a01 	add.w	sl, sl, #1
 80073cc:	459a      	cmp	sl, r3
 80073ce:	9b04      	ldr	r3, [sp, #16]
 80073d0:	ddc8      	ble.n	8007364 <fill_roundrect2+0x214>
 80073d2:	f04f 0a01 	mov.w	sl, #1
 80073d6:	e778      	b.n	80072ca <fill_roundrect2+0x17a>
			}
		}
	}
}
 80073d8:	b00b      	add	sp, #44	; 0x2c
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	bf00      	nop
 80073e0:	40020000 	.word	0x40020000
 80073e4:	40020400 	.word	0x40020400
 80073e8:	40020800 	.word	0x40020800
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 80073ec:	9b01      	ldr	r3, [sp, #4]
			for (i=0; i<= l; i++)
 80073ee:	9a03      	ldr	r2, [sp, #12]
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 80073f0:	f103 0b01 	add.w	fp, r3, #1
 80073f4:	ee17 3a90 	vmov	r3, s15
			for (i=0; i<= l; i++)
 80073f8:	2a00      	cmp	r2, #0
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 80073fa:	f103 0301 	add.w	r3, r3, #1
 80073fe:	fa1f fb8b 	uxth.w	fp, fp
 8007402:	b29b      	uxth	r3, r3
			for (i=0; i<= l; i++)
 8007404:	bfa8      	it	ge
 8007406:	f04f 0a00 	movge.w	sl, #0
 800740a:	db72      	blt.n	80074f2 <fill_roundrect2+0x3a2>
				set_pixel(x+i, y, color);
 800740c:	eb0b 010a 	add.w	r1, fp, sl
 8007410:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8007412:	461a      	mov	r2, r3
 8007414:	4608      	mov	r0, r1
 8007416:	9304      	str	r3, [sp, #16]
 8007418:	f7fe f88c 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800741c:	222c      	movs	r2, #44	; 0x2c
 800741e:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007420:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007424:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007428:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800742a:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 800742c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800742e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007432:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007436:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800743a:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800743c:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800743e:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007442:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007444:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8007446:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007448:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800744c:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800744e:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007452:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007456:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007458:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800745a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800745c:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800745e:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007462:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007466:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007468:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800746a:	bf00      	nop
			for (i=0; i<= l; i++)
 800746c:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800746e:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8007470:	f10a 0a01 	add.w	sl, sl, #1
 8007474:	459a      	cmp	sl, r3
 8007476:	9b04      	ldr	r3, [sp, #16]
 8007478:	ddc8      	ble.n	800740c <fill_roundrect2+0x2bc>
				draw_hl(x1+1, y2-i, x2-x1-2,fill_color);
 800747a:	9b06      	ldr	r3, [sp, #24]
 800747c:	3b01      	subs	r3, #1
 800747e:	b29b      	uxth	r3, r3
 8007480:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 8007484:	eb0b 010a 	add.w	r1, fp, sl
 8007488:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 800748a:	461a      	mov	r2, r3
 800748c:	4608      	mov	r0, r1
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	f7fe f850 	bl	8005534 <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007494:	222c      	movs	r2, #44	; 0x2c
 8007496:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007498:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800749c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074a0:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074a2:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80074a4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074a6:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80074aa:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074ae:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074b2:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80074b4:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80074b6:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074ba:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074bc:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80074be:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074c0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80074c4:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80074c6:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80074ca:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074ce:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074d0:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80074d2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074d4:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80074d6:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80074da:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074de:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074e0:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80074e2:	bf00      	nop
			for (i=0; i<= l; i++)
 80074e4:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074e6:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 80074e8:	f10a 0a01 	add.w	sl, sl, #1
 80074ec:	459a      	cmp	sl, r3
 80074ee:	9b04      	ldr	r3, [sp, #16]
 80074f0:	ddc8      	ble.n	8007484 <fill_roundrect2+0x334>
 80074f2:	f04f 0a02 	mov.w	sl, #2
 80074f6:	e6e8      	b.n	80072ca <fill_roundrect2+0x17a>

080074f8 <symbol_dwn_Arrow>:
   fill_circle(x, y, size, circle_colour);
	 fill_RightTriangle( x-(button_size/6),  y-(button_size/2),  button_size,  Button_colour );
 }

void symbol_dwn_Arrow (u32 x, u32 y, u32 color)   /// for DOWN Arrow  symbol
{
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	b082      	sub	sp, #8
		draw_line(x, y, x+9, y-9, color);
 80074fe:	f1a1 0609 	sub.w	r6, r1, #9
{
 8007502:	460f      	mov	r7, r1
 8007504:	4604      	mov	r4, r0
 8007506:	4615      	mov	r5, r2
		draw_line(x, y, x+9, y-9, color);
 8007508:	9200      	str	r2, [sp, #0]
 800750a:	4633      	mov	r3, r6
 800750c:	f100 0209 	add.w	r2, r0, #9
		draw_line(x, y-1, x+8, y-9, color);
 8007510:	f107 3aff 	add.w	sl, r7, #4294967295
		draw_line(x, y, x+9, y-9, color);
 8007514:	f7fe fd90 	bl	8006038 <draw_line>
		draw_line(x, y-2, x+7, y-9, color);
 8007518:	f1a7 0902 	sub.w	r9, r7, #2
		draw_line(x, y-1, x+8, y-9, color);
 800751c:	4633      	mov	r3, r6
 800751e:	f104 0208 	add.w	r2, r4, #8
 8007522:	4651      	mov	r1, sl
 8007524:	4620      	mov	r0, r4
 8007526:	9500      	str	r5, [sp, #0]
 8007528:	f7fe fd86 	bl	8006038 <draw_line>
		draw_line(x, y-3, x+6, y-9, color);
 800752c:	f1a7 0803 	sub.w	r8, r7, #3
		draw_line(x, y-2, x+7, y-9, color);
 8007530:	4633      	mov	r3, r6
 8007532:	1de2      	adds	r2, r4, #7
 8007534:	4649      	mov	r1, r9
 8007536:	4620      	mov	r0, r4
 8007538:	9500      	str	r5, [sp, #0]
 800753a:	f7fe fd7d 	bl	8006038 <draw_line>
		draw_line(x, y-3, x+6, y-9, color);
 800753e:	4633      	mov	r3, r6
 8007540:	1da2      	adds	r2, r4, #6
 8007542:	4641      	mov	r1, r8
 8007544:	4620      	mov	r0, r4
 8007546:	9500      	str	r5, [sp, #0]
 8007548:	f7fe fd76 	bl	8006038 <draw_line>

		draw_line(x, y, x-9, y-9, color);
 800754c:	4639      	mov	r1, r7
 800754e:	4633      	mov	r3, r6
 8007550:	f1a4 0209 	sub.w	r2, r4, #9
 8007554:	4620      	mov	r0, r4
 8007556:	9500      	str	r5, [sp, #0]
 8007558:	f7fe fd6e 	bl	8006038 <draw_line>
		draw_line(x, y-1, x-8, y-9, color);
 800755c:	4651      	mov	r1, sl
 800755e:	4633      	mov	r3, r6
 8007560:	f1a4 0208 	sub.w	r2, r4, #8
 8007564:	4620      	mov	r0, r4
 8007566:	9500      	str	r5, [sp, #0]
 8007568:	f7fe fd66 	bl	8006038 <draw_line>
		draw_line(x, y-2, x-7, y-9, color);
 800756c:	4649      	mov	r1, r9
 800756e:	4633      	mov	r3, r6
 8007570:	1fe2      	subs	r2, r4, #7
 8007572:	4620      	mov	r0, r4
 8007574:	9500      	str	r5, [sp, #0]
 8007576:	f7fe fd5f 	bl	8006038 <draw_line>
		draw_line(x, y-3, x-6, y-9, color);
 800757a:	9500      	str	r5, [sp, #0]
 800757c:	4633      	mov	r3, r6
 800757e:	1fa2      	subs	r2, r4, #6
 8007580:	4641      	mov	r1, r8
 8007582:	4620      	mov	r0, r4
 8007584:	f7fe fd58 	bl	8006038 <draw_line>
}
 8007588:	b002      	add	sp, #8
 800758a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758e:	bf00      	nop

08007590 <Front_screen>:

//########################   FRONT_SCREEN  ###################################


void Front_screen(void)
{
 8007590:	b500      	push	{lr}
	Set_Font(&Font16x26);
 8007592:	4809      	ldr	r0, [pc, #36]	; (80075b8 <Front_screen+0x28>)
{
 8007594:	b083      	sub	sp, #12
	Set_Font(&Font16x26);
 8007596:	f7fd ffc7 	bl	8005528 <Set_Font>
	fill_screen(PURPLE);
 800759a:	4808      	ldr	r0, [pc, #32]	; (80075bc <Front_screen+0x2c>)
 800759c:	f7fe f830 	bl	8005600 <fill_screen>
	//print_string(360,250,"09:00 AM",WHITE);
	//print_string(350,300,"24/01/2023",WHITE);
	print_image(355,180,87,120,thumb);
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <Front_screen+0x30>)
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	2257      	movs	r2, #87	; 0x57
 80075a6:	2378      	movs	r3, #120	; 0x78
 80075a8:	21b4      	movs	r1, #180	; 0xb4
 80075aa:	f240 1063 	movw	r0, #355	; 0x163
 80075ae:	f7fe ff45 	bl	800643c <print_image>
}
 80075b2:	b003      	add	sp, #12
 80075b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80075b8:	20000554 	.word	0x20000554
 80075bc:	00800010 	.word	0x00800010
 80075c0:	0801cf10 	.word	0x0801cf10

080075c4 <Admin_screen>:

//########################   ADMIN_SCREEN  ########################################

void Admin_screen(void)
{
 80075c4:	b510      	push	{r4, lr}
	Set_Font(&Font16x26);
 80075c6:	4843      	ldr	r0, [pc, #268]	; (80076d4 <Admin_screen+0x110>)
//	draw_vl(400,50,380,BLUE);
//	draw_hl(50,240,700,BLUE);

	Set_Font(&Font12x18);
	fill_circle(250,145,60,RED);
	print_image(225,115,48,60,user_management);
 80075c8:	4c43      	ldr	r4, [pc, #268]	; (80076d8 <Admin_screen+0x114>)
{
 80075ca:	b082      	sub	sp, #8
	Set_Font(&Font16x26);
 80075cc:	f7fd ffac 	bl	8005528 <Set_Font>
	fill_screen(PURPLE);
 80075d0:	4842      	ldr	r0, [pc, #264]	; (80076dc <Admin_screen+0x118>)
 80075d2:	f7fe f815 	bl	8005600 <fill_screen>
	print_string(150,20,"RFID BASED ATTENDANCE MANAGEMENT",WHITE);
 80075d6:	4a42      	ldr	r2, [pc, #264]	; (80076e0 <Admin_screen+0x11c>)
 80075d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80075dc:	2114      	movs	r1, #20
 80075de:	2096      	movs	r0, #150	; 0x96
 80075e0:	f7fe ff0a 	bl	80063f8 <print_string>
	Set_Font(&Font12x18);
 80075e4:	483f      	ldr	r0, [pc, #252]	; (80076e4 <Admin_screen+0x120>)
 80075e6:	f7fd ff9f 	bl	8005528 <Set_Font>
	fill_circle(250,145,60,RED);
 80075ea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80075ee:	223c      	movs	r2, #60	; 0x3c
 80075f0:	2191      	movs	r1, #145	; 0x91
 80075f2:	20fa      	movs	r0, #250	; 0xfa
 80075f4:	f7fe fdf6 	bl	80061e4 <fill_circle>
	print_image(225,115,48,60,user_management);
 80075f8:	9400      	str	r4, [sp, #0]
 80075fa:	233c      	movs	r3, #60	; 0x3c
 80075fc:	2230      	movs	r2, #48	; 0x30
 80075fe:	2173      	movs	r1, #115	; 0x73
 8007600:	20e1      	movs	r0, #225	; 0xe1
 8007602:	f7fe ff1b 	bl	800643c <print_image>
	print_string(230,218,"USER",WHITE);
 8007606:	4a38      	ldr	r2, [pc, #224]	; (80076e8 <Admin_screen+0x124>)
	print_string(200,238,"MANAGEMENT",WHITE);

	fill_circle(550,145,60,RED);
	print_image(515,118,60,55,attendance_search);
 8007608:	4c38      	ldr	r4, [pc, #224]	; (80076ec <Admin_screen+0x128>)
	print_string(230,218,"USER",WHITE);
 800760a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800760e:	21da      	movs	r1, #218	; 0xda
 8007610:	20e6      	movs	r0, #230	; 0xe6
 8007612:	f7fe fef1 	bl	80063f8 <print_string>
	print_string(200,238,"MANAGEMENT",WHITE);
 8007616:	4a36      	ldr	r2, [pc, #216]	; (80076f0 <Admin_screen+0x12c>)
 8007618:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800761c:	21ee      	movs	r1, #238	; 0xee
 800761e:	20c8      	movs	r0, #200	; 0xc8
 8007620:	f7fe feea 	bl	80063f8 <print_string>
	fill_circle(550,145,60,RED);
 8007624:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8007628:	223c      	movs	r2, #60	; 0x3c
 800762a:	2191      	movs	r1, #145	; 0x91
 800762c:	f240 2026 	movw	r0, #550	; 0x226
 8007630:	f7fe fdd8 	bl	80061e4 <fill_circle>
	print_image(515,118,60,55,attendance_search);
 8007634:	9400      	str	r4, [sp, #0]
 8007636:	2337      	movs	r3, #55	; 0x37
 8007638:	223c      	movs	r2, #60	; 0x3c
 800763a:	2176      	movs	r1, #118	; 0x76
 800763c:	f240 2003 	movw	r0, #515	; 0x203
 8007640:	f7fe fefc 	bl	800643c <print_image>
	print_string(515,218,"SEARCH",WHITE);
 8007644:	4a2b      	ldr	r2, [pc, #172]	; (80076f4 <Admin_screen+0x130>)
	print_string(490,238,"ATTENDANCE",WHITE);


	fill_circle(550,335,60,RED);
	print_image(520,305,60,60,setting);
 8007646:	4c2c      	ldr	r4, [pc, #176]	; (80076f8 <Admin_screen+0x134>)
	print_string(515,218,"SEARCH",WHITE);
 8007648:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800764c:	21da      	movs	r1, #218	; 0xda
 800764e:	f240 2003 	movw	r0, #515	; 0x203
 8007652:	f7fe fed1 	bl	80063f8 <print_string>
	print_string(490,238,"ATTENDANCE",WHITE);
 8007656:	4a29      	ldr	r2, [pc, #164]	; (80076fc <Admin_screen+0x138>)
 8007658:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800765c:	21ee      	movs	r1, #238	; 0xee
 800765e:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8007662:	f7fe fec9 	bl	80063f8 <print_string>
	fill_circle(550,335,60,RED);
 8007666:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800766a:	223c      	movs	r2, #60	; 0x3c
 800766c:	f240 114f 	movw	r1, #335	; 0x14f
 8007670:	f240 2026 	movw	r0, #550	; 0x226
 8007674:	f7fe fdb6 	bl	80061e4 <fill_circle>
	print_image(520,305,60,60,setting);
 8007678:	233c      	movs	r3, #60	; 0x3c
 800767a:	461a      	mov	r2, r3
 800767c:	9400      	str	r4, [sp, #0]
 800767e:	f240 1131 	movw	r1, #305	; 0x131
 8007682:	f44f 7002 	mov.w	r0, #520	; 0x208
 8007686:	f7fe fed9 	bl	800643c <print_image>
	print_string(510,408,"SETTING",WHITE);
 800768a:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <Admin_screen+0x13c>)
	//draw_roundrect(505,578,288,365,BLACK);

	fill_circle(250,335,60,RED);
	print_image(220,305,60,60,user_role);
 800768c:	4c1d      	ldr	r4, [pc, #116]	; (8007704 <Admin_screen+0x140>)
	print_string(510,408,"SETTING",WHITE);
 800768e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007692:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8007696:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 800769a:	f7fe fead 	bl	80063f8 <print_string>
	fill_circle(250,335,60,RED);
 800769e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80076a2:	223c      	movs	r2, #60	; 0x3c
 80076a4:	f240 114f 	movw	r1, #335	; 0x14f
 80076a8:	20fa      	movs	r0, #250	; 0xfa
 80076aa:	f7fe fd9b 	bl	80061e4 <fill_circle>
	print_image(220,305,60,60,user_role);
 80076ae:	233c      	movs	r3, #60	; 0x3c
 80076b0:	461a      	mov	r2, r3
 80076b2:	f240 1131 	movw	r1, #305	; 0x131
 80076b6:	20dc      	movs	r0, #220	; 0xdc
 80076b8:	9400      	str	r4, [sp, #0]
 80076ba:	f7fe febf 	bl	800643c <print_image>
	print_string(200,408,"USER ROLE",WHITE);
 80076be:	4a12      	ldr	r2, [pc, #72]	; (8007708 <Admin_screen+0x144>)
 80076c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80076c4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80076c8:	20c8      	movs	r0, #200	; 0xc8
}
 80076ca:	b002      	add	sp, #8
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	print_string(200,408,"USER ROLE",WHITE);
 80076d0:	f7fe be92 	b.w	80063f8 <print_string>
 80076d4:	20000554 	.word	0x20000554
 80076d8:	08027230 	.word	0x08027230
 80076dc:	00800010 	.word	0x00800010
 80076e0:	0800d3c8 	.word	0x0800d3c8
 80076e4:	20000544 	.word	0x20000544
 80076e8:	0800d430 	.word	0x0800d430
 80076ec:	0800fb30 	.word	0x0800fb30
 80076f0:	0800d3ec 	.word	0x0800d3ec
 80076f4:	0800d3f8 	.word	0x0800d3f8
 80076f8:	080196d0 	.word	0x080196d0
 80076fc:	0800d400 	.word	0x0800d400
 8007700:	0800d40c 	.word	0x0800d40c
 8007704:	08029f30 	.word	0x08029f30
 8007708:	0800d414 	.word	0x0800d414

0800770c <User_Management>:

//########################   USER MANAGEMENT   ####################################

void User_Management(void)
{
 800770c:	b530      	push	{r4, r5, lr}
 800770e:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
	fill_area(100,800,0,480,PURPLE);
 8007710:	4c39      	ldr	r4, [pc, #228]	; (80077f8 <User_Management+0xec>)
	Set_Font(&Font12x18);
 8007712:	483a      	ldr	r0, [pc, #232]	; (80077fc <User_Management+0xf0>)
	fill_area(70,720,121,439,PURPLE);

	fill_roundrect(250,580,115,195,0xff1a1a,PURPLE);
 8007714:	4d3a      	ldr	r5, [pc, #232]	; (8007800 <User_Management+0xf4>)
	Set_Font(&Font12x18);
 8007716:	f7fd ff07 	bl	8005528 <Set_Font>
	fill_area(100,800,0,480,PURPLE);
 800771a:	9400      	str	r4, [sp, #0]
 800771c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007720:	2200      	movs	r2, #0
 8007722:	f44f 7148 	mov.w	r1, #800	; 0x320
 8007726:	2064      	movs	r0, #100	; 0x64
 8007728:	f7fd ffb0 	bl	800568c <fill_area>
	fill_area(70,720,121,439,PURPLE);
 800772c:	9400      	str	r4, [sp, #0]
 800772e:	f240 13b7 	movw	r3, #439	; 0x1b7
 8007732:	2279      	movs	r2, #121	; 0x79
 8007734:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8007738:	2046      	movs	r0, #70	; 0x46
 800773a:	f7fd ffa7 	bl	800568c <fill_area>
	fill_roundrect(250,580,115,195,0xff1a1a,PURPLE);
 800773e:	e9cd 5400 	strd	r5, r4, [sp]
 8007742:	2273      	movs	r2, #115	; 0x73
 8007744:	f44f 7111 	mov.w	r1, #580	; 0x244
 8007748:	20fa      	movs	r0, #250	; 0xfa
 800774a:	23c3      	movs	r3, #195	; 0xc3
 800774c:	f7fe fb0c 	bl	8005d68 <fill_roundrect>
	fill_circle(250,155,77,PURPLE);
 8007750:	4623      	mov	r3, r4
 8007752:	224d      	movs	r2, #77	; 0x4d
 8007754:	219b      	movs	r1, #155	; 0x9b
 8007756:	20fa      	movs	r0, #250	; 0xfa
 8007758:	f7fe fd44 	bl	80061e4 <fill_circle>
	fill_circle(250,155,60,RED);
 800775c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8007760:	223c      	movs	r2, #60	; 0x3c
 8007762:	219b      	movs	r1, #155	; 0x9b
 8007764:	20fa      	movs	r0, #250	; 0xfa
 8007766:	f7fe fd3d 	bl	80061e4 <fill_circle>
	print_string(400,145,"NEW USER",WHITE);
 800776a:	4a26      	ldr	r2, [pc, #152]	; (8007804 <User_Management+0xf8>)
 800776c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007770:	2191      	movs	r1, #145	; 0x91
 8007772:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007776:	f7fe fe3f 	bl	80063f8 <print_string>
	print_image(220,125,60,51,new_user);
 800777a:	4923      	ldr	r1, [pc, #140]	; (8007808 <User_Management+0xfc>)
 800777c:	9100      	str	r1, [sp, #0]
 800777e:	2333      	movs	r3, #51	; 0x33
 8007780:	223c      	movs	r2, #60	; 0x3c
 8007782:	217d      	movs	r1, #125	; 0x7d
 8007784:	20dc      	movs	r0, #220	; 0xdc
 8007786:	f7fe fe59 	bl	800643c <print_image>

	fill_roundrect(250,580,280,360,0xff1a1a,PURPLE);
 800778a:	e9cd 5400 	strd	r5, r4, [sp]
 800778e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007792:	f44f 7111 	mov.w	r1, #580	; 0x244
 8007796:	20fa      	movs	r0, #250	; 0xfa
 8007798:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800779c:	f7fe fae4 	bl	8005d68 <fill_roundrect>
	fill_circle(250,320,77,PURPLE);
 80077a0:	4623      	mov	r3, r4
 80077a2:	224d      	movs	r2, #77	; 0x4d
 80077a4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077a8:	20fa      	movs	r0, #250	; 0xfa
 80077aa:	f7fe fd1b 	bl	80061e4 <fill_circle>
	fill_circle(250,320,60,RED);
 80077ae:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80077b2:	223c      	movs	r2, #60	; 0x3c
 80077b4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077b8:	20fa      	movs	r0, #250	; 0xfa
 80077ba:	f7fe fd13 	bl	80061e4 <fill_circle>
	print_string(400,310,"ALL USER",WHITE);
	print_image(215,300,70,35,all_user);
 80077be:	4c13      	ldr	r4, [pc, #76]	; (800780c <User_Management+0x100>)
	print_string(400,310,"ALL USER",WHITE);
 80077c0:	4a13      	ldr	r2, [pc, #76]	; (8007810 <User_Management+0x104>)
 80077c2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80077c6:	f44f 719b 	mov.w	r1, #310	; 0x136
 80077ca:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80077ce:	f7fe fe13 	bl	80063f8 <print_string>
	print_image(215,300,70,35,all_user);
 80077d2:	2323      	movs	r3, #35	; 0x23
 80077d4:	2246      	movs	r2, #70	; 0x46
 80077d6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80077da:	20d7      	movs	r0, #215	; 0xd7
 80077dc:	9400      	str	r4, [sp, #0]
 80077de:	f7fe fe2d 	bl	800643c <print_image>
//	draw_line(115+x,30+y,115+x,60+y,WHITE);
//	fill_roundrect(15,90,40,88,0xcedcfd,PURPLE);
//	fill_roundrect(18,87,43,85,0xfffafa,0xcedcfd);
//	Set_Font(&Font12x18);
//	print_string(30,54,"BACK",0x737373);
	print_image(10,10,60,60,back);
 80077e2:	233c      	movs	r3, #60	; 0x3c
 80077e4:	210a      	movs	r1, #10
 80077e6:	4a0b      	ldr	r2, [pc, #44]	; (8007814 <User_Management+0x108>)
 80077e8:	9200      	str	r2, [sp, #0]
 80077ea:	4608      	mov	r0, r1
 80077ec:	461a      	mov	r2, r3
 80077ee:	f7fe fe25 	bl	800643c <print_image>
}
 80077f2:	b003      	add	sp, #12
 80077f4:	bd30      	pop	{r4, r5, pc}
 80077f6:	bf00      	nop
 80077f8:	00800010 	.word	0x00800010
 80077fc:	20000544 	.word	0x20000544
 8007800:	00ff1a1a 	.word	0x00ff1a1a
 8007804:	0800d420 	.word	0x0800d420
 8007808:	08016700 	.word	0x08016700
 800780c:	0800d4e8 	.word	0x0800d4e8
 8007810:	0800d42c 	.word	0x0800d42c
 8007814:	08012ec0 	.word	0x08012ec0

08007818 <NewUser_Name>:
{
 8007818:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 800781a:	481e      	ldr	r0, [pc, #120]	; (8007894 <NewUser_Name+0x7c>)
		fill_roundrect(197,503,69,135,0xcedcfd,0xfffafa);
 800781c:	4c1e      	ldr	r4, [pc, #120]	; (8007898 <NewUser_Name+0x80>)
		fill_roundrect(200+x,500+x,72+y,132+y,0xe7eefe,0xcedcfd);
 800781e:	4d1f      	ldr	r5, [pc, #124]	; (800789c <NewUser_Name+0x84>)
{
 8007820:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 8007822:	f7fd fe81 	bl	8005528 <Set_Font>
		fill_roundrect(197,503,69,135,0xcedcfd,0xfffafa);
 8007826:	481e      	ldr	r0, [pc, #120]	; (80078a0 <NewUser_Name+0x88>)
 8007828:	2387      	movs	r3, #135	; 0x87
 800782a:	e9cd 4000 	strd	r4, r0, [sp]
 800782e:	2245      	movs	r2, #69	; 0x45
 8007830:	f240 11f7 	movw	r1, #503	; 0x1f7
 8007834:	20c5      	movs	r0, #197	; 0xc5
 8007836:	f7fe fa97 	bl	8005d68 <fill_roundrect>
		fill_roundrect(200+x,500+x,72+y,132+y,0xe7eefe,0xcedcfd);
 800783a:	e9cd 5400 	strd	r5, r4, [sp]
 800783e:	2384      	movs	r3, #132	; 0x84
 8007840:	2248      	movs	r2, #72	; 0x48
 8007842:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007846:	20c8      	movs	r0, #200	; 0xc8
 8007848:	f7fe fa8e 	bl	8005d68 <fill_roundrect>
		print_string(218+x,65+y,"Name",0x737373);
 800784c:	4c15      	ldr	r4, [pc, #84]	; (80078a4 <NewUser_Name+0x8c>)
		fill_roundrect(210+x,280+x,62+y,82+y,WHITE,WHITE);
 800784e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007852:	e9cd 0000 	strd	r0, r0, [sp]
 8007856:	2352      	movs	r3, #82	; 0x52
 8007858:	223e      	movs	r2, #62	; 0x3e
 800785a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800785e:	20d2      	movs	r0, #210	; 0xd2
 8007860:	f7fe fa82 	bl	8005d68 <fill_roundrect>
		print_string(218+x,65+y,"Name",0x737373);
 8007864:	4623      	mov	r3, r4
 8007866:	4a10      	ldr	r2, [pc, #64]	; (80078a8 <NewUser_Name+0x90>)
 8007868:	2141      	movs	r1, #65	; 0x41
 800786a:	20da      	movs	r0, #218	; 0xda
 800786c:	f7fe fdc4 	bl	80063f8 <print_string>
		fill_area(210,400,80,120,0xe7eefe);
 8007870:	2250      	movs	r2, #80	; 0x50
 8007872:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007876:	20d2      	movs	r0, #210	; 0xd2
 8007878:	9500      	str	r5, [sp, #0]
 800787a:	2378      	movs	r3, #120	; 0x78
 800787c:	f7fd ff06 	bl	800568c <fill_area>
		print_string(220,90,emp_name,0x737373);
 8007880:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <NewUser_Name+0x94>)
 8007882:	4623      	mov	r3, r4
 8007884:	215a      	movs	r1, #90	; 0x5a
 8007886:	20dc      	movs	r0, #220	; 0xdc
}
 8007888:	b003      	add	sp, #12
 800788a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(220,90,emp_name,0x737373);
 800788e:	f7fe bdb3 	b.w	80063f8 <print_string>
 8007892:	bf00      	nop
 8007894:	20000544 	.word	0x20000544
 8007898:	00cedcfd 	.word	0x00cedcfd
 800789c:	00e7eefe 	.word	0x00e7eefe
 80078a0:	00fffafa 	.word	0x00fffafa
 80078a4:	00737373 	.word	0x00737373
 80078a8:	0800d438 	.word	0x0800d438
 80078ac:	200005fc 	.word	0x200005fc

080078b0 <NewUser_Desig>:
{
 80078b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b4:	4604      	mov	r4, r0
 80078b6:	b085      	sub	sp, #20
	Set_Font(&Font12x18);
 80078b8:	4834      	ldr	r0, [pc, #208]	; (800798c <NewUser_Desig+0xdc>)
		fill_roundrect(x1+197,x2+503,y1+161,y2+227,0xcedcfd,0xfffafa);
 80078ba:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80079a0 <NewUser_Desig+0xf0>
		fill_roundrect(x1+200,x2+500,y1+164,y2+224,0xe7eefe,0xcedcfd);
 80078be:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80079a4 <NewUser_Desig+0xf4>
{
 80078c2:	4616      	mov	r6, r2
 80078c4:	460d      	mov	r5, r1
 80078c6:	461f      	mov	r7, r3
	Set_Font(&Font12x18);
 80078c8:	f7fd fe2e 	bl	8005528 <Set_Font>
		fill_roundrect(x1+197,x2+503,y1+161,y2+227,0xcedcfd,0xfffafa);
 80078cc:	4b30      	ldr	r3, [pc, #192]	; (8007990 <NewUser_Desig+0xe0>)
 80078ce:	f106 0ba1 	add.w	fp, r6, #161	; 0xa1
 80078d2:	e9cd 9300 	strd	r9, r3, [sp]
 80078d6:	465a      	mov	r2, fp
 80078d8:	f107 03e3 	add.w	r3, r7, #227	; 0xe3
 80078dc:	f205 11f7 	addw	r1, r5, #503	; 0x1f7
 80078e0:	f104 00c5 	add.w	r0, r4, #197	; 0xc5
 80078e4:	f7fe fa40 	bl	8005d68 <fill_roundrect>
		fill_roundrect(x1+200,x2+500,y1+164,y2+224,0xe7eefe,0xcedcfd);
 80078e8:	e9cd 8900 	strd	r8, r9, [sp]
 80078ec:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80078f0:	f106 02a4 	add.w	r2, r6, #164	; 0xa4
 80078f4:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 80078f8:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 80078fc:	f7fe fa34 	bl	8005d68 <fill_roundrect>
		fill_roundrect(210+x1,290+x2,154+y1,174+y2,WHITE,WHITE);
 8007900:	f104 0ad2 	add.w	sl, r4, #210	; 0xd2
 8007904:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007908:	e9cd 3300 	strd	r3, r3, [sp]
 800790c:	f106 029a 	add.w	r2, r6, #154	; 0x9a
 8007910:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 8007914:	f505 7191 	add.w	r1, r5, #290	; 0x122
 8007918:	4650      	mov	r0, sl
 800791a:	f7fe fa25 	bl	8005d68 <fill_roundrect>
		print_string(218+x1,155+y1,"Desig.",0x737373);
 800791e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80079a8 <NewUser_Desig+0xf8>
 8007922:	4a1c      	ldr	r2, [pc, #112]	; (8007994 <NewUser_Desig+0xe4>)
 8007924:	b2a3      	uxth	r3, r4
 8007926:	f106 019b 	add.w	r1, r6, #155	; 0x9b
 800792a:	f103 00da 	add.w	r0, r3, #218	; 0xda
		symbol(470+x1,168+y1,'D',0x999999);
 800792e:	f504 74eb 	add.w	r4, r4, #470	; 0x1d6
		print_string(218+x1,155+y1,"Desig.",0x737373);
 8007932:	9303      	str	r3, [sp, #12]
 8007934:	b289      	uxth	r1, r1
 8007936:	464b      	mov	r3, r9
 8007938:	b280      	uxth	r0, r0
 800793a:	f7fe fd5d 	bl	80063f8 <print_string>
		symbol(470+x1,168+y1,'D',0x999999);
 800793e:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 8007942:	4620      	mov	r0, r4
 8007944:	4b14      	ldr	r3, [pc, #80]	; (8007998 <NewUser_Desig+0xe8>)
 8007946:	2244      	movs	r2, #68	; 0x44
 8007948:	f7ff f87c 	bl	8006a44 <symbol>
		symbol(470+x1,161+y1,'D',0xe7eefe);
 800794c:	4643      	mov	r3, r8
 800794e:	4659      	mov	r1, fp
 8007950:	4620      	mov	r0, r4
 8007952:	2244      	movs	r2, #68	; 0x44
 8007954:	f7ff f876 	bl	8006a44 <symbol>
		fill_area(210+x1,400+x2,180+y1,210+y2,0xe7eefe);
 8007958:	f107 03d2 	add.w	r3, r7, #210	; 0xd2
 800795c:	f106 02b4 	add.w	r2, r6, #180	; 0xb4
 8007960:	4650      	mov	r0, sl
 8007962:	f505 71c8 	add.w	r1, r5, #400	; 0x190
 8007966:	f8cd 8000 	str.w	r8, [sp]
 800796a:	f7fd fe8f 	bl	800568c <fill_area>
		print_string(220+x1,190+x2,desgn_ptr,0x737373);
 800796e:	9a03      	ldr	r2, [sp, #12]
 8007970:	4b0a      	ldr	r3, [pc, #40]	; (800799c <NewUser_Desig+0xec>)
 8007972:	f105 01be 	add.w	r1, r5, #190	; 0xbe
 8007976:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	b289      	uxth	r1, r1
 800797e:	464b      	mov	r3, r9
 8007980:	b280      	uxth	r0, r0
}
 8007982:	b005      	add	sp, #20
 8007984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		print_string(220+x1,190+x2,desgn_ptr,0x737373);
 8007988:	f7fe bd36 	b.w	80063f8 <print_string>
 800798c:	20000544 	.word	0x20000544
 8007990:	00fffafa 	.word	0x00fffafa
 8007994:	0800d440 	.word	0x0800d440
 8007998:	00999999 	.word	0x00999999
 800799c:	20000024 	.word	0x20000024
 80079a0:	00cedcfd 	.word	0x00cedcfd
 80079a4:	00e7eefe 	.word	0x00e7eefe
 80079a8:	00737373 	.word	0x00737373

080079ac <NewUser_Role>:
{
 80079ac:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 80079ae:	482a      	ldr	r0, [pc, #168]	; (8007a58 <NewUser_Role+0xac>)
		fill_roundrect(197,503,253,319,0xcedcfd,0xfffafa);
 80079b0:	4d2a      	ldr	r5, [pc, #168]	; (8007a5c <NewUser_Role+0xb0>)
		fill_roundrect(200+x,500+x,256+y,316+y,0xe7eefe,0xcedcfd);
 80079b2:	4c2b      	ldr	r4, [pc, #172]	; (8007a60 <NewUser_Role+0xb4>)
{
 80079b4:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 80079b6:	f7fd fdb7 	bl	8005528 <Set_Font>
		fill_roundrect(197,503,253,319,0xcedcfd,0xfffafa);
 80079ba:	482a      	ldr	r0, [pc, #168]	; (8007a64 <NewUser_Role+0xb8>)
 80079bc:	f240 133f 	movw	r3, #319	; 0x13f
 80079c0:	e9cd 5000 	strd	r5, r0, [sp]
 80079c4:	22fd      	movs	r2, #253	; 0xfd
 80079c6:	f240 11f7 	movw	r1, #503	; 0x1f7
 80079ca:	20c5      	movs	r0, #197	; 0xc5
 80079cc:	f7fe f9cc 	bl	8005d68 <fill_roundrect>
		fill_roundrect(200+x,500+x,256+y,316+y,0xe7eefe,0xcedcfd);
 80079d0:	e9cd 4500 	strd	r4, r5, [sp]
 80079d4:	f44f 739e 	mov.w	r3, #316	; 0x13c
 80079d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80079e0:	20c8      	movs	r0, #200	; 0xc8
 80079e2:	f7fe f9c1 	bl	8005d68 <fill_roundrect>
		print_string(218+x,251+y,"Role",0x737373);
 80079e6:	4d20      	ldr	r5, [pc, #128]	; (8007a68 <NewUser_Role+0xbc>)
		fill_roundrect(210+x,280+x,246+y,266+y,WHITE,WHITE);
 80079e8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80079ec:	e9cd 0000 	strd	r0, r0, [sp]
 80079f0:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80079f4:	22f6      	movs	r2, #246	; 0xf6
 80079f6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80079fa:	20d2      	movs	r0, #210	; 0xd2
 80079fc:	f7fe f9b4 	bl	8005d68 <fill_roundrect>
		print_string(218+x,251+y,"Role",0x737373);
 8007a00:	462b      	mov	r3, r5
 8007a02:	4a1a      	ldr	r2, [pc, #104]	; (8007a6c <NewUser_Role+0xc0>)
 8007a04:	21fb      	movs	r1, #251	; 0xfb
 8007a06:	20da      	movs	r0, #218	; 0xda
 8007a08:	f7fe fcf6 	bl	80063f8 <print_string>
		symbol(470,264,'D',0x999999);
 8007a0c:	4b18      	ldr	r3, [pc, #96]	; (8007a70 <NewUser_Role+0xc4>)
 8007a0e:	2244      	movs	r2, #68	; 0x44
 8007a10:	f44f 7184 	mov.w	r1, #264	; 0x108
 8007a14:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8007a18:	f7ff f814 	bl	8006a44 <symbol>
	symbol(470,257,'D',0xe7eefe);
 8007a1c:	4623      	mov	r3, r4
 8007a1e:	2244      	movs	r2, #68	; 0x44
 8007a20:	f240 1101 	movw	r1, #257	; 0x101
 8007a24:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8007a28:	f7ff f80c 	bl	8006a44 <symbol>
		fill_area(210,400,270,310,0xe7eefe);
 8007a2c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007a30:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8007a34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007a38:	9400      	str	r4, [sp, #0]
 8007a3a:	20d2      	movs	r0, #210	; 0xd2
 8007a3c:	f7fd fe26 	bl	800568c <fill_area>
		print_string(220,280,role_ptr,0x737373);
 8007a40:	4a0c      	ldr	r2, [pc, #48]	; (8007a74 <NewUser_Role+0xc8>)
 8007a42:	6812      	ldr	r2, [r2, #0]
 8007a44:	462b      	mov	r3, r5
 8007a46:	f44f 718c 	mov.w	r1, #280	; 0x118
 8007a4a:	20dc      	movs	r0, #220	; 0xdc
}
 8007a4c:	b003      	add	sp, #12
 8007a4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(220,280,role_ptr,0x737373);
 8007a52:	f7fe bcd1 	b.w	80063f8 <print_string>
 8007a56:	bf00      	nop
 8007a58:	20000544 	.word	0x20000544
 8007a5c:	00cedcfd 	.word	0x00cedcfd
 8007a60:	00e7eefe 	.word	0x00e7eefe
 8007a64:	00fffafa 	.word	0x00fffafa
 8007a68:	00737373 	.word	0x00737373
 8007a6c:	0800d448 	.word	0x0800d448
 8007a70:	00999999 	.word	0x00999999
 8007a74:	20000074 	.word	0x20000074

08007a78 <NewUser_Card>:
{
 8007a78:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 8007a7a:	482b      	ldr	r0, [pc, #172]	; (8007b28 <NewUser_Card+0xb0>)
		fill_roundrect(197,503,345,411,0xcedcfd,0xfffafa);
 8007a7c:	4d2b      	ldr	r5, [pc, #172]	; (8007b2c <NewUser_Card+0xb4>)
		fill_roundrect(200+x,500+x,348+y,408+y,0xe7eefe,0xcedcfd);
 8007a7e:	4c2c      	ldr	r4, [pc, #176]	; (8007b30 <NewUser_Card+0xb8>)
{
 8007a80:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 8007a82:	f7fd fd51 	bl	8005528 <Set_Font>
		fill_roundrect(197,503,345,411,0xcedcfd,0xfffafa);
 8007a86:	482b      	ldr	r0, [pc, #172]	; (8007b34 <NewUser_Card+0xbc>)
 8007a88:	f240 139b 	movw	r3, #411	; 0x19b
 8007a8c:	e9cd 5000 	strd	r5, r0, [sp]
 8007a90:	f240 1259 	movw	r2, #345	; 0x159
 8007a94:	f240 11f7 	movw	r1, #503	; 0x1f7
 8007a98:	20c5      	movs	r0, #197	; 0xc5
 8007a9a:	f7fe f965 	bl	8005d68 <fill_roundrect>
		fill_roundrect(200+x,500+x,348+y,408+y,0xe7eefe,0xcedcfd);
 8007a9e:	e9cd 4500 	strd	r4, r5, [sp]
 8007aa2:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8007aa6:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8007aaa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007aae:	20c8      	movs	r0, #200	; 0xc8
 8007ab0:	f7fe f95a 	bl	8005d68 <fill_roundrect>
		print_string(218+x,340+y,"Card/Thumb",0x737373);
 8007ab4:	4d20      	ldr	r5, [pc, #128]	; (8007b38 <NewUser_Card+0xc0>)
		fill_roundrect(210+x,340+x,338+y,358+y,WHITE,WHITE);
 8007ab6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007aba:	e9cd 0000 	strd	r0, r0, [sp]
 8007abe:	f44f 73b3 	mov.w	r3, #358	; 0x166
 8007ac2:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8007ac6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8007aca:	20d2      	movs	r0, #210	; 0xd2
 8007acc:	f7fe f94c 	bl	8005d68 <fill_roundrect>
		print_string(218+x,340+y,"Card/Thumb",0x737373);
 8007ad0:	462b      	mov	r3, r5
 8007ad2:	4a1a      	ldr	r2, [pc, #104]	; (8007b3c <NewUser_Card+0xc4>)
 8007ad4:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8007ad8:	20da      	movs	r0, #218	; 0xda
 8007ada:	f7fe fc8d 	bl	80063f8 <print_string>
		symbol(470,353,'D',0x999999);
 8007ade:	4b18      	ldr	r3, [pc, #96]	; (8007b40 <NewUser_Card+0xc8>)
 8007ae0:	2244      	movs	r2, #68	; 0x44
 8007ae2:	f240 1161 	movw	r1, #353	; 0x161
 8007ae6:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8007aea:	f7fe ffab 	bl	8006a44 <symbol>
	symbol(470,346,'D',0xe7eefe);
 8007aee:	4623      	mov	r3, r4
 8007af0:	2244      	movs	r2, #68	; 0x44
 8007af2:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8007af6:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8007afa:	f7fe ffa3 	bl	8006a44 <symbol>
		fill_area(210,400,370,400,0xe7eefe);
 8007afe:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007b02:	4619      	mov	r1, r3
 8007b04:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8007b08:	9400      	str	r4, [sp, #0]
 8007b0a:	20d2      	movs	r0, #210	; 0xd2
 8007b0c:	f7fd fdbe 	bl	800568c <fill_area>
		print_string(220,375,card_ptr,0x737373);
 8007b10:	4a0c      	ldr	r2, [pc, #48]	; (8007b44 <NewUser_Card+0xcc>)
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	462b      	mov	r3, r5
 8007b16:	f240 1177 	movw	r1, #375	; 0x177
 8007b1a:	20dc      	movs	r0, #220	; 0xdc
}
 8007b1c:	b003      	add	sp, #12
 8007b1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(220,375,card_ptr,0x737373);
 8007b22:	f7fe bc69 	b.w	80063f8 <print_string>
 8007b26:	bf00      	nop
 8007b28:	20000544 	.word	0x20000544
 8007b2c:	00cedcfd 	.word	0x00cedcfd
 8007b30:	00e7eefe 	.word	0x00e7eefe
 8007b34:	00fffafa 	.word	0x00fffafa
 8007b38:	00737373 	.word	0x00737373
 8007b3c:	0800d450 	.word	0x0800d450
 8007b40:	00999999 	.word	0x00999999
 8007b44:	20000000 	.word	0x20000000

08007b48 <NewEntry_page>:
{
 8007b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Set_Font(&Font12x18);
 8007b4c:	4e3d      	ldr	r6, [pc, #244]	; (8007c44 <NewEntry_page+0xfc>)
	fill_roundrect(100+x,700+x,40+y,440+y,0xcccccc,PURPLE);
 8007b4e:	4c3e      	ldr	r4, [pc, #248]	; (8007c48 <NewEntry_page+0x100>)
	fill_roundrect(104+x,696+x,44+y,436+y,0xfffafa,0xcccccc);
 8007b50:	4d3e      	ldr	r5, [pc, #248]	; (8007c4c <NewEntry_page+0x104>)
	fill_roundrect(550,650,72,132,0xe7eefe,0xcedcfd);
 8007b52:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007c60 <NewEntry_page+0x118>
	print_string(565+x,65+y,"Emp.ID",0x737373);
 8007b56:	4f3e      	ldr	r7, [pc, #248]	; (8007c50 <NewEntry_page+0x108>)
{
 8007b58:	b082      	sub	sp, #8
	Set_Font(&Font12x18);
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7fd fce4 	bl	8005528 <Set_Font>
	fill_roundrect(100+x,700+x,40+y,440+y,0xcccccc,PURPLE);
 8007b60:	4b3c      	ldr	r3, [pc, #240]	; (8007c54 <NewEntry_page+0x10c>)
 8007b62:	2228      	movs	r2, #40	; 0x28
 8007b64:	e9cd 4300 	strd	r4, r3, [sp]
 8007b68:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007b6c:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8007b70:	2064      	movs	r0, #100	; 0x64
 8007b72:	f7fe f8f9 	bl	8005d68 <fill_roundrect>
	fill_roundrect(104+x,696+x,44+y,436+y,0xfffafa,0xcccccc);
 8007b76:	e9cd 5400 	strd	r5, r4, [sp]
	fill_roundrect(547,653,69,135,0xcedcfd,0xfffafa);
 8007b7a:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
 8007b7e:	3431      	adds	r4, #49	; 0x31
	fill_roundrect(104+x,696+x,44+y,436+y,0xfffafa,0xcccccc);
 8007b80:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8007b84:	222c      	movs	r2, #44	; 0x2c
 8007b86:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8007b8a:	2068      	movs	r0, #104	; 0x68
 8007b8c:	f7fe f8ec 	bl	8005d68 <fill_roundrect>
	fill_roundrect(547,653,69,135,0xcedcfd,0xfffafa);
 8007b90:	e9cd 4500 	strd	r4, r5, [sp]
 8007b94:	2387      	movs	r3, #135	; 0x87
 8007b96:	2245      	movs	r2, #69	; 0x45
 8007b98:	f240 218d 	movw	r1, #653	; 0x28d
 8007b9c:	f240 2023 	movw	r0, #547	; 0x223
 8007ba0:	f7fe f8e2 	bl	8005d68 <fill_roundrect>
	fill_roundrect(550,650,72,132,0xe7eefe,0xcedcfd);
 8007ba4:	e9cd 8400 	strd	r8, r4, [sp]
 8007ba8:	2384      	movs	r3, #132	; 0x84
 8007baa:	2248      	movs	r2, #72	; 0x48
 8007bac:	f240 218a 	movw	r1, #650	; 0x28a
 8007bb0:	f240 2026 	movw	r0, #550	; 0x226
 8007bb4:	f7fe f8d8 	bl	8005d68 <fill_roundrect>
	fill_roundrect(560,640,62,82,WHITE,WHITE);
 8007bb8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007bbc:	e9cd 3300 	strd	r3, r3, [sp]
 8007bc0:	223e      	movs	r2, #62	; 0x3e
 8007bc2:	2352      	movs	r3, #82	; 0x52
 8007bc4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007bc8:	f44f 700c 	mov.w	r0, #560	; 0x230
 8007bcc:	f7fe f8cc 	bl	8005d68 <fill_roundrect>
	print_string(565+x,65+y,"Emp.ID",0x737373);
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	4a21      	ldr	r2, [pc, #132]	; (8007c58 <NewEntry_page+0x110>)
 8007bd4:	2141      	movs	r1, #65	; 0x41
 8007bd6:	f240 2035 	movw	r0, #565	; 0x235
 8007bda:	f7fe fc0d 	bl	80063f8 <print_string>
	fill_roundrect(547,653,345,411,0xcedcfd,0xfffafa);
 8007bde:	e9cd 4500 	strd	r4, r5, [sp]
 8007be2:	f240 139b 	movw	r3, #411	; 0x19b
 8007be6:	f240 1259 	movw	r2, #345	; 0x159
 8007bea:	f240 218d 	movw	r1, #653	; 0x28d
 8007bee:	f240 2023 	movw	r0, #547	; 0x223
 8007bf2:	f7fe f8b9 	bl	8005d68 <fill_roundrect>
	fill_roundrect(550,650,348,408,0xe7eefe,0xcedcfd);
 8007bf6:	e9cd 8400 	strd	r8, r4, [sp]
 8007bfa:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8007bfe:	f240 218a 	movw	r1, #650	; 0x28a
 8007c02:	f240 2026 	movw	r0, #550	; 0x226
 8007c06:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8007c0a:	f7fe f8ad 	bl	8005d68 <fill_roundrect>
	print_string(573+x,370+y,"SCAN",0x737373);
 8007c0e:	463b      	mov	r3, r7
 8007c10:	4a12      	ldr	r2, [pc, #72]	; (8007c5c <NewEntry_page+0x114>)
 8007c12:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8007c16:	f240 203d 	movw	r0, #573	; 0x23d
 8007c1a:	f7fe fbed 	bl	80063f8 <print_string>
		Set_Font(&Font12x18);
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7fd fc82 	bl	8005528 <Set_Font>
	NewUser_Name();
 8007c24:	f7ff fdf8 	bl	8007818 <NewUser_Name>
	NewUser_Desig(0,0,0,0);
 8007c28:	2300      	movs	r3, #0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff fe3e 	bl	80078b0 <NewUser_Desig>
	NewUser_Role();
 8007c34:	f7ff feba 	bl	80079ac <NewUser_Role>
}
 8007c38:	b002      	add	sp, #8
 8007c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	NewUser_Card();
 8007c3e:	f7ff bf1b 	b.w	8007a78 <NewUser_Card>
 8007c42:	bf00      	nop
 8007c44:	20000544 	.word	0x20000544
 8007c48:	00cccccc 	.word	0x00cccccc
 8007c4c:	00fffafa 	.word	0x00fffafa
 8007c50:	00737373 	.word	0x00737373
 8007c54:	00800010 	.word	0x00800010
 8007c58:	0800d45c 	.word	0x0800d45c
 8007c5c:	0800d464 	.word	0x0800d464
 8007c60:	00e7eefe 	.word	0x00e7eefe

08007c64 <PageKeyPad>:


//########################   KEYPAD_PAGE   ########################################

void PageKeyPad(void)
{
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		//Set_Font(&Font12x18);
		Set_Font(&Font16x24);
 8007c68:	4892      	ldr	r0, [pc, #584]	; (8007eb4 <PageKeyPad+0x250>)
		int x=0,x1=0,y=31,y1=0,k=0;
		//draw_roundrect(104,696,228,462,BLUE);
		fill_roundrect(135,655,208,430,KEYPAD_COLOR,0xfffafa);
 8007c6a:	4c93      	ldr	r4, [pc, #588]	; (8007eb8 <PageKeyPad+0x254>)
{
 8007c6c:	b089      	sub	sp, #36	; 0x24
		Set_Font(&Font16x24);
 8007c6e:	f7fd fc5b 	bl	8005528 <Set_Font>
		fill_roundrect(135,655,208,430,KEYPAD_COLOR,0xfffafa);
 8007c72:	4892      	ldr	r0, [pc, #584]	; (8007ebc <PageKeyPad+0x258>)
 8007c74:	9001      	str	r0, [sp, #4]
 8007c76:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 8007c7a:	22d0      	movs	r2, #208	; 0xd0
 8007c7c:	f240 218f 	movw	r1, #655	; 0x28f
 8007c80:	2087      	movs	r0, #135	; 0x87
 8007c82:	9400      	str	r4, [sp, #0]
 8007c84:	f7fe f870 	bl	8005d68 <fill_roundrect>
		fill_roundrect(137,653,210,428,WHITE,KEYPAD_COLOR);
 8007c88:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007c8c:	e9cd 3400 	strd	r3, r4, [sp]
 8007c90:	22d2      	movs	r2, #210	; 0xd2
 8007c92:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8007c96:	f240 218d 	movw	r1, #653	; 0x28d
 8007c9a:	2089      	movs	r0, #137	; 0x89
 8007c9c:	f7fe f864 	bl	8005d68 <fill_roundrect>
		for(int i=0; i<3; i++)
 8007ca0:	4a87      	ldr	r2, [pc, #540]	; (8007ec0 <PageKeyPad+0x25c>)
 8007ca2:	9203      	str	r2, [sp, #12]
		fill_roundrect(137,653,210,428,WHITE,KEYPAD_COLOR);
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4a87      	ldr	r2, [pc, #540]	; (8007ec4 <PageKeyPad+0x260>)
 8007ca8:	9206      	str	r2, [sp, #24]
 8007caa:	9304      	str	r3, [sp, #16]
 8007cac:	27dd      	movs	r7, #221	; 0xdd
 8007cae:	9305      	str	r3, [sp, #20]
		int x=0,x1=0,y=31,y1=0,k=0;
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	9307      	str	r3, [sp, #28]
		{
			x1+=25*i;
 8007cb4:	9907      	ldr	r1, [sp, #28]
 8007cb6:	9b05      	ldr	r3, [sp, #20]

				if(UC_FLAG)
				{
					if(NUM_FLAG)
					{
						print_char(x1+160+x,y1+200+y,symbol_key[i][j],WHITE);
 8007cb8:	9e06      	ldr	r6, [sp, #24]
 8007cba:	9d03      	ldr	r5, [sp, #12]
			x1+=25*i;
 8007cbc:	4419      	add	r1, r3
			for(int j=0; j<=9-(i*2-k); j++)
 8007cbe:	9b04      	ldr	r3, [sp, #16]
			x1+=25*i;
 8007cc0:	9107      	str	r1, [sp, #28]
			for(int j=0; j<=9-(i*2-k); j++)
 8007cc2:	1a9a      	subs	r2, r3, r2
 8007cc4:	f1c2 0209 	rsb	r2, r2, #9
 8007cc8:	f101 03c8 	add.w	r3, r1, #200	; 0xc8
 8007ccc:	2032      	movs	r0, #50	; 0x32
						print_char(x1+160+x,y1+200+y,symbol_key[i][j],WHITE);
 8007cce:	f107 080a 	add.w	r8, r7, #10
 8007cd2:	fb00 3302 	mla	r3, r0, r2, r3
 8007cd6:	fa1f f888 	uxth.w	r8, r8
 8007cda:	9302      	str	r3, [sp, #8]
 8007cdc:	f107 0b28 	add.w	fp, r7, #40	; 0x28
 8007ce0:	f107 0a02 	add.w	sl, r7, #2
 8007ce4:	f107 0926 	add.w	r9, r7, #38	; 0x26
				fill_roundrect(x1+150+x,x1+190+x,y1+190+y,y1+230+y,0x737373,WHITE);
 8007ce8:	f101 0496 	add.w	r4, r1, #150	; 0x96
 8007cec:	e00d      	b.n	8007d0a <PageKeyPad+0xa6>
				}
				else
				{
					if(NUM_FLAG)
					{
						print_char(x1+160+x,y1+200+y,symbol_key[i][j],WHITE);
 8007cee:	7832      	ldrb	r2, [r6, #0]
 8007cf0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007cf4:	4641      	mov	r1, r8
 8007cf6:	f7fe fb6d 	bl	80063d4 <print_char>
			for(int j=0; j<=9-(i*2-k); j++)
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	3432      	adds	r4, #50	; 0x32
 8007cfe:	429c      	cmp	r4, r3
 8007d00:	f105 0501 	add.w	r5, r5, #1
 8007d04:	f106 0601 	add.w	r6, r6, #1
 8007d08:	d024      	beq.n	8007d54 <PageKeyPad+0xf0>
				fill_roundrect(x1+150+x,x1+190+x,y1+190+y,y1+230+y,0x737373,WHITE);
 8007d0a:	4a6f      	ldr	r2, [pc, #444]	; (8007ec8 <PageKeyPad+0x264>)
 8007d0c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007d10:	e9cd 2000 	strd	r2, r0, [sp]
 8007d14:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8007d18:	465b      	mov	r3, fp
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	463a      	mov	r2, r7
 8007d1e:	f7fe f823 	bl	8005d68 <fill_roundrect>
				fill_roundrect(x1+152+x,x1+188+x,y1+192+y,y1+228+y,KEYPAD_COLOR ,0x737373);
 8007d22:	4b65      	ldr	r3, [pc, #404]	; (8007eb8 <PageKeyPad+0x254>)
 8007d24:	4a68      	ldr	r2, [pc, #416]	; (8007ec8 <PageKeyPad+0x264>)
 8007d26:	1ca0      	adds	r0, r4, #2
 8007d28:	e9cd 3200 	strd	r3, r2, [sp]
 8007d2c:	f104 0126 	add.w	r1, r4, #38	; 0x26
 8007d30:	464b      	mov	r3, r9
 8007d32:	4652      	mov	r2, sl
 8007d34:	f7fe f818 	bl	8005d68 <fill_roundrect>
					if(NUM_FLAG)
 8007d38:	4b64      	ldr	r3, [pc, #400]	; (8007ecc <PageKeyPad+0x268>)
 8007d3a:	781b      	ldrb	r3, [r3, #0]
						print_char(x1+160+x,y1+200+y,symbol_key[i][j],WHITE);
 8007d3c:	f104 000a 	add.w	r0, r4, #10
 8007d40:	b280      	uxth	r0, r0
					if(NUM_FLAG)
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1d3      	bne.n	8007cee <PageKeyPad+0x8a>
					}
					else
					{
						print_char(x1+160+x,y1+200+y,char_key[i][j],WHITE);
 8007d46:	782a      	ldrb	r2, [r5, #0]
 8007d48:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	f7fe fb41 	bl	80063d4 <print_char>
 8007d52:	e7d2      	b.n	8007cfa <PageKeyPad+0x96>
		for(int i=0; i<3; i++)
 8007d54:	9b05      	ldr	r3, [sp, #20]
 8007d56:	3319      	adds	r3, #25
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	9b04      	ldr	r3, [sp, #16]
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	9304      	str	r3, [sp, #16]
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	330a      	adds	r3, #10
 8007d64:	9303      	str	r3, [sp, #12]
 8007d66:	9b06      	ldr	r3, [sp, #24]
 8007d68:	330a      	adds	r3, #10
 8007d6a:	3732      	adds	r7, #50	; 0x32
 8007d6c:	9306      	str	r3, [sp, #24]
 8007d6e:	f240 1373 	movw	r3, #371	; 0x173
 8007d72:	429f      	cmp	r7, r3
					}
				}
				x+=50;
			}
			x=0;
			k=1;
 8007d74:	f04f 0201 	mov.w	r2, #1
		for(int i=0; i<3; i++)
 8007d78:	d19c      	bne.n	8007cb4 <PageKeyPad+0x50>
			y1+=50;
		}
		fill_roundrect(150,215,290+y,330+y,0x737373,WHITE);
 8007d7a:	4d53      	ldr	r5, [pc, #332]	; (8007ec8 <PageKeyPad+0x264>)
		fill_roundrect(152,213,292+y,328+y,KEYPAD_COLOR,0x737373); // Caps
 8007d7c:	4e4e      	ldr	r6, [pc, #312]	; (8007eb8 <PageKeyPad+0x254>)
		fill_roundrect(150,215,290+y,330+y,0x737373,WHITE);
 8007d7e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
 8007d82:	e9cd 5400 	strd	r5, r4, [sp]
 8007d86:	f240 1369 	movw	r3, #361	; 0x169
 8007d8a:	f240 1241 	movw	r2, #321	; 0x141
 8007d8e:	21d7      	movs	r1, #215	; 0xd7
 8007d90:	2096      	movs	r0, #150	; 0x96
 8007d92:	f7fd ffe9 	bl	8005d68 <fill_roundrect>
		fill_roundrect(152,213,292+y,328+y,KEYPAD_COLOR,0x737373); // Caps
 8007d96:	e9cd 6500 	strd	r6, r5, [sp]
 8007d9a:	f240 1367 	movw	r3, #359	; 0x167
 8007d9e:	f240 1243 	movw	r2, #323	; 0x143
 8007da2:	21d5      	movs	r1, #213	; 0xd5
 8007da4:	2098      	movs	r0, #152	; 0x98
 8007da6:	f7fd ffdf 	bl	8005d68 <fill_roundrect>
		print_string(155,300+y,"Caps",WHITE);
 8007daa:	4623      	mov	r3, r4
 8007dac:	4a48      	ldr	r2, [pc, #288]	; (8007ed0 <PageKeyPad+0x26c>)
 8007dae:	f240 114b 	movw	r1, #331	; 0x14b
 8007db2:	209b      	movs	r0, #155	; 0x9b
 8007db4:	f7fe fb20 	bl	80063f8 <print_string>

		fill_roundrect(175,265,340+y,380+y,0x737373,WHITE);
 8007db8:	463a      	mov	r2, r7
 8007dba:	e9cd 5400 	strd	r5, r4, [sp]
 8007dbe:	f240 139b 	movw	r3, #411	; 0x19b
 8007dc2:	f240 1109 	movw	r1, #265	; 0x109
 8007dc6:	20af      	movs	r0, #175	; 0xaf
 8007dc8:	f7fd ffce 	bl	8005d68 <fill_roundrect>
		fill_roundrect(177,263,342+y,378+y,KEYPAD_COLOR,0x737373);	//Num
 8007dcc:	e9cd 6500 	strd	r6, r5, [sp]
 8007dd0:	f240 1399 	movw	r3, #409	; 0x199
 8007dd4:	f240 1275 	movw	r2, #373	; 0x175
 8007dd8:	f240 1107 	movw	r1, #263	; 0x107
 8007ddc:	20b1      	movs	r0, #177	; 0xb1
 8007dde:	f7fd ffc3 	bl	8005d68 <fill_roundrect>
		print_string(195,350+y,"Num",WHITE);
 8007de2:	4623      	mov	r3, r4
 8007de4:	4a3b      	ldr	r2, [pc, #236]	; (8007ed4 <PageKeyPad+0x270>)
 8007de6:	f240 117d 	movw	r1, #381	; 0x17d
 8007dea:	20c3      	movs	r0, #195	; 0xc3
 8007dec:	f7fe fb04 	bl	80063f8 <print_string>

		fill_roundrect(525,615,340+y,380+y,0x737373,WHITE);
 8007df0:	463a      	mov	r2, r7
 8007df2:	e9cd 5400 	strd	r5, r4, [sp]
 8007df6:	f240 139b 	movw	r3, #411	; 0x19b
 8007dfa:	f240 2167 	movw	r1, #615	; 0x267
 8007dfe:	f240 200d 	movw	r0, #525	; 0x20d
 8007e02:	f7fd ffb1 	bl	8005d68 <fill_roundrect>
		fill_roundrect(527,613,342+y,378+y,KEYPAD_COLOR,0x737373);  // keypad DOWN.
 8007e06:	e9cd 6500 	strd	r6, r5, [sp]
 8007e0a:	f240 1399 	movw	r3, #409	; 0x199
 8007e0e:	f240 1275 	movw	r2, #373	; 0x175
 8007e12:	f240 2165 	movw	r1, #613	; 0x265
 8007e16:	f240 200f 	movw	r0, #527	; 0x20f
 8007e1a:	f7fd ffa5 	bl	8005d68 <fill_roundrect>
		symbol(565,335+y,'D',WHITE); //DOWN ARROW.
 8007e1e:	4623      	mov	r3, r4
 8007e20:	2244      	movs	r2, #68	; 0x44
 8007e22:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 8007e26:	f240 2035 	movw	r0, #565	; 0x235
 8007e2a:	f7fe fe0b 	bl	8006a44 <symbol>


		fill_roundrect(275,515,340+y,380+y,0x737373,WHITE);
 8007e2e:	463a      	mov	r2, r7
 8007e30:	e9cd 5400 	strd	r5, r4, [sp]
 8007e34:	f240 139b 	movw	r3, #411	; 0x19b
 8007e38:	f240 2103 	movw	r1, #515	; 0x203
 8007e3c:	f240 1013 	movw	r0, #275	; 0x113
 8007e40:	f7fd ff92 	bl	8005d68 <fill_roundrect>
		fill_roundrect(277,513,342+y,378+y,KEYPAD_COLOR,0x737373); // space
 8007e44:	e9cd 6500 	strd	r6, r5, [sp]
 8007e48:	f240 1275 	movw	r2, #373	; 0x175
 8007e4c:	f240 2101 	movw	r1, #513	; 0x201
 8007e50:	f240 1399 	movw	r3, #409	; 0x199
 8007e54:	f240 1015 	movw	r0, #277	; 0x115
 8007e58:	f7fd ff86 	bl	8005d68 <fill_roundrect>
		print_string(360,350+y,"Space",WHITE);
 8007e5c:	4623      	mov	r3, r4
 8007e5e:	4a1e      	ldr	r2, [pc, #120]	; (8007ed8 <PageKeyPad+0x274>)
 8007e60:	f240 117d 	movw	r1, #381	; 0x17d
 8007e64:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8007e68:	f7fe fac6 	bl	80063f8 <print_string>

		fill_roundrect(575,640,290+y,330+y,0x737373,WHITE);
 8007e6c:	e9cd 5400 	strd	r5, r4, [sp]
 8007e70:	f240 1369 	movw	r3, #361	; 0x169
 8007e74:	f240 1241 	movw	r2, #321	; 0x141
 8007e78:	f44f 7120 	mov.w	r1, #640	; 0x280
 8007e7c:	f240 203f 	movw	r0, #575	; 0x23f
 8007e80:	f7fd ff72 	bl	8005d68 <fill_roundrect>
		fill_roundrect(577,638,292+y,328+y,KEYPAD_COLOR,0x737373); // BackSpace
 8007e84:	e9cd 6500 	strd	r6, r5, [sp]
 8007e88:	f240 1243 	movw	r2, #323	; 0x143
 8007e8c:	f240 217e 	movw	r1, #638	; 0x27e
 8007e90:	f240 1367 	movw	r3, #359	; 0x167
 8007e94:	f240 2041 	movw	r0, #577	; 0x241
 8007e98:	f7fd ff66 	bl	8005d68 <fill_roundrect>
		print_string(580,300+y,"Back",WHITE);
 8007e9c:	4a0f      	ldr	r2, [pc, #60]	; (8007edc <PageKeyPad+0x278>)
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	f240 114b 	movw	r1, #331	; 0x14b
 8007ea4:	f44f 7011 	mov.w	r0, #580	; 0x244
		x1=0;
		y=0;
		y1=0;
		k=0;
	//Set_Font(&Font12x18);
}
 8007ea8:	b009      	add	sp, #36	; 0x24
 8007eaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		print_string(580,300+y,"Back",WHITE);
 8007eae:	f7fe baa3 	b.w	80063f8 <print_string>
 8007eb2:	bf00      	nop
 8007eb4:	2000054c 	.word	0x2000054c
 8007eb8:	00d9d9d9 	.word	0x00d9d9d9
 8007ebc:	00fffafa 	.word	0x00fffafa
 8007ec0:	20000004 	.word	0x20000004
 8007ec4:	20000078 	.word	0x20000078
 8007ec8:	00737373 	.word	0x00737373
 8007ecc:	200005dc 	.word	0x200005dc
 8007ed0:	0800d46c 	.word	0x0800d46c
 8007ed4:	0800d474 	.word	0x0800d474
 8007ed8:	0800d478 	.word	0x0800d478
 8007edc:	0800d480 	.word	0x0800d480

08007ee0 <dropdown>:

//###############################    DROPDOWN ROLE   ######################################
void dropdown(char *dpdown [], u32 NumOfBox,s16 x1, s16 x2, s16 y1)
{
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	ed2d 8b02 	vpush	{d8}
 8007ee8:	b085      	sub	sp, #20
  int y=0;
	//fill_area(197,503,234,430,WHITE);

	for(idx=0; idx<NumOfBox;idx++)
 8007eea:	4e27      	ldr	r6, [pc, #156]	; (8007f88 <dropdown+0xa8>)
{
 8007eec:	9003      	str	r0, [sp, #12]
	for(idx=0; idx<NumOfBox;idx++)
 8007eee:	2000      	movs	r0, #0
{
 8007ef0:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
	for(idx=0; idx<NumOfBox;idx++)
 8007ef4:	7030      	strb	r0, [r6, #0]
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	d041      	beq.n	8007f7e <dropdown+0x9e>
 8007efa:	f105 04f6 	add.w	r4, r5, #246	; 0xf6
	{
		//fill_roundrect(197,503,y1+234+y,y1+280+y,0xb3b3b3,0xb3b3b3);
		//Set_Font(&Font16x24);
		if(active_role == idx)
		{
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8007efe:	f203 17f7 	addw	r7, r3, #503	; 0x1f7
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8007f02:	f102 0bd7 	add.w	fp, r2, #215	; 0xd7
		}
		else
		{
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0xe6e6e6,0xe6e6e6);
			print_string(265-50+x1 ,y1+246+y,(*(dpdown+idx)),0x999999);
 8007f06:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8007f94 <dropdown+0xb4>
 8007f0a:	ee08 7a10 	vmov	s16, r7
 8007f0e:	468a      	mov	sl, r1
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8007f10:	f102 08c5 	add.w	r8, r2, #197	; 0xc5
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8007f14:	fa1f fb8b 	uxth.w	fp, fp
 8007f18:	b2a4      	uxth	r4, r4
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8007f1a:	35ea      	adds	r5, #234	; 0xea
 8007f1c:	e017      	b.n	8007f4e <dropdown+0x6e>
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0xe6e6e6,0xe6e6e6);
 8007f1e:	481b      	ldr	r0, [pc, #108]	; (8007f8c <dropdown+0xac>)
 8007f20:	e9cd 0000 	strd	r0, r0, [sp]
 8007f24:	4640      	mov	r0, r8
 8007f26:	f7fd ff1f 	bl	8005d68 <fill_roundrect>
			print_string(265-50+x1 ,y1+246+y,(*(dpdown+idx)),0x999999);
 8007f2a:	7833      	ldrb	r3, [r6, #0]
 8007f2c:	9a03      	ldr	r2, [sp, #12]
	for(idx=0; idx<NumOfBox;idx++)
 8007f2e:	3528      	adds	r5, #40	; 0x28
			print_string(265-50+x1 ,y1+246+y,(*(dpdown+idx)),0x999999);
 8007f30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f34:	4621      	mov	r1, r4
 8007f36:	464b      	mov	r3, r9
 8007f38:	4658      	mov	r0, fp
 8007f3a:	f7fe fa5d 	bl	80063f8 <print_string>
	for(idx=0; idx<NumOfBox;idx++)
 8007f3e:	7830      	ldrb	r0, [r6, #0]
 8007f40:	3001      	adds	r0, #1
 8007f42:	b2c0      	uxtb	r0, r0
 8007f44:	3428      	adds	r4, #40	; 0x28
 8007f46:	4550      	cmp	r0, sl
 8007f48:	7030      	strb	r0, [r6, #0]
 8007f4a:	b2a4      	uxth	r4, r4
 8007f4c:	d217      	bcs.n	8007f7e <dropdown+0x9e>
		if(active_role == idx)
 8007f4e:	4f10      	ldr	r7, [pc, #64]	; (8007f90 <dropdown+0xb0>)
 8007f50:	f897 c000 	ldrb.w	ip, [r7]
 8007f54:	4584      	cmp	ip, r0
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0xe6e6e6,0xe6e6e6);
 8007f56:	ee18 1a10 	vmov	r1, s16
 8007f5a:	f105 032e 	add.w	r3, r5, #46	; 0x2e
 8007f5e:	462a      	mov	r2, r5
		if(active_role == idx)
 8007f60:	d1dd      	bne.n	8007f1e <dropdown+0x3e>
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8007f62:	e9cd 9900 	strd	r9, r9, [sp]
 8007f66:	4640      	mov	r0, r8
 8007f68:	f7fd fefe 	bl	8005d68 <fill_roundrect>
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8007f6c:	7833      	ldrb	r3, [r6, #0]
 8007f6e:	9a03      	ldr	r2, [sp, #12]
	for(idx=0; idx<NumOfBox;idx++)
 8007f70:	3528      	adds	r5, #40	; 0x28
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8007f72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f76:	4621      	mov	r1, r4
 8007f78:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007f7c:	e7dc      	b.n	8007f38 <dropdown+0x58>
		 y+=40;

	}

	NumOfBox = 0;
}
 8007f7e:	b005      	add	sp, #20
 8007f80:	ecbd 8b02 	vpop	{d8}
 8007f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f88:	20000670 	.word	0x20000670
 8007f8c:	00e6e6e6 	.word	0x00e6e6e6
 8007f90:	200005de 	.word	0x200005de
 8007f94:	00999999 	.word	0x00999999

08007f98 <attendence_search>:
}

//#######################################    SEARCH ATTENDANCE   ###########################################

void attendence_search(void)
{
 8007f98:	b570      	push	{r4, r5, r6, lr}
 8007f9a:	b084      	sub	sp, #16
 	uint8_t table_y = 22;
	//fill_screen(PURPLE);
	fill_area(100,700,0,480,PURPLE);
 8007f9c:	4d85      	ldr	r5, [pc, #532]	; (80081b4 <attendence_search+0x21c>)
	//fill_roundrect(73, 705, 36, 464,0xcccccc,PURPLE);
	//fill_roundrect(77,701,40,460,0xfffafa,0xcccccc);
	//fill_area(0,800,0,70+10,0x74c69d);
	//fill_roundrect(130,530,25,75,0x9900ff, 0x74c69d);
	fill_roundrect(108,540,40,88,0xcedcfd,PURPLE);	//   Search box
 8007f9e:	4e86      	ldr	r6, [pc, #536]	; (80081b8 <attendence_search+0x220>)
	fill_area(100,700,0,480,PURPLE);
 8007fa0:	9500      	str	r5, [sp, #0]
 8007fa2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8007fac:	2064      	movs	r0, #100	; 0x64
 8007fae:	f7fd fb6d 	bl	800568c <fill_area>
	fill_roundrect2(111 ,537,43,85,0xe7eefe);
 8007fb2:	4c82      	ldr	r4, [pc, #520]	; (80081bc <attendence_search+0x224>)
	fill_roundrect(108,540,40,88,0xcedcfd,PURPLE);	//   Search box
 8007fb4:	2358      	movs	r3, #88	; 0x58
 8007fb6:	2228      	movs	r2, #40	; 0x28
 8007fb8:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8007fbc:	206c      	movs	r0, #108	; 0x6c
 8007fbe:	e9cd 6500 	strd	r6, r5, [sp]
 8007fc2:	f7fd fed1 	bl	8005d68 <fill_roundrect>
	fill_roundrect2(111 ,537,43,85,0xe7eefe);
 8007fc6:	2355      	movs	r3, #85	; 0x55
 8007fc8:	222b      	movs	r2, #43	; 0x2b
 8007fca:	9400      	str	r4, [sp, #0]
 8007fcc:	f240 2119 	movw	r1, #537	; 0x219
 8007fd0:	206f      	movs	r0, #111	; 0x6f
 8007fd2:	f7ff f8bd 	bl	8007150 <fill_roundrect2>
	//draw_roundrect(170,570,46,94,BLUE);
	fill_roundrect(570,670,40,88,0xb6cbbb,PURPLE); //   Search button
 8007fd6:	4a7a      	ldr	r2, [pc, #488]	; (80081c0 <attendence_search+0x228>)
 8007fd8:	2358      	movs	r3, #88	; 0x58
 8007fda:	e9cd 2500 	strd	r2, r5, [sp]
 8007fde:	f240 219e 	movw	r1, #670	; 0x29e
 8007fe2:	2228      	movs	r2, #40	; 0x28
 8007fe4:	f240 203a 	movw	r0, #570	; 0x23a
 8007fe8:	f7fd febe 	bl	8005d68 <fill_roundrect>
	fill_roundrect2(573,667,43,85,0xe7eefe);
 8007fec:	222b      	movs	r2, #43	; 0x2b
 8007fee:	f240 219b 	movw	r1, #667	; 0x29b
 8007ff2:	f240 203d 	movw	r0, #573	; 0x23d
 8007ff6:	9400      	str	r4, [sp, #0]
 8007ff8:	2355      	movs	r3, #85	; 0x55
 8007ffa:	f7ff f8a9 	bl	8007150 <fill_roundrect2>
	//print_string(590,40,"SEARCH",0x737373);

///////////////////////////// for button  //////////////////////////////////////////////////////

	//draw_circle(760, 180-table_y+1, 20, 0x9900ff);
	fill_circle(760, 180-table_y, 20, 0xcedcfd);
 8007ffe:	4633      	mov	r3, r6
 8008000:	2214      	movs	r2, #20
 8008002:	219e      	movs	r1, #158	; 0x9e
 8008004:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008008:	f7fe f8ec 	bl	80061e4 <fill_circle>
	fill_circle(760, 180-table_y, 18, 0xe7eefe);
 800800c:	4623      	mov	r3, r4
 800800e:	2212      	movs	r2, #18
 8008010:	219e      	movs	r1, #158	; 0x9e
 8008012:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008016:	f7fe f8e5 	bl	80061e4 <fill_circle>
	symbol(760, 175-table_y, '^', 0x737373);
 800801a:	4b6a      	ldr	r3, [pc, #424]	; (80081c4 <attendence_search+0x22c>)
 800801c:	225e      	movs	r2, #94	; 0x5e
 800801e:	2199      	movs	r1, #153	; 0x99
 8008020:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008024:	f7fe fd0e 	bl	8006a44 <symbol>
 8008028:	24b7      	movs	r4, #183	; 0xb7

	for(int i = 4; i<195; i=i+8)
	 {
	   draw_vl(760, 179+i, 3, 0xe7eefe);
 800802a:	b221      	sxth	r1, r4
 800802c:	4b63      	ldr	r3, [pc, #396]	; (80081bc <attendence_search+0x224>)
 800802e:	9103      	str	r1, [sp, #12]
 8008030:	2203      	movs	r2, #3
 8008032:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008036:	f7fd fca1 	bl	800597c <draw_vl>
	for(int i = 4; i<195; i=i+8)
 800803a:	3408      	adds	r4, #8
		 draw_vl(759, 179+i, 3, 0xe7eefe);
 800803c:	4b5f      	ldr	r3, [pc, #380]	; (80081bc <attendence_search+0x224>)
 800803e:	9903      	ldr	r1, [sp, #12]
 8008040:	2203      	movs	r2, #3
 8008042:	f240 20f7 	movw	r0, #759	; 0x2f7
 8008046:	f7fd fc99 	bl	800597c <draw_vl>
	for(int i = 4; i<195; i=i+8)
 800804a:	b2a4      	uxth	r4, r4
 800804c:	f240 1377 	movw	r3, #375	; 0x177
 8008050:	429c      	cmp	r4, r3
 8008052:	d1ea      	bne.n	800802a <attendence_search+0x92>
	 }

	//draw_circle(760, 418-table_y+1, 20, 0x9900ff);
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 8008054:	4d58      	ldr	r5, [pc, #352]	; (80081b8 <attendence_search+0x220>)
////////////////////////// for table  ///////////////////////////////////////////////////////////

  	fill_roundrect(94, 684, 115, 440, 0xcedcfd, PURPLE);
//	fill_area(20,730,90,140+3,0x74c69d);
	fill_area(100,678,149-table_y,192+3-table_y,0xcedcfd);
	fill_area(100,678,200-table_y,245+3-table_y,table_color);
 8008056:	4c5c      	ldr	r4, [pc, #368]	; (80081c8 <attendence_search+0x230>)
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 8008058:	462b      	mov	r3, r5
 800805a:	2214      	movs	r2, #20
 800805c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008060:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008064:	f7fe f8be 	bl	80061e4 <fill_circle>
	fill_circle(760, 418-table_y, 18, 0xe7eefe);
 8008068:	4b54      	ldr	r3, [pc, #336]	; (80081bc <attendence_search+0x224>)
 800806a:	2212      	movs	r2, #18
 800806c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008070:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008074:	f7fe f8b6 	bl	80061e4 <fill_circle>
  symbol_dwn_Arrow (760, 423-table_y, 0x737373);  /// for DOWN Arrow  symbol
 8008078:	4a52      	ldr	r2, [pc, #328]	; (80081c4 <attendence_search+0x22c>)
 800807a:	f240 1191 	movw	r1, #401	; 0x191
 800807e:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008082:	f7ff fa39 	bl	80074f8 <symbol_dwn_Arrow>
  	fill_roundrect(94, 684, 115, 440, 0xcedcfd, PURPLE);
 8008086:	484b      	ldr	r0, [pc, #300]	; (80081b4 <attendence_search+0x21c>)
 8008088:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 800808c:	e9cd 5000 	strd	r5, r0, [sp]
 8008090:	2273      	movs	r2, #115	; 0x73
 8008092:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8008096:	205e      	movs	r0, #94	; 0x5e
 8008098:	f7fd fe66 	bl	8005d68 <fill_roundrect>
	fill_area(100,678,149-table_y,192+3-table_y,0xcedcfd);
 800809c:	9500      	str	r5, [sp, #0]
 800809e:	23ad      	movs	r3, #173	; 0xad
 80080a0:	227f      	movs	r2, #127	; 0x7f
 80080a2:	f240 21a6 	movw	r1, #678	; 0x2a6
 80080a6:	2064      	movs	r0, #100	; 0x64
 80080a8:	f7fd faf0 	bl	800568c <fill_area>
	fill_area(100,678,252-table_y,297+3-table_y,table_color_2);
 80080ac:	4d47      	ldr	r5, [pc, #284]	; (80081cc <attendence_search+0x234>)
	fill_area(100,678,200-table_y,245+3-table_y,table_color);
 80080ae:	9400      	str	r4, [sp, #0]
 80080b0:	23e2      	movs	r3, #226	; 0xe2
 80080b2:	22b2      	movs	r2, #178	; 0xb2
 80080b4:	f240 21a6 	movw	r1, #678	; 0x2a6
 80080b8:	2064      	movs	r0, #100	; 0x64
 80080ba:	f7fd fae7 	bl	800568c <fill_area>
	fill_area(100,678,252-table_y,297+3-table_y,table_color_2);
 80080be:	f44f 738b 	mov.w	r3, #278	; 0x116
 80080c2:	22e6      	movs	r2, #230	; 0xe6
 80080c4:	f240 21a6 	movw	r1, #678	; 0x2a6
 80080c8:	9500      	str	r5, [sp, #0]
 80080ca:	2064      	movs	r0, #100	; 0x64
 80080cc:	f7fd fade 	bl	800568c <fill_area>
	fill_area(100,678,304-table_y,349+3-table_y,table_color);
 80080d0:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80080d4:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80080d8:	f240 21a6 	movw	r1, #678	; 0x2a6
 80080dc:	9400      	str	r4, [sp, #0]
 80080de:	2064      	movs	r0, #100	; 0x64
 80080e0:	f7fd fad4 	bl	800568c <fill_area>
	fill_area(100,678,356-table_y,401+3-table_y,table_color_2);
 80080e4:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 80080e8:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80080ec:	f240 21a6 	movw	r1, #678	; 0x2a6
 80080f0:	9500      	str	r5, [sp, #0]
 80080f2:	2064      	movs	r0, #100	; 0x64
 80080f4:	f7fd faca 	bl	800568c <fill_area>
	fill_area(100,678,408-table_y,453+3-table_y,table_color);
 80080f8:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 80080fc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008100:	f240 21a6 	movw	r1, #678	; 0x2a6
 8008104:	2064      	movs	r0, #100	; 0x64
 8008106:	9400      	str	r4, [sp, #0]
 8008108:	f7fd fac0 	bl	800568c <fill_area>


	//draw_rect(70,720,143-table_y,461-table_y,table_border_color);

	draw_vl(100+65,143-table_y,318,table_border_color);
 800810c:	4b30      	ldr	r3, [pc, #192]	; (80081d0 <attendence_search+0x238>)
 800810e:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8008112:	2179      	movs	r1, #121	; 0x79
 8008114:	20a5      	movs	r0, #165	; 0xa5
 8008116:	f7fd fc31 	bl	800597c <draw_vl>
	draw_vl(390+140,143-table_y,318,table_border_color);
 800811a:	4b2d      	ldr	r3, [pc, #180]	; (80081d0 <attendence_search+0x238>)
 800811c:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8008120:	2179      	movs	r1, #121	; 0x79
 8008122:	f240 2012 	movw	r0, #530	; 0x212
 8008126:	f7fd fc29 	bl	800597c <draw_vl>
	draw_vl(170+435,143-table_y,318,table_border_color);
 800812a:	4b29      	ldr	r3, [pc, #164]	; (80081d0 <attendence_search+0x238>)
 800812c:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8008130:	2179      	movs	r1, #121	; 0x79
 8008132:	f240 205d 	movw	r0, #605	; 0x25d
 8008136:	f7fd fc21 	bl	800597c <draw_vl>
	draw_hl(70,355-table_y,650,table_border_color);
	draw_hl(70,408-table_y,650,table_border_color);
*/
/////////////////////////////for string  ///////////////////////////////////////////////////////

	Set_Font(&Font12x18);
 800813a:	4826      	ldr	r0, [pc, #152]	; (80081d4 <attendence_search+0x23c>)
 800813c:	f7fd f9f4 	bl	8005528 <Set_Font>
	print_string(585,55,"SEARCH",0x737373);
 8008140:	4b20      	ldr	r3, [pc, #128]	; (80081c4 <attendence_search+0x22c>)
 8008142:	4a25      	ldr	r2, [pc, #148]	; (80081d8 <attendence_search+0x240>)
 8008144:	2137      	movs	r1, #55	; 0x37
 8008146:	f240 2049 	movw	r0, #585	; 0x249
 800814a:	f7fe f955 	bl	80063f8 <print_string>


//	print_int(4, 400, 25+5, 1, 1, WHITE);
//	print_string(200,50,"NAVEEN PRAKASH MAURYA",0x737373);
//	print_string(760,20+5,"6",WHITE);
	print_string(122,163-table_y,"ID",0x737373);
 800814e:	4b1d      	ldr	r3, [pc, #116]	; (80081c4 <attendence_search+0x22c>)
 8008150:	4a22      	ldr	r2, [pc, #136]	; (80081dc <attendence_search+0x244>)
 8008152:	218d      	movs	r1, #141	; 0x8d
 8008154:	207a      	movs	r0, #122	; 0x7a
 8008156:	f7fe f94f 	bl	80063f8 <print_string>
	print_string(330,163-table_y,"NAME",0x737373);
 800815a:	4b1a      	ldr	r3, [pc, #104]	; (80081c4 <attendence_search+0x22c>)
 800815c:	4a20      	ldr	r2, [pc, #128]	; (80081e0 <attendence_search+0x248>)
 800815e:	218d      	movs	r1, #141	; 0x8d
 8008160:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8008164:	f7fe f948 	bl	80063f8 <print_string>
	print_string(535,163-table_y,"IN",0x737373);
 8008168:	4b16      	ldr	r3, [pc, #88]	; (80081c4 <attendence_search+0x22c>)
 800816a:	4a1e      	ldr	r2, [pc, #120]	; (80081e4 <attendence_search+0x24c>)
 800816c:	218d      	movs	r1, #141	; 0x8d
 800816e:	f240 2017 	movw	r0, #535	; 0x217
 8008172:	f7fe f941 	bl	80063f8 <print_string>
	print_string(615,163-table_y,"OUT",0x737373);
 8008176:	4b13      	ldr	r3, [pc, #76]	; (80081c4 <attendence_search+0x22c>)
 8008178:	4a1b      	ldr	r2, [pc, #108]	; (80081e8 <attendence_search+0x250>)
 800817a:	218d      	movs	r1, #141	; 0x8d
 800817c:	f240 2067 	movw	r0, #615	; 0x267
 8008180:	f7fe f93a 	bl	80063f8 <print_string>
//	print_string(170,216-table_y,"NAVEEN PRAKASH MAURYA",0x9900ff);
//	print_string(90,216-table_y,"E001",0x9900ff);
	print_string(540,216-table_y,"09:30",0x737373);
 8008184:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <attendence_search+0x22c>)
 8008186:	4a19      	ldr	r2, [pc, #100]	; (80081ec <attendence_search+0x254>)
 8008188:	21c2      	movs	r1, #194	; 0xc2
 800818a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800818e:	f7fe f933 	bl	80063f8 <print_string>
	print_string(615,216-table_y,"06:00",0x737373);
 8008192:	4b0c      	ldr	r3, [pc, #48]	; (80081c4 <attendence_search+0x22c>)
 8008194:	4a16      	ldr	r2, [pc, #88]	; (80081f0 <attendence_search+0x258>)
 8008196:	21c2      	movs	r1, #194	; 0xc2
 8008198:	f240 2067 	movw	r0, #615	; 0x267
 800819c:	f7fe f92c 	bl	80063f8 <print_string>
	print_image(10,10,60,60,back);
 80081a0:	233c      	movs	r3, #60	; 0x3c
 80081a2:	210a      	movs	r1, #10
 80081a4:	4a13      	ldr	r2, [pc, #76]	; (80081f4 <attendence_search+0x25c>)
 80081a6:	9200      	str	r2, [sp, #0]
 80081a8:	4608      	mov	r0, r1
 80081aa:	461a      	mov	r2, r3
 80081ac:	f7fe f946 	bl	800643c <print_image>
	BackBtn();
}
 80081b0:	b004      	add	sp, #16
 80081b2:	bd70      	pop	{r4, r5, r6, pc}
 80081b4:	00800010 	.word	0x00800010
 80081b8:	00cedcfd 	.word	0x00cedcfd
 80081bc:	00e7eefe 	.word	0x00e7eefe
 80081c0:	00b6cbbb 	.word	0x00b6cbbb
 80081c4:	00737373 	.word	0x00737373
 80081c8:	00f7f9fe 	.word	0x00f7f9fe
 80081cc:	00f0f4ff 	.word	0x00f0f4ff
 80081d0:	0099b1ff 	.word	0x0099b1ff
 80081d4:	20000544 	.word	0x20000544
 80081d8:	0800d3f8 	.word	0x0800d3f8
 80081dc:	0800d460 	.word	0x0800d460
 80081e0:	0800d488 	.word	0x0800d488
 80081e4:	0800d490 	.word	0x0800d490
 80081e8:	0800d494 	.word	0x0800d494
 80081ec:	0800d498 	.word	0x0800d498
 80081f0:	0800d4a0 	.word	0x0800d4a0
 80081f4:	08012ec0 	.word	0x08012ec0

080081f8 <Role_Page>:

//######################################    ROLE PAGE   #######################################

void Role_Page(void)
{
 80081f8:	b530      	push	{r4, r5, lr}

  uint8_t table_y = 22;
	fill_screen(PURPLE);
 80081fa:	487c      	ldr	r0, [pc, #496]	; (80083ec <Role_Page+0x1f4>)
{
 80081fc:	b085      	sub	sp, #20
	fill_screen(PURPLE);
 80081fe:	f7fd f9ff 	bl	8005600 <fill_screen>

///////////////////////////// for button  //////////////////////////////////////////////////////

	//draw_circle(760, 180-table_y+1, 20, 0x9900ff);
	fill_circle(760, 180-table_y, 20, 0xcedcfd);
 8008202:	4b7b      	ldr	r3, [pc, #492]	; (80083f0 <Role_Page+0x1f8>)
 8008204:	2214      	movs	r2, #20
 8008206:	219e      	movs	r1, #158	; 0x9e
 8008208:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 800820c:	f7fd ffea 	bl	80061e4 <fill_circle>
	fill_circle(760, 180-table_y, 18, 0xe7eefe);
 8008210:	4b78      	ldr	r3, [pc, #480]	; (80083f4 <Role_Page+0x1fc>)
 8008212:	2212      	movs	r2, #18
 8008214:	219e      	movs	r1, #158	; 0x9e
 8008216:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 800821a:	f7fd ffe3 	bl	80061e4 <fill_circle>
	symbol(760, 175-table_y, '^', 0x737373);
 800821e:	4b76      	ldr	r3, [pc, #472]	; (80083f8 <Role_Page+0x200>)
 8008220:	225e      	movs	r2, #94	; 0x5e
 8008222:	2199      	movs	r1, #153	; 0x99
 8008224:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008228:	f7fe fc0c 	bl	8006a44 <symbol>
 800822c:	24b7      	movs	r4, #183	; 0xb7

	for(int i = 4; i<195; i=i+8)
	 {
	   draw_vl(760, 179+i, 3, 0xe7eefe);
 800822e:	b221      	sxth	r1, r4
 8008230:	4b70      	ldr	r3, [pc, #448]	; (80083f4 <Role_Page+0x1fc>)
 8008232:	9103      	str	r1, [sp, #12]
 8008234:	2203      	movs	r2, #3
 8008236:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 800823a:	f7fd fb9f 	bl	800597c <draw_vl>
	for(int i = 4; i<195; i=i+8)
 800823e:	3408      	adds	r4, #8
		 draw_vl(759, 179+i, 3, 0xe7eefe);
 8008240:	4b6c      	ldr	r3, [pc, #432]	; (80083f4 <Role_Page+0x1fc>)
 8008242:	9903      	ldr	r1, [sp, #12]
 8008244:	2203      	movs	r2, #3
 8008246:	f240 20f7 	movw	r0, #759	; 0x2f7
 800824a:	f7fd fb97 	bl	800597c <draw_vl>
	for(int i = 4; i<195; i=i+8)
 800824e:	b2a4      	uxth	r4, r4
 8008250:	f240 1377 	movw	r3, #375	; 0x177
 8008254:	429c      	cmp	r4, r3
 8008256:	d1ea      	bne.n	800822e <Role_Page+0x36>
	 }

	//draw_circle(760, 418-table_y+1, 20, 0x9900ff);
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 8008258:	4b65      	ldr	r3, [pc, #404]	; (80083f0 <Role_Page+0x1f8>)

////////////////////////// for table  ///////////////////////////////////////////////////////////

//	fill_area(20,730,90,140+3,0x74c69d);
	fill_area(70,720,143-table_y,193+3-table_y,0x8c8c8c);
	fill_area(70,720,196-table_y,246+3-table_y,table_color);
 800825a:	4d68      	ldr	r5, [pc, #416]	; (80083fc <Role_Page+0x204>)
	fill_area(70,720,249-table_y,299+3-table_y,table_color_2);
 800825c:	4c68      	ldr	r4, [pc, #416]	; (8008400 <Role_Page+0x208>)
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 800825e:	2214      	movs	r2, #20
 8008260:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008264:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008268:	f7fd ffbc 	bl	80061e4 <fill_circle>
	fill_circle(760, 418-table_y, 18, 0xe7eefe);
 800826c:	4b61      	ldr	r3, [pc, #388]	; (80083f4 <Role_Page+0x1fc>)
 800826e:	2212      	movs	r2, #18
 8008270:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008274:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008278:	f7fd ffb4 	bl	80061e4 <fill_circle>
  symbol_dwn_Arrow (760, 423-table_y, 0x737373);  /// for DOWN Arrow  symbol
 800827c:	4a5e      	ldr	r2, [pc, #376]	; (80083f8 <Role_Page+0x200>)
 800827e:	f240 1191 	movw	r1, #401	; 0x191
 8008282:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008286:	f7ff f937 	bl	80074f8 <symbol_dwn_Arrow>
	fill_area(70,720,143-table_y,193+3-table_y,0x8c8c8c);
 800828a:	485e      	ldr	r0, [pc, #376]	; (8008404 <Role_Page+0x20c>)
 800828c:	9000      	str	r0, [sp, #0]
 800828e:	23ae      	movs	r3, #174	; 0xae
 8008290:	2279      	movs	r2, #121	; 0x79
 8008292:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8008296:	2046      	movs	r0, #70	; 0x46
 8008298:	f7fd f9f8 	bl	800568c <fill_area>
	fill_area(70,720,196-table_y,246+3-table_y,table_color);
 800829c:	23e3      	movs	r3, #227	; 0xe3
 800829e:	22ae      	movs	r2, #174	; 0xae
 80082a0:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80082a4:	2046      	movs	r0, #70	; 0x46
 80082a6:	9500      	str	r5, [sp, #0]
 80082a8:	f7fd f9f0 	bl	800568c <fill_area>
	fill_area(70,720,249-table_y,299+3-table_y,table_color_2);
 80082ac:	9400      	str	r4, [sp, #0]
 80082ae:	f44f 738c 	mov.w	r3, #280	; 0x118
 80082b2:	22e3      	movs	r2, #227	; 0xe3
 80082b4:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80082b8:	2046      	movs	r0, #70	; 0x46
 80082ba:	f7fd f9e7 	bl	800568c <fill_area>
	fill_area(70,720,302-table_y,352+3-table_y,table_color);
 80082be:	f240 134d 	movw	r3, #333	; 0x14d
 80082c2:	f44f 728c 	mov.w	r2, #280	; 0x118
 80082c6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80082ca:	9500      	str	r5, [sp, #0]
 80082cc:	2046      	movs	r0, #70	; 0x46
 80082ce:	f7fd f9dd 	bl	800568c <fill_area>
	fill_area(70,720,355-table_y,405+3-table_y,table_color_2);
 80082d2:	9400      	str	r4, [sp, #0]
 80082d4:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80082d8:	f240 124d 	movw	r2, #333	; 0x14d
 80082dc:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80082e0:	2046      	movs	r0, #70	; 0x46
	fill_area(70,720,408-table_y,458+3-table_y,table_color);


	draw_rect(70,720,143-table_y,461-table_y,table_border_color);
 80082e2:	f5a4 04ae 	sub.w	r4, r4, #5701632	; 0x570000
 80082e6:	f5a4 4486 	sub.w	r4, r4, #17152	; 0x4300
	fill_area(70,720,355-table_y,405+3-table_y,table_color_2);
 80082ea:	f7fd f9cf 	bl	800568c <fill_area>
	fill_area(70,720,408-table_y,458+3-table_y,table_color);
 80082ee:	f240 13b7 	movw	r3, #439	; 0x1b7
 80082f2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80082f6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80082fa:	9500      	str	r5, [sp, #0]
 80082fc:	2046      	movs	r0, #70	; 0x46
 80082fe:	f7fd f9c5 	bl	800568c <fill_area>
	draw_rect(70,720,143-table_y,461-table_y,table_border_color);
 8008302:	2279      	movs	r2, #121	; 0x79
 8008304:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8008308:	2046      	movs	r0, #70	; 0x46
 800830a:	9400      	str	r4, [sp, #0]
 800830c:	f240 13b7 	movw	r3, #439	; 0x1b7
 8008310:	f7fd fbd4 	bl	8005abc <draw_rect>

	draw_vl(70+90,143-table_y,318,table_border_color);
 8008314:	4623      	mov	r3, r4
 8008316:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800831a:	2179      	movs	r1, #121	; 0x79
 800831c:	20a0      	movs	r0, #160	; 0xa0
 800831e:	f7fd fb2d 	bl	800597c <draw_vl>
	draw_vl(550,143-table_y,318,table_border_color);
 8008322:	4623      	mov	r3, r4
 8008324:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8008328:	2179      	movs	r1, #121	; 0x79
 800832a:	f240 2026 	movw	r0, #550	; 0x226
 800832e:	f7fd fb25 	bl	800597c <draw_vl>
//	draw_vl(120+460,143-table_y,318,table_border_color);


//	draw_hl(20,143,710,table_border_color);
	draw_hl(70,196-table_y,650,table_border_color);
 8008332:	4623      	mov	r3, r4
 8008334:	f240 228a 	movw	r2, #650	; 0x28a
 8008338:	21ae      	movs	r1, #174	; 0xae
 800833a:	2046      	movs	r0, #70	; 0x46
 800833c:	f7fd fa80 	bl	8005840 <draw_hl>
	draw_hl(70,249-table_y,650,table_border_color);
 8008340:	4623      	mov	r3, r4
 8008342:	f240 228a 	movw	r2, #650	; 0x28a
 8008346:	21e3      	movs	r1, #227	; 0xe3
 8008348:	2046      	movs	r0, #70	; 0x46
 800834a:	f7fd fa79 	bl	8005840 <draw_hl>
	draw_hl(70,302-table_y,650,table_border_color);
 800834e:	4623      	mov	r3, r4
 8008350:	f240 228a 	movw	r2, #650	; 0x28a
 8008354:	f44f 718c 	mov.w	r1, #280	; 0x118
 8008358:	2046      	movs	r0, #70	; 0x46
 800835a:	f7fd fa71 	bl	8005840 <draw_hl>
	draw_hl(70,355-table_y,650,table_border_color);
 800835e:	4623      	mov	r3, r4
 8008360:	f240 228a 	movw	r2, #650	; 0x28a
 8008364:	f240 114d 	movw	r1, #333	; 0x14d
 8008368:	2046      	movs	r0, #70	; 0x46
 800836a:	f7fd fa69 	bl	8005840 <draw_hl>
	draw_hl(70,408-table_y,650,table_border_color);
 800836e:	4623      	mov	r3, r4
 8008370:	f240 228a 	movw	r2, #650	; 0x28a
 8008374:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8008378:	2046      	movs	r0, #70	; 0x46
 800837a:	f7fd fa61 	bl	8005840 <draw_hl>



/////////////////////////////for string  ///////////////////////////////////////////////////////

	Set_Font(&Font12x18);
 800837e:	4822      	ldr	r0, [pc, #136]	; (8008408 <Role_Page+0x210>)
 8008380:	f7fd f8d2 	bl	8005528 <Set_Font>

	print_string(95,163-table_y,"ID",WHITE);
 8008384:	4a21      	ldr	r2, [pc, #132]	; (800840c <Role_Page+0x214>)
 8008386:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800838a:	218d      	movs	r1, #141	; 0x8d
 800838c:	205f      	movs	r0, #95	; 0x5f
 800838e:	f7fe f833 	bl	80063f8 <print_string>
	print_string(300,163-table_y,"NAME",WHITE);
 8008392:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <Role_Page+0x218>)
 8008394:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008398:	218d      	movs	r1, #141	; 0x8d
 800839a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800839e:	f7fe f82b 	bl	80063f8 <print_string>
	print_string(620,163-table_y,"ROLE",WHITE);
 80083a2:	4a1c      	ldr	r2, [pc, #112]	; (8008414 <Role_Page+0x21c>)
 80083a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80083a8:	218d      	movs	r1, #141	; 0x8d
 80083aa:	f44f 701b 	mov.w	r0, #620	; 0x26c
 80083ae:	f7fe f823 	bl	80063f8 <print_string>
	print_string(80,216-table_y,"E001",0x9900ff);
 80083b2:	4b19      	ldr	r3, [pc, #100]	; (8008418 <Role_Page+0x220>)
 80083b4:	4a19      	ldr	r2, [pc, #100]	; (800841c <Role_Page+0x224>)
 80083b6:	21c2      	movs	r1, #194	; 0xc2
 80083b8:	2050      	movs	r0, #80	; 0x50
 80083ba:	f7fe f81d 	bl	80063f8 <print_string>
	print_string(210,216-table_y,"NAVEEN PRAKASH MAURYA",0x9900ff);
 80083be:	4b16      	ldr	r3, [pc, #88]	; (8008418 <Role_Page+0x220>)
 80083c0:	4a17      	ldr	r2, [pc, #92]	; (8008420 <Role_Page+0x228>)
 80083c2:	21c2      	movs	r1, #194	; 0xc2
 80083c4:	20d2      	movs	r0, #210	; 0xd2
 80083c6:	f7fe f817 	bl	80063f8 <print_string>
	print_string(570,216-table_y,"EMPLOYEE",0x9900ff);
 80083ca:	4b13      	ldr	r3, [pc, #76]	; (8008418 <Role_Page+0x220>)
 80083cc:	4a15      	ldr	r2, [pc, #84]	; (8008424 <Role_Page+0x22c>)
 80083ce:	21c2      	movs	r1, #194	; 0xc2
 80083d0:	f240 203a 	movw	r0, #570	; 0x23a
 80083d4:	f7fe f810 	bl	80063f8 <print_string>
	print_image(10,10,60,60,back);
 80083d8:	233c      	movs	r3, #60	; 0x3c
 80083da:	210a      	movs	r1, #10
 80083dc:	4a12      	ldr	r2, [pc, #72]	; (8008428 <Role_Page+0x230>)
 80083de:	9200      	str	r2, [sp, #0]
 80083e0:	4608      	mov	r0, r1
 80083e2:	461a      	mov	r2, r3
 80083e4:	f7fe f82a 	bl	800643c <print_image>
	BackBtn();
}
 80083e8:	b005      	add	sp, #20
 80083ea:	bd30      	pop	{r4, r5, pc}
 80083ec:	00800010 	.word	0x00800010
 80083f0:	00cedcfd 	.word	0x00cedcfd
 80083f4:	00e7eefe 	.word	0x00e7eefe
 80083f8:	00737373 	.word	0x00737373
 80083fc:	00f7f9fe 	.word	0x00f7f9fe
 8008400:	00f0f4ff 	.word	0x00f0f4ff
 8008404:	008c8c8c 	.word	0x008c8c8c
 8008408:	20000544 	.word	0x20000544
 800840c:	0800d460 	.word	0x0800d460
 8008410:	0800d488 	.word	0x0800d488
 8008414:	0800d4a8 	.word	0x0800d4a8
 8008418:	009900ff 	.word	0x009900ff
 800841c:	0800d4b0 	.word	0x0800d4b0
 8008420:	0800d4b8 	.word	0x0800d4b8
 8008424:	0800a0e8 	.word	0x0800a0e8
 8008428:	08012ec0 	.word	0x08012ec0

0800842c <NewUser_Desig1>:
}


//######################  NEW_USER(DESIG)  #############################
void NewUser_Desig1(void)
{
 800842c:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 800842e:	481f      	ldr	r0, [pc, #124]	; (80084ac <NewUser_Desig1+0x80>)
		fill_roundrect(494,700,199,259,0xcedcfd,0xfffafa);  // DESIG
 8008430:	4d1f      	ldr	r5, [pc, #124]	; (80084b0 <NewUser_Desig1+0x84>)
		fill_roundrect(499,695,204,254,0xe7eefe,0xcedcfd);
 8008432:	4c20      	ldr	r4, [pc, #128]	; (80084b4 <NewUser_Desig1+0x88>)
{
 8008434:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 8008436:	f7fd f877 	bl	8005528 <Set_Font>
		fill_roundrect(494,700,199,259,0xcedcfd,0xfffafa);  // DESIG
 800843a:	481f      	ldr	r0, [pc, #124]	; (80084b8 <NewUser_Desig1+0x8c>)
 800843c:	f240 1303 	movw	r3, #259	; 0x103
 8008440:	e9cd 5000 	strd	r5, r0, [sp]
 8008444:	22c7      	movs	r2, #199	; 0xc7
 8008446:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800844a:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 800844e:	f7fd fc8b 	bl	8005d68 <fill_roundrect>
		fill_roundrect(499,695,204,254,0xe7eefe,0xcedcfd);
 8008452:	e9cd 4500 	strd	r4, r5, [sp]
 8008456:	23fe      	movs	r3, #254	; 0xfe
 8008458:	22cc      	movs	r2, #204	; 0xcc
 800845a:	f240 21b7 	movw	r1, #695	; 0x2b7
 800845e:	f240 10f3 	movw	r0, #499	; 0x1f3
 8008462:	f7fd fc81 	bl	8005d68 <fill_roundrect>

		symbol(670,200,'D',0x999999);
 8008466:	4b15      	ldr	r3, [pc, #84]	; (80084bc <NewUser_Desig1+0x90>)
 8008468:	2244      	movs	r2, #68	; 0x44
 800846a:	21c8      	movs	r1, #200	; 0xc8
 800846c:	f240 209e 	movw	r0, #670	; 0x29e
 8008470:	f7fe fae8 	bl	8006a44 <symbol>
		symbol(670,195,'D',0xe7eefe);
 8008474:	4623      	mov	r3, r4
 8008476:	2244      	movs	r2, #68	; 0x44
 8008478:	21c3      	movs	r1, #195	; 0xc3
 800847a:	f240 209e 	movw	r0, #670	; 0x29e
 800847e:	f7fe fae1 	bl	8006a44 <symbol>


		fill_area(499,615,204,254,0xe7eefe);
 8008482:	23fe      	movs	r3, #254	; 0xfe
 8008484:	22cc      	movs	r2, #204	; 0xcc
 8008486:	f240 2167 	movw	r1, #615	; 0x267
 800848a:	f240 10f3 	movw	r0, #499	; 0x1f3
 800848e:	9400      	str	r4, [sp, #0]
 8008490:	f7fd f8fc 	bl	800568c <fill_area>
		print_string(510,220,desgn_ptr,0x737373);
 8008494:	4a0a      	ldr	r2, [pc, #40]	; (80084c0 <NewUser_Desig1+0x94>)
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <NewUser_Desig1+0x98>)
 8008498:	6812      	ldr	r2, [r2, #0]
 800849a:	21dc      	movs	r1, #220	; 0xdc
 800849c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
}
 80084a0:	b003      	add	sp, #12
 80084a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(510,220,desgn_ptr,0x737373);
 80084a6:	f7fd bfa7 	b.w	80063f8 <print_string>
 80084aa:	bf00      	nop
 80084ac:	20000544 	.word	0x20000544
 80084b0:	00cedcfd 	.word	0x00cedcfd
 80084b4:	00e7eefe 	.word	0x00e7eefe
 80084b8:	00fffafa 	.word	0x00fffafa
 80084bc:	00999999 	.word	0x00999999
 80084c0:	20000024 	.word	0x20000024
 80084c4:	00737373 	.word	0x00737373

080084c8 <NewUser_Role1>:

//######################  NEW_USER(ROLE)  #############################
void NewUser_Role1(void)
{
 80084c8:	b530      	push	{r4, r5, lr}
		Set_Font(&Font12x18);
 80084ca:	4823      	ldr	r0, [pc, #140]	; (8008558 <NewUser_Role1+0x90>)
		//int x=0,y=0;
		fill_roundrect(494,700,289,349,0xcedcfd,0xfffafa);  // ROLE
 80084cc:	4d23      	ldr	r5, [pc, #140]	; (800855c <NewUser_Role1+0x94>)
		fill_roundrect(499,695,294,344,0xe7eefe,0xcedcfd);
 80084ce:	4c24      	ldr	r4, [pc, #144]	; (8008560 <NewUser_Role1+0x98>)
{
 80084d0:	b083      	sub	sp, #12
		Set_Font(&Font12x18);
 80084d2:	f7fd f829 	bl	8005528 <Set_Font>
		fill_roundrect(494,700,289,349,0xcedcfd,0xfffafa);  // ROLE
 80084d6:	4823      	ldr	r0, [pc, #140]	; (8008564 <NewUser_Role1+0x9c>)
 80084d8:	f240 135d 	movw	r3, #349	; 0x15d
 80084dc:	e9cd 5000 	strd	r5, r0, [sp]
 80084e0:	f240 1221 	movw	r2, #289	; 0x121
 80084e4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80084e8:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 80084ec:	f7fd fc3c 	bl	8005d68 <fill_roundrect>
		fill_roundrect(499,695,294,344,0xe7eefe,0xcedcfd);
 80084f0:	e9cd 4500 	strd	r4, r5, [sp]
 80084f4:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80084f8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80084fc:	f240 21b7 	movw	r1, #695	; 0x2b7
 8008500:	f240 10f3 	movw	r0, #499	; 0x1f3
 8008504:	f7fd fc30 	bl	8005d68 <fill_roundrect>

		symbol(670,293,'D',0x999999);
 8008508:	4b17      	ldr	r3, [pc, #92]	; (8008568 <NewUser_Role1+0xa0>)
 800850a:	2244      	movs	r2, #68	; 0x44
 800850c:	f240 1125 	movw	r1, #293	; 0x125
 8008510:	f240 209e 	movw	r0, #670	; 0x29e
 8008514:	f7fe fa96 	bl	8006a44 <symbol>
		symbol(670,288,'D',0xe7eefe);
 8008518:	4623      	mov	r3, r4
 800851a:	2244      	movs	r2, #68	; 0x44
 800851c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008520:	f240 209e 	movw	r0, #670	; 0x29e
 8008524:	f7fe fa8e 	bl	8006a44 <symbol>


		fill_area(499,615,294,344,0xe7eefe);
 8008528:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800852c:	f44f 7293 	mov.w	r2, #294	; 0x126
 8008530:	f240 2167 	movw	r1, #615	; 0x267
 8008534:	f240 10f3 	movw	r0, #499	; 0x1f3
 8008538:	9400      	str	r4, [sp, #0]
 800853a:	f7fd f8a7 	bl	800568c <fill_area>
		print_string(510,309,role_ptr,0x737373);
 800853e:	4a0b      	ldr	r2, [pc, #44]	; (800856c <NewUser_Role1+0xa4>)
 8008540:	4b0b      	ldr	r3, [pc, #44]	; (8008570 <NewUser_Role1+0xa8>)
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	f240 1135 	movw	r1, #309	; 0x135
 8008548:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
}
 800854c:	b003      	add	sp, #12
 800854e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(510,309,role_ptr,0x737373);
 8008552:	f7fd bf51 	b.w	80063f8 <print_string>
 8008556:	bf00      	nop
 8008558:	20000544 	.word	0x20000544
 800855c:	00cedcfd 	.word	0x00cedcfd
 8008560:	00e7eefe 	.word	0x00e7eefe
 8008564:	00fffafa 	.word	0x00fffafa
 8008568:	00999999 	.word	0x00999999
 800856c:	20000074 	.word	0x20000074
 8008570:	00737373 	.word	0x00737373

08008574 <NewUser_Card1>:

//######################  NEW_USER(CARD)  #############################
void NewUser_Card1(void)
{
 8008574:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 8008576:	4823      	ldr	r0, [pc, #140]	; (8008604 <NewUser_Card1+0x90>)
	//int x=0,y=0;
		fill_roundrect(494,700,379,439,0xcedcfd,0xfffafa);  // CARD
 8008578:	4d23      	ldr	r5, [pc, #140]	; (8008608 <NewUser_Card1+0x94>)
		fill_roundrect(499,695,384,434,0xe7eefe,0xcedcfd);
 800857a:	4c24      	ldr	r4, [pc, #144]	; (800860c <NewUser_Card1+0x98>)
{
 800857c:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 800857e:	f7fc ffd3 	bl	8005528 <Set_Font>
		fill_roundrect(494,700,379,439,0xcedcfd,0xfffafa);  // CARD
 8008582:	4823      	ldr	r0, [pc, #140]	; (8008610 <NewUser_Card1+0x9c>)
 8008584:	f240 13b7 	movw	r3, #439	; 0x1b7
 8008588:	e9cd 5000 	strd	r5, r0, [sp]
 800858c:	f240 127b 	movw	r2, #379	; 0x17b
 8008590:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8008594:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8008598:	f7fd fbe6 	bl	8005d68 <fill_roundrect>
		fill_roundrect(499,695,384,434,0xe7eefe,0xcedcfd);
 800859c:	e9cd 4500 	strd	r4, r5, [sp]
 80085a0:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 80085a4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80085a8:	f240 21b7 	movw	r1, #695	; 0x2b7
 80085ac:	f240 10f3 	movw	r0, #499	; 0x1f3
 80085b0:	f7fd fbda 	bl	8005d68 <fill_roundrect>

		symbol(670,386,'D',0x999999);
 80085b4:	4b17      	ldr	r3, [pc, #92]	; (8008614 <NewUser_Card1+0xa0>)
 80085b6:	2244      	movs	r2, #68	; 0x44
 80085b8:	f44f 71c1 	mov.w	r1, #386	; 0x182
 80085bc:	f240 209e 	movw	r0, #670	; 0x29e
 80085c0:	f7fe fa40 	bl	8006a44 <symbol>
		symbol(670,381,'D',0xe7eefe);
 80085c4:	4623      	mov	r3, r4
 80085c6:	2244      	movs	r2, #68	; 0x44
 80085c8:	f240 117d 	movw	r1, #381	; 0x17d
 80085cc:	f240 209e 	movw	r0, #670	; 0x29e
 80085d0:	f7fe fa38 	bl	8006a44 <symbol>


		fill_area(499,615,384,434,0xe7eefe);
 80085d4:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 80085d8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80085dc:	f240 2167 	movw	r1, #615	; 0x267
 80085e0:	f240 10f3 	movw	r0, #499	; 0x1f3
 80085e4:	9400      	str	r4, [sp, #0]
 80085e6:	f7fd f851 	bl	800568c <fill_area>
		print_string(510,400,card_ptr,0x737373);
 80085ea:	4a0b      	ldr	r2, [pc, #44]	; (8008618 <NewUser_Card1+0xa4>)
 80085ec:	4b0b      	ldr	r3, [pc, #44]	; (800861c <NewUser_Card1+0xa8>)
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80085f4:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
}
 80085f8:	b003      	add	sp, #12
 80085fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(510,400,card_ptr,0x737373);
 80085fe:	f7fd befb 	b.w	80063f8 <print_string>
 8008602:	bf00      	nop
 8008604:	20000544 	.word	0x20000544
 8008608:	00cedcfd 	.word	0x00cedcfd
 800860c:	00e7eefe 	.word	0x00e7eefe
 8008610:	00fffafa 	.word	0x00fffafa
 8008614:	00999999 	.word	0x00999999
 8008618:	20000000 	.word	0x20000000
 800861c:	00737373 	.word	0x00737373

08008620 <SaveAndExit>:

void SaveAndExit (void)
{
 8008620:	b570      	push	{r4, r5, r6, lr}
	fill_roundrect(610,700,121,169,0xcedcfd,0xfffafa);	//   Save and Modify button
 8008622:	4c20      	ldr	r4, [pc, #128]	; (80086a4 <SaveAndExit+0x84>)
 8008624:	4d20      	ldr	r5, [pc, #128]	; (80086a8 <SaveAndExit+0x88>)
	fill_roundrect(613,697,124,166,0xe7eefe,0xcedcfd);
 8008626:	4e21      	ldr	r6, [pc, #132]	; (80086ac <SaveAndExit+0x8c>)
{
 8008628:	b082      	sub	sp, #8
	fill_roundrect(610,700,121,169,0xcedcfd,0xfffafa);	//   Save and Modify button
 800862a:	e9cd 4500 	strd	r4, r5, [sp]
 800862e:	23a9      	movs	r3, #169	; 0xa9
 8008630:	2279      	movs	r2, #121	; 0x79
 8008632:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8008636:	f240 2062 	movw	r0, #610	; 0x262
 800863a:	f7fd fb95 	bl	8005d68 <fill_roundrect>
	fill_roundrect(613,697,124,166,0xe7eefe,0xcedcfd);
 800863e:	e9cd 6400 	strd	r6, r4, [sp]
 8008642:	23a6      	movs	r3, #166	; 0xa6
 8008644:	227c      	movs	r2, #124	; 0x7c
 8008646:	f240 21b9 	movw	r1, #697	; 0x2b9
 800864a:	f240 2065 	movw	r0, #613	; 0x265
 800864e:	f7fd fb8b 	bl	8005d68 <fill_roundrect>
	//draw_roundrect(630,720,121,169,BLUE);

	fill_roundrect(494,584,121,169,0xcedcfd,0xfffafa);
 8008652:	e9cd 4500 	strd	r4, r5, [sp]
 8008656:	23a9      	movs	r3, #169	; 0xa9
 8008658:	2279      	movs	r2, #121	; 0x79
 800865a:	f44f 7112 	mov.w	r1, #584	; 0x248
 800865e:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8008662:	f7fd fb81 	bl	8005d68 <fill_roundrect>
	fill_roundrect(497,581,124,166,0xe7eefe,0xcedcfd);
	//draw_roundrect(494,584,121,169,BLUE);

	Set_Font(&Font12x18);
	print_string(515,138,"SAVE",0x737373);
 8008666:	4d12      	ldr	r5, [pc, #72]	; (80086b0 <SaveAndExit+0x90>)
	fill_roundrect(497,581,124,166,0xe7eefe,0xcedcfd);
 8008668:	23a6      	movs	r3, #166	; 0xa6
 800866a:	227c      	movs	r2, #124	; 0x7c
 800866c:	f240 2145 	movw	r1, #581	; 0x245
 8008670:	e9cd 6400 	strd	r6, r4, [sp]
 8008674:	f240 10f1 	movw	r0, #497	; 0x1f1
 8008678:	f7fd fb76 	bl	8005d68 <fill_roundrect>
	Set_Font(&Font12x18);
 800867c:	480d      	ldr	r0, [pc, #52]	; (80086b4 <SaveAndExit+0x94>)
 800867e:	f7fc ff53 	bl	8005528 <Set_Font>
	print_string(515,138,"SAVE",0x737373);
 8008682:	462b      	mov	r3, r5
 8008684:	4a0c      	ldr	r2, [pc, #48]	; (80086b8 <SaveAndExit+0x98>)
 8008686:	218a      	movs	r1, #138	; 0x8a
 8008688:	f240 2003 	movw	r0, #515	; 0x203
 800868c:	f7fd feb4 	bl	80063f8 <print_string>
	print_string(637,138,"EDIT",0x737373);
 8008690:	4a0a      	ldr	r2, [pc, #40]	; (80086bc <SaveAndExit+0x9c>)
 8008692:	462b      	mov	r3, r5
 8008694:	218a      	movs	r1, #138	; 0x8a
 8008696:	f240 207d 	movw	r0, #637	; 0x27d
}
 800869a:	b002      	add	sp, #8
 800869c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	print_string(637,138,"EDIT",0x737373);
 80086a0:	f7fd beaa 	b.w	80063f8 <print_string>
 80086a4:	00cedcfd 	.word	0x00cedcfd
 80086a8:	00fffafa 	.word	0x00fffafa
 80086ac:	00e7eefe 	.word	0x00e7eefe
 80086b0:	00737373 	.word	0x00737373
 80086b4:	20000544 	.word	0x20000544
 80086b8:	0800d4d0 	.word	0x0800d4d0
 80086bc:	0800d4d8 	.word	0x0800d4d8

080086c0 <AllUser_Page>:
{
 80086c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c2:	b083      	sub	sp, #12
	fill_area(150,720,80,439,PURPLE);
 80086c4:	4d5e      	ldr	r5, [pc, #376]	; (8008840 <AllUser_Page+0x180>)
	fill_roundrect(45, 725, 96, 464,0xcccccc,PURPLE);
 80086c6:	4c5f      	ldr	r4, [pc, #380]	; (8008844 <AllUser_Page+0x184>)
	fill_roundrect(49,721,100,460,0xfffafa,0xcccccc);
 80086c8:	4e5f      	ldr	r6, [pc, #380]	; (8008848 <AllUser_Page+0x188>)
	fill_area(150,720,80,439,PURPLE);
 80086ca:	9500      	str	r5, [sp, #0]
 80086cc:	f240 13b7 	movw	r3, #439	; 0x1b7
 80086d0:	2250      	movs	r2, #80	; 0x50
 80086d2:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80086d6:	2096      	movs	r0, #150	; 0x96
 80086d8:	f7fc ffd8 	bl	800568c <fill_area>
	fill_roundrect(45, 725, 96, 464,0xcccccc,PURPLE);
 80086dc:	e9cd 4500 	strd	r4, r5, [sp]
 80086e0:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
	fill_circle(760, 180-table_y, 20, 0xcedcfd);
 80086e4:	4d59      	ldr	r5, [pc, #356]	; (800884c <AllUser_Page+0x18c>)
	fill_circle(760, 180-table_y, 18, 0xe7eefe);
 80086e6:	4f5a      	ldr	r7, [pc, #360]	; (8008850 <AllUser_Page+0x190>)
	fill_roundrect(45, 725, 96, 464,0xcccccc,PURPLE);
 80086e8:	2260      	movs	r2, #96	; 0x60
 80086ea:	f240 21d5 	movw	r1, #725	; 0x2d5
 80086ee:	202d      	movs	r0, #45	; 0x2d
 80086f0:	f7fd fb3a 	bl	8005d68 <fill_roundrect>
	fill_roundrect(49,721,100,460,0xfffafa,0xcccccc);
 80086f4:	e9cd 6400 	strd	r6, r4, [sp]
 80086f8:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
 80086fc:	2264      	movs	r2, #100	; 0x64
 80086fe:	f240 21d1 	movw	r1, #721	; 0x2d1
 8008702:	2031      	movs	r0, #49	; 0x31
 8008704:	f7fd fb30 	bl	8005d68 <fill_roundrect>
	symbol(760, 175-table_y, '^', 0x737373);
 8008708:	4c52      	ldr	r4, [pc, #328]	; (8008854 <AllUser_Page+0x194>)
	fill_circle(760, 180-table_y, 20, 0xcedcfd);
 800870a:	462b      	mov	r3, r5
 800870c:	2214      	movs	r2, #20
 800870e:	219e      	movs	r1, #158	; 0x9e
 8008710:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008714:	f7fd fd66 	bl	80061e4 <fill_circle>
	fill_circle(760, 180-table_y, 18, 0xe7eefe);
 8008718:	463b      	mov	r3, r7
 800871a:	2212      	movs	r2, #18
 800871c:	219e      	movs	r1, #158	; 0x9e
 800871e:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008722:	f7fd fd5f 	bl	80061e4 <fill_circle>
	symbol(760, 175-table_y, '^', 0x737373);
 8008726:	4623      	mov	r3, r4
 8008728:	225e      	movs	r2, #94	; 0x5e
 800872a:	2199      	movs	r1, #153	; 0x99
 800872c:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008730:	f7fe f988 	bl	8006a44 <symbol>
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 8008734:	462b      	mov	r3, r5
 8008736:	2214      	movs	r2, #20
 8008738:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800873c:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008740:	f7fd fd50 	bl	80061e4 <fill_circle>
	fill_circle(760, 418-table_y, 18, 0xe7eefe);
 8008744:	463b      	mov	r3, r7
 8008746:	2212      	movs	r2, #18
 8008748:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800874c:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008750:	f7fd fd48 	bl	80061e4 <fill_circle>
  symbol_dwn_Arrow (760, 423-table_y, 0x737373);  /// for DOWN Arrow  symbol
 8008754:	4622      	mov	r2, r4
 8008756:	f240 1191 	movw	r1, #401	; 0x191
 800875a:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 800875e:	f7fe fecb 	bl	80074f8 <symbol_dwn_Arrow>
  	fill_roundrect(64, 476, 121, 439, 0xcedcfd, 0xfffafa);
 8008762:	e9cd 5600 	strd	r5, r6, [sp]
 8008766:	f240 13b7 	movw	r3, #439	; 0x1b7
 800876a:	2279      	movs	r2, #121	; 0x79
 800876c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8008770:	2040      	movs	r0, #64	; 0x40
 8008772:	f7fd faf9 	bl	8005d68 <fill_roundrect>
	fill_area(70,470,252-table_y,297+3-table_y,table_color_2);
 8008776:	f5a6 2670 	sub.w	r6, r6, #983040	; 0xf0000
	fill_area(70,470,149-table_y,192+3-table_y,0xcedcfd);
 800877a:	9500      	str	r5, [sp, #0]
 800877c:	23ad      	movs	r3, #173	; 0xad
	fill_area(70,470,200-table_y,245+3-table_y,table_color);
 800877e:	4d36      	ldr	r5, [pc, #216]	; (8008858 <AllUser_Page+0x198>)
	fill_area(70,470,149-table_y,192+3-table_y,0xcedcfd);
 8008780:	227f      	movs	r2, #127	; 0x7f
 8008782:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8008786:	2046      	movs	r0, #70	; 0x46
 8008788:	f7fc ff80 	bl	800568c <fill_area>
	fill_area(70,470,252-table_y,297+3-table_y,table_color_2);
 800878c:	f2a6 56fb 	subw	r6, r6, #1531	; 0x5fb
	fill_area(70,470,200-table_y,245+3-table_y,table_color);
 8008790:	9500      	str	r5, [sp, #0]
 8008792:	23e2      	movs	r3, #226	; 0xe2
 8008794:	22b2      	movs	r2, #178	; 0xb2
 8008796:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800879a:	2046      	movs	r0, #70	; 0x46
 800879c:	f7fc ff76 	bl	800568c <fill_area>
	fill_area(70,470,252-table_y,297+3-table_y,table_color_2);
 80087a0:	9600      	str	r6, [sp, #0]
 80087a2:	f44f 738b 	mov.w	r3, #278	; 0x116
 80087a6:	22e6      	movs	r2, #230	; 0xe6
 80087a8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80087ac:	2046      	movs	r0, #70	; 0x46
 80087ae:	f7fc ff6d 	bl	800568c <fill_area>
	fill_area(70,470,304-table_y,349+3-table_y,table_color);
 80087b2:	9500      	str	r5, [sp, #0]
 80087b4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80087b8:	f44f 728d 	mov.w	r2, #282	; 0x11a
 80087bc:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80087c0:	2046      	movs	r0, #70	; 0x46
 80087c2:	f7fc ff63 	bl	800568c <fill_area>
	fill_area(70,470,356-table_y,401+3-table_y,table_color_2);
 80087c6:	9600      	str	r6, [sp, #0]
 80087c8:	f44f 73bf 	mov.w	r3, #382	; 0x17e
 80087cc:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 80087d0:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80087d4:	2046      	movs	r0, #70	; 0x46
 80087d6:	f7fc ff59 	bl	800568c <fill_area>
	fill_area(70,470,408-table_y,453+3-table_y,table_color);
 80087da:	9500      	str	r5, [sp, #0]
 80087dc:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 80087e0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80087e4:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80087e8:	2046      	movs	r0, #70	; 0x46
 80087ea:	f7fc ff4f 	bl	800568c <fill_area>
	draw_vl(70+65,143-table_y,318,table_border_color);
 80087ee:	4b1b      	ldr	r3, [pc, #108]	; (800885c <AllUser_Page+0x19c>)
 80087f0:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80087f4:	2179      	movs	r1, #121	; 0x79
 80087f6:	2087      	movs	r0, #135	; 0x87
 80087f8:	f7fd f8c0 	bl	800597c <draw_vl>
	Set_Font(&Font12x18);
 80087fc:	4818      	ldr	r0, [pc, #96]	; (8008860 <AllUser_Page+0x1a0>)
 80087fe:	f7fc fe93 	bl	8005528 <Set_Font>
	print_string(92,163-table_y,"ID",0x737373);
 8008802:	4623      	mov	r3, r4
 8008804:	4a17      	ldr	r2, [pc, #92]	; (8008864 <AllUser_Page+0x1a4>)
 8008806:	218d      	movs	r1, #141	; 0x8d
 8008808:	205c      	movs	r0, #92	; 0x5c
 800880a:	f7fd fdf5 	bl	80063f8 <print_string>
	print_string(270,163-table_y,"NAME",0x737373);
 800880e:	4623      	mov	r3, r4
 8008810:	4a15      	ldr	r2, [pc, #84]	; (8008868 <AllUser_Page+0x1a8>)
 8008812:	218d      	movs	r1, #141	; 0x8d
 8008814:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8008818:	f7fd fdee 	bl	80063f8 <print_string>
	print_string(80,216-table_y,"E999",0x737373);
 800881c:	4a13      	ldr	r2, [pc, #76]	; (800886c <AllUser_Page+0x1ac>)
 800881e:	4623      	mov	r3, r4
 8008820:	21c2      	movs	r1, #194	; 0xc2
 8008822:	2050      	movs	r0, #80	; 0x50
 8008824:	f7fd fde8 	bl	80063f8 <print_string>
	NewUser_Desig1();
 8008828:	f7ff fe00 	bl	800842c <NewUser_Desig1>
	NewUser_Role1();
 800882c:	f7ff fe4c 	bl	80084c8 <NewUser_Role1>
	NewUser_Card1();
 8008830:	f7ff fea0 	bl	8008574 <NewUser_Card1>
}
 8008834:	b003      	add	sp, #12
 8008836:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	SaveAndExit();
 800883a:	f7ff bef1 	b.w	8008620 <SaveAndExit>
 800883e:	bf00      	nop
 8008840:	00800010 	.word	0x00800010
 8008844:	00cccccc 	.word	0x00cccccc
 8008848:	00fffafa 	.word	0x00fffafa
 800884c:	00cedcfd 	.word	0x00cedcfd
 8008850:	00e7eefe 	.word	0x00e7eefe
 8008854:	00737373 	.word	0x00737373
 8008858:	00f7f9fe 	.word	0x00f7f9fe
 800885c:	0099b1ff 	.word	0x0099b1ff
 8008860:	20000544 	.word	0x20000544
 8008864:	0800d460 	.word	0x0800d460
 8008868:	0800d488 	.word	0x0800d488
 800886c:	0800d4e0 	.word	0x0800d4e0

08008870 <getX>:
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);      // if (XPT2046_NSS_SOFT)	
	return ((MSB << 8) | (LSB)) >> 3;
}

uint16_t getX(void)
{ 
 8008870:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 8008872:	4d23      	ldr	r5, [pc, #140]	; (8008900 <getX+0x90>)
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8008874:	4c23      	ldr	r4, [pc, #140]	; (8008904 <getX+0x94>)
{ 
 8008876:	b085      	sub	sp, #20
 8008878:	23d0      	movs	r3, #208	; 0xd0
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 800887a:	4628      	mov	r0, r5
 800887c:	2200      	movs	r2, #0
 800887e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008882:	f88d 300e 	strb.w	r3, [sp, #14]
 8008886:	f7f9 fd07 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 800888a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 800888e:	461f      	mov	r7, r3
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8008890:	f10d 010e 	add.w	r1, sp, #14
 8008894:	2201      	movs	r2, #1
 8008896:	4620      	mov	r0, r4
 8008898:	f7fa fda8 	bl	80033ec <HAL_SPI_Transmit>
	address = 0x00;
 800889c:	2600      	movs	r6, #0
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 800889e:	f10d 020f 	add.w	r2, sp, #15
 80088a2:	f10d 010e 	add.w	r1, sp, #14
 80088a6:	9700      	str	r7, [sp, #0]
 80088a8:	2301      	movs	r3, #1
 80088aa:	4620      	mov	r0, r4
	address = 0x00;
 80088ac:	f88d 600e 	strb.w	r6, [sp, #14]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 80088b0:	f7fa feee 	bl	8003690 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 80088b4:	2301      	movs	r3, #1
 80088b6:	f10d 020f 	add.w	r2, sp, #15
 80088ba:	f10d 010e 	add.w	r1, sp, #14
 80088be:	9700      	str	r7, [sp, #0]
 80088c0:	4620      	mov	r0, r4
	address = 0x00;
 80088c2:	f88d 600e 	strb.w	r6, [sp, #14]
	MSB = data;   
 80088c6:	f89d 600f 	ldrb.w	r6, [sp, #15]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 80088ca:	f7fa fee1 	bl	8003690 <HAL_SPI_TransmitReceive>
	LSB = data;
 80088ce:	f89d 400f 	ldrb.w	r4, [sp, #15]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);      // if (XPT2046_NSS_SOFT)	
 80088d2:	4628      	mov	r0, r5
 80088d4:	2201      	movs	r2, #1
 80088d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088da:	f7f9 fcdd 	bl	8002298 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 80088de:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 80088e2:	10c0      	asrs	r0, r0, #3
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80088e4:	f240 321f 	movw	r2, #799	; 0x31f
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <getX+0x98>)
 80088ea:	38c8      	subs	r0, #200	; 0xc8
 80088ec:	fb02 f000 	mul.w	r0, r2, r0
 80088f0:	fb83 2300 	smull	r2, r3, r3, r0
 80088f4:	17c0      	asrs	r0, r0, #31
 80088f6:	ebc0 20a3 	rsb	r0, r0, r3, asr #10
	if (XPT2046_MIRROR_X)
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MAX_X, OUT_MIN_X);
	else
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
}
 80088fa:	b280      	uxth	r0, r0
 80088fc:	b005      	add	sp, #20
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008900:	40020400 	.word	0x40020400
 8008904:	20000700 	.word	0x20000700
 8008908:	44fc3a35 	.word	0x44fc3a35

0800890c <getY>:

uint16_t getY(void)
{ 
 800890c:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 800890e:	4d25      	ldr	r5, [pc, #148]	; (80089a4 <getY+0x98>)
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8008910:	4c25      	ldr	r4, [pc, #148]	; (80089a8 <getY+0x9c>)
{ 
 8008912:	b085      	sub	sp, #20
 8008914:	2390      	movs	r3, #144	; 0x90
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 8008916:	4628      	mov	r0, r5
 8008918:	2200      	movs	r2, #0
 800891a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800891e:	f88d 300e 	strb.w	r3, [sp, #14]
 8008922:	f7f9 fcb9 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8008926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 800892a:	461f      	mov	r7, r3
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 800892c:	f10d 010e 	add.w	r1, sp, #14
 8008930:	2201      	movs	r2, #1
 8008932:	4620      	mov	r0, r4
 8008934:	f7fa fd5a 	bl	80033ec <HAL_SPI_Transmit>
	address = 0x00;
 8008938:	2600      	movs	r6, #0
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 800893a:	f10d 020f 	add.w	r2, sp, #15
 800893e:	f10d 010e 	add.w	r1, sp, #14
 8008942:	9700      	str	r7, [sp, #0]
 8008944:	2301      	movs	r3, #1
 8008946:	4620      	mov	r0, r4
	address = 0x00;
 8008948:	f88d 600e 	strb.w	r6, [sp, #14]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 800894c:	f7fa fea0 	bl	8003690 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 8008950:	2301      	movs	r3, #1
 8008952:	f10d 020f 	add.w	r2, sp, #15
 8008956:	f10d 010e 	add.w	r1, sp, #14
 800895a:	9700      	str	r7, [sp, #0]
 800895c:	4620      	mov	r0, r4
	address = 0x00;
 800895e:	f88d 600e 	strb.w	r6, [sp, #14]
	MSB = data;   
 8008962:	f89d 600f 	ldrb.w	r6, [sp, #15]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);
 8008966:	f7fa fe93 	bl	8003690 <HAL_SPI_TransmitReceive>
	LSB = data;
 800896a:	f89d 400f 	ldrb.w	r4, [sp, #15]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);      // if (XPT2046_NSS_SOFT)	
 800896e:	4628      	mov	r0, r5
 8008970:	2201      	movs	r2, #1
 8008972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008976:	f7f9 fc8f 	bl	8002298 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 800897a:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
 800897e:	10c0      	asrs	r0, r0, #3
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8008980:	f46f 72ef 	mvn.w	r2, #478	; 0x1de
 8008984:	4b09      	ldr	r3, [pc, #36]	; (80089ac <getY+0xa0>)
 8008986:	38c8      	subs	r0, #200	; 0xc8
 8008988:	fb02 f000 	mul.w	r0, r2, r0
 800898c:	fb83 2300 	smull	r2, r3, r3, r0
 8008990:	4403      	add	r3, r0
 8008992:	17c0      	asrs	r0, r0, #31
 8008994:	ebc0 20e3 	rsb	r0, r0, r3, asr #11
 8008998:	f200 10df 	addw	r0, r0, #479	; 0x1df
	if (XPT2046_MIRROR_Y)
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MAX_Y, OUT_MIN_Y);
	else
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
}
 800899c:	b280      	uxth	r0, r0
 800899e:	b005      	add	sp, #20
 80089a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a2:	bf00      	nop
 80089a4:	40020400 	.word	0x40020400
 80089a8:	20000700 	.word	0x20000700
 80089ac:	91a2b3c5 	.word	0x91a2b3c5

080089b0 <XPT2046_Init>:

void XPT2046_Init(void)
{
 80089b0:	b570      	push	{r4, r5, r6, lr}
	uint8_t address = 0x00;
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);  // if (XPT2046_NSS_SOFT)
 80089b2:	4e17      	ldr	r6, [pc, #92]	; (8008a10 <XPT2046_Init+0x60>)
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 80089b4:	4d17      	ldr	r5, [pc, #92]	; (8008a14 <XPT2046_Init+0x64>)
{
 80089b6:	b082      	sub	sp, #8
	uint8_t address = 0x00;
 80089b8:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);  // if (XPT2046_NSS_SOFT)
 80089ba:	4622      	mov	r2, r4
 80089bc:	4630      	mov	r0, r6
 80089be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	uint8_t address = 0x00;
 80089c2:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);  // if (XPT2046_NSS_SOFT)
 80089c6:	f7f9 fc67 	bl	8002298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 80089ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089ce:	2201      	movs	r2, #1
 80089d0:	2180      	movs	r1, #128	; 0x80
 80089d2:	4628      	mov	r0, r5
 80089d4:	f7fa fd0a 	bl	80033ec <HAL_SPI_Transmit>
	address = 0x00;
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80089d8:	f10d 0107 	add.w	r1, sp, #7
 80089dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089e0:	2201      	movs	r2, #1
 80089e2:	4628      	mov	r0, r5
	address = 0x00;
 80089e4:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80089e8:	f7fa fd00 	bl	80033ec <HAL_SPI_Transmit>
	address = 0x00;
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80089ec:	f10d 0107 	add.w	r1, sp, #7
 80089f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089f4:	2201      	movs	r2, #1
 80089f6:	4628      	mov	r0, r5
	address = 0x00;
 80089f8:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80089fc:	f7fa fcf6 	bl	80033ec <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);   // if (XPT2046_NSS_SOFT)
 8008a00:	2201      	movs	r2, #1
 8008a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a06:	4630      	mov	r0, r6
 8008a08:	f7f9 fc46 	bl	8002298 <HAL_GPIO_WritePin>
}
 8008a0c:	b002      	add	sp, #8
 8008a0e:	bd70      	pop	{r4, r5, r6, pc}
 8008a10:	40020400 	.word	0x40020400
 8008a14:	20000700 	.word	0x20000700

08008a18 <__libc_init_array>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	4d0d      	ldr	r5, [pc, #52]	; (8008a50 <__libc_init_array+0x38>)
 8008a1c:	4c0d      	ldr	r4, [pc, #52]	; (8008a54 <__libc_init_array+0x3c>)
 8008a1e:	1b64      	subs	r4, r4, r5
 8008a20:	10a4      	asrs	r4, r4, #2
 8008a22:	2600      	movs	r6, #0
 8008a24:	42a6      	cmp	r6, r4
 8008a26:	d109      	bne.n	8008a3c <__libc_init_array+0x24>
 8008a28:	4d0b      	ldr	r5, [pc, #44]	; (8008a58 <__libc_init_array+0x40>)
 8008a2a:	4c0c      	ldr	r4, [pc, #48]	; (8008a5c <__libc_init_array+0x44>)
 8008a2c:	f001 fae4 	bl	8009ff8 <_init>
 8008a30:	1b64      	subs	r4, r4, r5
 8008a32:	10a4      	asrs	r4, r4, #2
 8008a34:	2600      	movs	r6, #0
 8008a36:	42a6      	cmp	r6, r4
 8008a38:	d105      	bne.n	8008a46 <__libc_init_array+0x2e>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a40:	4798      	blx	r3
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7ee      	b.n	8008a24 <__libc_init_array+0xc>
 8008a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4a:	4798      	blx	r3
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	e7f2      	b.n	8008a36 <__libc_init_array+0x1e>
 8008a50:	0802d810 	.word	0x0802d810
 8008a54:	0802d810 	.word	0x0802d810
 8008a58:	0802d810 	.word	0x0802d810
 8008a5c:	0802d814 	.word	0x0802d814

08008a60 <memcpy>:
 8008a60:	440a      	add	r2, r1
 8008a62:	4291      	cmp	r1, r2
 8008a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a68:	d100      	bne.n	8008a6c <memcpy+0xc>
 8008a6a:	4770      	bx	lr
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a76:	4291      	cmp	r1, r2
 8008a78:	d1f9      	bne.n	8008a6e <memcpy+0xe>
 8008a7a:	bd10      	pop	{r4, pc}

08008a7c <memset>:
 8008a7c:	4402      	add	r2, r0
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d100      	bne.n	8008a86 <memset+0xa>
 8008a84:	4770      	bx	lr
 8008a86:	f803 1b01 	strb.w	r1, [r3], #1
 8008a8a:	e7f9      	b.n	8008a80 <memset+0x4>

08008a8c <iprintf>:
 8008a8c:	b40f      	push	{r0, r1, r2, r3}
 8008a8e:	4b0a      	ldr	r3, [pc, #40]	; (8008ab8 <iprintf+0x2c>)
 8008a90:	b513      	push	{r0, r1, r4, lr}
 8008a92:	681c      	ldr	r4, [r3, #0]
 8008a94:	b124      	cbz	r4, 8008aa0 <iprintf+0x14>
 8008a96:	69a3      	ldr	r3, [r4, #24]
 8008a98:	b913      	cbnz	r3, 8008aa0 <iprintf+0x14>
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 fb4c 	bl	8009138 <__sinit>
 8008aa0:	ab05      	add	r3, sp, #20
 8008aa2:	9a04      	ldr	r2, [sp, #16]
 8008aa4:	68a1      	ldr	r1, [r4, #8]
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 feb9 	bl	8009820 <_vfiprintf_r>
 8008aae:	b002      	add	sp, #8
 8008ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab4:	b004      	add	sp, #16
 8008ab6:	4770      	bx	lr
 8008ab8:	2000055c 	.word	0x2000055c

08008abc <_puts_r>:
 8008abc:	b570      	push	{r4, r5, r6, lr}
 8008abe:	460e      	mov	r6, r1
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	b118      	cbz	r0, 8008acc <_puts_r+0x10>
 8008ac4:	6983      	ldr	r3, [r0, #24]
 8008ac6:	b90b      	cbnz	r3, 8008acc <_puts_r+0x10>
 8008ac8:	f000 fb36 	bl	8009138 <__sinit>
 8008acc:	69ab      	ldr	r3, [r5, #24]
 8008ace:	68ac      	ldr	r4, [r5, #8]
 8008ad0:	b913      	cbnz	r3, 8008ad8 <_puts_r+0x1c>
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	f000 fb30 	bl	8009138 <__sinit>
 8008ad8:	4b2c      	ldr	r3, [pc, #176]	; (8008b8c <_puts_r+0xd0>)
 8008ada:	429c      	cmp	r4, r3
 8008adc:	d120      	bne.n	8008b20 <_puts_r+0x64>
 8008ade:	686c      	ldr	r4, [r5, #4]
 8008ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ae2:	07db      	lsls	r3, r3, #31
 8008ae4:	d405      	bmi.n	8008af2 <_puts_r+0x36>
 8008ae6:	89a3      	ldrh	r3, [r4, #12]
 8008ae8:	0598      	lsls	r0, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_puts_r+0x36>
 8008aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aee:	f000 fbc1 	bl	8009274 <__retarget_lock_acquire_recursive>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	0719      	lsls	r1, r3, #28
 8008af6:	d51d      	bpl.n	8008b34 <_puts_r+0x78>
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	b1db      	cbz	r3, 8008b34 <_puts_r+0x78>
 8008afc:	3e01      	subs	r6, #1
 8008afe:	68a3      	ldr	r3, [r4, #8]
 8008b00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b04:	3b01      	subs	r3, #1
 8008b06:	60a3      	str	r3, [r4, #8]
 8008b08:	bb39      	cbnz	r1, 8008b5a <_puts_r+0x9e>
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	da38      	bge.n	8008b80 <_puts_r+0xc4>
 8008b0e:	4622      	mov	r2, r4
 8008b10:	210a      	movs	r1, #10
 8008b12:	4628      	mov	r0, r5
 8008b14:	f000 f936 	bl	8008d84 <__swbuf_r>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d011      	beq.n	8008b40 <_puts_r+0x84>
 8008b1c:	250a      	movs	r5, #10
 8008b1e:	e011      	b.n	8008b44 <_puts_r+0x88>
 8008b20:	4b1b      	ldr	r3, [pc, #108]	; (8008b90 <_puts_r+0xd4>)
 8008b22:	429c      	cmp	r4, r3
 8008b24:	d101      	bne.n	8008b2a <_puts_r+0x6e>
 8008b26:	68ac      	ldr	r4, [r5, #8]
 8008b28:	e7da      	b.n	8008ae0 <_puts_r+0x24>
 8008b2a:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <_puts_r+0xd8>)
 8008b2c:	429c      	cmp	r4, r3
 8008b2e:	bf08      	it	eq
 8008b30:	68ec      	ldreq	r4, [r5, #12]
 8008b32:	e7d5      	b.n	8008ae0 <_puts_r+0x24>
 8008b34:	4621      	mov	r1, r4
 8008b36:	4628      	mov	r0, r5
 8008b38:	f000 f976 	bl	8008e28 <__swsetup_r>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d0dd      	beq.n	8008afc <_puts_r+0x40>
 8008b40:	f04f 35ff 	mov.w	r5, #4294967295
 8008b44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b46:	07da      	lsls	r2, r3, #31
 8008b48:	d405      	bmi.n	8008b56 <_puts_r+0x9a>
 8008b4a:	89a3      	ldrh	r3, [r4, #12]
 8008b4c:	059b      	lsls	r3, r3, #22
 8008b4e:	d402      	bmi.n	8008b56 <_puts_r+0x9a>
 8008b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b52:	f000 fb90 	bl	8009276 <__retarget_lock_release_recursive>
 8008b56:	4628      	mov	r0, r5
 8008b58:	bd70      	pop	{r4, r5, r6, pc}
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da04      	bge.n	8008b68 <_puts_r+0xac>
 8008b5e:	69a2      	ldr	r2, [r4, #24]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dc06      	bgt.n	8008b72 <_puts_r+0xb6>
 8008b64:	290a      	cmp	r1, #10
 8008b66:	d004      	beq.n	8008b72 <_puts_r+0xb6>
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	6022      	str	r2, [r4, #0]
 8008b6e:	7019      	strb	r1, [r3, #0]
 8008b70:	e7c5      	b.n	8008afe <_puts_r+0x42>
 8008b72:	4622      	mov	r2, r4
 8008b74:	4628      	mov	r0, r5
 8008b76:	f000 f905 	bl	8008d84 <__swbuf_r>
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d1bf      	bne.n	8008afe <_puts_r+0x42>
 8008b7e:	e7df      	b.n	8008b40 <_puts_r+0x84>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	250a      	movs	r5, #10
 8008b84:	1c5a      	adds	r2, r3, #1
 8008b86:	6022      	str	r2, [r4, #0]
 8008b88:	701d      	strb	r5, [r3, #0]
 8008b8a:	e7db      	b.n	8008b44 <_puts_r+0x88>
 8008b8c:	0802d794 	.word	0x0802d794
 8008b90:	0802d7b4 	.word	0x0802d7b4
 8008b94:	0802d774 	.word	0x0802d774

08008b98 <puts>:
 8008b98:	4b02      	ldr	r3, [pc, #8]	; (8008ba4 <puts+0xc>)
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f7ff bf8d 	b.w	8008abc <_puts_r>
 8008ba2:	bf00      	nop
 8008ba4:	2000055c 	.word	0x2000055c

08008ba8 <setvbuf>:
 8008ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bac:	461d      	mov	r5, r3
 8008bae:	4b5d      	ldr	r3, [pc, #372]	; (8008d24 <setvbuf+0x17c>)
 8008bb0:	681f      	ldr	r7, [r3, #0]
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	460e      	mov	r6, r1
 8008bb6:	4690      	mov	r8, r2
 8008bb8:	b127      	cbz	r7, 8008bc4 <setvbuf+0x1c>
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	b913      	cbnz	r3, 8008bc4 <setvbuf+0x1c>
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	f000 faba 	bl	8009138 <__sinit>
 8008bc4:	4b58      	ldr	r3, [pc, #352]	; (8008d28 <setvbuf+0x180>)
 8008bc6:	429c      	cmp	r4, r3
 8008bc8:	d167      	bne.n	8008c9a <setvbuf+0xf2>
 8008bca:	687c      	ldr	r4, [r7, #4]
 8008bcc:	f1b8 0f02 	cmp.w	r8, #2
 8008bd0:	d006      	beq.n	8008be0 <setvbuf+0x38>
 8008bd2:	f1b8 0f01 	cmp.w	r8, #1
 8008bd6:	f200 809f 	bhi.w	8008d18 <setvbuf+0x170>
 8008bda:	2d00      	cmp	r5, #0
 8008bdc:	f2c0 809c 	blt.w	8008d18 <setvbuf+0x170>
 8008be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d405      	bmi.n	8008bf2 <setvbuf+0x4a>
 8008be6:	89a3      	ldrh	r3, [r4, #12]
 8008be8:	0598      	lsls	r0, r3, #22
 8008bea:	d402      	bmi.n	8008bf2 <setvbuf+0x4a>
 8008bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bee:	f000 fb41 	bl	8009274 <__retarget_lock_acquire_recursive>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f000 fa0b 	bl	8009010 <_fflush_r>
 8008bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfc:	b141      	cbz	r1, 8008c10 <setvbuf+0x68>
 8008bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c02:	4299      	cmp	r1, r3
 8008c04:	d002      	beq.n	8008c0c <setvbuf+0x64>
 8008c06:	4638      	mov	r0, r7
 8008c08:	f000 fba4 	bl	8009354 <_free_r>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6363      	str	r3, [r4, #52]	; 0x34
 8008c10:	2300      	movs	r3, #0
 8008c12:	61a3      	str	r3, [r4, #24]
 8008c14:	6063      	str	r3, [r4, #4]
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	0619      	lsls	r1, r3, #24
 8008c1a:	d503      	bpl.n	8008c24 <setvbuf+0x7c>
 8008c1c:	6921      	ldr	r1, [r4, #16]
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f000 fb98 	bl	8009354 <_free_r>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008c2a:	f023 0303 	bic.w	r3, r3, #3
 8008c2e:	f1b8 0f02 	cmp.w	r8, #2
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	d06c      	beq.n	8008d10 <setvbuf+0x168>
 8008c36:	ab01      	add	r3, sp, #4
 8008c38:	466a      	mov	r2, sp
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	4638      	mov	r0, r7
 8008c3e:	f000 fb1b 	bl	8009278 <__swhatbuf_r>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	4318      	orrs	r0, r3
 8008c46:	81a0      	strh	r0, [r4, #12]
 8008c48:	2d00      	cmp	r5, #0
 8008c4a:	d130      	bne.n	8008cae <setvbuf+0x106>
 8008c4c:	9d00      	ldr	r5, [sp, #0]
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 fb78 	bl	8009344 <malloc>
 8008c54:	4606      	mov	r6, r0
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d155      	bne.n	8008d06 <setvbuf+0x15e>
 8008c5a:	f8dd 9000 	ldr.w	r9, [sp]
 8008c5e:	45a9      	cmp	r9, r5
 8008c60:	d14a      	bne.n	8008cf8 <setvbuf+0x150>
 8008c62:	f04f 35ff 	mov.w	r5, #4294967295
 8008c66:	2200      	movs	r2, #0
 8008c68:	60a2      	str	r2, [r4, #8]
 8008c6a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	6122      	str	r2, [r4, #16]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c78:	6162      	str	r2, [r4, #20]
 8008c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c7c:	f043 0302 	orr.w	r3, r3, #2
 8008c80:	07d2      	lsls	r2, r2, #31
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	d405      	bmi.n	8008c92 <setvbuf+0xea>
 8008c86:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008c8a:	d102      	bne.n	8008c92 <setvbuf+0xea>
 8008c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c8e:	f000 faf2 	bl	8009276 <__retarget_lock_release_recursive>
 8008c92:	4628      	mov	r0, r5
 8008c94:	b003      	add	sp, #12
 8008c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c9a:	4b24      	ldr	r3, [pc, #144]	; (8008d2c <setvbuf+0x184>)
 8008c9c:	429c      	cmp	r4, r3
 8008c9e:	d101      	bne.n	8008ca4 <setvbuf+0xfc>
 8008ca0:	68bc      	ldr	r4, [r7, #8]
 8008ca2:	e793      	b.n	8008bcc <setvbuf+0x24>
 8008ca4:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <setvbuf+0x188>)
 8008ca6:	429c      	cmp	r4, r3
 8008ca8:	bf08      	it	eq
 8008caa:	68fc      	ldreq	r4, [r7, #12]
 8008cac:	e78e      	b.n	8008bcc <setvbuf+0x24>
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	d0cd      	beq.n	8008c4e <setvbuf+0xa6>
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	b913      	cbnz	r3, 8008cbc <setvbuf+0x114>
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	f000 fa3e 	bl	8009138 <__sinit>
 8008cbc:	f1b8 0f01 	cmp.w	r8, #1
 8008cc0:	bf08      	it	eq
 8008cc2:	89a3      	ldrheq	r3, [r4, #12]
 8008cc4:	6026      	str	r6, [r4, #0]
 8008cc6:	bf04      	itt	eq
 8008cc8:	f043 0301 	orreq.w	r3, r3, #1
 8008ccc:	81a3      	strheq	r3, [r4, #12]
 8008cce:	89a2      	ldrh	r2, [r4, #12]
 8008cd0:	f012 0308 	ands.w	r3, r2, #8
 8008cd4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008cd8:	d01c      	beq.n	8008d14 <setvbuf+0x16c>
 8008cda:	07d3      	lsls	r3, r2, #31
 8008cdc:	bf41      	itttt	mi
 8008cde:	2300      	movmi	r3, #0
 8008ce0:	426d      	negmi	r5, r5
 8008ce2:	60a3      	strmi	r3, [r4, #8]
 8008ce4:	61a5      	strmi	r5, [r4, #24]
 8008ce6:	bf58      	it	pl
 8008ce8:	60a5      	strpl	r5, [r4, #8]
 8008cea:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008cec:	f015 0501 	ands.w	r5, r5, #1
 8008cf0:	d115      	bne.n	8008d1e <setvbuf+0x176>
 8008cf2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008cf6:	e7c8      	b.n	8008c8a <setvbuf+0xe2>
 8008cf8:	4648      	mov	r0, r9
 8008cfa:	f000 fb23 	bl	8009344 <malloc>
 8008cfe:	4606      	mov	r6, r0
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d0ae      	beq.n	8008c62 <setvbuf+0xba>
 8008d04:	464d      	mov	r5, r9
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	e7d0      	b.n	8008cb2 <setvbuf+0x10a>
 8008d10:	2500      	movs	r5, #0
 8008d12:	e7a8      	b.n	8008c66 <setvbuf+0xbe>
 8008d14:	60a3      	str	r3, [r4, #8]
 8008d16:	e7e8      	b.n	8008cea <setvbuf+0x142>
 8008d18:	f04f 35ff 	mov.w	r5, #4294967295
 8008d1c:	e7b9      	b.n	8008c92 <setvbuf+0xea>
 8008d1e:	2500      	movs	r5, #0
 8008d20:	e7b7      	b.n	8008c92 <setvbuf+0xea>
 8008d22:	bf00      	nop
 8008d24:	2000055c 	.word	0x2000055c
 8008d28:	0802d794 	.word	0x0802d794
 8008d2c:	0802d7b4 	.word	0x0802d7b4
 8008d30:	0802d774 	.word	0x0802d774

08008d34 <siprintf>:
 8008d34:	b40e      	push	{r1, r2, r3}
 8008d36:	b500      	push	{lr}
 8008d38:	b09c      	sub	sp, #112	; 0x70
 8008d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8008d3c:	9002      	str	r0, [sp, #8]
 8008d3e:	9006      	str	r0, [sp, #24]
 8008d40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d44:	4809      	ldr	r0, [pc, #36]	; (8008d6c <siprintf+0x38>)
 8008d46:	9107      	str	r1, [sp, #28]
 8008d48:	9104      	str	r1, [sp, #16]
 8008d4a:	4909      	ldr	r1, [pc, #36]	; (8008d70 <siprintf+0x3c>)
 8008d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d50:	9105      	str	r1, [sp, #20]
 8008d52:	6800      	ldr	r0, [r0, #0]
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	a902      	add	r1, sp, #8
 8008d58:	f000 fc38 	bl	80095cc <_svfiprintf_r>
 8008d5c:	9b02      	ldr	r3, [sp, #8]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]
 8008d62:	b01c      	add	sp, #112	; 0x70
 8008d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d68:	b003      	add	sp, #12
 8008d6a:	4770      	bx	lr
 8008d6c:	2000055c 	.word	0x2000055c
 8008d70:	ffff0208 	.word	0xffff0208

08008d74 <strcpy>:
 8008d74:	4603      	mov	r3, r0
 8008d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d7a:	f803 2b01 	strb.w	r2, [r3], #1
 8008d7e:	2a00      	cmp	r2, #0
 8008d80:	d1f9      	bne.n	8008d76 <strcpy+0x2>
 8008d82:	4770      	bx	lr

08008d84 <__swbuf_r>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	460e      	mov	r6, r1
 8008d88:	4614      	mov	r4, r2
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	b118      	cbz	r0, 8008d96 <__swbuf_r+0x12>
 8008d8e:	6983      	ldr	r3, [r0, #24]
 8008d90:	b90b      	cbnz	r3, 8008d96 <__swbuf_r+0x12>
 8008d92:	f000 f9d1 	bl	8009138 <__sinit>
 8008d96:	4b21      	ldr	r3, [pc, #132]	; (8008e1c <__swbuf_r+0x98>)
 8008d98:	429c      	cmp	r4, r3
 8008d9a:	d12b      	bne.n	8008df4 <__swbuf_r+0x70>
 8008d9c:	686c      	ldr	r4, [r5, #4]
 8008d9e:	69a3      	ldr	r3, [r4, #24]
 8008da0:	60a3      	str	r3, [r4, #8]
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	071a      	lsls	r2, r3, #28
 8008da6:	d52f      	bpl.n	8008e08 <__swbuf_r+0x84>
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	b36b      	cbz	r3, 8008e08 <__swbuf_r+0x84>
 8008dac:	6923      	ldr	r3, [r4, #16]
 8008dae:	6820      	ldr	r0, [r4, #0]
 8008db0:	1ac0      	subs	r0, r0, r3
 8008db2:	6963      	ldr	r3, [r4, #20]
 8008db4:	b2f6      	uxtb	r6, r6
 8008db6:	4283      	cmp	r3, r0
 8008db8:	4637      	mov	r7, r6
 8008dba:	dc04      	bgt.n	8008dc6 <__swbuf_r+0x42>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 f926 	bl	8009010 <_fflush_r>
 8008dc4:	bb30      	cbnz	r0, 8008e14 <__swbuf_r+0x90>
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	60a3      	str	r3, [r4, #8]
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	1c5a      	adds	r2, r3, #1
 8008dd0:	6022      	str	r2, [r4, #0]
 8008dd2:	701e      	strb	r6, [r3, #0]
 8008dd4:	6963      	ldr	r3, [r4, #20]
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	d004      	beq.n	8008de6 <__swbuf_r+0x62>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	07db      	lsls	r3, r3, #31
 8008de0:	d506      	bpl.n	8008df0 <__swbuf_r+0x6c>
 8008de2:	2e0a      	cmp	r6, #10
 8008de4:	d104      	bne.n	8008df0 <__swbuf_r+0x6c>
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 f911 	bl	8009010 <_fflush_r>
 8008dee:	b988      	cbnz	r0, 8008e14 <__swbuf_r+0x90>
 8008df0:	4638      	mov	r0, r7
 8008df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008df4:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <__swbuf_r+0x9c>)
 8008df6:	429c      	cmp	r4, r3
 8008df8:	d101      	bne.n	8008dfe <__swbuf_r+0x7a>
 8008dfa:	68ac      	ldr	r4, [r5, #8]
 8008dfc:	e7cf      	b.n	8008d9e <__swbuf_r+0x1a>
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <__swbuf_r+0xa0>)
 8008e00:	429c      	cmp	r4, r3
 8008e02:	bf08      	it	eq
 8008e04:	68ec      	ldreq	r4, [r5, #12]
 8008e06:	e7ca      	b.n	8008d9e <__swbuf_r+0x1a>
 8008e08:	4621      	mov	r1, r4
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f000 f80c 	bl	8008e28 <__swsetup_r>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	d0cb      	beq.n	8008dac <__swbuf_r+0x28>
 8008e14:	f04f 37ff 	mov.w	r7, #4294967295
 8008e18:	e7ea      	b.n	8008df0 <__swbuf_r+0x6c>
 8008e1a:	bf00      	nop
 8008e1c:	0802d794 	.word	0x0802d794
 8008e20:	0802d7b4 	.word	0x0802d7b4
 8008e24:	0802d774 	.word	0x0802d774

08008e28 <__swsetup_r>:
 8008e28:	4b32      	ldr	r3, [pc, #200]	; (8008ef4 <__swsetup_r+0xcc>)
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	681d      	ldr	r5, [r3, #0]
 8008e2e:	4606      	mov	r6, r0
 8008e30:	460c      	mov	r4, r1
 8008e32:	b125      	cbz	r5, 8008e3e <__swsetup_r+0x16>
 8008e34:	69ab      	ldr	r3, [r5, #24]
 8008e36:	b913      	cbnz	r3, 8008e3e <__swsetup_r+0x16>
 8008e38:	4628      	mov	r0, r5
 8008e3a:	f000 f97d 	bl	8009138 <__sinit>
 8008e3e:	4b2e      	ldr	r3, [pc, #184]	; (8008ef8 <__swsetup_r+0xd0>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	d10f      	bne.n	8008e64 <__swsetup_r+0x3c>
 8008e44:	686c      	ldr	r4, [r5, #4]
 8008e46:	89a3      	ldrh	r3, [r4, #12]
 8008e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e4c:	0719      	lsls	r1, r3, #28
 8008e4e:	d42c      	bmi.n	8008eaa <__swsetup_r+0x82>
 8008e50:	06dd      	lsls	r5, r3, #27
 8008e52:	d411      	bmi.n	8008e78 <__swsetup_r+0x50>
 8008e54:	2309      	movs	r3, #9
 8008e56:	6033      	str	r3, [r6, #0]
 8008e58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	e03e      	b.n	8008ee2 <__swsetup_r+0xba>
 8008e64:	4b25      	ldr	r3, [pc, #148]	; (8008efc <__swsetup_r+0xd4>)
 8008e66:	429c      	cmp	r4, r3
 8008e68:	d101      	bne.n	8008e6e <__swsetup_r+0x46>
 8008e6a:	68ac      	ldr	r4, [r5, #8]
 8008e6c:	e7eb      	b.n	8008e46 <__swsetup_r+0x1e>
 8008e6e:	4b24      	ldr	r3, [pc, #144]	; (8008f00 <__swsetup_r+0xd8>)
 8008e70:	429c      	cmp	r4, r3
 8008e72:	bf08      	it	eq
 8008e74:	68ec      	ldreq	r4, [r5, #12]
 8008e76:	e7e6      	b.n	8008e46 <__swsetup_r+0x1e>
 8008e78:	0758      	lsls	r0, r3, #29
 8008e7a:	d512      	bpl.n	8008ea2 <__swsetup_r+0x7a>
 8008e7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7e:	b141      	cbz	r1, 8008e92 <__swsetup_r+0x6a>
 8008e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e84:	4299      	cmp	r1, r3
 8008e86:	d002      	beq.n	8008e8e <__swsetup_r+0x66>
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f000 fa63 	bl	8009354 <_free_r>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6363      	str	r3, [r4, #52]	; 0x34
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e98:	81a3      	strh	r3, [r4, #12]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6063      	str	r3, [r4, #4]
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f043 0308 	orr.w	r3, r3, #8
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	b94b      	cbnz	r3, 8008ec2 <__swsetup_r+0x9a>
 8008eae:	89a3      	ldrh	r3, [r4, #12]
 8008eb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb8:	d003      	beq.n	8008ec2 <__swsetup_r+0x9a>
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f000 fa01 	bl	80092c4 <__smakebuf_r>
 8008ec2:	89a0      	ldrh	r0, [r4, #12]
 8008ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ec8:	f010 0301 	ands.w	r3, r0, #1
 8008ecc:	d00a      	beq.n	8008ee4 <__swsetup_r+0xbc>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60a3      	str	r3, [r4, #8]
 8008ed2:	6963      	ldr	r3, [r4, #20]
 8008ed4:	425b      	negs	r3, r3
 8008ed6:	61a3      	str	r3, [r4, #24]
 8008ed8:	6923      	ldr	r3, [r4, #16]
 8008eda:	b943      	cbnz	r3, 8008eee <__swsetup_r+0xc6>
 8008edc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ee0:	d1ba      	bne.n	8008e58 <__swsetup_r+0x30>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	0781      	lsls	r1, r0, #30
 8008ee6:	bf58      	it	pl
 8008ee8:	6963      	ldrpl	r3, [r4, #20]
 8008eea:	60a3      	str	r3, [r4, #8]
 8008eec:	e7f4      	b.n	8008ed8 <__swsetup_r+0xb0>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e7f7      	b.n	8008ee2 <__swsetup_r+0xba>
 8008ef2:	bf00      	nop
 8008ef4:	2000055c 	.word	0x2000055c
 8008ef8:	0802d794 	.word	0x0802d794
 8008efc:	0802d7b4 	.word	0x0802d7b4
 8008f00:	0802d774 	.word	0x0802d774

08008f04 <__sflush_r>:
 8008f04:	898a      	ldrh	r2, [r1, #12]
 8008f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	0710      	lsls	r0, r2, #28
 8008f0e:	460c      	mov	r4, r1
 8008f10:	d458      	bmi.n	8008fc4 <__sflush_r+0xc0>
 8008f12:	684b      	ldr	r3, [r1, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	dc05      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc02      	bgt.n	8008f24 <__sflush_r+0x20>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f26:	2e00      	cmp	r6, #0
 8008f28:	d0f9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f30:	682f      	ldr	r7, [r5, #0]
 8008f32:	602b      	str	r3, [r5, #0]
 8008f34:	d032      	beq.n	8008f9c <__sflush_r+0x98>
 8008f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	075a      	lsls	r2, r3, #29
 8008f3c:	d505      	bpl.n	8008f4a <__sflush_r+0x46>
 8008f3e:	6863      	ldr	r3, [r4, #4]
 8008f40:	1ac0      	subs	r0, r0, r3
 8008f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f44:	b10b      	cbz	r3, 8008f4a <__sflush_r+0x46>
 8008f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f50:	6a21      	ldr	r1, [r4, #32]
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b0      	blx	r6
 8008f56:	1c43      	adds	r3, r0, #1
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	d106      	bne.n	8008f6a <__sflush_r+0x66>
 8008f5c:	6829      	ldr	r1, [r5, #0]
 8008f5e:	291d      	cmp	r1, #29
 8008f60:	d82c      	bhi.n	8008fbc <__sflush_r+0xb8>
 8008f62:	4a2a      	ldr	r2, [pc, #168]	; (800900c <__sflush_r+0x108>)
 8008f64:	40ca      	lsrs	r2, r1
 8008f66:	07d6      	lsls	r6, r2, #31
 8008f68:	d528      	bpl.n	8008fbc <__sflush_r+0xb8>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	6062      	str	r2, [r4, #4]
 8008f6e:	04d9      	lsls	r1, r3, #19
 8008f70:	6922      	ldr	r2, [r4, #16]
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	d504      	bpl.n	8008f80 <__sflush_r+0x7c>
 8008f76:	1c42      	adds	r2, r0, #1
 8008f78:	d101      	bne.n	8008f7e <__sflush_r+0x7a>
 8008f7a:	682b      	ldr	r3, [r5, #0]
 8008f7c:	b903      	cbnz	r3, 8008f80 <__sflush_r+0x7c>
 8008f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f82:	602f      	str	r7, [r5, #0]
 8008f84:	2900      	cmp	r1, #0
 8008f86:	d0ca      	beq.n	8008f1e <__sflush_r+0x1a>
 8008f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f8c:	4299      	cmp	r1, r3
 8008f8e:	d002      	beq.n	8008f96 <__sflush_r+0x92>
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 f9df 	bl	8009354 <_free_r>
 8008f96:	2000      	movs	r0, #0
 8008f98:	6360      	str	r0, [r4, #52]	; 0x34
 8008f9a:	e7c1      	b.n	8008f20 <__sflush_r+0x1c>
 8008f9c:	6a21      	ldr	r1, [r4, #32]
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b0      	blx	r6
 8008fa4:	1c41      	adds	r1, r0, #1
 8008fa6:	d1c7      	bne.n	8008f38 <__sflush_r+0x34>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0c4      	beq.n	8008f38 <__sflush_r+0x34>
 8008fae:	2b1d      	cmp	r3, #29
 8008fb0:	d001      	beq.n	8008fb6 <__sflush_r+0xb2>
 8008fb2:	2b16      	cmp	r3, #22
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0xb6>
 8008fb6:	602f      	str	r7, [r5, #0]
 8008fb8:	e7b1      	b.n	8008f1e <__sflush_r+0x1a>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7ad      	b.n	8008f20 <__sflush_r+0x1c>
 8008fc4:	690f      	ldr	r7, [r1, #16]
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	d0a9      	beq.n	8008f1e <__sflush_r+0x1a>
 8008fca:	0793      	lsls	r3, r2, #30
 8008fcc:	680e      	ldr	r6, [r1, #0]
 8008fce:	bf08      	it	eq
 8008fd0:	694b      	ldreq	r3, [r1, #20]
 8008fd2:	600f      	str	r7, [r1, #0]
 8008fd4:	bf18      	it	ne
 8008fd6:	2300      	movne	r3, #0
 8008fd8:	eba6 0807 	sub.w	r8, r6, r7
 8008fdc:	608b      	str	r3, [r1, #8]
 8008fde:	f1b8 0f00 	cmp.w	r8, #0
 8008fe2:	dd9c      	ble.n	8008f1e <__sflush_r+0x1a>
 8008fe4:	6a21      	ldr	r1, [r4, #32]
 8008fe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fe8:	4643      	mov	r3, r8
 8008fea:	463a      	mov	r2, r7
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b0      	blx	r6
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	dc06      	bgt.n	8009002 <__sflush_r+0xfe>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e78e      	b.n	8008f20 <__sflush_r+0x1c>
 8009002:	4407      	add	r7, r0
 8009004:	eba8 0800 	sub.w	r8, r8, r0
 8009008:	e7e9      	b.n	8008fde <__sflush_r+0xda>
 800900a:	bf00      	nop
 800900c:	20400001 	.word	0x20400001

08009010 <_fflush_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	690b      	ldr	r3, [r1, #16]
 8009014:	4605      	mov	r5, r0
 8009016:	460c      	mov	r4, r1
 8009018:	b913      	cbnz	r3, 8009020 <_fflush_r+0x10>
 800901a:	2500      	movs	r5, #0
 800901c:	4628      	mov	r0, r5
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	b118      	cbz	r0, 800902a <_fflush_r+0x1a>
 8009022:	6983      	ldr	r3, [r0, #24]
 8009024:	b90b      	cbnz	r3, 800902a <_fflush_r+0x1a>
 8009026:	f000 f887 	bl	8009138 <__sinit>
 800902a:	4b14      	ldr	r3, [pc, #80]	; (800907c <_fflush_r+0x6c>)
 800902c:	429c      	cmp	r4, r3
 800902e:	d11b      	bne.n	8009068 <_fflush_r+0x58>
 8009030:	686c      	ldr	r4, [r5, #4]
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d0ef      	beq.n	800901a <_fflush_r+0xa>
 800903a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800903c:	07d0      	lsls	r0, r2, #31
 800903e:	d404      	bmi.n	800904a <_fflush_r+0x3a>
 8009040:	0599      	lsls	r1, r3, #22
 8009042:	d402      	bmi.n	800904a <_fflush_r+0x3a>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f000 f915 	bl	8009274 <__retarget_lock_acquire_recursive>
 800904a:	4628      	mov	r0, r5
 800904c:	4621      	mov	r1, r4
 800904e:	f7ff ff59 	bl	8008f04 <__sflush_r>
 8009052:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009054:	07da      	lsls	r2, r3, #31
 8009056:	4605      	mov	r5, r0
 8009058:	d4e0      	bmi.n	800901c <_fflush_r+0xc>
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	059b      	lsls	r3, r3, #22
 800905e:	d4dd      	bmi.n	800901c <_fflush_r+0xc>
 8009060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009062:	f000 f908 	bl	8009276 <__retarget_lock_release_recursive>
 8009066:	e7d9      	b.n	800901c <_fflush_r+0xc>
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <_fflush_r+0x70>)
 800906a:	429c      	cmp	r4, r3
 800906c:	d101      	bne.n	8009072 <_fflush_r+0x62>
 800906e:	68ac      	ldr	r4, [r5, #8]
 8009070:	e7df      	b.n	8009032 <_fflush_r+0x22>
 8009072:	4b04      	ldr	r3, [pc, #16]	; (8009084 <_fflush_r+0x74>)
 8009074:	429c      	cmp	r4, r3
 8009076:	bf08      	it	eq
 8009078:	68ec      	ldreq	r4, [r5, #12]
 800907a:	e7da      	b.n	8009032 <_fflush_r+0x22>
 800907c:	0802d794 	.word	0x0802d794
 8009080:	0802d7b4 	.word	0x0802d7b4
 8009084:	0802d774 	.word	0x0802d774

08009088 <std>:
 8009088:	2300      	movs	r3, #0
 800908a:	b510      	push	{r4, lr}
 800908c:	4604      	mov	r4, r0
 800908e:	e9c0 3300 	strd	r3, r3, [r0]
 8009092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009096:	6083      	str	r3, [r0, #8]
 8009098:	8181      	strh	r1, [r0, #12]
 800909a:	6643      	str	r3, [r0, #100]	; 0x64
 800909c:	81c2      	strh	r2, [r0, #14]
 800909e:	6183      	str	r3, [r0, #24]
 80090a0:	4619      	mov	r1, r3
 80090a2:	2208      	movs	r2, #8
 80090a4:	305c      	adds	r0, #92	; 0x5c
 80090a6:	f7ff fce9 	bl	8008a7c <memset>
 80090aa:	4b05      	ldr	r3, [pc, #20]	; (80090c0 <std+0x38>)
 80090ac:	6263      	str	r3, [r4, #36]	; 0x24
 80090ae:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <std+0x3c>)
 80090b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b2:	4b05      	ldr	r3, [pc, #20]	; (80090c8 <std+0x40>)
 80090b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b6:	4b05      	ldr	r3, [pc, #20]	; (80090cc <std+0x44>)
 80090b8:	6224      	str	r4, [r4, #32]
 80090ba:	6323      	str	r3, [r4, #48]	; 0x30
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	bf00      	nop
 80090c0:	08009dc9 	.word	0x08009dc9
 80090c4:	08009deb 	.word	0x08009deb
 80090c8:	08009e23 	.word	0x08009e23
 80090cc:	08009e47 	.word	0x08009e47

080090d0 <_cleanup_r>:
 80090d0:	4901      	ldr	r1, [pc, #4]	; (80090d8 <_cleanup_r+0x8>)
 80090d2:	f000 b8af 	b.w	8009234 <_fwalk_reent>
 80090d6:	bf00      	nop
 80090d8:	08009011 	.word	0x08009011

080090dc <__sfmoreglue>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	2268      	movs	r2, #104	; 0x68
 80090e0:	1e4d      	subs	r5, r1, #1
 80090e2:	4355      	muls	r5, r2
 80090e4:	460e      	mov	r6, r1
 80090e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ea:	f000 f99f 	bl	800942c <_malloc_r>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b140      	cbz	r0, 8009104 <__sfmoreglue+0x28>
 80090f2:	2100      	movs	r1, #0
 80090f4:	e9c0 1600 	strd	r1, r6, [r0]
 80090f8:	300c      	adds	r0, #12
 80090fa:	60a0      	str	r0, [r4, #8]
 80090fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009100:	f7ff fcbc 	bl	8008a7c <memset>
 8009104:	4620      	mov	r0, r4
 8009106:	bd70      	pop	{r4, r5, r6, pc}

08009108 <__sfp_lock_acquire>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__sfp_lock_acquire+0x8>)
 800910a:	f000 b8b3 	b.w	8009274 <__retarget_lock_acquire_recursive>
 800910e:	bf00      	nop
 8009110:	200008c5 	.word	0x200008c5

08009114 <__sfp_lock_release>:
 8009114:	4801      	ldr	r0, [pc, #4]	; (800911c <__sfp_lock_release+0x8>)
 8009116:	f000 b8ae 	b.w	8009276 <__retarget_lock_release_recursive>
 800911a:	bf00      	nop
 800911c:	200008c5 	.word	0x200008c5

08009120 <__sinit_lock_acquire>:
 8009120:	4801      	ldr	r0, [pc, #4]	; (8009128 <__sinit_lock_acquire+0x8>)
 8009122:	f000 b8a7 	b.w	8009274 <__retarget_lock_acquire_recursive>
 8009126:	bf00      	nop
 8009128:	200008c6 	.word	0x200008c6

0800912c <__sinit_lock_release>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sinit_lock_release+0x8>)
 800912e:	f000 b8a2 	b.w	8009276 <__retarget_lock_release_recursive>
 8009132:	bf00      	nop
 8009134:	200008c6 	.word	0x200008c6

08009138 <__sinit>:
 8009138:	b510      	push	{r4, lr}
 800913a:	4604      	mov	r4, r0
 800913c:	f7ff fff0 	bl	8009120 <__sinit_lock_acquire>
 8009140:	69a3      	ldr	r3, [r4, #24]
 8009142:	b11b      	cbz	r3, 800914c <__sinit+0x14>
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f7ff bff0 	b.w	800912c <__sinit_lock_release>
 800914c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009150:	6523      	str	r3, [r4, #80]	; 0x50
 8009152:	4b13      	ldr	r3, [pc, #76]	; (80091a0 <__sinit+0x68>)
 8009154:	4a13      	ldr	r2, [pc, #76]	; (80091a4 <__sinit+0x6c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	62a2      	str	r2, [r4, #40]	; 0x28
 800915a:	42a3      	cmp	r3, r4
 800915c:	bf04      	itt	eq
 800915e:	2301      	moveq	r3, #1
 8009160:	61a3      	streq	r3, [r4, #24]
 8009162:	4620      	mov	r0, r4
 8009164:	f000 f820 	bl	80091a8 <__sfp>
 8009168:	6060      	str	r0, [r4, #4]
 800916a:	4620      	mov	r0, r4
 800916c:	f000 f81c 	bl	80091a8 <__sfp>
 8009170:	60a0      	str	r0, [r4, #8]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f818 	bl	80091a8 <__sfp>
 8009178:	2200      	movs	r2, #0
 800917a:	60e0      	str	r0, [r4, #12]
 800917c:	2104      	movs	r1, #4
 800917e:	6860      	ldr	r0, [r4, #4]
 8009180:	f7ff ff82 	bl	8009088 <std>
 8009184:	68a0      	ldr	r0, [r4, #8]
 8009186:	2201      	movs	r2, #1
 8009188:	2109      	movs	r1, #9
 800918a:	f7ff ff7d 	bl	8009088 <std>
 800918e:	68e0      	ldr	r0, [r4, #12]
 8009190:	2202      	movs	r2, #2
 8009192:	2112      	movs	r1, #18
 8009194:	f7ff ff78 	bl	8009088 <std>
 8009198:	2301      	movs	r3, #1
 800919a:	61a3      	str	r3, [r4, #24]
 800919c:	e7d2      	b.n	8009144 <__sinit+0xc>
 800919e:	bf00      	nop
 80091a0:	0802d770 	.word	0x0802d770
 80091a4:	080090d1 	.word	0x080090d1

080091a8 <__sfp>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	4607      	mov	r7, r0
 80091ac:	f7ff ffac 	bl	8009108 <__sfp_lock_acquire>
 80091b0:	4b1e      	ldr	r3, [pc, #120]	; (800922c <__sfp+0x84>)
 80091b2:	681e      	ldr	r6, [r3, #0]
 80091b4:	69b3      	ldr	r3, [r6, #24]
 80091b6:	b913      	cbnz	r3, 80091be <__sfp+0x16>
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff ffbd 	bl	8009138 <__sinit>
 80091be:	3648      	adds	r6, #72	; 0x48
 80091c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80091c4:	3b01      	subs	r3, #1
 80091c6:	d503      	bpl.n	80091d0 <__sfp+0x28>
 80091c8:	6833      	ldr	r3, [r6, #0]
 80091ca:	b30b      	cbz	r3, 8009210 <__sfp+0x68>
 80091cc:	6836      	ldr	r6, [r6, #0]
 80091ce:	e7f7      	b.n	80091c0 <__sfp+0x18>
 80091d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091d4:	b9d5      	cbnz	r5, 800920c <__sfp+0x64>
 80091d6:	4b16      	ldr	r3, [pc, #88]	; (8009230 <__sfp+0x88>)
 80091d8:	60e3      	str	r3, [r4, #12]
 80091da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091de:	6665      	str	r5, [r4, #100]	; 0x64
 80091e0:	f000 f847 	bl	8009272 <__retarget_lock_init_recursive>
 80091e4:	f7ff ff96 	bl	8009114 <__sfp_lock_release>
 80091e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091f0:	6025      	str	r5, [r4, #0]
 80091f2:	61a5      	str	r5, [r4, #24]
 80091f4:	2208      	movs	r2, #8
 80091f6:	4629      	mov	r1, r5
 80091f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091fc:	f7ff fc3e 	bl	8008a7c <memset>
 8009200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009208:	4620      	mov	r0, r4
 800920a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800920c:	3468      	adds	r4, #104	; 0x68
 800920e:	e7d9      	b.n	80091c4 <__sfp+0x1c>
 8009210:	2104      	movs	r1, #4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff ff62 	bl	80090dc <__sfmoreglue>
 8009218:	4604      	mov	r4, r0
 800921a:	6030      	str	r0, [r6, #0]
 800921c:	2800      	cmp	r0, #0
 800921e:	d1d5      	bne.n	80091cc <__sfp+0x24>
 8009220:	f7ff ff78 	bl	8009114 <__sfp_lock_release>
 8009224:	230c      	movs	r3, #12
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	e7ee      	b.n	8009208 <__sfp+0x60>
 800922a:	bf00      	nop
 800922c:	0802d770 	.word	0x0802d770
 8009230:	ffff0001 	.word	0xffff0001

08009234 <_fwalk_reent>:
 8009234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009238:	4606      	mov	r6, r0
 800923a:	4688      	mov	r8, r1
 800923c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009240:	2700      	movs	r7, #0
 8009242:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009246:	f1b9 0901 	subs.w	r9, r9, #1
 800924a:	d505      	bpl.n	8009258 <_fwalk_reent+0x24>
 800924c:	6824      	ldr	r4, [r4, #0]
 800924e:	2c00      	cmp	r4, #0
 8009250:	d1f7      	bne.n	8009242 <_fwalk_reent+0xe>
 8009252:	4638      	mov	r0, r7
 8009254:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009258:	89ab      	ldrh	r3, [r5, #12]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d907      	bls.n	800926e <_fwalk_reent+0x3a>
 800925e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009262:	3301      	adds	r3, #1
 8009264:	d003      	beq.n	800926e <_fwalk_reent+0x3a>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	47c0      	blx	r8
 800926c:	4307      	orrs	r7, r0
 800926e:	3568      	adds	r5, #104	; 0x68
 8009270:	e7e9      	b.n	8009246 <_fwalk_reent+0x12>

08009272 <__retarget_lock_init_recursive>:
 8009272:	4770      	bx	lr

08009274 <__retarget_lock_acquire_recursive>:
 8009274:	4770      	bx	lr

08009276 <__retarget_lock_release_recursive>:
 8009276:	4770      	bx	lr

08009278 <__swhatbuf_r>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	460e      	mov	r6, r1
 800927c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009280:	2900      	cmp	r1, #0
 8009282:	b096      	sub	sp, #88	; 0x58
 8009284:	4614      	mov	r4, r2
 8009286:	461d      	mov	r5, r3
 8009288:	da08      	bge.n	800929c <__swhatbuf_r+0x24>
 800928a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	602a      	str	r2, [r5, #0]
 8009292:	061a      	lsls	r2, r3, #24
 8009294:	d410      	bmi.n	80092b8 <__swhatbuf_r+0x40>
 8009296:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800929a:	e00e      	b.n	80092ba <__swhatbuf_r+0x42>
 800929c:	466a      	mov	r2, sp
 800929e:	f000 fdf9 	bl	8009e94 <_fstat_r>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	dbf1      	blt.n	800928a <__swhatbuf_r+0x12>
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80092ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80092b0:	425a      	negs	r2, r3
 80092b2:	415a      	adcs	r2, r3
 80092b4:	602a      	str	r2, [r5, #0]
 80092b6:	e7ee      	b.n	8009296 <__swhatbuf_r+0x1e>
 80092b8:	2340      	movs	r3, #64	; 0x40
 80092ba:	2000      	movs	r0, #0
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	b016      	add	sp, #88	; 0x58
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080092c4 <__smakebuf_r>:
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092c8:	079d      	lsls	r5, r3, #30
 80092ca:	4606      	mov	r6, r0
 80092cc:	460c      	mov	r4, r1
 80092ce:	d507      	bpl.n	80092e0 <__smakebuf_r+0x1c>
 80092d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	2301      	movs	r3, #1
 80092da:	6163      	str	r3, [r4, #20]
 80092dc:	b002      	add	sp, #8
 80092de:	bd70      	pop	{r4, r5, r6, pc}
 80092e0:	ab01      	add	r3, sp, #4
 80092e2:	466a      	mov	r2, sp
 80092e4:	f7ff ffc8 	bl	8009278 <__swhatbuf_r>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	4605      	mov	r5, r0
 80092ec:	4630      	mov	r0, r6
 80092ee:	f000 f89d 	bl	800942c <_malloc_r>
 80092f2:	b948      	cbnz	r0, 8009308 <__smakebuf_r+0x44>
 80092f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f8:	059a      	lsls	r2, r3, #22
 80092fa:	d4ef      	bmi.n	80092dc <__smakebuf_r+0x18>
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	f043 0302 	orr.w	r3, r3, #2
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	e7e3      	b.n	80092d0 <__smakebuf_r+0xc>
 8009308:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <__smakebuf_r+0x7c>)
 800930a:	62b3      	str	r3, [r6, #40]	; 0x28
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	6020      	str	r0, [r4, #0]
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	81a3      	strh	r3, [r4, #12]
 8009316:	9b00      	ldr	r3, [sp, #0]
 8009318:	6163      	str	r3, [r4, #20]
 800931a:	9b01      	ldr	r3, [sp, #4]
 800931c:	6120      	str	r0, [r4, #16]
 800931e:	b15b      	cbz	r3, 8009338 <__smakebuf_r+0x74>
 8009320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009324:	4630      	mov	r0, r6
 8009326:	f000 fdc7 	bl	8009eb8 <_isatty_r>
 800932a:	b128      	cbz	r0, 8009338 <__smakebuf_r+0x74>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	f043 0301 	orr.w	r3, r3, #1
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	89a0      	ldrh	r0, [r4, #12]
 800933a:	4305      	orrs	r5, r0
 800933c:	81a5      	strh	r5, [r4, #12]
 800933e:	e7cd      	b.n	80092dc <__smakebuf_r+0x18>
 8009340:	080090d1 	.word	0x080090d1

08009344 <malloc>:
 8009344:	4b02      	ldr	r3, [pc, #8]	; (8009350 <malloc+0xc>)
 8009346:	4601      	mov	r1, r0
 8009348:	6818      	ldr	r0, [r3, #0]
 800934a:	f000 b86f 	b.w	800942c <_malloc_r>
 800934e:	bf00      	nop
 8009350:	2000055c 	.word	0x2000055c

08009354 <_free_r>:
 8009354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009356:	2900      	cmp	r1, #0
 8009358:	d044      	beq.n	80093e4 <_free_r+0x90>
 800935a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935e:	9001      	str	r0, [sp, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f1a1 0404 	sub.w	r4, r1, #4
 8009366:	bfb8      	it	lt
 8009368:	18e4      	addlt	r4, r4, r3
 800936a:	f000 fde1 	bl	8009f30 <__malloc_lock>
 800936e:	4a1e      	ldr	r2, [pc, #120]	; (80093e8 <_free_r+0x94>)
 8009370:	9801      	ldr	r0, [sp, #4]
 8009372:	6813      	ldr	r3, [r2, #0]
 8009374:	b933      	cbnz	r3, 8009384 <_free_r+0x30>
 8009376:	6063      	str	r3, [r4, #4]
 8009378:	6014      	str	r4, [r2, #0]
 800937a:	b003      	add	sp, #12
 800937c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009380:	f000 bddc 	b.w	8009f3c <__malloc_unlock>
 8009384:	42a3      	cmp	r3, r4
 8009386:	d908      	bls.n	800939a <_free_r+0x46>
 8009388:	6825      	ldr	r5, [r4, #0]
 800938a:	1961      	adds	r1, r4, r5
 800938c:	428b      	cmp	r3, r1
 800938e:	bf01      	itttt	eq
 8009390:	6819      	ldreq	r1, [r3, #0]
 8009392:	685b      	ldreq	r3, [r3, #4]
 8009394:	1949      	addeq	r1, r1, r5
 8009396:	6021      	streq	r1, [r4, #0]
 8009398:	e7ed      	b.n	8009376 <_free_r+0x22>
 800939a:	461a      	mov	r2, r3
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	b10b      	cbz	r3, 80093a4 <_free_r+0x50>
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d9fa      	bls.n	800939a <_free_r+0x46>
 80093a4:	6811      	ldr	r1, [r2, #0]
 80093a6:	1855      	adds	r5, r2, r1
 80093a8:	42a5      	cmp	r5, r4
 80093aa:	d10b      	bne.n	80093c4 <_free_r+0x70>
 80093ac:	6824      	ldr	r4, [r4, #0]
 80093ae:	4421      	add	r1, r4
 80093b0:	1854      	adds	r4, r2, r1
 80093b2:	42a3      	cmp	r3, r4
 80093b4:	6011      	str	r1, [r2, #0]
 80093b6:	d1e0      	bne.n	800937a <_free_r+0x26>
 80093b8:	681c      	ldr	r4, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	6053      	str	r3, [r2, #4]
 80093be:	4421      	add	r1, r4
 80093c0:	6011      	str	r1, [r2, #0]
 80093c2:	e7da      	b.n	800937a <_free_r+0x26>
 80093c4:	d902      	bls.n	80093cc <_free_r+0x78>
 80093c6:	230c      	movs	r3, #12
 80093c8:	6003      	str	r3, [r0, #0]
 80093ca:	e7d6      	b.n	800937a <_free_r+0x26>
 80093cc:	6825      	ldr	r5, [r4, #0]
 80093ce:	1961      	adds	r1, r4, r5
 80093d0:	428b      	cmp	r3, r1
 80093d2:	bf04      	itt	eq
 80093d4:	6819      	ldreq	r1, [r3, #0]
 80093d6:	685b      	ldreq	r3, [r3, #4]
 80093d8:	6063      	str	r3, [r4, #4]
 80093da:	bf04      	itt	eq
 80093dc:	1949      	addeq	r1, r1, r5
 80093de:	6021      	streq	r1, [r4, #0]
 80093e0:	6054      	str	r4, [r2, #4]
 80093e2:	e7ca      	b.n	800937a <_free_r+0x26>
 80093e4:	b003      	add	sp, #12
 80093e6:	bd30      	pop	{r4, r5, pc}
 80093e8:	200008c8 	.word	0x200008c8

080093ec <sbrk_aligned>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	4e0e      	ldr	r6, [pc, #56]	; (8009428 <sbrk_aligned+0x3c>)
 80093f0:	460c      	mov	r4, r1
 80093f2:	6831      	ldr	r1, [r6, #0]
 80093f4:	4605      	mov	r5, r0
 80093f6:	b911      	cbnz	r1, 80093fe <sbrk_aligned+0x12>
 80093f8:	f000 fcd6 	bl	8009da8 <_sbrk_r>
 80093fc:	6030      	str	r0, [r6, #0]
 80093fe:	4621      	mov	r1, r4
 8009400:	4628      	mov	r0, r5
 8009402:	f000 fcd1 	bl	8009da8 <_sbrk_r>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	d00a      	beq.n	8009420 <sbrk_aligned+0x34>
 800940a:	1cc4      	adds	r4, r0, #3
 800940c:	f024 0403 	bic.w	r4, r4, #3
 8009410:	42a0      	cmp	r0, r4
 8009412:	d007      	beq.n	8009424 <sbrk_aligned+0x38>
 8009414:	1a21      	subs	r1, r4, r0
 8009416:	4628      	mov	r0, r5
 8009418:	f000 fcc6 	bl	8009da8 <_sbrk_r>
 800941c:	3001      	adds	r0, #1
 800941e:	d101      	bne.n	8009424 <sbrk_aligned+0x38>
 8009420:	f04f 34ff 	mov.w	r4, #4294967295
 8009424:	4620      	mov	r0, r4
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	200008cc 	.word	0x200008cc

0800942c <_malloc_r>:
 800942c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009430:	1ccd      	adds	r5, r1, #3
 8009432:	f025 0503 	bic.w	r5, r5, #3
 8009436:	3508      	adds	r5, #8
 8009438:	2d0c      	cmp	r5, #12
 800943a:	bf38      	it	cc
 800943c:	250c      	movcc	r5, #12
 800943e:	2d00      	cmp	r5, #0
 8009440:	4607      	mov	r7, r0
 8009442:	db01      	blt.n	8009448 <_malloc_r+0x1c>
 8009444:	42a9      	cmp	r1, r5
 8009446:	d905      	bls.n	8009454 <_malloc_r+0x28>
 8009448:	230c      	movs	r3, #12
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	2600      	movs	r6, #0
 800944e:	4630      	mov	r0, r6
 8009450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009454:	4e2e      	ldr	r6, [pc, #184]	; (8009510 <_malloc_r+0xe4>)
 8009456:	f000 fd6b 	bl	8009f30 <__malloc_lock>
 800945a:	6833      	ldr	r3, [r6, #0]
 800945c:	461c      	mov	r4, r3
 800945e:	bb34      	cbnz	r4, 80094ae <_malloc_r+0x82>
 8009460:	4629      	mov	r1, r5
 8009462:	4638      	mov	r0, r7
 8009464:	f7ff ffc2 	bl	80093ec <sbrk_aligned>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	4604      	mov	r4, r0
 800946c:	d14d      	bne.n	800950a <_malloc_r+0xde>
 800946e:	6834      	ldr	r4, [r6, #0]
 8009470:	4626      	mov	r6, r4
 8009472:	2e00      	cmp	r6, #0
 8009474:	d140      	bne.n	80094f8 <_malloc_r+0xcc>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	4631      	mov	r1, r6
 800947a:	4638      	mov	r0, r7
 800947c:	eb04 0803 	add.w	r8, r4, r3
 8009480:	f000 fc92 	bl	8009da8 <_sbrk_r>
 8009484:	4580      	cmp	r8, r0
 8009486:	d13a      	bne.n	80094fe <_malloc_r+0xd2>
 8009488:	6821      	ldr	r1, [r4, #0]
 800948a:	3503      	adds	r5, #3
 800948c:	1a6d      	subs	r5, r5, r1
 800948e:	f025 0503 	bic.w	r5, r5, #3
 8009492:	3508      	adds	r5, #8
 8009494:	2d0c      	cmp	r5, #12
 8009496:	bf38      	it	cc
 8009498:	250c      	movcc	r5, #12
 800949a:	4629      	mov	r1, r5
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff ffa5 	bl	80093ec <sbrk_aligned>
 80094a2:	3001      	adds	r0, #1
 80094a4:	d02b      	beq.n	80094fe <_malloc_r+0xd2>
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	442b      	add	r3, r5
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	e00e      	b.n	80094cc <_malloc_r+0xa0>
 80094ae:	6822      	ldr	r2, [r4, #0]
 80094b0:	1b52      	subs	r2, r2, r5
 80094b2:	d41e      	bmi.n	80094f2 <_malloc_r+0xc6>
 80094b4:	2a0b      	cmp	r2, #11
 80094b6:	d916      	bls.n	80094e6 <_malloc_r+0xba>
 80094b8:	1961      	adds	r1, r4, r5
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	6025      	str	r5, [r4, #0]
 80094be:	bf18      	it	ne
 80094c0:	6059      	strne	r1, [r3, #4]
 80094c2:	6863      	ldr	r3, [r4, #4]
 80094c4:	bf08      	it	eq
 80094c6:	6031      	streq	r1, [r6, #0]
 80094c8:	5162      	str	r2, [r4, r5]
 80094ca:	604b      	str	r3, [r1, #4]
 80094cc:	4638      	mov	r0, r7
 80094ce:	f104 060b 	add.w	r6, r4, #11
 80094d2:	f000 fd33 	bl	8009f3c <__malloc_unlock>
 80094d6:	f026 0607 	bic.w	r6, r6, #7
 80094da:	1d23      	adds	r3, r4, #4
 80094dc:	1af2      	subs	r2, r6, r3
 80094de:	d0b6      	beq.n	800944e <_malloc_r+0x22>
 80094e0:	1b9b      	subs	r3, r3, r6
 80094e2:	50a3      	str	r3, [r4, r2]
 80094e4:	e7b3      	b.n	800944e <_malloc_r+0x22>
 80094e6:	6862      	ldr	r2, [r4, #4]
 80094e8:	42a3      	cmp	r3, r4
 80094ea:	bf0c      	ite	eq
 80094ec:	6032      	streq	r2, [r6, #0]
 80094ee:	605a      	strne	r2, [r3, #4]
 80094f0:	e7ec      	b.n	80094cc <_malloc_r+0xa0>
 80094f2:	4623      	mov	r3, r4
 80094f4:	6864      	ldr	r4, [r4, #4]
 80094f6:	e7b2      	b.n	800945e <_malloc_r+0x32>
 80094f8:	4634      	mov	r4, r6
 80094fa:	6876      	ldr	r6, [r6, #4]
 80094fc:	e7b9      	b.n	8009472 <_malloc_r+0x46>
 80094fe:	230c      	movs	r3, #12
 8009500:	603b      	str	r3, [r7, #0]
 8009502:	4638      	mov	r0, r7
 8009504:	f000 fd1a 	bl	8009f3c <__malloc_unlock>
 8009508:	e7a1      	b.n	800944e <_malloc_r+0x22>
 800950a:	6025      	str	r5, [r4, #0]
 800950c:	e7de      	b.n	80094cc <_malloc_r+0xa0>
 800950e:	bf00      	nop
 8009510:	200008c8 	.word	0x200008c8

08009514 <__ssputs_r>:
 8009514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	688e      	ldr	r6, [r1, #8]
 800951a:	429e      	cmp	r6, r3
 800951c:	4682      	mov	sl, r0
 800951e:	460c      	mov	r4, r1
 8009520:	4690      	mov	r8, r2
 8009522:	461f      	mov	r7, r3
 8009524:	d838      	bhi.n	8009598 <__ssputs_r+0x84>
 8009526:	898a      	ldrh	r2, [r1, #12]
 8009528:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800952c:	d032      	beq.n	8009594 <__ssputs_r+0x80>
 800952e:	6825      	ldr	r5, [r4, #0]
 8009530:	6909      	ldr	r1, [r1, #16]
 8009532:	eba5 0901 	sub.w	r9, r5, r1
 8009536:	6965      	ldr	r5, [r4, #20]
 8009538:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800953c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009540:	3301      	adds	r3, #1
 8009542:	444b      	add	r3, r9
 8009544:	106d      	asrs	r5, r5, #1
 8009546:	429d      	cmp	r5, r3
 8009548:	bf38      	it	cc
 800954a:	461d      	movcc	r5, r3
 800954c:	0553      	lsls	r3, r2, #21
 800954e:	d531      	bpl.n	80095b4 <__ssputs_r+0xa0>
 8009550:	4629      	mov	r1, r5
 8009552:	f7ff ff6b 	bl	800942c <_malloc_r>
 8009556:	4606      	mov	r6, r0
 8009558:	b950      	cbnz	r0, 8009570 <__ssputs_r+0x5c>
 800955a:	230c      	movs	r3, #12
 800955c:	f8ca 3000 	str.w	r3, [sl]
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009570:	6921      	ldr	r1, [r4, #16]
 8009572:	464a      	mov	r2, r9
 8009574:	f7ff fa74 	bl	8008a60 <memcpy>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800957e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	6126      	str	r6, [r4, #16]
 8009586:	6165      	str	r5, [r4, #20]
 8009588:	444e      	add	r6, r9
 800958a:	eba5 0509 	sub.w	r5, r5, r9
 800958e:	6026      	str	r6, [r4, #0]
 8009590:	60a5      	str	r5, [r4, #8]
 8009592:	463e      	mov	r6, r7
 8009594:	42be      	cmp	r6, r7
 8009596:	d900      	bls.n	800959a <__ssputs_r+0x86>
 8009598:	463e      	mov	r6, r7
 800959a:	6820      	ldr	r0, [r4, #0]
 800959c:	4632      	mov	r2, r6
 800959e:	4641      	mov	r1, r8
 80095a0:	f000 fcac 	bl	8009efc <memmove>
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	1b9b      	subs	r3, r3, r6
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	4433      	add	r3, r6
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7db      	b.n	800956c <__ssputs_r+0x58>
 80095b4:	462a      	mov	r2, r5
 80095b6:	f000 fcc7 	bl	8009f48 <_realloc_r>
 80095ba:	4606      	mov	r6, r0
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1e1      	bne.n	8009584 <__ssputs_r+0x70>
 80095c0:	6921      	ldr	r1, [r4, #16]
 80095c2:	4650      	mov	r0, sl
 80095c4:	f7ff fec6 	bl	8009354 <_free_r>
 80095c8:	e7c7      	b.n	800955a <__ssputs_r+0x46>
	...

080095cc <_svfiprintf_r>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	4698      	mov	r8, r3
 80095d2:	898b      	ldrh	r3, [r1, #12]
 80095d4:	061b      	lsls	r3, r3, #24
 80095d6:	b09d      	sub	sp, #116	; 0x74
 80095d8:	4607      	mov	r7, r0
 80095da:	460d      	mov	r5, r1
 80095dc:	4614      	mov	r4, r2
 80095de:	d50e      	bpl.n	80095fe <_svfiprintf_r+0x32>
 80095e0:	690b      	ldr	r3, [r1, #16]
 80095e2:	b963      	cbnz	r3, 80095fe <_svfiprintf_r+0x32>
 80095e4:	2140      	movs	r1, #64	; 0x40
 80095e6:	f7ff ff21 	bl	800942c <_malloc_r>
 80095ea:	6028      	str	r0, [r5, #0]
 80095ec:	6128      	str	r0, [r5, #16]
 80095ee:	b920      	cbnz	r0, 80095fa <_svfiprintf_r+0x2e>
 80095f0:	230c      	movs	r3, #12
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	e0d1      	b.n	800979e <_svfiprintf_r+0x1d2>
 80095fa:	2340      	movs	r3, #64	; 0x40
 80095fc:	616b      	str	r3, [r5, #20]
 80095fe:	2300      	movs	r3, #0
 8009600:	9309      	str	r3, [sp, #36]	; 0x24
 8009602:	2320      	movs	r3, #32
 8009604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009608:	f8cd 800c 	str.w	r8, [sp, #12]
 800960c:	2330      	movs	r3, #48	; 0x30
 800960e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097b8 <_svfiprintf_r+0x1ec>
 8009612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009616:	f04f 0901 	mov.w	r9, #1
 800961a:	4623      	mov	r3, r4
 800961c:	469a      	mov	sl, r3
 800961e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009622:	b10a      	cbz	r2, 8009628 <_svfiprintf_r+0x5c>
 8009624:	2a25      	cmp	r2, #37	; 0x25
 8009626:	d1f9      	bne.n	800961c <_svfiprintf_r+0x50>
 8009628:	ebba 0b04 	subs.w	fp, sl, r4
 800962c:	d00b      	beq.n	8009646 <_svfiprintf_r+0x7a>
 800962e:	465b      	mov	r3, fp
 8009630:	4622      	mov	r2, r4
 8009632:	4629      	mov	r1, r5
 8009634:	4638      	mov	r0, r7
 8009636:	f7ff ff6d 	bl	8009514 <__ssputs_r>
 800963a:	3001      	adds	r0, #1
 800963c:	f000 80aa 	beq.w	8009794 <_svfiprintf_r+0x1c8>
 8009640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009642:	445a      	add	r2, fp
 8009644:	9209      	str	r2, [sp, #36]	; 0x24
 8009646:	f89a 3000 	ldrb.w	r3, [sl]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80a2 	beq.w	8009794 <_svfiprintf_r+0x1c8>
 8009650:	2300      	movs	r3, #0
 8009652:	f04f 32ff 	mov.w	r2, #4294967295
 8009656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800965a:	f10a 0a01 	add.w	sl, sl, #1
 800965e:	9304      	str	r3, [sp, #16]
 8009660:	9307      	str	r3, [sp, #28]
 8009662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009666:	931a      	str	r3, [sp, #104]	; 0x68
 8009668:	4654      	mov	r4, sl
 800966a:	2205      	movs	r2, #5
 800966c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009670:	4851      	ldr	r0, [pc, #324]	; (80097b8 <_svfiprintf_r+0x1ec>)
 8009672:	f7f6 fdb5 	bl	80001e0 <memchr>
 8009676:	9a04      	ldr	r2, [sp, #16]
 8009678:	b9d8      	cbnz	r0, 80096b2 <_svfiprintf_r+0xe6>
 800967a:	06d0      	lsls	r0, r2, #27
 800967c:	bf44      	itt	mi
 800967e:	2320      	movmi	r3, #32
 8009680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009684:	0711      	lsls	r1, r2, #28
 8009686:	bf44      	itt	mi
 8009688:	232b      	movmi	r3, #43	; 0x2b
 800968a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800968e:	f89a 3000 	ldrb.w	r3, [sl]
 8009692:	2b2a      	cmp	r3, #42	; 0x2a
 8009694:	d015      	beq.n	80096c2 <_svfiprintf_r+0xf6>
 8009696:	9a07      	ldr	r2, [sp, #28]
 8009698:	4654      	mov	r4, sl
 800969a:	2000      	movs	r0, #0
 800969c:	f04f 0c0a 	mov.w	ip, #10
 80096a0:	4621      	mov	r1, r4
 80096a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a6:	3b30      	subs	r3, #48	; 0x30
 80096a8:	2b09      	cmp	r3, #9
 80096aa:	d94e      	bls.n	800974a <_svfiprintf_r+0x17e>
 80096ac:	b1b0      	cbz	r0, 80096dc <_svfiprintf_r+0x110>
 80096ae:	9207      	str	r2, [sp, #28]
 80096b0:	e014      	b.n	80096dc <_svfiprintf_r+0x110>
 80096b2:	eba0 0308 	sub.w	r3, r0, r8
 80096b6:	fa09 f303 	lsl.w	r3, r9, r3
 80096ba:	4313      	orrs	r3, r2
 80096bc:	9304      	str	r3, [sp, #16]
 80096be:	46a2      	mov	sl, r4
 80096c0:	e7d2      	b.n	8009668 <_svfiprintf_r+0x9c>
 80096c2:	9b03      	ldr	r3, [sp, #12]
 80096c4:	1d19      	adds	r1, r3, #4
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	9103      	str	r1, [sp, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfbb      	ittet	lt
 80096ce:	425b      	neglt	r3, r3
 80096d0:	f042 0202 	orrlt.w	r2, r2, #2
 80096d4:	9307      	strge	r3, [sp, #28]
 80096d6:	9307      	strlt	r3, [sp, #28]
 80096d8:	bfb8      	it	lt
 80096da:	9204      	strlt	r2, [sp, #16]
 80096dc:	7823      	ldrb	r3, [r4, #0]
 80096de:	2b2e      	cmp	r3, #46	; 0x2e
 80096e0:	d10c      	bne.n	80096fc <_svfiprintf_r+0x130>
 80096e2:	7863      	ldrb	r3, [r4, #1]
 80096e4:	2b2a      	cmp	r3, #42	; 0x2a
 80096e6:	d135      	bne.n	8009754 <_svfiprintf_r+0x188>
 80096e8:	9b03      	ldr	r3, [sp, #12]
 80096ea:	1d1a      	adds	r2, r3, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	9203      	str	r2, [sp, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	bfb8      	it	lt
 80096f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80096f8:	3402      	adds	r4, #2
 80096fa:	9305      	str	r3, [sp, #20]
 80096fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097c8 <_svfiprintf_r+0x1fc>
 8009700:	7821      	ldrb	r1, [r4, #0]
 8009702:	2203      	movs	r2, #3
 8009704:	4650      	mov	r0, sl
 8009706:	f7f6 fd6b 	bl	80001e0 <memchr>
 800970a:	b140      	cbz	r0, 800971e <_svfiprintf_r+0x152>
 800970c:	2340      	movs	r3, #64	; 0x40
 800970e:	eba0 000a 	sub.w	r0, r0, sl
 8009712:	fa03 f000 	lsl.w	r0, r3, r0
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	4303      	orrs	r3, r0
 800971a:	3401      	adds	r4, #1
 800971c:	9304      	str	r3, [sp, #16]
 800971e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009722:	4826      	ldr	r0, [pc, #152]	; (80097bc <_svfiprintf_r+0x1f0>)
 8009724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009728:	2206      	movs	r2, #6
 800972a:	f7f6 fd59 	bl	80001e0 <memchr>
 800972e:	2800      	cmp	r0, #0
 8009730:	d038      	beq.n	80097a4 <_svfiprintf_r+0x1d8>
 8009732:	4b23      	ldr	r3, [pc, #140]	; (80097c0 <_svfiprintf_r+0x1f4>)
 8009734:	bb1b      	cbnz	r3, 800977e <_svfiprintf_r+0x1b2>
 8009736:	9b03      	ldr	r3, [sp, #12]
 8009738:	3307      	adds	r3, #7
 800973a:	f023 0307 	bic.w	r3, r3, #7
 800973e:	3308      	adds	r3, #8
 8009740:	9303      	str	r3, [sp, #12]
 8009742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009744:	4433      	add	r3, r6
 8009746:	9309      	str	r3, [sp, #36]	; 0x24
 8009748:	e767      	b.n	800961a <_svfiprintf_r+0x4e>
 800974a:	fb0c 3202 	mla	r2, ip, r2, r3
 800974e:	460c      	mov	r4, r1
 8009750:	2001      	movs	r0, #1
 8009752:	e7a5      	b.n	80096a0 <_svfiprintf_r+0xd4>
 8009754:	2300      	movs	r3, #0
 8009756:	3401      	adds	r4, #1
 8009758:	9305      	str	r3, [sp, #20]
 800975a:	4619      	mov	r1, r3
 800975c:	f04f 0c0a 	mov.w	ip, #10
 8009760:	4620      	mov	r0, r4
 8009762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009766:	3a30      	subs	r2, #48	; 0x30
 8009768:	2a09      	cmp	r2, #9
 800976a:	d903      	bls.n	8009774 <_svfiprintf_r+0x1a8>
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0c5      	beq.n	80096fc <_svfiprintf_r+0x130>
 8009770:	9105      	str	r1, [sp, #20]
 8009772:	e7c3      	b.n	80096fc <_svfiprintf_r+0x130>
 8009774:	fb0c 2101 	mla	r1, ip, r1, r2
 8009778:	4604      	mov	r4, r0
 800977a:	2301      	movs	r3, #1
 800977c:	e7f0      	b.n	8009760 <_svfiprintf_r+0x194>
 800977e:	ab03      	add	r3, sp, #12
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	462a      	mov	r2, r5
 8009784:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <_svfiprintf_r+0x1f8>)
 8009786:	a904      	add	r1, sp, #16
 8009788:	4638      	mov	r0, r7
 800978a:	f3af 8000 	nop.w
 800978e:	1c42      	adds	r2, r0, #1
 8009790:	4606      	mov	r6, r0
 8009792:	d1d6      	bne.n	8009742 <_svfiprintf_r+0x176>
 8009794:	89ab      	ldrh	r3, [r5, #12]
 8009796:	065b      	lsls	r3, r3, #25
 8009798:	f53f af2c 	bmi.w	80095f4 <_svfiprintf_r+0x28>
 800979c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800979e:	b01d      	add	sp, #116	; 0x74
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	ab03      	add	r3, sp, #12
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	462a      	mov	r2, r5
 80097aa:	4b06      	ldr	r3, [pc, #24]	; (80097c4 <_svfiprintf_r+0x1f8>)
 80097ac:	a904      	add	r1, sp, #16
 80097ae:	4638      	mov	r0, r7
 80097b0:	f000 f9d4 	bl	8009b5c <_printf_i>
 80097b4:	e7eb      	b.n	800978e <_svfiprintf_r+0x1c2>
 80097b6:	bf00      	nop
 80097b8:	0802d7d4 	.word	0x0802d7d4
 80097bc:	0802d7de 	.word	0x0802d7de
 80097c0:	00000000 	.word	0x00000000
 80097c4:	08009515 	.word	0x08009515
 80097c8:	0802d7da 	.word	0x0802d7da

080097cc <__sfputc_r>:
 80097cc:	6893      	ldr	r3, [r2, #8]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	b410      	push	{r4}
 80097d4:	6093      	str	r3, [r2, #8]
 80097d6:	da08      	bge.n	80097ea <__sfputc_r+0x1e>
 80097d8:	6994      	ldr	r4, [r2, #24]
 80097da:	42a3      	cmp	r3, r4
 80097dc:	db01      	blt.n	80097e2 <__sfputc_r+0x16>
 80097de:	290a      	cmp	r1, #10
 80097e0:	d103      	bne.n	80097ea <__sfputc_r+0x1e>
 80097e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097e6:	f7ff bacd 	b.w	8008d84 <__swbuf_r>
 80097ea:	6813      	ldr	r3, [r2, #0]
 80097ec:	1c58      	adds	r0, r3, #1
 80097ee:	6010      	str	r0, [r2, #0]
 80097f0:	7019      	strb	r1, [r3, #0]
 80097f2:	4608      	mov	r0, r1
 80097f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <__sfputs_r>:
 80097fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097fc:	4606      	mov	r6, r0
 80097fe:	460f      	mov	r7, r1
 8009800:	4614      	mov	r4, r2
 8009802:	18d5      	adds	r5, r2, r3
 8009804:	42ac      	cmp	r4, r5
 8009806:	d101      	bne.n	800980c <__sfputs_r+0x12>
 8009808:	2000      	movs	r0, #0
 800980a:	e007      	b.n	800981c <__sfputs_r+0x22>
 800980c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009810:	463a      	mov	r2, r7
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ffda 	bl	80097cc <__sfputc_r>
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	d1f3      	bne.n	8009804 <__sfputs_r+0xa>
 800981c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009820 <_vfiprintf_r>:
 8009820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009824:	460d      	mov	r5, r1
 8009826:	b09d      	sub	sp, #116	; 0x74
 8009828:	4614      	mov	r4, r2
 800982a:	4698      	mov	r8, r3
 800982c:	4606      	mov	r6, r0
 800982e:	b118      	cbz	r0, 8009838 <_vfiprintf_r+0x18>
 8009830:	6983      	ldr	r3, [r0, #24]
 8009832:	b90b      	cbnz	r3, 8009838 <_vfiprintf_r+0x18>
 8009834:	f7ff fc80 	bl	8009138 <__sinit>
 8009838:	4b89      	ldr	r3, [pc, #548]	; (8009a60 <_vfiprintf_r+0x240>)
 800983a:	429d      	cmp	r5, r3
 800983c:	d11b      	bne.n	8009876 <_vfiprintf_r+0x56>
 800983e:	6875      	ldr	r5, [r6, #4]
 8009840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009842:	07d9      	lsls	r1, r3, #31
 8009844:	d405      	bmi.n	8009852 <_vfiprintf_r+0x32>
 8009846:	89ab      	ldrh	r3, [r5, #12]
 8009848:	059a      	lsls	r2, r3, #22
 800984a:	d402      	bmi.n	8009852 <_vfiprintf_r+0x32>
 800984c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800984e:	f7ff fd11 	bl	8009274 <__retarget_lock_acquire_recursive>
 8009852:	89ab      	ldrh	r3, [r5, #12]
 8009854:	071b      	lsls	r3, r3, #28
 8009856:	d501      	bpl.n	800985c <_vfiprintf_r+0x3c>
 8009858:	692b      	ldr	r3, [r5, #16]
 800985a:	b9eb      	cbnz	r3, 8009898 <_vfiprintf_r+0x78>
 800985c:	4629      	mov	r1, r5
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff fae2 	bl	8008e28 <__swsetup_r>
 8009864:	b1c0      	cbz	r0, 8009898 <_vfiprintf_r+0x78>
 8009866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009868:	07dc      	lsls	r4, r3, #31
 800986a:	d50e      	bpl.n	800988a <_vfiprintf_r+0x6a>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	b01d      	add	sp, #116	; 0x74
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	4b7b      	ldr	r3, [pc, #492]	; (8009a64 <_vfiprintf_r+0x244>)
 8009878:	429d      	cmp	r5, r3
 800987a:	d101      	bne.n	8009880 <_vfiprintf_r+0x60>
 800987c:	68b5      	ldr	r5, [r6, #8]
 800987e:	e7df      	b.n	8009840 <_vfiprintf_r+0x20>
 8009880:	4b79      	ldr	r3, [pc, #484]	; (8009a68 <_vfiprintf_r+0x248>)
 8009882:	429d      	cmp	r5, r3
 8009884:	bf08      	it	eq
 8009886:	68f5      	ldreq	r5, [r6, #12]
 8009888:	e7da      	b.n	8009840 <_vfiprintf_r+0x20>
 800988a:	89ab      	ldrh	r3, [r5, #12]
 800988c:	0598      	lsls	r0, r3, #22
 800988e:	d4ed      	bmi.n	800986c <_vfiprintf_r+0x4c>
 8009890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009892:	f7ff fcf0 	bl	8009276 <__retarget_lock_release_recursive>
 8009896:	e7e9      	b.n	800986c <_vfiprintf_r+0x4c>
 8009898:	2300      	movs	r3, #0
 800989a:	9309      	str	r3, [sp, #36]	; 0x24
 800989c:	2320      	movs	r3, #32
 800989e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80098a6:	2330      	movs	r3, #48	; 0x30
 80098a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a6c <_vfiprintf_r+0x24c>
 80098ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098b0:	f04f 0901 	mov.w	r9, #1
 80098b4:	4623      	mov	r3, r4
 80098b6:	469a      	mov	sl, r3
 80098b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098bc:	b10a      	cbz	r2, 80098c2 <_vfiprintf_r+0xa2>
 80098be:	2a25      	cmp	r2, #37	; 0x25
 80098c0:	d1f9      	bne.n	80098b6 <_vfiprintf_r+0x96>
 80098c2:	ebba 0b04 	subs.w	fp, sl, r4
 80098c6:	d00b      	beq.n	80098e0 <_vfiprintf_r+0xc0>
 80098c8:	465b      	mov	r3, fp
 80098ca:	4622      	mov	r2, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	4630      	mov	r0, r6
 80098d0:	f7ff ff93 	bl	80097fa <__sfputs_r>
 80098d4:	3001      	adds	r0, #1
 80098d6:	f000 80aa 	beq.w	8009a2e <_vfiprintf_r+0x20e>
 80098da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098dc:	445a      	add	r2, fp
 80098de:	9209      	str	r2, [sp, #36]	; 0x24
 80098e0:	f89a 3000 	ldrb.w	r3, [sl]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 80a2 	beq.w	8009a2e <_vfiprintf_r+0x20e>
 80098ea:	2300      	movs	r3, #0
 80098ec:	f04f 32ff 	mov.w	r2, #4294967295
 80098f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098f4:	f10a 0a01 	add.w	sl, sl, #1
 80098f8:	9304      	str	r3, [sp, #16]
 80098fa:	9307      	str	r3, [sp, #28]
 80098fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009900:	931a      	str	r3, [sp, #104]	; 0x68
 8009902:	4654      	mov	r4, sl
 8009904:	2205      	movs	r2, #5
 8009906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990a:	4858      	ldr	r0, [pc, #352]	; (8009a6c <_vfiprintf_r+0x24c>)
 800990c:	f7f6 fc68 	bl	80001e0 <memchr>
 8009910:	9a04      	ldr	r2, [sp, #16]
 8009912:	b9d8      	cbnz	r0, 800994c <_vfiprintf_r+0x12c>
 8009914:	06d1      	lsls	r1, r2, #27
 8009916:	bf44      	itt	mi
 8009918:	2320      	movmi	r3, #32
 800991a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800991e:	0713      	lsls	r3, r2, #28
 8009920:	bf44      	itt	mi
 8009922:	232b      	movmi	r3, #43	; 0x2b
 8009924:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009928:	f89a 3000 	ldrb.w	r3, [sl]
 800992c:	2b2a      	cmp	r3, #42	; 0x2a
 800992e:	d015      	beq.n	800995c <_vfiprintf_r+0x13c>
 8009930:	9a07      	ldr	r2, [sp, #28]
 8009932:	4654      	mov	r4, sl
 8009934:	2000      	movs	r0, #0
 8009936:	f04f 0c0a 	mov.w	ip, #10
 800993a:	4621      	mov	r1, r4
 800993c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009940:	3b30      	subs	r3, #48	; 0x30
 8009942:	2b09      	cmp	r3, #9
 8009944:	d94e      	bls.n	80099e4 <_vfiprintf_r+0x1c4>
 8009946:	b1b0      	cbz	r0, 8009976 <_vfiprintf_r+0x156>
 8009948:	9207      	str	r2, [sp, #28]
 800994a:	e014      	b.n	8009976 <_vfiprintf_r+0x156>
 800994c:	eba0 0308 	sub.w	r3, r0, r8
 8009950:	fa09 f303 	lsl.w	r3, r9, r3
 8009954:	4313      	orrs	r3, r2
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	46a2      	mov	sl, r4
 800995a:	e7d2      	b.n	8009902 <_vfiprintf_r+0xe2>
 800995c:	9b03      	ldr	r3, [sp, #12]
 800995e:	1d19      	adds	r1, r3, #4
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	9103      	str	r1, [sp, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	bfbb      	ittet	lt
 8009968:	425b      	neglt	r3, r3
 800996a:	f042 0202 	orrlt.w	r2, r2, #2
 800996e:	9307      	strge	r3, [sp, #28]
 8009970:	9307      	strlt	r3, [sp, #28]
 8009972:	bfb8      	it	lt
 8009974:	9204      	strlt	r2, [sp, #16]
 8009976:	7823      	ldrb	r3, [r4, #0]
 8009978:	2b2e      	cmp	r3, #46	; 0x2e
 800997a:	d10c      	bne.n	8009996 <_vfiprintf_r+0x176>
 800997c:	7863      	ldrb	r3, [r4, #1]
 800997e:	2b2a      	cmp	r3, #42	; 0x2a
 8009980:	d135      	bne.n	80099ee <_vfiprintf_r+0x1ce>
 8009982:	9b03      	ldr	r3, [sp, #12]
 8009984:	1d1a      	adds	r2, r3, #4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	9203      	str	r2, [sp, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bfb8      	it	lt
 800998e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009992:	3402      	adds	r4, #2
 8009994:	9305      	str	r3, [sp, #20]
 8009996:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a7c <_vfiprintf_r+0x25c>
 800999a:	7821      	ldrb	r1, [r4, #0]
 800999c:	2203      	movs	r2, #3
 800999e:	4650      	mov	r0, sl
 80099a0:	f7f6 fc1e 	bl	80001e0 <memchr>
 80099a4:	b140      	cbz	r0, 80099b8 <_vfiprintf_r+0x198>
 80099a6:	2340      	movs	r3, #64	; 0x40
 80099a8:	eba0 000a 	sub.w	r0, r0, sl
 80099ac:	fa03 f000 	lsl.w	r0, r3, r0
 80099b0:	9b04      	ldr	r3, [sp, #16]
 80099b2:	4303      	orrs	r3, r0
 80099b4:	3401      	adds	r4, #1
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099bc:	482c      	ldr	r0, [pc, #176]	; (8009a70 <_vfiprintf_r+0x250>)
 80099be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099c2:	2206      	movs	r2, #6
 80099c4:	f7f6 fc0c 	bl	80001e0 <memchr>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d03f      	beq.n	8009a4c <_vfiprintf_r+0x22c>
 80099cc:	4b29      	ldr	r3, [pc, #164]	; (8009a74 <_vfiprintf_r+0x254>)
 80099ce:	bb1b      	cbnz	r3, 8009a18 <_vfiprintf_r+0x1f8>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	3307      	adds	r3, #7
 80099d4:	f023 0307 	bic.w	r3, r3, #7
 80099d8:	3308      	adds	r3, #8
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099de:	443b      	add	r3, r7
 80099e0:	9309      	str	r3, [sp, #36]	; 0x24
 80099e2:	e767      	b.n	80098b4 <_vfiprintf_r+0x94>
 80099e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80099e8:	460c      	mov	r4, r1
 80099ea:	2001      	movs	r0, #1
 80099ec:	e7a5      	b.n	800993a <_vfiprintf_r+0x11a>
 80099ee:	2300      	movs	r3, #0
 80099f0:	3401      	adds	r4, #1
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	4619      	mov	r1, r3
 80099f6:	f04f 0c0a 	mov.w	ip, #10
 80099fa:	4620      	mov	r0, r4
 80099fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a00:	3a30      	subs	r2, #48	; 0x30
 8009a02:	2a09      	cmp	r2, #9
 8009a04:	d903      	bls.n	8009a0e <_vfiprintf_r+0x1ee>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d0c5      	beq.n	8009996 <_vfiprintf_r+0x176>
 8009a0a:	9105      	str	r1, [sp, #20]
 8009a0c:	e7c3      	b.n	8009996 <_vfiprintf_r+0x176>
 8009a0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a12:	4604      	mov	r4, r0
 8009a14:	2301      	movs	r3, #1
 8009a16:	e7f0      	b.n	80099fa <_vfiprintf_r+0x1da>
 8009a18:	ab03      	add	r3, sp, #12
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	4b16      	ldr	r3, [pc, #88]	; (8009a78 <_vfiprintf_r+0x258>)
 8009a20:	a904      	add	r1, sp, #16
 8009a22:	4630      	mov	r0, r6
 8009a24:	f3af 8000 	nop.w
 8009a28:	4607      	mov	r7, r0
 8009a2a:	1c78      	adds	r0, r7, #1
 8009a2c:	d1d6      	bne.n	80099dc <_vfiprintf_r+0x1bc>
 8009a2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a30:	07d9      	lsls	r1, r3, #31
 8009a32:	d405      	bmi.n	8009a40 <_vfiprintf_r+0x220>
 8009a34:	89ab      	ldrh	r3, [r5, #12]
 8009a36:	059a      	lsls	r2, r3, #22
 8009a38:	d402      	bmi.n	8009a40 <_vfiprintf_r+0x220>
 8009a3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a3c:	f7ff fc1b 	bl	8009276 <__retarget_lock_release_recursive>
 8009a40:	89ab      	ldrh	r3, [r5, #12]
 8009a42:	065b      	lsls	r3, r3, #25
 8009a44:	f53f af12 	bmi.w	800986c <_vfiprintf_r+0x4c>
 8009a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a4a:	e711      	b.n	8009870 <_vfiprintf_r+0x50>
 8009a4c:	ab03      	add	r3, sp, #12
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	462a      	mov	r2, r5
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <_vfiprintf_r+0x258>)
 8009a54:	a904      	add	r1, sp, #16
 8009a56:	4630      	mov	r0, r6
 8009a58:	f000 f880 	bl	8009b5c <_printf_i>
 8009a5c:	e7e4      	b.n	8009a28 <_vfiprintf_r+0x208>
 8009a5e:	bf00      	nop
 8009a60:	0802d794 	.word	0x0802d794
 8009a64:	0802d7b4 	.word	0x0802d7b4
 8009a68:	0802d774 	.word	0x0802d774
 8009a6c:	0802d7d4 	.word	0x0802d7d4
 8009a70:	0802d7de 	.word	0x0802d7de
 8009a74:	00000000 	.word	0x00000000
 8009a78:	080097fb 	.word	0x080097fb
 8009a7c:	0802d7da 	.word	0x0802d7da

08009a80 <_printf_common>:
 8009a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	4616      	mov	r6, r2
 8009a86:	4699      	mov	r9, r3
 8009a88:	688a      	ldr	r2, [r1, #8]
 8009a8a:	690b      	ldr	r3, [r1, #16]
 8009a8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a90:	4293      	cmp	r3, r2
 8009a92:	bfb8      	it	lt
 8009a94:	4613      	movlt	r3, r2
 8009a96:	6033      	str	r3, [r6, #0]
 8009a98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	b10a      	cbz	r2, 8009aa6 <_printf_common+0x26>
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	6033      	str	r3, [r6, #0]
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	0699      	lsls	r1, r3, #26
 8009aaa:	bf42      	ittt	mi
 8009aac:	6833      	ldrmi	r3, [r6, #0]
 8009aae:	3302      	addmi	r3, #2
 8009ab0:	6033      	strmi	r3, [r6, #0]
 8009ab2:	6825      	ldr	r5, [r4, #0]
 8009ab4:	f015 0506 	ands.w	r5, r5, #6
 8009ab8:	d106      	bne.n	8009ac8 <_printf_common+0x48>
 8009aba:	f104 0a19 	add.w	sl, r4, #25
 8009abe:	68e3      	ldr	r3, [r4, #12]
 8009ac0:	6832      	ldr	r2, [r6, #0]
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	42ab      	cmp	r3, r5
 8009ac6:	dc26      	bgt.n	8009b16 <_printf_common+0x96>
 8009ac8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009acc:	1e13      	subs	r3, r2, #0
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	bf18      	it	ne
 8009ad2:	2301      	movne	r3, #1
 8009ad4:	0692      	lsls	r2, r2, #26
 8009ad6:	d42b      	bmi.n	8009b30 <_printf_common+0xb0>
 8009ad8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009adc:	4649      	mov	r1, r9
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c0      	blx	r8
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d01e      	beq.n	8009b24 <_printf_common+0xa4>
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	68e5      	ldr	r5, [r4, #12]
 8009aea:	6832      	ldr	r2, [r6, #0]
 8009aec:	f003 0306 	and.w	r3, r3, #6
 8009af0:	2b04      	cmp	r3, #4
 8009af2:	bf08      	it	eq
 8009af4:	1aad      	subeq	r5, r5, r2
 8009af6:	68a3      	ldr	r3, [r4, #8]
 8009af8:	6922      	ldr	r2, [r4, #16]
 8009afa:	bf0c      	ite	eq
 8009afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b00:	2500      	movne	r5, #0
 8009b02:	4293      	cmp	r3, r2
 8009b04:	bfc4      	itt	gt
 8009b06:	1a9b      	subgt	r3, r3, r2
 8009b08:	18ed      	addgt	r5, r5, r3
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	341a      	adds	r4, #26
 8009b0e:	42b5      	cmp	r5, r6
 8009b10:	d11a      	bne.n	8009b48 <_printf_common+0xc8>
 8009b12:	2000      	movs	r0, #0
 8009b14:	e008      	b.n	8009b28 <_printf_common+0xa8>
 8009b16:	2301      	movs	r3, #1
 8009b18:	4652      	mov	r2, sl
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	47c0      	blx	r8
 8009b20:	3001      	adds	r0, #1
 8009b22:	d103      	bne.n	8009b2c <_printf_common+0xac>
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b2c:	3501      	adds	r5, #1
 8009b2e:	e7c6      	b.n	8009abe <_printf_common+0x3e>
 8009b30:	18e1      	adds	r1, r4, r3
 8009b32:	1c5a      	adds	r2, r3, #1
 8009b34:	2030      	movs	r0, #48	; 0x30
 8009b36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b3a:	4422      	add	r2, r4
 8009b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b44:	3302      	adds	r3, #2
 8009b46:	e7c7      	b.n	8009ad8 <_printf_common+0x58>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	4638      	mov	r0, r7
 8009b50:	47c0      	blx	r8
 8009b52:	3001      	adds	r0, #1
 8009b54:	d0e6      	beq.n	8009b24 <_printf_common+0xa4>
 8009b56:	3601      	adds	r6, #1
 8009b58:	e7d9      	b.n	8009b0e <_printf_common+0x8e>
	...

08009b5c <_printf_i>:
 8009b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b60:	7e0f      	ldrb	r7, [r1, #24]
 8009b62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b64:	2f78      	cmp	r7, #120	; 0x78
 8009b66:	4691      	mov	r9, r2
 8009b68:	4680      	mov	r8, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	469a      	mov	sl, r3
 8009b6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b72:	d807      	bhi.n	8009b84 <_printf_i+0x28>
 8009b74:	2f62      	cmp	r7, #98	; 0x62
 8009b76:	d80a      	bhi.n	8009b8e <_printf_i+0x32>
 8009b78:	2f00      	cmp	r7, #0
 8009b7a:	f000 80d8 	beq.w	8009d2e <_printf_i+0x1d2>
 8009b7e:	2f58      	cmp	r7, #88	; 0x58
 8009b80:	f000 80a3 	beq.w	8009cca <_printf_i+0x16e>
 8009b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b8c:	e03a      	b.n	8009c04 <_printf_i+0xa8>
 8009b8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b92:	2b15      	cmp	r3, #21
 8009b94:	d8f6      	bhi.n	8009b84 <_printf_i+0x28>
 8009b96:	a101      	add	r1, pc, #4	; (adr r1, 8009b9c <_printf_i+0x40>)
 8009b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b9c:	08009bf5 	.word	0x08009bf5
 8009ba0:	08009c09 	.word	0x08009c09
 8009ba4:	08009b85 	.word	0x08009b85
 8009ba8:	08009b85 	.word	0x08009b85
 8009bac:	08009b85 	.word	0x08009b85
 8009bb0:	08009b85 	.word	0x08009b85
 8009bb4:	08009c09 	.word	0x08009c09
 8009bb8:	08009b85 	.word	0x08009b85
 8009bbc:	08009b85 	.word	0x08009b85
 8009bc0:	08009b85 	.word	0x08009b85
 8009bc4:	08009b85 	.word	0x08009b85
 8009bc8:	08009d15 	.word	0x08009d15
 8009bcc:	08009c39 	.word	0x08009c39
 8009bd0:	08009cf7 	.word	0x08009cf7
 8009bd4:	08009b85 	.word	0x08009b85
 8009bd8:	08009b85 	.word	0x08009b85
 8009bdc:	08009d37 	.word	0x08009d37
 8009be0:	08009b85 	.word	0x08009b85
 8009be4:	08009c39 	.word	0x08009c39
 8009be8:	08009b85 	.word	0x08009b85
 8009bec:	08009b85 	.word	0x08009b85
 8009bf0:	08009cff 	.word	0x08009cff
 8009bf4:	682b      	ldr	r3, [r5, #0]
 8009bf6:	1d1a      	adds	r2, r3, #4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	602a      	str	r2, [r5, #0]
 8009bfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c04:	2301      	movs	r3, #1
 8009c06:	e0a3      	b.n	8009d50 <_printf_i+0x1f4>
 8009c08:	6820      	ldr	r0, [r4, #0]
 8009c0a:	6829      	ldr	r1, [r5, #0]
 8009c0c:	0606      	lsls	r6, r0, #24
 8009c0e:	f101 0304 	add.w	r3, r1, #4
 8009c12:	d50a      	bpl.n	8009c2a <_printf_i+0xce>
 8009c14:	680e      	ldr	r6, [r1, #0]
 8009c16:	602b      	str	r3, [r5, #0]
 8009c18:	2e00      	cmp	r6, #0
 8009c1a:	da03      	bge.n	8009c24 <_printf_i+0xc8>
 8009c1c:	232d      	movs	r3, #45	; 0x2d
 8009c1e:	4276      	negs	r6, r6
 8009c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c24:	485e      	ldr	r0, [pc, #376]	; (8009da0 <_printf_i+0x244>)
 8009c26:	230a      	movs	r3, #10
 8009c28:	e019      	b.n	8009c5e <_printf_i+0x102>
 8009c2a:	680e      	ldr	r6, [r1, #0]
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c32:	bf18      	it	ne
 8009c34:	b236      	sxthne	r6, r6
 8009c36:	e7ef      	b.n	8009c18 <_printf_i+0xbc>
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	6820      	ldr	r0, [r4, #0]
 8009c3c:	1d19      	adds	r1, r3, #4
 8009c3e:	6029      	str	r1, [r5, #0]
 8009c40:	0601      	lsls	r1, r0, #24
 8009c42:	d501      	bpl.n	8009c48 <_printf_i+0xec>
 8009c44:	681e      	ldr	r6, [r3, #0]
 8009c46:	e002      	b.n	8009c4e <_printf_i+0xf2>
 8009c48:	0646      	lsls	r6, r0, #25
 8009c4a:	d5fb      	bpl.n	8009c44 <_printf_i+0xe8>
 8009c4c:	881e      	ldrh	r6, [r3, #0]
 8009c4e:	4854      	ldr	r0, [pc, #336]	; (8009da0 <_printf_i+0x244>)
 8009c50:	2f6f      	cmp	r7, #111	; 0x6f
 8009c52:	bf0c      	ite	eq
 8009c54:	2308      	moveq	r3, #8
 8009c56:	230a      	movne	r3, #10
 8009c58:	2100      	movs	r1, #0
 8009c5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c5e:	6865      	ldr	r5, [r4, #4]
 8009c60:	60a5      	str	r5, [r4, #8]
 8009c62:	2d00      	cmp	r5, #0
 8009c64:	bfa2      	ittt	ge
 8009c66:	6821      	ldrge	r1, [r4, #0]
 8009c68:	f021 0104 	bicge.w	r1, r1, #4
 8009c6c:	6021      	strge	r1, [r4, #0]
 8009c6e:	b90e      	cbnz	r6, 8009c74 <_printf_i+0x118>
 8009c70:	2d00      	cmp	r5, #0
 8009c72:	d04d      	beq.n	8009d10 <_printf_i+0x1b4>
 8009c74:	4615      	mov	r5, r2
 8009c76:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c7a:	fb03 6711 	mls	r7, r3, r1, r6
 8009c7e:	5dc7      	ldrb	r7, [r0, r7]
 8009c80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c84:	4637      	mov	r7, r6
 8009c86:	42bb      	cmp	r3, r7
 8009c88:	460e      	mov	r6, r1
 8009c8a:	d9f4      	bls.n	8009c76 <_printf_i+0x11a>
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d10b      	bne.n	8009ca8 <_printf_i+0x14c>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	07de      	lsls	r6, r3, #31
 8009c94:	d508      	bpl.n	8009ca8 <_printf_i+0x14c>
 8009c96:	6923      	ldr	r3, [r4, #16]
 8009c98:	6861      	ldr	r1, [r4, #4]
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	bfde      	ittt	le
 8009c9e:	2330      	movle	r3, #48	; 0x30
 8009ca0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ca4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ca8:	1b52      	subs	r2, r2, r5
 8009caa:	6122      	str	r2, [r4, #16]
 8009cac:	f8cd a000 	str.w	sl, [sp]
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	aa03      	add	r2, sp, #12
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4640      	mov	r0, r8
 8009cb8:	f7ff fee2 	bl	8009a80 <_printf_common>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	d14c      	bne.n	8009d5a <_printf_i+0x1fe>
 8009cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc4:	b004      	add	sp, #16
 8009cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cca:	4835      	ldr	r0, [pc, #212]	; (8009da0 <_printf_i+0x244>)
 8009ccc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cd0:	6829      	ldr	r1, [r5, #0]
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009cd8:	6029      	str	r1, [r5, #0]
 8009cda:	061d      	lsls	r5, r3, #24
 8009cdc:	d514      	bpl.n	8009d08 <_printf_i+0x1ac>
 8009cde:	07df      	lsls	r7, r3, #31
 8009ce0:	bf44      	itt	mi
 8009ce2:	f043 0320 	orrmi.w	r3, r3, #32
 8009ce6:	6023      	strmi	r3, [r4, #0]
 8009ce8:	b91e      	cbnz	r6, 8009cf2 <_printf_i+0x196>
 8009cea:	6823      	ldr	r3, [r4, #0]
 8009cec:	f023 0320 	bic.w	r3, r3, #32
 8009cf0:	6023      	str	r3, [r4, #0]
 8009cf2:	2310      	movs	r3, #16
 8009cf4:	e7b0      	b.n	8009c58 <_printf_i+0xfc>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	f043 0320 	orr.w	r3, r3, #32
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	2378      	movs	r3, #120	; 0x78
 8009d00:	4828      	ldr	r0, [pc, #160]	; (8009da4 <_printf_i+0x248>)
 8009d02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d06:	e7e3      	b.n	8009cd0 <_printf_i+0x174>
 8009d08:	0659      	lsls	r1, r3, #25
 8009d0a:	bf48      	it	mi
 8009d0c:	b2b6      	uxthmi	r6, r6
 8009d0e:	e7e6      	b.n	8009cde <_printf_i+0x182>
 8009d10:	4615      	mov	r5, r2
 8009d12:	e7bb      	b.n	8009c8c <_printf_i+0x130>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	6826      	ldr	r6, [r4, #0]
 8009d18:	6961      	ldr	r1, [r4, #20]
 8009d1a:	1d18      	adds	r0, r3, #4
 8009d1c:	6028      	str	r0, [r5, #0]
 8009d1e:	0635      	lsls	r5, r6, #24
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	d501      	bpl.n	8009d28 <_printf_i+0x1cc>
 8009d24:	6019      	str	r1, [r3, #0]
 8009d26:	e002      	b.n	8009d2e <_printf_i+0x1d2>
 8009d28:	0670      	lsls	r0, r6, #25
 8009d2a:	d5fb      	bpl.n	8009d24 <_printf_i+0x1c8>
 8009d2c:	8019      	strh	r1, [r3, #0]
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	4615      	mov	r5, r2
 8009d34:	e7ba      	b.n	8009cac <_printf_i+0x150>
 8009d36:	682b      	ldr	r3, [r5, #0]
 8009d38:	1d1a      	adds	r2, r3, #4
 8009d3a:	602a      	str	r2, [r5, #0]
 8009d3c:	681d      	ldr	r5, [r3, #0]
 8009d3e:	6862      	ldr	r2, [r4, #4]
 8009d40:	2100      	movs	r1, #0
 8009d42:	4628      	mov	r0, r5
 8009d44:	f7f6 fa4c 	bl	80001e0 <memchr>
 8009d48:	b108      	cbz	r0, 8009d4e <_printf_i+0x1f2>
 8009d4a:	1b40      	subs	r0, r0, r5
 8009d4c:	6060      	str	r0, [r4, #4]
 8009d4e:	6863      	ldr	r3, [r4, #4]
 8009d50:	6123      	str	r3, [r4, #16]
 8009d52:	2300      	movs	r3, #0
 8009d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d58:	e7a8      	b.n	8009cac <_printf_i+0x150>
 8009d5a:	6923      	ldr	r3, [r4, #16]
 8009d5c:	462a      	mov	r2, r5
 8009d5e:	4649      	mov	r1, r9
 8009d60:	4640      	mov	r0, r8
 8009d62:	47d0      	blx	sl
 8009d64:	3001      	adds	r0, #1
 8009d66:	d0ab      	beq.n	8009cc0 <_printf_i+0x164>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	079b      	lsls	r3, r3, #30
 8009d6c:	d413      	bmi.n	8009d96 <_printf_i+0x23a>
 8009d6e:	68e0      	ldr	r0, [r4, #12]
 8009d70:	9b03      	ldr	r3, [sp, #12]
 8009d72:	4298      	cmp	r0, r3
 8009d74:	bfb8      	it	lt
 8009d76:	4618      	movlt	r0, r3
 8009d78:	e7a4      	b.n	8009cc4 <_printf_i+0x168>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4632      	mov	r2, r6
 8009d7e:	4649      	mov	r1, r9
 8009d80:	4640      	mov	r0, r8
 8009d82:	47d0      	blx	sl
 8009d84:	3001      	adds	r0, #1
 8009d86:	d09b      	beq.n	8009cc0 <_printf_i+0x164>
 8009d88:	3501      	adds	r5, #1
 8009d8a:	68e3      	ldr	r3, [r4, #12]
 8009d8c:	9903      	ldr	r1, [sp, #12]
 8009d8e:	1a5b      	subs	r3, r3, r1
 8009d90:	42ab      	cmp	r3, r5
 8009d92:	dcf2      	bgt.n	8009d7a <_printf_i+0x21e>
 8009d94:	e7eb      	b.n	8009d6e <_printf_i+0x212>
 8009d96:	2500      	movs	r5, #0
 8009d98:	f104 0619 	add.w	r6, r4, #25
 8009d9c:	e7f5      	b.n	8009d8a <_printf_i+0x22e>
 8009d9e:	bf00      	nop
 8009da0:	0802d7e5 	.word	0x0802d7e5
 8009da4:	0802d7f6 	.word	0x0802d7f6

08009da8 <_sbrk_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d06      	ldr	r5, [pc, #24]	; (8009dc4 <_sbrk_r+0x1c>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f000 f912 	bl	8009fdc <_sbrk>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_sbrk_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_sbrk_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	200008d0 	.word	0x200008d0

08009dc8 <__sread>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	460c      	mov	r4, r1
 8009dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd0:	f000 f8ea 	bl	8009fa8 <_read_r>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	bfab      	itete	ge
 8009dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dda:	89a3      	ldrhlt	r3, [r4, #12]
 8009ddc:	181b      	addge	r3, r3, r0
 8009dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009de2:	bfac      	ite	ge
 8009de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009de6:	81a3      	strhlt	r3, [r4, #12]
 8009de8:	bd10      	pop	{r4, pc}

08009dea <__swrite>:
 8009dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	461f      	mov	r7, r3
 8009df0:	898b      	ldrh	r3, [r1, #12]
 8009df2:	05db      	lsls	r3, r3, #23
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	4616      	mov	r6, r2
 8009dfa:	d505      	bpl.n	8009e08 <__swrite+0x1e>
 8009dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e00:	2302      	movs	r3, #2
 8009e02:	2200      	movs	r2, #0
 8009e04:	f000 f868 	bl	8009ed8 <_lseek_r>
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e12:	81a3      	strh	r3, [r4, #12]
 8009e14:	4632      	mov	r2, r6
 8009e16:	463b      	mov	r3, r7
 8009e18:	4628      	mov	r0, r5
 8009e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	f000 b817 	b.w	8009e50 <_write_r>

08009e22 <__sseek>:
 8009e22:	b510      	push	{r4, lr}
 8009e24:	460c      	mov	r4, r1
 8009e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2a:	f000 f855 	bl	8009ed8 <_lseek_r>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	bf15      	itete	ne
 8009e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e3e:	81a3      	strheq	r3, [r4, #12]
 8009e40:	bf18      	it	ne
 8009e42:	81a3      	strhne	r3, [r4, #12]
 8009e44:	bd10      	pop	{r4, pc}

08009e46 <__sclose>:
 8009e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4a:	f000 b813 	b.w	8009e74 <_close_r>
	...

08009e50 <_write_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d07      	ldr	r5, [pc, #28]	; (8009e70 <_write_r+0x20>)
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	602a      	str	r2, [r5, #0]
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f7f8 f820 	bl	8001ea4 <_write>
 8009e64:	1c43      	adds	r3, r0, #1
 8009e66:	d102      	bne.n	8009e6e <_write_r+0x1e>
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	b103      	cbz	r3, 8009e6e <_write_r+0x1e>
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	bd38      	pop	{r3, r4, r5, pc}
 8009e70:	200008d0 	.word	0x200008d0

08009e74 <_close_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	4d06      	ldr	r5, [pc, #24]	; (8009e90 <_close_r+0x1c>)
 8009e78:	2300      	movs	r3, #0
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	4608      	mov	r0, r1
 8009e7e:	602b      	str	r3, [r5, #0]
 8009e80:	f7f8 f81e 	bl	8001ec0 <_close>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_close_r+0x1a>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_close_r+0x1a>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	200008d0 	.word	0x200008d0

08009e94 <_fstat_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d07      	ldr	r5, [pc, #28]	; (8009eb4 <_fstat_r+0x20>)
 8009e98:	2300      	movs	r3, #0
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	4608      	mov	r0, r1
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	f7f8 f811 	bl	8001ec8 <_fstat>
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	d102      	bne.n	8009eb0 <_fstat_r+0x1c>
 8009eaa:	682b      	ldr	r3, [r5, #0]
 8009eac:	b103      	cbz	r3, 8009eb0 <_fstat_r+0x1c>
 8009eae:	6023      	str	r3, [r4, #0]
 8009eb0:	bd38      	pop	{r3, r4, r5, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200008d0 	.word	0x200008d0

08009eb8 <_isatty_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d06      	ldr	r5, [pc, #24]	; (8009ed4 <_isatty_r+0x1c>)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	f7f8 f806 	bl	8001ed4 <_isatty>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_isatty_r+0x1a>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_isatty_r+0x1a>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	200008d0 	.word	0x200008d0

08009ed8 <_lseek_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_lseek_r+0x20>)
 8009edc:	4604      	mov	r4, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f7f7 fff6 	bl	8001ed8 <_lseek>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_lseek_r+0x1e>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_lseek_r+0x1e>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	200008d0 	.word	0x200008d0

08009efc <memmove>:
 8009efc:	4288      	cmp	r0, r1
 8009efe:	b510      	push	{r4, lr}
 8009f00:	eb01 0402 	add.w	r4, r1, r2
 8009f04:	d902      	bls.n	8009f0c <memmove+0x10>
 8009f06:	4284      	cmp	r4, r0
 8009f08:	4623      	mov	r3, r4
 8009f0a:	d807      	bhi.n	8009f1c <memmove+0x20>
 8009f0c:	1e43      	subs	r3, r0, #1
 8009f0e:	42a1      	cmp	r1, r4
 8009f10:	d008      	beq.n	8009f24 <memmove+0x28>
 8009f12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f1a:	e7f8      	b.n	8009f0e <memmove+0x12>
 8009f1c:	4402      	add	r2, r0
 8009f1e:	4601      	mov	r1, r0
 8009f20:	428a      	cmp	r2, r1
 8009f22:	d100      	bne.n	8009f26 <memmove+0x2a>
 8009f24:	bd10      	pop	{r4, pc}
 8009f26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f2e:	e7f7      	b.n	8009f20 <memmove+0x24>

08009f30 <__malloc_lock>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__malloc_lock+0x8>)
 8009f32:	f7ff b99f 	b.w	8009274 <__retarget_lock_acquire_recursive>
 8009f36:	bf00      	nop
 8009f38:	200008c4 	.word	0x200008c4

08009f3c <__malloc_unlock>:
 8009f3c:	4801      	ldr	r0, [pc, #4]	; (8009f44 <__malloc_unlock+0x8>)
 8009f3e:	f7ff b99a 	b.w	8009276 <__retarget_lock_release_recursive>
 8009f42:	bf00      	nop
 8009f44:	200008c4 	.word	0x200008c4

08009f48 <_realloc_r>:
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4614      	mov	r4, r2
 8009f50:	460e      	mov	r6, r1
 8009f52:	b921      	cbnz	r1, 8009f5e <_realloc_r+0x16>
 8009f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f58:	4611      	mov	r1, r2
 8009f5a:	f7ff ba67 	b.w	800942c <_malloc_r>
 8009f5e:	b92a      	cbnz	r2, 8009f6c <_realloc_r+0x24>
 8009f60:	f7ff f9f8 	bl	8009354 <_free_r>
 8009f64:	4625      	mov	r5, r4
 8009f66:	4628      	mov	r0, r5
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	f000 f82e 	bl	8009fcc <_malloc_usable_size_r>
 8009f70:	4284      	cmp	r4, r0
 8009f72:	4607      	mov	r7, r0
 8009f74:	d802      	bhi.n	8009f7c <_realloc_r+0x34>
 8009f76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f7a:	d812      	bhi.n	8009fa2 <_realloc_r+0x5a>
 8009f7c:	4621      	mov	r1, r4
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f7ff fa54 	bl	800942c <_malloc_r>
 8009f84:	4605      	mov	r5, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0ed      	beq.n	8009f66 <_realloc_r+0x1e>
 8009f8a:	42bc      	cmp	r4, r7
 8009f8c:	4622      	mov	r2, r4
 8009f8e:	4631      	mov	r1, r6
 8009f90:	bf28      	it	cs
 8009f92:	463a      	movcs	r2, r7
 8009f94:	f7fe fd64 	bl	8008a60 <memcpy>
 8009f98:	4631      	mov	r1, r6
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f7ff f9da 	bl	8009354 <_free_r>
 8009fa0:	e7e1      	b.n	8009f66 <_realloc_r+0x1e>
 8009fa2:	4635      	mov	r5, r6
 8009fa4:	e7df      	b.n	8009f66 <_realloc_r+0x1e>
	...

08009fa8 <_read_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4d07      	ldr	r5, [pc, #28]	; (8009fc8 <_read_r+0x20>)
 8009fac:	4604      	mov	r4, r0
 8009fae:	4608      	mov	r0, r1
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	602a      	str	r2, [r5, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f7f7 ff66 	bl	8001e88 <_read>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_read_r+0x1e>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_read_r+0x1e>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	200008d0 	.word	0x200008d0

08009fcc <_malloc_usable_size_r>:
 8009fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd0:	1f18      	subs	r0, r3, #4
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	bfbc      	itt	lt
 8009fd6:	580b      	ldrlt	r3, [r1, r0]
 8009fd8:	18c0      	addlt	r0, r0, r3
 8009fda:	4770      	bx	lr

08009fdc <_sbrk>:
 8009fdc:	4a04      	ldr	r2, [pc, #16]	; (8009ff0 <_sbrk+0x14>)
 8009fde:	6811      	ldr	r1, [r2, #0]
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	b909      	cbnz	r1, 8009fe8 <_sbrk+0xc>
 8009fe4:	4903      	ldr	r1, [pc, #12]	; (8009ff4 <_sbrk+0x18>)
 8009fe6:	6011      	str	r1, [r2, #0]
 8009fe8:	6810      	ldr	r0, [r2, #0]
 8009fea:	4403      	add	r3, r0
 8009fec:	6013      	str	r3, [r2, #0]
 8009fee:	4770      	bx	lr
 8009ff0:	200008d4 	.word	0x200008d4
 8009ff4:	200008d8 	.word	0x200008d8

08009ff8 <_init>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	bf00      	nop
 8009ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffe:	bc08      	pop	{r3}
 800a000:	469e      	mov	lr, r3
 800a002:	4770      	bx	lr

0800a004 <_fini>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	bf00      	nop
 800a008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00a:	bc08      	pop	{r3}
 800a00c:	469e      	mov	lr, r3
 800a00e:	4770      	bx	lr
