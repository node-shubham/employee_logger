
AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008088  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800848c  0800848c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008494  08008494  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800849c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bd7c  2000007c  08008518  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bdf8  08008518  0002bdf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9b8  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a66  00000000  00000000  0003ba64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  0003f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e8  00000000  00000000  00040c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b57c  00000000  00000000  00042250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad37  00000000  00000000  0005d7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1d07  00000000  00000000  00078503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a20a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ad8  00000000  00000000  0011a25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008210 	.word	0x08008210

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08008210 	.word	0x08008210

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2000b818 	.word	0x2000b818
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <TIM5_IRQHandler>:
	HAL_IncTick();
}
*/

void TIM5_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&tim5);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <TIM5_IRQHandler+0x10>)
 800062a:	f002 fa3d 	bl	8002aa8 <HAL_TIM_IRQHandler>

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000018c 	.word	0x2000018c

08000638 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void)	// Timebase source
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim11);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800063e:	f002 fa33 	bl	8002aa8 <HAL_TIM_IRQHandler>

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200001fc 	.word	0x200001fc

0800064c <rfid_handler>:
{
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

static void rfid_handler(void * param)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	while(1)
	{
		rfid_read();
 8000654:	f000 fa14 	bl	8000a80 <rfid_read>
		SEGGER_SYSVIEW_PrintfTarget("RFID Read");
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <rfid_handler+0x1c>)
 800065a:	f005 ffb7 	bl	80065cc <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800065e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000662:	f003 f9b1 	bl	80039c8 <vTaskDelay>
		rfid_read();
 8000666:	e7f5      	b.n	8000654 <rfid_handler+0x8>
 8000668:	08008228 	.word	0x08008228

0800066c <display_handler>:
	}
}
static void display_handler(void * param)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	while(1)
	{
		read_touch();
 8000674:	f000 f9ec 	bl	8000a50 <read_touch>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <display_handler+0x28>)
 800067e:	f000 ff14 	bl	80014aa <HAL_GPIO_TogglePin>
		SEGGER_SYSVIEW_PrintfTarget("Toggle Blue LED");
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <display_handler+0x2c>)
 8000684:	f005 ffa2 	bl	80065cc <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelay(pdMS_TO_TICKS(300));
 8000688:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800068c:	f003 f99c 	bl	80039c8 <vTaskDelay>
		read_touch();
 8000690:	e7f0      	b.n	8000674 <display_handler+0x8>
 8000692:	bf00      	nop
 8000694:	40020800 	.word	0x40020800
 8000698:	08008234 	.word	0x08008234

0800069c <main>:

	}
}

int main()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af02      	add	r7, sp, #8
	HAL_Init();
 80006a2:	f000 fc1d 	bl	8000ee0 <HAL_Init>
	sysclock_config();
 80006a6:	f000 f85f 	bl	8000768 <sysclock_config>

	gpio_init();
 80006aa:	f000 f8a9 	bl	8000800 <gpio_init>
	uart_init();
 80006ae:	f000 f92d 	bl	800090c <uart_init>
	spi1_init();
 80006b2:	f000 f957 	bl	8000964 <spi1_init>
	spi2_init();
 80006b6:	f000 f985 	bl	80009c4 <spi2_init>
	//i2c2_init();
	//tim5_init();

	rc522_init();
 80006ba:	f006 fa7d 	bl	8006bb8 <rc522_init>

#if (SSD1963_DISPLAY)
	/* Display & touch Init */

	ssd1963_setup();
 80006be:	f006 fb85 	bl	8006dcc <ssd1963_setup>
	XPT2046_Init();
 80006c2:	f006 fd29 	bl	8007118 <XPT2046_Init>

#if (DEBUG_UART)
	HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
#endif

	DWT_CTRL |= (1<<0);
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <main+0xac>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a1f      	ldr	r2, [pc, #124]	; (8000748 <main+0xac>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6013      	str	r3, [r2, #0]
	//SEGGER_SYSVIEW_Conf();
	//SEGGER_SYSVIEW_Start();	 /* disable this while continuous recording*/

	status=xTaskCreate(rfid_handler,"RFID TASK", 200, NULL, 2, &rfid_handle);
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <main+0xb0>)
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2302      	movs	r3, #2
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2300      	movs	r3, #0
 80006dc:	22c8      	movs	r2, #200	; 0xc8
 80006de:	491c      	ldr	r1, [pc, #112]	; (8000750 <main+0xb4>)
 80006e0:	481c      	ldr	r0, [pc, #112]	; (8000754 <main+0xb8>)
 80006e2:	f002 fff7 	bl	80036d4 <xTaskCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <main+0xbc>)
 80006ea:	6013      	str	r3, [r2, #0]
	configASSERT(status ==pdPASS);
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <main+0xbc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d00a      	beq.n	800070a <main+0x6e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <main+0x6c>

	status=xTaskCreate(display_handler,"DISPLAY TASK", 200, NULL, 2, &display_handle);
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <main+0xc0>)
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2302      	movs	r3, #2
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	22c8      	movs	r2, #200	; 0xc8
 8000716:	4912      	ldr	r1, [pc, #72]	; (8000760 <main+0xc4>)
 8000718:	4812      	ldr	r0, [pc, #72]	; (8000764 <main+0xc8>)
 800071a:	f002 ffdb 	bl	80036d4 <xTaskCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <main+0xbc>)
 8000722:	6013      	str	r3, [r2, #0]
	configASSERT(status ==pdPASS);
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <main+0xbc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d00a      	beq.n	8000742 <main+0xa6>
        __asm volatile
 800072c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000730:	f383 8811 	msr	BASEPRI, r3
 8000734:	f3bf 8f6f 	isb	sy
 8000738:	f3bf 8f4f 	dsb	sy
 800073c:	603b      	str	r3, [r7, #0]
    }
 800073e:	bf00      	nop
 8000740:	e7fe      	b.n	8000740 <main+0xa4>

	vTaskStartScheduler();
 8000742:	f003 f979 	bl	8003a38 <vTaskStartScheduler>

	while(1)
 8000746:	e7fe      	b.n	8000746 <main+0xaa>
 8000748:	e0001000 	.word	0xe0001000
 800074c:	200001f4 	.word	0x200001f4
 8000750:	08008244 	.word	0x08008244
 8000754:	0800064d 	.word	0x0800064d
 8000758:	200001f0 	.word	0x200001f0
 800075c:	200001f8 	.word	0x200001f8
 8000760:	08008250 	.word	0x08008250
 8000764:	0800066d 	.word	0x0800066d

08000768 <sysclock_config>:

	return 0;
}

void sysclock_config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b092      	sub	sp, #72	; 0x48
 800076c:	af00      	add	r7, sp, #0
		printf("clock config failed\n\r");
	}

#elif defined(SYSCLK_PLL_84MHZ)

	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	61bb      	str	r3, [r7, #24]
	osc.HSEState = RCC_HSE_ON;
 8000772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000776:	61fb      	str	r3, [r7, #28]

	osc.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000778:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
	osc.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
	osc.PLL.PLLM = 25;
 8000782:	2319      	movs	r3, #25
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
	osc.PLL.PLLN = 168;
 8000786:	23a8      	movs	r3, #168	; 0xa8
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
	osc.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	643b      	str	r3, [r7, #64]	; 0x40

	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 800078e:	f107 0318 	add.w	r3, r7, #24
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fea4 	bl	80014e0 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d002      	beq.n	80007a4 <sysclock_config+0x3c>
	{
		printf("PLL Init failed\n\r");
 800079e:	4814      	ldr	r0, [pc, #80]	; (80007f0 <sysclock_config+0x88>)
 80007a0:	f006 fd36 	bl	8007210 <iprintf>
	}

	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
	clock.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
	clock.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	clock.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	613b      	str	r3, [r7, #16]
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]


	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_2)!=HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f906 	bl	80019d0 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <sysclock_config+0x68>
	{
		printf("clock config failed\n\r");
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <sysclock_config+0x8c>)
 80007cc:	f006 fd20 	bl	8007210 <iprintf>
#else
	printf("No clock source selected !! HSI Running by default\n\r");
#endif

	//uint32_t freq=HAL_RCC_GetSysClockFreq();
	freq=HAL_RCC_GetSysClockFreq();
 80007d0:	f001 f9e4 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 80007d4:	4603      	mov	r3, r0
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <sysclock_config+0x90>)
 80007d8:	6013      	str	r3, [r2, #0]
	printf("Sysclock frequency : %lu \r\n",freq);
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <sysclock_config+0x90>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4619      	mov	r1, r3
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <sysclock_config+0x94>)
 80007e2:	f006 fd15 	bl	8007210 <iprintf>
}
 80007e6:	bf00      	nop
 80007e8:	3748      	adds	r7, #72	; 0x48
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08008260 	.word	0x08008260
 80007f4:	08008274 	.word	0x08008274
 80007f8:	200001d4 	.word	0x200001d4
 80007fc:	0800828c 	.word	0x0800828c

08000800 <gpio_init>:


void gpio_init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b092      	sub	sp, #72	; 0x48
 8000804:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b3c      	ldr	r3, [pc, #240]	; (80008fc <gpio_init+0xfc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3b      	ldr	r2, [pc, #236]	; (80008fc <gpio_init+0xfc>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b39      	ldr	r3, [pc, #228]	; (80008fc <gpio_init+0xfc>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <gpio_init+0xfc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a34      	ldr	r2, [pc, #208]	; (80008fc <gpio_init+0xfc>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b32      	ldr	r3, [pc, #200]	; (80008fc <gpio_init+0xfc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <gpio_init+0xfc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a2d      	ldr	r2, [pc, #180]	; (80008fc <gpio_init+0xfc>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <gpio_init+0xfc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

#if (SSD1963_DISPLAY)


	GPIO_InitTypeDef SSD_DATA_PINS ={0};
 800085a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]

	SSD_DATA_PINS.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 \
 800086a:	23ff      	movs	r3, #255	; 0xff
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
						| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;

	SSD_DATA_PINS.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
	SSD_DATA_PINS.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	63fb      	str	r3, [r7, #60]	; 0x3c
	SSD_DATA_PINS.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 800087a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800087e:	4619      	mov	r1, r3
 8000880:	481f      	ldr	r0, [pc, #124]	; (8000900 <gpio_init+0x100>)
 8000882:	f000 fc75 	bl	8001170 <HAL_GPIO_Init>

	GPIO_InitTypeDef SSD_CTRL_PINS ={0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 8000896:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800089a:	623b      	str	r3, [r7, #32]

	SSD_CTRL_PINS.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
	SSD_CTRL_PINS.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
	SSD_CTRL_PINS.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4619      	mov	r1, r3
 80008ae:	4815      	ldr	r0, [pc, #84]	; (8000904 <gpio_init+0x104>)
 80008b0:	f000 fc5e 	bl	8001170 <HAL_GPIO_Init>

	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 ;
 80008b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008b8:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	4619      	mov	r1, r3
 80008c0:	4811      	ldr	r0, [pc, #68]	; (8000908 <gpio_init+0x108>)
 80008c2:	f000 fc55 	bl	8001170 <HAL_GPIO_Init>
#endif


#if 1
	GPIO_InitTypeDef RFID_SPI ={0};
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]
	RFID_SPI.Pin = (GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2) ;
 80008d6:	2307      	movs	r3, #7
 80008d8:	60fb      	str	r3, [r7, #12]
	RFID_SPI.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
	RFID_SPI.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
	RFID_SPI.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOB, &RFID_SPI);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <gpio_init+0x108>)
 80008ee:	f000 fc3f 	bl	8001170 <HAL_GPIO_Init>
	LED.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOC, &LED);
#endif

}
 80008f2:	bf00      	nop
 80008f4:	3748      	adds	r7, #72	; 0x48
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800
 8000908:	40020400 	.word	0x40020400

0800090c <uart_init>:


void uart_init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	uart1.Instance = USART1;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <uart_init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <uart_init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
	uart1.Init.BaudRate =9600;
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <uart_init+0x4c>)
 8000918:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800091c:	605a      	str	r2, [r3, #4]
	uart1.Init.Parity=UART_PARITY_NONE;
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <uart_init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
	uart1.Init.Mode =UART_MODE_TX_RX;
 8000924:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <uart_init+0x4c>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
	uart1.Init.StopBits= UART_STOPBITS_1;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <uart_init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
	uart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <uart_init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
	uart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <uart_init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
	uart1.Init.OverSampling= UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <uart_init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&uart1)!= HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <uart_init+0x4c>)
 8000944:	f002 fa74 	bl	8002e30 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d002      	beq.n	8000954 <uart_init+0x48>
	{
		printf("Uart 1 Init Failed\r\n");
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <uart_init+0x54>)
 8000950:	f006 fce4 	bl	800731c <puts>
	}
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000098 	.word	0x20000098
 800095c:	40011000 	.word	0x40011000
 8000960:	080082a8 	.word	0x080082a8

08000964 <spi1_init>:
	}
}


void spi1_init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	spi1.Instance = SPI1;
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <spi1_init+0x54>)
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <spi1_init+0x58>)
 800096c:	601a      	str	r2, [r3, #0]
	spi1.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <spi1_init+0x54>)
 8000970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000974:	605a      	str	r2, [r3, #4]
	spi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <spi1_init+0x54>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
	spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <spi1_init+0x54>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
	spi1.Init.DataSize = SPI_DATASIZE_8BIT ;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <spi1_init+0x54>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
	spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <spi1_init+0x54>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
	spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <spi1_init+0x54>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
	spi1.Init.NSS = SPI_NSS_SOFT ;
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <spi1_init+0x54>)
 8000996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099a:	619a      	str	r2, [r3, #24]
	spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <spi1_init+0x54>)
 800099e:	2210      	movs	r2, #16
 80009a0:	61da      	str	r2, [r3, #28]


	if(HAL_SPI_Init(&spi1) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <spi1_init+0x54>)
 80009a4:	f001 fa26 	bl	8001df4 <HAL_SPI_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d002      	beq.n	80009b4 <spi1_init+0x50>
	{
		printf("SPI1 Init Failed\r\n");
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <spi1_init+0x5c>)
 80009b0:	f006 fcb4 	bl	800731c <puts>
	}

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200000dc 	.word	0x200000dc
 80009bc:	40013000 	.word	0x40013000
 80009c0:	080082d8 	.word	0x080082d8

080009c4 <spi2_init>:

void spi2_init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

	spi2.Instance = SPI2;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <spi2_init+0x5c>)
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <spi2_init+0x60>)
 80009cc:	601a      	str	r2, [r3, #0]
	spi2.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <spi2_init+0x5c>)
 80009d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d4:	605a      	str	r2, [r3, #4]
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <spi2_init+0x5c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <spi2_init+0x5c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
	spi2.Init.DataSize = SPI_DATASIZE_8BIT ;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <spi2_init+0x5c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <spi2_init+0x5c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
	spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <spi2_init+0x5c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
	spi2.Init.NSS = SPI_NSS_HARD_OUTPUT ;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <spi2_init+0x5c>)
 80009f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009fa:	619a      	str	r2, [r3, #24]
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <spi2_init+0x5c>)
 80009fe:	2210      	movs	r2, #16
 8000a00:	61da      	str	r2, [r3, #28]
	spi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <spi2_init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_SPI_Init(&spi2) != HAL_OK)
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <spi2_init+0x5c>)
 8000a0a:	f001 f9f3 	bl	8001df4 <HAL_SPI_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <spi2_init+0x56>
	{
		printf("SPI2 Init Failed\r\n");
 8000a14:	4804      	ldr	r0, [pc, #16]	; (8000a28 <spi2_init+0x64>)
 8000a16:	f006 fc81 	bl	800731c <puts>
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000134 	.word	0x20000134
 8000a24:	40003800 	.word	0x40003800
 8000a28:	080082ec 	.word	0x080082ec

08000a2c <HAL_TIM_PeriodElapsedCallback>:
		printf("I2C2 Init Failed\r\n");
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM11)	/* TimeBase for HAL Layer */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000a3e:	f000 fa71 	bl	8000f24 <HAL_IncTick>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
#endif
	}


}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40014800 	.word	0x40014800

08000a50 <read_touch>:
 * @ret:	None
 * @arg: 	None
 */

static void read_touch(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	g_pos_x = getX()+12;	// calibration
 8000a54:	f006 fb36 	bl	80070c4 <getX>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	330c      	adds	r3, #12
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <read_touch+0x28>)
 8000a60:	801a      	strh	r2, [r3, #0]
	g_pos_y = 470-getY();
 8000a62:	f006 fb44 	bl	80070ee <getY>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <read_touch+0x2c>)
 8000a70:	801a      	strh	r2, [r3, #0]

	/*
	while(!(TIM5->SR & TIM_SR_UIF)){}; 		// delay from time base
	TIM5->SR = 0;
	*/
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000244 	.word	0x20000244
 8000a7c:	20000246 	.word	0x20000246

08000a80 <rfid_read>:


void rfid_read(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	if(rc522_checkCard(rfid_id))
 8000a84:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <rfid_read+0x44>)
 8000a86:	f005 fee0 	bl	800684a <rc522_checkCard>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d016      	beq.n	8000abe <rfid_read+0x3e>
		{
			memset(data,0,sizeof(data));
 8000a90:	2214      	movs	r2, #20
 8000a92:	2100      	movs	r1, #0
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <rfid_read+0x48>)
 8000a96:	f006 fbb3 	bl	8007200 <memset>
#if (DEBUG_UART)
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
			HAL_UART_Transmit(&uart1,(uint8_t *)data,sizeof(data),1000);
#endif
			if(1==check_validcard())
 8000a9a:	f006 f8bd 	bl	8006c18 <check_validcard>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d10c      	bne.n	8000abe <rfid_read+0x3e>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <rfid_read+0x4c>)
 8000aaa:	f000 fce5 	bl	8001478 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	; 0x64
 8000ab0:	f000 fa58 	bl	8000f64 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <rfid_read+0x4c>)
 8000aba:	f000 fcdd 	bl	8001478 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
#endif
			}
		}

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200001d8 	.word	0x200001d8
 8000ac8:	200001dc 	.word	0x200001dc
 8000acc:	40020400 	.word	0x40020400

08000ad0 <HAL_MspInit>:

extern SPI_HandleTypeDef spi2;
extern TIM_HandleTypeDef tim5;

void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();		// exti line controller clock
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();			// pwr  controller clcok
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x4c>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	; 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;

	if(huart->Instance == USART1)		/* currently using for debugging */
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_UART_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d134      	bne.n	8000b9c <HAL_UART_MspInit+0x7c>
	{
		// enable the peripheral clock
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_USART1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0310 	orr.w	r3, r3, #16
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f003 0310 	and.w	r3, r3, #16
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]

		gpio_uart.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000b6a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b6e:	617b      	str	r3, [r7, #20]
		gpio_uart.Mode 	=GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
		gpio_uart.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
		gpio_uart.Alternate = GPIO_AF7_USART1;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24

		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_UART_MspInit+0x8c>)
 8000b88:	f000 faf2 	bl	8001170 <HAL_GPIO_Init>

		// enable NVIC irq line
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b8c:	2025      	movs	r0, #37	; 0x25
 8000b8e:	f000 fae1 	bl	8001154 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	210f      	movs	r1, #15
 8000b96:	2025      	movs	r0, #37	; 0x25
 8000b98:	f000 fac0 	bl	800111c <HAL_NVIC_SetPriority>
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40011000 	.word	0x40011000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef spi_pins;

	if(hspi->Instance == SPI1)		/* using in RFID */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a30      	ldr	r2, [pc, #192]	; (8000c80 <HAL_SPI_MspInit+0xd0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d129      	bne.n	8000c16 <HAL_SPI_MspInit+0x66>
	{
		__HAL_RCC_SPI1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	4b2f      	ldr	r3, [pc, #188]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a2e      	ldr	r2, [pc, #184]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bda:	61bb      	str	r3, [r7, #24]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697b      	ldr	r3, [r7, #20]

		spi_pins.Pin = (GPIO_PIN_3 | GPIO_PIN_4 |GPIO_PIN_5);
 8000bfa:	2338      	movs	r3, #56	; 0x38
 8000bfc:	61fb      	str	r3, [r7, #28]
		spi_pins.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
		spi_pins.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
		spi_pins.Alternate = GPIO_AF5_SPI1;
 8000c06:	2305      	movs	r3, #5
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_GPIO_Init(GPIOB, &spi_pins);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481d      	ldr	r0, [pc, #116]	; (8000c88 <HAL_SPI_MspInit+0xd8>)
 8000c12:	f000 faad 	bl	8001170 <HAL_GPIO_Init>
	}

	if(hspi->Instance == SPI2)		/* using in touch  */
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	; (8000c8c <HAL_SPI_MspInit+0xdc>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d12a      	bne.n	8000c76 <HAL_SPI_MspInit+0xc6>
	{
		__HAL_RCC_SPI2_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c28:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_SPI_MspInit+0xd4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

		spi_pins.Pin = (GPIO_PIN_12 | GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8000c58:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c5c:	61fb      	str	r3, [r7, #28]
		spi_pins.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
		spi_pins.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
		spi_pins.Alternate = GPIO_AF5_SPI2;
 8000c66:	2305      	movs	r3, #5
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_GPIO_Init(GPIOB, &spi_pins);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <HAL_SPI_MspInit+0xd8>)
 8000c72:	f000 fa7d 	bl	8001170 <HAL_GPIO_Init>
	}

}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	; 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40003800 	.word	0x40003800

08000c90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)		/* 100ms - TimeBase */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <HAL_TIM_Base_MspInit+0x48>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d115      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x3e>
	{
		__HAL_RCC_TIM5_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_TIM_Base_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_TIM_Base_MspInit+0x4c>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_Base_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	2032      	movs	r0, #50	; 0x32
 8000cc4:	f000 fa2a 	bl	800111c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000cc8:	2032      	movs	r0, #50	; 0x32
 8000cca:	f000 fa43 	bl	8001154 <HAL_NVIC_EnableIRQ>

	}

}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40000c00 	.word	0x40000c00
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08c      	sub	sp, #48	; 0x30
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	; (8000db0 <HAL_InitTick+0xd0>)
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf8:	4a2d      	ldr	r2, [pc, #180]	; (8000db0 <HAL_InitTick+0xd0>)
 8000cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8000d00:	4b2b      	ldr	r3, [pc, #172]	; (8000db0 <HAL_InitTick+0xd0>)
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 f83a 	bl	8001d90 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d1c:	f001 f824 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8000d20:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d24:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <HAL_InitTick+0xd4>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	0c9b      	lsrs	r3, r3, #18
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d32:	4a22      	ldr	r2, [pc, #136]	; (8000dbc <HAL_InitTick+0xdc>)
 8000d34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d3c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000d3e:	4a1e      	ldr	r2, [pc, #120]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000d44:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4a:	4b1b      	ldr	r3, [pc, #108]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000d56:	4818      	ldr	r0, [pc, #96]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d58:	f001 fdf4 	bl	8002944 <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d11b      	bne.n	8000da2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000d6a:	4813      	ldr	r0, [pc, #76]	; (8000db8 <HAL_InitTick+0xd8>)
 8000d6c:	f001 fe3a 	bl	80029e4 <HAL_TIM_Base_Start_IT>
 8000d70:	4603      	mov	r3, r0
 8000d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d111      	bne.n	8000da2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d7e:	201a      	movs	r0, #26
 8000d80:	f000 f9e8 	bl	8001154 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b0f      	cmp	r3, #15
 8000d88:	d808      	bhi.n	8000d9c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	201a      	movs	r0, #26
 8000d90:	f000 f9c4 	bl	800111c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0xe0>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e002      	b.n	8000da2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3730      	adds	r7, #48	; 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	431bde83 	.word	0x431bde83
 8000db8:	200001fc 	.word	0x200001fc
 8000dbc:	40014800 	.word	0x40014800
 8000dc0:	20000008 	.word	0x20000008

08000dc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	f3af 8000 	nop.w
 8000dda:	4601      	mov	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	605a      	str	r2, [r3, #4]
  return 0;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_isatty>:

int _isatty(int file)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
	...

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb6:	f7ff ffd7 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f006 f95f 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fbed 	bl	800069c <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ed0:	0800849c 	.word	0x0800849c
  ldr r2, =_sbss
 8000ed4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ed8:	2000bdf8 	.word	0x2000bdf8

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f8fc 	bl	8001106 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f7ff fee6 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fddc 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	2000000c 	.word	0x2000000c
 8000f48:	20000248 	.word	0x20000248

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000248 	.word	0x20000248

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000000c 	.word	0x2000000c

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff4c 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112e:	f7ff ff61 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff ffb1 	bl	80010a0 <NVIC_EncodePriority>
 800113e:	4602      	mov	r2, r0
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff80 	bl	800104c <__NVIC_SetPriority>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff54 	bl	8001010 <__NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e159      	b.n	8001440 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 8148 	bne.w	800143a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80a2 	beq.w	800143a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_GPIO_Init+0x2e8>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a56      	ldr	r2, [pc, #344]	; (8001458 <HAL_GPIO_Init+0x2e8>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b54      	ldr	r3, [pc, #336]	; (8001458 <HAL_GPIO_Init+0x2e8>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a52      	ldr	r2, [pc, #328]	; (800145c <HAL_GPIO_Init+0x2ec>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a49      	ldr	r2, [pc, #292]	; (8001460 <HAL_GPIO_Init+0x2f0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x202>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a48      	ldr	r2, [pc, #288]	; (8001464 <HAL_GPIO_Init+0x2f4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x1fe>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a47      	ldr	r2, [pc, #284]	; (8001468 <HAL_GPIO_Init+0x2f8>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x1fa>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a46      	ldr	r2, [pc, #280]	; (800146c <HAL_GPIO_Init+0x2fc>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x1f6>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a45      	ldr	r2, [pc, #276]	; (8001470 <HAL_GPIO_Init+0x300>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x1f2>
 800135e:	2304      	movs	r3, #4
 8001360:	e008      	b.n	8001374 <HAL_GPIO_Init+0x204>
 8001362:	2307      	movs	r3, #7
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x204>
 8001366:	2303      	movs	r3, #3
 8001368:	e004      	b.n	8001374 <HAL_GPIO_Init+0x204>
 800136a:	2302      	movs	r3, #2
 800136c:	e002      	b.n	8001374 <HAL_GPIO_Init+0x204>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x204>
 8001372:	2300      	movs	r3, #0
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f002 0203 	and.w	r2, r2, #3
 800137a:	0092      	lsls	r2, r2, #2
 800137c:	4093      	lsls	r3, r2
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001384:	4935      	ldr	r1, [pc, #212]	; (800145c <HAL_GPIO_Init+0x2ec>)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <HAL_GPIO_Init+0x304>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b6:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <HAL_GPIO_Init+0x304>)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_GPIO_Init+0x304>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e0:	4a24      	ldr	r2, [pc, #144]	; (8001474 <HAL_GPIO_Init+0x304>)
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <HAL_GPIO_Init+0x304>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140a:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <HAL_GPIO_Init+0x304>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_GPIO_Init+0x304>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001434:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_GPIO_Init+0x304>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	f67f aea2 	bls.w	800118c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800
 800145c:	40013800 	.word	0x40013800
 8001460:	40020000 	.word	0x40020000
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00
 8001470:	40021000 	.word	0x40021000
 8001474:	40013c00 	.word	0x40013c00

08001478 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	460b      	mov	r3, r1
 80014b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014bc:	887a      	ldrh	r2, [r7, #2]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4013      	ands	r3, r2
 80014c2:	041a      	lsls	r2, r3, #16
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	400b      	ands	r3, r1
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e267      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d075      	beq.n	80015ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fe:	4b88      	ldr	r3, [pc, #544]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b04      	cmp	r3, #4
 8001508:	d00c      	beq.n	8001524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150a:	4b85      	ldr	r3, [pc, #532]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001512:	2b08      	cmp	r3, #8
 8001514:	d112      	bne.n	800153c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001516:	4b82      	ldr	r3, [pc, #520]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800151e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001522:	d10b      	bne.n	800153c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	4b7e      	ldr	r3, [pc, #504]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d05b      	beq.n	80015e8 <HAL_RCC_OscConfig+0x108>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d157      	bne.n	80015e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e242      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001544:	d106      	bne.n	8001554 <HAL_RCC_OscConfig+0x74>
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a75      	ldr	r2, [pc, #468]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e01d      	b.n	8001590 <HAL_RCC_OscConfig+0xb0>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x98>
 800155e:	4b70      	ldr	r3, [pc, #448]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6f      	ldr	r2, [pc, #444]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6c      	ldr	r2, [pc, #432]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e00b      	b.n	8001590 <HAL_RCC_OscConfig+0xb0>
 8001578:	4b69      	ldr	r3, [pc, #420]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a68      	ldr	r2, [pc, #416]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b66      	ldr	r3, [pc, #408]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a65      	ldr	r2, [pc, #404]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fcd8 	bl	8000f4c <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fcd4 	bl	8000f4c <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e207      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	4b5b      	ldr	r3, [pc, #364]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0xc0>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fcc4 	bl	8000f4c <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fcc0 	bl	8000f4c <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e1f3      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	4b51      	ldr	r3, [pc, #324]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0xe8>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d063      	beq.n	80016be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800160a:	2b08      	cmp	r3, #8
 800160c:	d11c      	bne.n	8001648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b44      	ldr	r3, [pc, #272]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d116      	bne.n	8001648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_RCC_OscConfig+0x152>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d001      	beq.n	8001632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e1c7      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4937      	ldr	r1, [pc, #220]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	e03a      	b.n	80016be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_RCC_OscConfig+0x244>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001656:	f7ff fc79 	bl	8000f4c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff fc75 	bl	8000f4c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1a8      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b28      	ldr	r3, [pc, #160]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4925      	ldr	r1, [pc, #148]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	e015      	b.n	80016be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_RCC_OscConfig+0x244>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff fc58 	bl	8000f4c <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff fc54 	bl	8000f4c <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e187      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b2:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d036      	beq.n	8001738 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d016      	beq.n	8001700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_RCC_OscConfig+0x248>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fc38 	bl	8000f4c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff fc34 	bl	8000f4c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e167      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_OscConfig+0x240>)
 80016f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f0      	beq.n	80016e0 <HAL_RCC_OscConfig+0x200>
 80016fe:	e01b      	b.n	8001738 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_OscConfig+0x248>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff fc21 	bl	8000f4c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	e00e      	b.n	800172c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fc1d 	bl	8000f4c <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d907      	bls.n	800172c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e150      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
 8001720:	40023800 	.word	0x40023800
 8001724:	42470000 	.word	0x42470000
 8001728:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1ea      	bne.n	800170e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8097 	beq.w	8001874 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b81      	ldr	r3, [pc, #516]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b7d      	ldr	r3, [pc, #500]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a7c      	ldr	r2, [pc, #496]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	4b77      	ldr	r3, [pc, #476]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d118      	bne.n	80017b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001782:	4b74      	ldr	r3, [pc, #464]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a73      	ldr	r2, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178e:	f7ff fbdd 	bl	8000f4c <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001796:	f7ff fbd9 	bl	8000f4c <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e10c      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x474>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x2ea>
 80017bc:	4b64      	ldr	r3, [pc, #400]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a63      	ldr	r2, [pc, #396]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	e01c      	b.n	8001804 <HAL_RCC_OscConfig+0x324>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x30c>
 80017d2:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	4a5e      	ldr	r2, [pc, #376]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70
 80017de:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e2:	4a5b      	ldr	r2, [pc, #364]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0x324>
 80017ec:	4b58      	ldr	r3, [pc, #352]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a57      	ldr	r2, [pc, #348]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
 80017f8:	4b55      	ldr	r3, [pc, #340]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	4a54      	ldr	r2, [pc, #336]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 0304 	bic.w	r3, r3, #4
 8001802:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d015      	beq.n	8001838 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180c:	f7ff fb9e 	bl	8000f4c <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001814:	f7ff fb9a 	bl	8000f4c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0cb      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182a:	4b49      	ldr	r3, [pc, #292]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0ee      	beq.n	8001814 <HAL_RCC_OscConfig+0x334>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff fb88 	bl	8000f4c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff fb84 	bl	8000f4c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	; 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0b5      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001856:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1ee      	bne.n	8001840 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001868:	4b39      	ldr	r3, [pc, #228]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a38      	ldr	r2, [pc, #224]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800186e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 80a1 	beq.w	80019c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187e:	4b34      	ldr	r3, [pc, #208]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b08      	cmp	r3, #8
 8001888:	d05c      	beq.n	8001944 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d141      	bne.n	8001916 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_RCC_OscConfig+0x478>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fb58 	bl	8000f4c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a0:	f7ff fb54 	bl	8000f4c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e087      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	085b      	lsrs	r3, r3, #1
 80018d6:	3b01      	subs	r3, #1
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	061b      	lsls	r3, r3, #24
 80018e2:	491b      	ldr	r1, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_RCC_OscConfig+0x478>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fb2d 	bl	8000f4c <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff fb29 	bl	8000f4c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e05c      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x416>
 8001914:	e054      	b.n	80019c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_RCC_OscConfig+0x478>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fb16 	bl	8000f4c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001924:	f7ff fb12 	bl	8000f4c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e045      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <HAL_RCC_OscConfig+0x470>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_OscConfig+0x444>
 8001942:	e03d      	b.n	80019c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e038      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000
 8001958:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x4ec>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d028      	beq.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d121      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d11a      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800198c:	4013      	ands	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001992:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001994:	4293      	cmp	r3, r2
 8001996:	d111      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	085b      	lsrs	r3, r3, #1
 80019a4:	3b01      	subs	r3, #1
 80019a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d107      	bne.n	80019bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3718      	adds	r7, #24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0cc      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d90c      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b65      	ldr	r3, [pc, #404]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0b8      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a58      	ldr	r2, [pc, #352]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a52      	ldr	r2, [pc, #328]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	494d      	ldr	r1, [pc, #308]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d044      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d119      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e07f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e06f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e067      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f023 0203 	bic.w	r2, r3, #3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4934      	ldr	r1, [pc, #208]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac0:	f7ff fa44 	bl	8000f4c <HAL_GetTick>
 8001ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7ff fa40 	bl	8000f4c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e04f      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 020c 	and.w	r2, r3, #12
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d1eb      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d20c      	bcs.n	8001b18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b22      	ldr	r3, [pc, #136]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e032      	b.n	8001b7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4916      	ldr	r1, [pc, #88]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d009      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	490e      	ldr	r1, [pc, #56]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b56:	f000 f821 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	091b      	lsrs	r3, r3, #4
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	490a      	ldr	r1, [pc, #40]	; (8001b90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	5ccb      	ldrb	r3, [r1, r3]
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8b2 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	080083ac 	.word	0x080083ac
 8001b94:	20000004 	.word	0x20000004
 8001b98:	20000008 	.word	0x20000008

08001b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba0:	b090      	sub	sp, #64	; 0x40
 8001ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bac:	2300      	movs	r3, #0
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 030c 	and.w	r3, r3, #12
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d00d      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x40>
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	f200 80a1 	bhi.w	8001d08 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d003      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bce:	e09b      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001bd4:	e09b      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bd6:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bda:	e098      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bdc:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be6:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	099b      	lsrs	r3, r3, #6
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	623b      	str	r3, [r7, #32]
 8001bfc:	627a      	str	r2, [r7, #36]	; 0x24
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c04:	2100      	movs	r1, #0
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c08:	fb03 f201 	mul.w	r2, r3, r1
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	fb00 f303 	mul.w	r3, r0, r3
 8001c12:	4413      	add	r3, r2
 8001c14:	4a43      	ldr	r2, [pc, #268]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c16:	fba0 1202 	umull	r1, r2, r0, r2
 8001c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	4413      	add	r3, r2
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61bb      	str	r3, [r7, #24]
 8001c2c:	61fa      	str	r2, [r7, #28]
 8001c2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c36:	f7fe fb73 	bl	8000320 <__aeabi_uldivmod>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4613      	mov	r3, r2
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c42:	e053      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	099b      	lsrs	r3, r3, #6
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	617a      	str	r2, [r7, #20]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c56:	f04f 0b00 	mov.w	fp, #0
 8001c5a:	4652      	mov	r2, sl
 8001c5c:	465b      	mov	r3, fp
 8001c5e:	f04f 0000 	mov.w	r0, #0
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	0159      	lsls	r1, r3, #5
 8001c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c6c:	0150      	lsls	r0, r2, #5
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	ebb2 080a 	subs.w	r8, r2, sl
 8001c76:	eb63 090b 	sbc.w	r9, r3, fp
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c8e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c92:	eb63 0509 	sbc.w	r5, r3, r9
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	00eb      	lsls	r3, r5, #3
 8001ca0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ca4:	00e2      	lsls	r2, r4, #3
 8001ca6:	4614      	mov	r4, r2
 8001ca8:	461d      	mov	r5, r3
 8001caa:	eb14 030a 	adds.w	r3, r4, sl
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	eb45 030b 	adc.w	r3, r5, fp
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	028b      	lsls	r3, r1, #10
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ccc:	4621      	mov	r1, r4
 8001cce:	028a      	lsls	r2, r1, #10
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	60fa      	str	r2, [r7, #12]
 8001cdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ce0:	f7fe fb1e 	bl	8000320 <__aeabi_uldivmod>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4613      	mov	r3, r2
 8001cea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3740      	adds	r7, #64	; 0x40
 8001d14:	46bd      	mov	sp, r7
 8001d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	00f42400 	.word	0x00f42400
 8001d24:	017d7840 	.word	0x017d7840

08001d28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000004 	.word	0x20000004

08001d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d44:	f7ff fff0 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0a9b      	lsrs	r3, r3, #10
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4903      	ldr	r1, [pc, #12]	; (8001d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	080083bc 	.word	0x080083bc

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d6c:	f7ff ffdc 	bl	8001d28 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0b5b      	lsrs	r3, r3, #13
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4903      	ldr	r1, [pc, #12]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	080083bc 	.word	0x080083bc

08001d90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	08db      	lsrs	r3, r3, #3
 8001dca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <HAL_RCC_GetClockConfig+0x60>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0207 	and.w	r2, r3, #7
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07b      	b.n	8001efe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d108      	bne.n	8001e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e16:	d009      	beq.n	8001e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
 8001e1e:	e005      	b.n	8001e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe feb2 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb0:	ea42 0103 	orr.w	r1, r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	f003 0104 	and.w	r1, r3, #4
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	f003 0210 	and.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b088      	sub	sp, #32
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4613      	mov	r3, r2
 8001f14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_SPI_Transmit+0x22>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e126      	b.n	8002176 <HAL_SPI_Transmit+0x270>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f30:	f7ff f80c 	bl	8000f4c <HAL_GetTick>
 8001f34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d002      	beq.n	8001f4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
 8001f48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f4a:	e10b      	b.n	8002164 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_SPI_Transmit+0x52>
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d102      	bne.n	8001f5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f5c:	e102      	b.n	8002164 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2203      	movs	r2, #3
 8001f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	88fa      	ldrh	r2, [r7, #6]
 8001f76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	88fa      	ldrh	r2, [r7, #6]
 8001f7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd0:	2b40      	cmp	r3, #64	; 0x40
 8001fd2:	d007      	beq.n	8001fe4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fe2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fec:	d14b      	bne.n	8002086 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_Transmit+0xf6>
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d13e      	bne.n	800207a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	881a      	ldrh	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	1c9a      	adds	r2, r3, #2
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002020:	e02b      	b.n	800207a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d112      	bne.n	8002056 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	1c9a      	adds	r2, r3, #2
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36
 8002054:	e011      	b.n	800207a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002056:	f7fe ff79 	bl	8000f4c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d803      	bhi.n	800206e <HAL_SPI_Transmit+0x168>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d102      	bne.n	8002074 <HAL_SPI_Transmit+0x16e>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002078:	e074      	b.n	8002164 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ce      	bne.n	8002022 <HAL_SPI_Transmit+0x11c>
 8002084:	e04c      	b.n	8002120 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_SPI_Transmit+0x18e>
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d140      	bne.n	8002116 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020ba:	e02c      	b.n	8002116 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d113      	bne.n	80020f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	330c      	adds	r3, #12
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80020f0:	e011      	b.n	8002116 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f2:	f7fe ff2b 	bl	8000f4c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d803      	bhi.n	800210a <HAL_SPI_Transmit+0x204>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d102      	bne.n	8002110 <HAL_SPI_Transmit+0x20a>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002114:	e026      	b.n	8002164 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1cd      	bne.n	80020bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	6839      	ldr	r1, [r7, #0]
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 fbcb 	bl	80028c0 <SPI_EndRxTxTransaction>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	77fb      	strb	r3, [r7, #31]
 8002160:	e000      	b.n	8002164 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002162:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002174:	7ffb      	ldrb	r3, [r7, #31]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b088      	sub	sp, #32
 8002182:	af02      	add	r7, sp, #8
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	603b      	str	r3, [r7, #0]
 800218a:	4613      	mov	r3, r2
 800218c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800219a:	d112      	bne.n	80021c2 <HAL_SPI_Receive+0x44>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10e      	bne.n	80021c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2204      	movs	r2, #4
 80021a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4613      	mov	r3, r2
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	68b9      	ldr	r1, [r7, #8]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f8f1 	bl	80023a0 <HAL_SPI_TransmitReceive>
 80021be:	4603      	mov	r3, r0
 80021c0:	e0ea      	b.n	8002398 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_SPI_Receive+0x52>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0e3      	b.n	8002398 <HAL_SPI_Receive+0x21a>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021d8:	f7fe feb8 	bl	8000f4c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80021ee:	e0ca      	b.n	8002386 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_SPI_Receive+0x7e>
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002200:	e0c1      	b.n	8002386 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2204      	movs	r2, #4
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002248:	d10f      	bne.n	800226a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002258:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	2b40      	cmp	r3, #64	; 0x40
 8002276:	d007      	beq.n	8002288 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d162      	bne.n	8002356 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002290:	e02e      	b.n	80022f0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d115      	bne.n	80022cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f103 020c 	add.w	r2, r3, #12
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ca:	e011      	b.n	80022f0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022cc:	f7fe fe3e 	bl	8000f4c <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d803      	bhi.n	80022e4 <HAL_SPI_Receive+0x166>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d102      	bne.n	80022ea <HAL_SPI_Receive+0x16c>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d102      	bne.n	80022f0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022ee:	e04a      	b.n	8002386 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1cb      	bne.n	8002292 <HAL_SPI_Receive+0x114>
 80022fa:	e031      	b.n	8002360 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d113      	bne.n	8002332 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	b292      	uxth	r2, r2
 8002316:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	1c9a      	adds	r2, r3, #2
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002330:	e011      	b.n	8002356 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002332:	f7fe fe0b 	bl	8000f4c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d803      	bhi.n	800234a <HAL_SPI_Receive+0x1cc>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d102      	bne.n	8002350 <HAL_SPI_Receive+0x1d2>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002354:	e017      	b.n	8002386 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1cd      	bne.n	80022fc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	6839      	ldr	r1, [r7, #0]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fa45 	bl	80027f4 <SPI_EndRxTransaction>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]
 8002382:	e000      	b.n	8002386 <HAL_SPI_Receive+0x208>
  }

error :
 8002384:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_SPI_TransmitReceive+0x26>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e18a      	b.n	80026dc <HAL_SPI_TransmitReceive+0x33c>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ce:	f7fe fdbd 	bl	8000f4c <HAL_GetTick>
 80023d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d00f      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x70>
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023f6:	d107      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d103      	bne.n	8002408 <HAL_SPI_TransmitReceive+0x68>
 8002400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002404:	2b04      	cmp	r3, #4
 8002406:	d003      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800240e:	e15b      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_SPI_TransmitReceive+0x82>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_SPI_TransmitReceive+0x82>
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d103      	bne.n	800242a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002428:	e14e      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b04      	cmp	r3, #4
 8002434:	d003      	beq.n	800243e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2205      	movs	r2, #5
 800243a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	887a      	ldrh	r2, [r7, #2]
 8002466:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d007      	beq.n	8002492 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800249a:	d178      	bne.n	800258e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_SPI_TransmitReceive+0x10a>
 80024a4:	8b7b      	ldrh	r3, [r7, #26]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d166      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	1c9a      	adds	r2, r3, #2
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ce:	e053      	b.n	8002578 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d11b      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x176>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d016      	beq.n	8002516 <HAL_SPI_TransmitReceive+0x176>
 80024e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d113      	bne.n	8002516 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	881a      	ldrh	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	1c9a      	adds	r2, r3, #2
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d119      	bne.n	8002558 <HAL_SPI_TransmitReceive+0x1b8>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d014      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68da      	ldr	r2, [r3, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	b292      	uxth	r2, r2
 800253a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	1c9a      	adds	r2, r3, #2
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002554:	2301      	movs	r3, #1
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002558:	f7fe fcf8 	bl	8000f4c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002564:	429a      	cmp	r2, r3
 8002566:	d807      	bhi.n	8002578 <HAL_SPI_TransmitReceive+0x1d8>
 8002568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d003      	beq.n	8002578 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002576:	e0a7      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1a6      	bne.n	80024d0 <HAL_SPI_TransmitReceive+0x130>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1a1      	bne.n	80024d0 <HAL_SPI_TransmitReceive+0x130>
 800258c:	e07c      	b.n	8002688 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_TransmitReceive+0x1fc>
 8002596:	8b7b      	ldrh	r3, [r7, #26]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d16b      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c2:	e057      	b.n	8002674 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d11c      	bne.n	800260c <HAL_SPI_TransmitReceive+0x26c>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d017      	beq.n	800260c <HAL_SPI_TransmitReceive+0x26c>
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d114      	bne.n	800260c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	330c      	adds	r3, #12
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b01      	cmp	r3, #1
 8002618:	d119      	bne.n	800264e <HAL_SPI_TransmitReceive+0x2ae>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d014      	beq.n	800264e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800264a:	2301      	movs	r3, #1
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800264e:	f7fe fc7d 	bl	8000f4c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800265a:	429a      	cmp	r2, r3
 800265c:	d803      	bhi.n	8002666 <HAL_SPI_TransmitReceive+0x2c6>
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d102      	bne.n	800266c <HAL_SPI_TransmitReceive+0x2cc>
 8002666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002668:	2b00      	cmp	r3, #0
 800266a:	d103      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002672:	e029      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1a2      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x224>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d19d      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f917 	bl	80028c0 <SPI_EndRxTxTransaction>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026a4:	e010      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	e000      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80026c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80026d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3730      	adds	r7, #48	; 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026f4:	f7fe fc2a 	bl	8000f4c <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002704:	f7fe fc22 	bl	8000f4c <HAL_GetTick>
 8002708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	015b      	lsls	r3, r3, #5
 8002710:	0d1b      	lsrs	r3, r3, #20
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800271a:	e054      	b.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d050      	beq.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002724:	f7fe fc12 	bl	8000f4c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	d902      	bls.n	800273a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d13d      	bne.n	80027b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002752:	d111      	bne.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275c:	d004      	beq.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002766:	d107      	bne.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002780:	d10f      	bne.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e017      	b.n	80027e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4013      	ands	r3, r2
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d19b      	bne.n	800271c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000004 	.word	0x20000004

080027f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002808:	d111      	bne.n	800282e <SPI_EndRxTransaction+0x3a>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002812:	d004      	beq.n	800281e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281c:	d107      	bne.n	800282e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800282c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002836:	d12a      	bne.n	800288e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002840:	d012      	beq.n	8002868 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f7ff ff49 	bl	80026e4 <SPI_WaitFlagStateUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02d      	beq.n	80028b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e026      	b.n	80028b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2200      	movs	r2, #0
 8002870:	2101      	movs	r1, #1
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff ff36 	bl	80026e4 <SPI_WaitFlagStateUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01a      	beq.n	80028b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e013      	b.n	80028b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2200      	movs	r2, #0
 8002896:	2101      	movs	r1, #1
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f7ff ff23 	bl	80026e4 <SPI_WaitFlagStateUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e000      	b.n	80028b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80028cc:	4b1b      	ldr	r3, [pc, #108]	; (800293c <SPI_EndRxTxTransaction+0x7c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <SPI_EndRxTxTransaction+0x80>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0d5b      	lsrs	r3, r3, #21
 80028d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ea:	d112      	bne.n	8002912 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2200      	movs	r2, #0
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f7ff fef4 	bl	80026e4 <SPI_WaitFlagStateUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d016      	beq.n	8002930 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f043 0220 	orr.w	r2, r3, #32
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e00f      	b.n	8002932 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3b01      	subs	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002928:	2b80      	cmp	r3, #128	; 0x80
 800292a:	d0f2      	beq.n	8002912 <SPI_EndRxTxTransaction+0x52>
 800292c:	e000      	b.n	8002930 <SPI_EndRxTxTransaction+0x70>
        break;
 800292e:	bf00      	nop
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000004 	.word	0x20000004
 8002940:	165e9f81 	.word	0x165e9f81

08002944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e041      	b.n	80029da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe f990 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f000 f9c0 	bl	8002d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d001      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e044      	b.n	8002a86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d018      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x6c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d013      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x6c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d00e      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x6c>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <HAL_TIM_Base_Start_IT+0xb8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x6c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a17      	ldr	r2, [pc, #92]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d004      	beq.n	8002a50 <HAL_TIM_Base_Start_IT+0x6c>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a16      	ldr	r2, [pc, #88]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d010      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a72:	e007      	b.n	8002a84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40014000 	.word	0x40014000

08002aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0202 	mvn.w	r2, #2
 8002ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8ee 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8e0 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f8f1 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d122      	bne.n	8002b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d11b      	bne.n	8002b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0204 	mvn.w	r2, #4
 8002b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f8c4 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002b44:	e005      	b.n	8002b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8b6 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8c7 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d122      	bne.n	8002bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d11b      	bne.n	8002bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0208 	mvn.w	r2, #8
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2204      	movs	r2, #4
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f89a 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f88c 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f89d 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d122      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d11b      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0210 	mvn.w	r2, #16
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f870 	bl	8002ccc <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f862 	bl	8002cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f873 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d10e      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d107      	bne.n	8002c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f06f 0201 	mvn.w	r2, #1
 8002c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd ff00 	bl	8000a2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b80      	cmp	r3, #128	; 0x80
 8002c38:	d10e      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d107      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8e2 	bl	8002e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c62:	2b40      	cmp	r3, #64	; 0x40
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d107      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f838 	bl	8002cf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d10e      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d107      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0220 	mvn.w	r2, #32
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8ac 	bl	8002e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb0:	bf00      	nop
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a34      	ldr	r2, [pc, #208]	; (8002dec <TIM_Base_SetConfig+0xe4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d00f      	beq.n	8002d40 <TIM_Base_SetConfig+0x38>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d26:	d00b      	beq.n	8002d40 <TIM_Base_SetConfig+0x38>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a31      	ldr	r2, [pc, #196]	; (8002df0 <TIM_Base_SetConfig+0xe8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0x38>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a30      	ldr	r2, [pc, #192]	; (8002df4 <TIM_Base_SetConfig+0xec>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0x38>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a2f      	ldr	r2, [pc, #188]	; (8002df8 <TIM_Base_SetConfig+0xf0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d108      	bne.n	8002d52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a25      	ldr	r2, [pc, #148]	; (8002dec <TIM_Base_SetConfig+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d01b      	beq.n	8002d92 <TIM_Base_SetConfig+0x8a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d017      	beq.n	8002d92 <TIM_Base_SetConfig+0x8a>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <TIM_Base_SetConfig+0xe8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <TIM_Base_SetConfig+0x8a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <TIM_Base_SetConfig+0xec>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00f      	beq.n	8002d92 <TIM_Base_SetConfig+0x8a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <TIM_Base_SetConfig+0xf0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00b      	beq.n	8002d92 <TIM_Base_SetConfig+0x8a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1f      	ldr	r2, [pc, #124]	; (8002dfc <TIM_Base_SetConfig+0xf4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <TIM_Base_SetConfig+0x8a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <TIM_Base_SetConfig+0xf8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d003      	beq.n	8002d92 <TIM_Base_SetConfig+0x8a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1d      	ldr	r2, [pc, #116]	; (8002e04 <TIM_Base_SetConfig+0xfc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d108      	bne.n	8002da4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <TIM_Base_SetConfig+0xe4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d103      	bne.n	8002dd8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	615a      	str	r2, [r3, #20]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	40014000 	.word	0x40014000
 8002e00:	40014400 	.word	0x40014400
 8002e04:	40014800 	.word	0x40014800

08002e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e03f      	b.n	8002ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fe62 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f929 	bl	80030cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b08a      	sub	sp, #40	; 0x28
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d17c      	bne.n	8002fe4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_UART_Transmit+0x2c>
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e075      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Transmit+0x3e>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e06e      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2221      	movs	r2, #33	; 0x21
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f1e:	f7fe f815 	bl	8000f4c <HAL_GetTick>
 8002f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	88fa      	ldrh	r2, [r7, #6]
 8002f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d108      	bne.n	8002f4c <HAL_UART_Transmit+0x82>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	e003      	b.n	8002f54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f5c:	e02a      	b.n	8002fb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f840 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e036      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3302      	adds	r3, #2
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	e007      	b.n	8002fa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1cf      	bne.n	8002f5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 f810 	bl	8002fee <UART_WaitOnFlagUntilTimeout>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e006      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	e000      	b.n	8002fe6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
  }
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3720      	adds	r7, #32
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b090      	sub	sp, #64	; 0x40
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffe:	e050      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d04c      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <UART_WaitOnFlagUntilTimeout+0x30>
 800300e:	f7fd ff9d 	bl	8000f4c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800301a:	429a      	cmp	r2, r3
 800301c:	d241      	bcs.n	80030a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	330c      	adds	r3, #12
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003034:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	330c      	adds	r3, #12
 800303c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800303e:	637a      	str	r2, [r7, #52]	; 0x34
 8003040:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e5      	bne.n	800301e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3314      	adds	r3, #20
 8003058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	613b      	str	r3, [r7, #16]
   return(result);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	63bb      	str	r3, [r7, #56]	; 0x38
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3314      	adds	r3, #20
 8003070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003072:	623a      	str	r2, [r7, #32]
 8003074:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	69f9      	ldr	r1, [r7, #28]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e5      	bne.n	8003052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e00f      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d09f      	beq.n	8003000 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3740      	adds	r7, #64	; 0x40
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d0:	b0c0      	sub	sp, #256	; 0x100
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030e8:	68d9      	ldr	r1, [r3, #12]
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	ea40 0301 	orr.w	r3, r0, r1
 80030f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	431a      	orrs	r2, r3
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	431a      	orrs	r2, r3
 800310c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003124:	f021 010c 	bic.w	r1, r1, #12
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003132:	430b      	orrs	r3, r1
 8003134:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003146:	6999      	ldr	r1, [r3, #24]
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	ea40 0301 	orr.w	r3, r0, r1
 8003152:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b8f      	ldr	r3, [pc, #572]	; (8003398 <UART_SetConfig+0x2cc>)
 800315c:	429a      	cmp	r2, r3
 800315e:	d005      	beq.n	800316c <UART_SetConfig+0xa0>
 8003160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <UART_SetConfig+0x2d0>)
 8003168:	429a      	cmp	r2, r3
 800316a:	d104      	bne.n	8003176 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800316c:	f7fe fdfc 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8003170:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003174:	e003      	b.n	800317e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003176:	f7fe fde3 	bl	8001d40 <HAL_RCC_GetPCLK1Freq>
 800317a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800317e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	f040 810c 	bne.w	80033a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800318c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003196:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800319a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800319e:	4622      	mov	r2, r4
 80031a0:	462b      	mov	r3, r5
 80031a2:	1891      	adds	r1, r2, r2
 80031a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80031a6:	415b      	adcs	r3, r3
 80031a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ae:	4621      	mov	r1, r4
 80031b0:	eb12 0801 	adds.w	r8, r2, r1
 80031b4:	4629      	mov	r1, r5
 80031b6:	eb43 0901 	adc.w	r9, r3, r1
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ce:	4690      	mov	r8, r2
 80031d0:	4699      	mov	r9, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	eb18 0303 	adds.w	r3, r8, r3
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80031dc:	462b      	mov	r3, r5
 80031de:	eb49 0303 	adc.w	r3, r9, r3
 80031e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031fa:	460b      	mov	r3, r1
 80031fc:	18db      	adds	r3, r3, r3
 80031fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003200:	4613      	mov	r3, r2
 8003202:	eb42 0303 	adc.w	r3, r2, r3
 8003206:	657b      	str	r3, [r7, #84]	; 0x54
 8003208:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800320c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003210:	f7fd f886 	bl	8000320 <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4b61      	ldr	r3, [pc, #388]	; (80033a0 <UART_SetConfig+0x2d4>)
 800321a:	fba3 2302 	umull	r2, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	011c      	lsls	r4, r3, #4
 8003222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800322c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003230:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	1891      	adds	r1, r2, r2
 800323a:	64b9      	str	r1, [r7, #72]	; 0x48
 800323c:	415b      	adcs	r3, r3
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003240:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003244:	4641      	mov	r1, r8
 8003246:	eb12 0a01 	adds.w	sl, r2, r1
 800324a:	4649      	mov	r1, r9
 800324c:	eb43 0b01 	adc.w	fp, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800325c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003264:	4692      	mov	sl, r2
 8003266:	469b      	mov	fp, r3
 8003268:	4643      	mov	r3, r8
 800326a:	eb1a 0303 	adds.w	r3, sl, r3
 800326e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003272:	464b      	mov	r3, r9
 8003274:	eb4b 0303 	adc.w	r3, fp, r3
 8003278:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003288:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800328c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003290:	460b      	mov	r3, r1
 8003292:	18db      	adds	r3, r3, r3
 8003294:	643b      	str	r3, [r7, #64]	; 0x40
 8003296:	4613      	mov	r3, r2
 8003298:	eb42 0303 	adc.w	r3, r2, r3
 800329c:	647b      	str	r3, [r7, #68]	; 0x44
 800329e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032a6:	f7fd f83b 	bl	8000320 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <UART_SetConfig+0x2d4>)
 80032b2:	fba3 2301 	umull	r2, r3, r3, r1
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2264      	movs	r2, #100	; 0x64
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	1acb      	subs	r3, r1, r3
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80032c6:	4b36      	ldr	r3, [pc, #216]	; (80033a0 <UART_SetConfig+0x2d4>)
 80032c8:	fba3 2302 	umull	r2, r3, r3, r2
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032d4:	441c      	add	r4, r3
 80032d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032e8:	4642      	mov	r2, r8
 80032ea:	464b      	mov	r3, r9
 80032ec:	1891      	adds	r1, r2, r2
 80032ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80032f0:	415b      	adcs	r3, r3
 80032f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032f8:	4641      	mov	r1, r8
 80032fa:	1851      	adds	r1, r2, r1
 80032fc:	6339      	str	r1, [r7, #48]	; 0x30
 80032fe:	4649      	mov	r1, r9
 8003300:	414b      	adcs	r3, r1
 8003302:	637b      	str	r3, [r7, #52]	; 0x34
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003310:	4659      	mov	r1, fp
 8003312:	00cb      	lsls	r3, r1, #3
 8003314:	4651      	mov	r1, sl
 8003316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331a:	4651      	mov	r1, sl
 800331c:	00ca      	lsls	r2, r1, #3
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	4603      	mov	r3, r0
 8003324:	4642      	mov	r2, r8
 8003326:	189b      	adds	r3, r3, r2
 8003328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800332c:	464b      	mov	r3, r9
 800332e:	460a      	mov	r2, r1
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003344:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003348:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800334c:	460b      	mov	r3, r1
 800334e:	18db      	adds	r3, r3, r3
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
 8003352:	4613      	mov	r3, r2
 8003354:	eb42 0303 	adc.w	r3, r2, r3
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800335e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003362:	f7fc ffdd 	bl	8000320 <__aeabi_uldivmod>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	4b0d      	ldr	r3, [pc, #52]	; (80033a0 <UART_SetConfig+0x2d4>)
 800336c:	fba3 1302 	umull	r1, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	3332      	adds	r3, #50	; 0x32
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <UART_SetConfig+0x2d4>)
 8003380:	fba2 2303 	umull	r2, r3, r2, r3
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	f003 0207 	and.w	r2, r3, #7
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4422      	add	r2, r4
 8003392:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003394:	e105      	b.n	80035a2 <UART_SetConfig+0x4d6>
 8003396:	bf00      	nop
 8003398:	40011000 	.word	0x40011000
 800339c:	40011400 	.word	0x40011400
 80033a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033b6:	4642      	mov	r2, r8
 80033b8:	464b      	mov	r3, r9
 80033ba:	1891      	adds	r1, r2, r2
 80033bc:	6239      	str	r1, [r7, #32]
 80033be:	415b      	adcs	r3, r3
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
 80033c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033c6:	4641      	mov	r1, r8
 80033c8:	1854      	adds	r4, r2, r1
 80033ca:	4649      	mov	r1, r9
 80033cc:	eb43 0501 	adc.w	r5, r3, r1
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	00eb      	lsls	r3, r5, #3
 80033da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033de:	00e2      	lsls	r2, r4, #3
 80033e0:	4614      	mov	r4, r2
 80033e2:	461d      	mov	r5, r3
 80033e4:	4643      	mov	r3, r8
 80033e6:	18e3      	adds	r3, r4, r3
 80033e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033ec:	464b      	mov	r3, r9
 80033ee:	eb45 0303 	adc.w	r3, r5, r3
 80033f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003402:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003412:	4629      	mov	r1, r5
 8003414:	008b      	lsls	r3, r1, #2
 8003416:	4621      	mov	r1, r4
 8003418:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341c:	4621      	mov	r1, r4
 800341e:	008a      	lsls	r2, r1, #2
 8003420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003424:	f7fc ff7c 	bl	8000320 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4b60      	ldr	r3, [pc, #384]	; (80035b0 <UART_SetConfig+0x4e4>)
 800342e:	fba3 2302 	umull	r2, r3, r3, r2
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	011c      	lsls	r4, r3, #4
 8003436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343a:	2200      	movs	r2, #0
 800343c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003440:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003444:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003448:	4642      	mov	r2, r8
 800344a:	464b      	mov	r3, r9
 800344c:	1891      	adds	r1, r2, r2
 800344e:	61b9      	str	r1, [r7, #24]
 8003450:	415b      	adcs	r3, r3
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003458:	4641      	mov	r1, r8
 800345a:	1851      	adds	r1, r2, r1
 800345c:	6139      	str	r1, [r7, #16]
 800345e:	4649      	mov	r1, r9
 8003460:	414b      	adcs	r3, r1
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003470:	4659      	mov	r1, fp
 8003472:	00cb      	lsls	r3, r1, #3
 8003474:	4651      	mov	r1, sl
 8003476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800347a:	4651      	mov	r1, sl
 800347c:	00ca      	lsls	r2, r1, #3
 800347e:	4610      	mov	r0, r2
 8003480:	4619      	mov	r1, r3
 8003482:	4603      	mov	r3, r0
 8003484:	4642      	mov	r2, r8
 8003486:	189b      	adds	r3, r3, r2
 8003488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800348c:	464b      	mov	r3, r9
 800348e:	460a      	mov	r2, r1
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034b0:	4649      	mov	r1, r9
 80034b2:	008b      	lsls	r3, r1, #2
 80034b4:	4641      	mov	r1, r8
 80034b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ba:	4641      	mov	r1, r8
 80034bc:	008a      	lsls	r2, r1, #2
 80034be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80034c2:	f7fc ff2d 	bl	8000320 <__aeabi_uldivmod>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <UART_SetConfig+0x4e4>)
 80034cc:	fba3 1302 	umull	r1, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	2164      	movs	r1, #100	; 0x64
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	3332      	adds	r3, #50	; 0x32
 80034de:	4a34      	ldr	r2, [pc, #208]	; (80035b0 <UART_SetConfig+0x4e4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ea:	441c      	add	r4, r3
 80034ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f0:	2200      	movs	r2, #0
 80034f2:	673b      	str	r3, [r7, #112]	; 0x70
 80034f4:	677a      	str	r2, [r7, #116]	; 0x74
 80034f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034fa:	4642      	mov	r2, r8
 80034fc:	464b      	mov	r3, r9
 80034fe:	1891      	adds	r1, r2, r2
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	415b      	adcs	r3, r3
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800350a:	4641      	mov	r1, r8
 800350c:	1851      	adds	r1, r2, r1
 800350e:	6039      	str	r1, [r7, #0]
 8003510:	4649      	mov	r1, r9
 8003512:	414b      	adcs	r3, r1
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003522:	4659      	mov	r1, fp
 8003524:	00cb      	lsls	r3, r1, #3
 8003526:	4651      	mov	r1, sl
 8003528:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800352c:	4651      	mov	r1, sl
 800352e:	00ca      	lsls	r2, r1, #3
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	4603      	mov	r3, r0
 8003536:	4642      	mov	r2, r8
 8003538:	189b      	adds	r3, r3, r2
 800353a:	66bb      	str	r3, [r7, #104]	; 0x68
 800353c:	464b      	mov	r3, r9
 800353e:	460a      	mov	r2, r1
 8003540:	eb42 0303 	adc.w	r3, r2, r3
 8003544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	663b      	str	r3, [r7, #96]	; 0x60
 8003550:	667a      	str	r2, [r7, #100]	; 0x64
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800355e:	4649      	mov	r1, r9
 8003560:	008b      	lsls	r3, r1, #2
 8003562:	4641      	mov	r1, r8
 8003564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003568:	4641      	mov	r1, r8
 800356a:	008a      	lsls	r2, r1, #2
 800356c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003570:	f7fc fed6 	bl	8000320 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <UART_SetConfig+0x4e4>)
 800357a:	fba3 1302 	umull	r1, r3, r3, r2
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	2164      	movs	r1, #100	; 0x64
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	3332      	adds	r3, #50	; 0x32
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <UART_SetConfig+0x4e4>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4422      	add	r2, r4
 80035a0:	609a      	str	r2, [r3, #8]
}
 80035a2:	bf00      	nop
 80035a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035a8:	46bd      	mov	sp, r7
 80035aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035ae:	bf00      	nop
 80035b0:	51eb851f 	.word	0x51eb851f

080035b4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f103 0208 	add.w	r2, r3, #8
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f103 0208 	add.w	r2, r3, #8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f103 0208 	add.w	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800360e:	b480      	push	{r7}
 8003610:	b085      	sub	sp, #20
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d103      	bne.n	800362e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e00c      	b.n	8003648 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3308      	adds	r3, #8
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	e002      	b.n	800363c <vListInsert+0x2e>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	429a      	cmp	r2, r3
 8003646:	d2f6      	bcs.n	8003636 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	601a      	str	r2, [r3, #0]
}
 8003674:	bf00      	nop
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6892      	ldr	r2, [r2, #8]
 8003696:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6852      	ldr	r2, [r2, #4]
 80036a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d103      	bne.n	80036b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	1e5a      	subs	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08c      	sub	sp, #48	; 0x30
 80036d8:	af04      	add	r7, sp, #16
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 ff9f 	bl	800462c <pvPortMalloc>
 80036ee:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d013      	beq.n	800371e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036f6:	2058      	movs	r0, #88	; 0x58
 80036f8:	f000 ff98 	bl	800462c <pvPortMalloc>
 80036fc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003704:	2258      	movs	r2, #88	; 0x58
 8003706:	2100      	movs	r1, #0
 8003708:	69f8      	ldr	r0, [r7, #28]
 800370a:	f003 fd79 	bl	8007200 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
 8003714:	e005      	b.n	8003722 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f001 f842 	bl	80047a0 <vPortFree>
 800371c:	e001      	b.n	8003722 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003728:	88fa      	ldrh	r2, [r7, #6]
 800372a:	2300      	movs	r3, #0
 800372c:	9303      	str	r3, [sp, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	9302      	str	r3, [sp, #8]
 8003732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f80e 	bl	8003760 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003744:	69f8      	ldr	r0, [r7, #28]
 8003746:	f000 f899 	bl	800387c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800374a:	2301      	movs	r3, #1
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	e002      	b.n	8003756 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003756:	69bb      	ldr	r3, [r7, #24]
    }
 8003758:	4618      	mov	r0, r3
 800375a:	3720      	adds	r7, #32
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	461a      	mov	r2, r3
 8003778:	21a5      	movs	r1, #165	; 0xa5
 800377a:	f003 fd41 	bl	8007200 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003788:	3b01      	subs	r3, #1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f023 0307 	bic.w	r3, r3, #7
 8003796:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <prvInitialiseNewTask+0x58>
        __asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	617b      	str	r3, [r7, #20]
    }
 80037b4:	bf00      	nop
 80037b6:	e7fe      	b.n	80037b6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01e      	beq.n	80037fc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	e012      	b.n	80037ea <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	7819      	ldrb	r1, [r3, #0]
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	3334      	adds	r3, #52	; 0x34
 80037d4:	460a      	mov	r2, r1
 80037d6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3301      	adds	r3, #1
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	2b09      	cmp	r3, #9
 80037ee:	d9e9      	bls.n	80037c4 <prvInitialiseNewTask+0x64>
 80037f0:	e000      	b.n	80037f4 <prvInitialiseNewTask+0x94>
            {
                break;
 80037f2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d90a      	bls.n	8003818 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	613b      	str	r3, [r7, #16]
    }
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381a:	2b04      	cmp	r3, #4
 800381c:	d901      	bls.n	8003822 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800381e:	2304      	movs	r3, #4
 8003820:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003830:	3304      	adds	r3, #4
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fede 	bl	80035f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	3318      	adds	r3, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fed9 	bl	80035f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384a:	f1c3 0205 	rsb	r2, r3, #5
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003856:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	68f9      	ldr	r1, [r7, #12]
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f000 fcd5 	bl	800420c <pxPortInitialiseStack>
 8003862:	4602      	mov	r2, r0
 8003864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003866:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003872:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003874:	bf00      	nop
 8003876:	3720      	adds	r7, #32
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800387c:	b5b0      	push	{r4, r5, r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003884:	f000 fdf0 	bl	8004468 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003888:	4b49      	ldr	r3, [pc, #292]	; (80039b0 <prvAddNewTaskToReadyList+0x134>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a48      	ldr	r2, [pc, #288]	; (80039b0 <prvAddNewTaskToReadyList+0x134>)
 8003890:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003892:	4b48      	ldr	r3, [pc, #288]	; (80039b4 <prvAddNewTaskToReadyList+0x138>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800389a:	4a46      	ldr	r2, [pc, #280]	; (80039b4 <prvAddNewTaskToReadyList+0x138>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a0:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <prvAddNewTaskToReadyList+0x134>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80038a8:	f000 fb96 	bl	8003fd8 <prvInitialiseTaskLists>
 80038ac:	e00d      	b.n	80038ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80038ae:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <prvAddNewTaskToReadyList+0x13c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <prvAddNewTaskToReadyList+0x138>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d802      	bhi.n	80038ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80038c4:	4a3b      	ldr	r2, [pc, #236]	; (80039b4 <prvAddNewTaskToReadyList+0x138>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80038ca:	4b3c      	ldr	r3, [pc, #240]	; (80039bc <prvAddNewTaskToReadyList+0x140>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a3a      	ldr	r2, [pc, #232]	; (80039bc <prvAddNewTaskToReadyList+0x140>)
 80038d2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038d4:	4b39      	ldr	r3, [pc, #228]	; (80039bc <prvAddNewTaskToReadyList+0x140>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d016      	beq.n	8003910 <prvAddNewTaskToReadyList+0x94>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f002 fccf 	bl	8006288 <SEGGER_SYSVIEW_OnTaskCreate>
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	461d      	mov	r5, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461c      	mov	r4, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	1ae3      	subs	r3, r4, r3
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	462b      	mov	r3, r5
 800390c:	f001 f85a 	bl	80049c4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f002 fd3c 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	2201      	movs	r2, #1
 800391e:	409a      	lsls	r2, r3
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <prvAddNewTaskToReadyList+0x144>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4313      	orrs	r3, r2
 8003926:	4a26      	ldr	r2, [pc, #152]	; (80039c0 <prvAddNewTaskToReadyList+0x144>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	4925      	ldr	r1, [pc, #148]	; (80039c4 <prvAddNewTaskToReadyList+0x148>)
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	3304      	adds	r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	3204      	adds	r2, #4
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	1d1a      	adds	r2, r3, #4
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <prvAddNewTaskToReadyList+0x148>)
 800396e:	441a      	add	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	615a      	str	r2, [r3, #20]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	4912      	ldr	r1, [pc, #72]	; (80039c4 <prvAddNewTaskToReadyList+0x148>)
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	1c59      	adds	r1, r3, #1
 8003988:	480e      	ldr	r0, [pc, #56]	; (80039c4 <prvAddNewTaskToReadyList+0x148>)
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4403      	add	r3, r0
 8003994:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003996:	f000 fd97 	bl	80044c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <prvAddNewTaskToReadyList+0x13c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <prvAddNewTaskToReadyList+0x138>)
 80039a4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bdb0      	pop	{r4, r5, r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000324 	.word	0x20000324
 80039b4:	2000024c 	.word	0x2000024c
 80039b8:	20000330 	.word	0x20000330
 80039bc:	20000340 	.word	0x20000340
 80039c0:	2000032c 	.word	0x2000032c
 80039c4:	20000250 	.word	0x20000250

080039c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01b      	beq.n	8003a12 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <vTaskDelay+0x68>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <vTaskDelay+0x30>
        __asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60bb      	str	r3, [r7, #8]
    }
 80039f4:	bf00      	nop
 80039f6:	e7fe      	b.n	80039f6 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80039f8:	f000 f87a 	bl	8003af0 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	2023      	movs	r0, #35	; 0x23
 8003a00:	f002 f8ec 	bl	8005bdc <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a04:	2100      	movs	r1, #0
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fb80 	bl	800410c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003a0c:	f000 f87e 	bl	8003b0c <xTaskResumeAll>
 8003a10:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <vTaskDelay+0x6c>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000034c 	.word	0x2000034c
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <vTaskStartScheduler+0x98>)
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2300      	movs	r3, #0
 8003a48:	2282      	movs	r2, #130	; 0x82
 8003a4a:	4922      	ldr	r1, [pc, #136]	; (8003ad4 <vTaskStartScheduler+0x9c>)
 8003a4c:	4822      	ldr	r0, [pc, #136]	; (8003ad8 <vTaskStartScheduler+0xa0>)
 8003a4e:	f7ff fe41 	bl	80036d4 <xTaskCreate>
 8003a52:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d124      	bne.n	8003aa4 <vTaskStartScheduler+0x6c>
        __asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60bb      	str	r3, [r7, #8]
    }
 8003a6c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <vTaskStartScheduler+0xa4>)
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a76:	4b1a      	ldr	r3, [pc, #104]	; (8003ae0 <vTaskStartScheduler+0xa8>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a7c:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <vTaskStartScheduler+0xac>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003a82:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <vTaskStartScheduler+0xb0>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <vTaskStartScheduler+0x98>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d102      	bne.n	8003a94 <vTaskStartScheduler+0x5c>
 8003a8e:	f002 fbdf 	bl	8006250 <SEGGER_SYSVIEW_OnIdle>
 8003a92:	e004      	b.n	8003a9e <vTaskStartScheduler+0x66>
 8003a94:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <vTaskStartScheduler+0xb0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fc37 	bl	800630c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003a9e:	f000 fc41 	bl	8004324 <xPortStartScheduler>
 8003aa2:	e00e      	b.n	8003ac2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aaa:	d10a      	bne.n	8003ac2 <vTaskStartScheduler+0x8a>
        __asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	607b      	str	r3, [r7, #4]
    }
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <vTaskStartScheduler+0xb4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000348 	.word	0x20000348
 8003ad4:	08008328 	.word	0x08008328
 8003ad8:	08003fb5 	.word	0x08003fb5
 8003adc:	20000344 	.word	0x20000344
 8003ae0:	20000330 	.word	0x20000330
 8003ae4:	20000328 	.word	0x20000328
 8003ae8:	2000024c 	.word	0x2000024c
 8003aec:	20000010 	.word	0x20000010

08003af0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <vTaskSuspendAll+0x18>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3301      	adds	r3, #1
 8003afa:	4a03      	ldr	r2, [pc, #12]	; (8003b08 <vTaskSuspendAll+0x18>)
 8003afc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003afe:	bf00      	nop
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	2000034c 	.word	0x2000034c

08003b0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b088      	sub	sp, #32
 8003b10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <xTaskResumeAll+0x1c4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <xTaskResumeAll+0x2c>
        __asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	607b      	str	r3, [r7, #4]
    }
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003b38:	f000 fc96 	bl	8004468 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003b3c:	4b64      	ldr	r3, [pc, #400]	; (8003cd0 <xTaskResumeAll+0x1c4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	4a63      	ldr	r2, [pc, #396]	; (8003cd0 <xTaskResumeAll+0x1c4>)
 8003b44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b46:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <xTaskResumeAll+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 80b8 	bne.w	8003cc0 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b50:	4b60      	ldr	r3, [pc, #384]	; (8003cd4 <xTaskResumeAll+0x1c8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80b3 	beq.w	8003cc0 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b5a:	e08e      	b.n	8003c7a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b5c:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <xTaskResumeAll+0x1cc>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	6a12      	ldr	r2, [r2, #32]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	69d2      	ldr	r2, [r2, #28]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3318      	adds	r3, #24
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d103      	bne.n	8003b92 <xTaskResumeAll+0x86>
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	2200      	movs	r2, #0
 8003b96:	629a      	str	r2, [r3, #40]	; 0x28
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	1e5a      	subs	r2, r3, #1
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	68d2      	ldr	r2, [r2, #12]
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d103      	bne.n	8003bd0 <xTaskResumeAll+0xc4>
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	615a      	str	r2, [r3, #20]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	1e5a      	subs	r2, r3, #1
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f002 fbd4 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	2201      	movs	r2, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	4b3a      	ldr	r3, [pc, #232]	; (8003cdc <xTaskResumeAll+0x1d0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	4a39      	ldr	r2, [pc, #228]	; (8003cdc <xTaskResumeAll+0x1d0>)
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	4938      	ldr	r1, [pc, #224]	; (8003ce0 <xTaskResumeAll+0x1d4>)
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	60da      	str	r2, [r3, #12]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	3204      	adds	r2, #4
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <xTaskResumeAll+0x1d4>)
 8003c3e:	441a      	add	r2, r3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	615a      	str	r2, [r3, #20]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	4925      	ldr	r1, [pc, #148]	; (8003ce0 <xTaskResumeAll+0x1d4>)
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	4821      	ldr	r0, [pc, #132]	; (8003ce0 <xTaskResumeAll+0x1d4>)
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4403      	add	r3, r0
 8003c64:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <xTaskResumeAll+0x1d8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003c74:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <xTaskResumeAll+0x1dc>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <xTaskResumeAll+0x1cc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f47f af6c 	bne.w	8003b5c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003c8a:	f000 fa23 	bl	80040d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <xTaskResumeAll+0x1e0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d010      	beq.n	8003cbc <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003c9a:	f000 f829 	bl	8003cf0 <xTaskIncrementTick>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <xTaskResumeAll+0x1dc>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f1      	bne.n	8003c9a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <xTaskResumeAll+0x1e0>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <xTaskResumeAll+0x1dc>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003cc0:	f000 fc02 	bl	80044c8 <vPortExitCritical>

    return xAlreadyYielded;
 8003cc4:	697b      	ldr	r3, [r7, #20]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	2000034c 	.word	0x2000034c
 8003cd4:	20000324 	.word	0x20000324
 8003cd8:	200002e4 	.word	0x200002e4
 8003cdc:	2000032c 	.word	0x2000032c
 8003ce0:	20000250 	.word	0x20000250
 8003ce4:	2000024c 	.word	0x2000024c
 8003ce8:	20000338 	.word	0x20000338
 8003cec:	20000334 	.word	0x20000334

08003cf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b08a      	sub	sp, #40	; 0x28
 8003cf4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfa:	4b70      	ldr	r3, [pc, #448]	; (8003ebc <xTaskIncrementTick+0x1cc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f040 80d1 	bne.w	8003ea6 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d04:	4b6e      	ldr	r3, [pc, #440]	; (8003ec0 <xTaskIncrementTick+0x1d0>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003d0c:	4a6c      	ldr	r2, [pc, #432]	; (8003ec0 <xTaskIncrementTick+0x1d0>)
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d120      	bne.n	8003d5a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003d18:	4b6a      	ldr	r3, [pc, #424]	; (8003ec4 <xTaskIncrementTick+0x1d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00a      	beq.n	8003d38 <xTaskIncrementTick+0x48>
        __asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	607b      	str	r3, [r7, #4]
    }
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <xTaskIncrementTick+0x46>
 8003d38:	4b62      	ldr	r3, [pc, #392]	; (8003ec4 <xTaskIncrementTick+0x1d4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	4b62      	ldr	r3, [pc, #392]	; (8003ec8 <xTaskIncrementTick+0x1d8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a60      	ldr	r2, [pc, #384]	; (8003ec4 <xTaskIncrementTick+0x1d4>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4a60      	ldr	r2, [pc, #384]	; (8003ec8 <xTaskIncrementTick+0x1d8>)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b5f      	ldr	r3, [pc, #380]	; (8003ecc <xTaskIncrementTick+0x1dc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	4a5e      	ldr	r2, [pc, #376]	; (8003ecc <xTaskIncrementTick+0x1dc>)
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	f000 f9bd 	bl	80040d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <xTaskIncrementTick+0x1e0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a3a      	ldr	r2, [r7, #32]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	f0c0 80a5 	bcc.w	8003eb0 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d66:	4b57      	ldr	r3, [pc, #348]	; (8003ec4 <xTaskIncrementTick+0x1d4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d70:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <xTaskIncrementTick+0x1e0>)
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295
 8003d76:	601a      	str	r2, [r3, #0]
                    break;
 8003d78:	e09a      	b.n	8003eb0 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7a:	4b52      	ldr	r3, [pc, #328]	; (8003ec4 <xTaskIncrementTick+0x1d4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003d8a:	6a3a      	ldr	r2, [r7, #32]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d203      	bcs.n	8003d9a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003d92:	4a4f      	ldr	r2, [pc, #316]	; (8003ed0 <xTaskIncrementTick+0x1e0>)
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003d98:	e08a      	b.n	8003eb0 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	68d2      	ldr	r2, [r2, #12]
 8003da8:	609a      	str	r2, [r3, #8]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	6892      	ldr	r2, [r2, #8]
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d103      	bne.n	8003dc8 <xTaskIncrementTick+0xd8>
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	605a      	str	r2, [r3, #4]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	615a      	str	r2, [r3, #20]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	1e5a      	subs	r2, r3, #1
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01e      	beq.n	8003e1e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	6a12      	ldr	r2, [r2, #32]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	69d2      	ldr	r2, [r2, #28]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3318      	adds	r3, #24
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d103      	bne.n	8003e0e <xTaskIncrementTick+0x11e>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2200      	movs	r2, #0
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f002 fab5 	bl	8006390 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	4b29      	ldr	r3, [pc, #164]	; (8003ed4 <xTaskIncrementTick+0x1e4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	4a27      	ldr	r2, [pc, #156]	; (8003ed4 <xTaskIncrementTick+0x1e4>)
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3c:	4926      	ldr	r1, [pc, #152]	; (8003ed8 <xTaskIncrementTick+0x1e8>)
 8003e3e:	4613      	mov	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	3304      	adds	r3, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	689a      	ldr	r2, [r3, #8]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	3204      	adds	r2, #4
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <xTaskIncrementTick+0x1e8>)
 8003e7c:	441a      	add	r2, r3
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	615a      	str	r2, [r3, #20]
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e86:	4914      	ldr	r1, [pc, #80]	; (8003ed8 <xTaskIncrementTick+0x1e8>)
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	4810      	ldr	r0, [pc, #64]	; (8003ed8 <xTaskIncrementTick+0x1e8>)
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4403      	add	r3, r0
 8003ea2:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ea4:	e75f      	b.n	8003d66 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <xTaskIncrementTick+0x1ec>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <xTaskIncrementTick+0x1ec>)
 8003eae:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3728      	adds	r7, #40	; 0x28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	2000034c 	.word	0x2000034c
 8003ec0:	20000328 	.word	0x20000328
 8003ec4:	200002dc 	.word	0x200002dc
 8003ec8:	200002e0 	.word	0x200002e0
 8003ecc:	2000033c 	.word	0x2000033c
 8003ed0:	20000344 	.word	0x20000344
 8003ed4:	2000032c 	.word	0x2000032c
 8003ed8:	20000250 	.word	0x20000250
 8003edc:	20000334 	.word	0x20000334

08003ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <vTaskSwitchContext+0xbc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003eee:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <vTaskSwitchContext+0xc0>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003ef4:	e04d      	b.n	8003f92 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <vTaskSwitchContext+0xc0>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <vTaskSwitchContext+0xc4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	fab3 f383 	clz	r3, r3
 8003f08:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	f1c3 031f 	rsb	r3, r3, #31
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	4925      	ldr	r1, [pc, #148]	; (8003fa8 <vTaskSwitchContext+0xc8>)
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4613      	mov	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10a      	bne.n	8003f3c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	607b      	str	r3, [r7, #4]
    }
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <vTaskSwitchContext+0x5a>
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <vTaskSwitchContext+0xc8>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d104      	bne.n	8003f6c <vTaskSwitchContext+0x8c>
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	605a      	str	r2, [r3, #4]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	4a0e      	ldr	r2, [pc, #56]	; (8003fac <vTaskSwitchContext+0xcc>)
 8003f74:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <vTaskSwitchContext+0xcc>)
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b0d      	ldr	r3, [pc, #52]	; (8003fb0 <vTaskSwitchContext+0xd0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d102      	bne.n	8003f88 <vTaskSwitchContext+0xa8>
 8003f82:	f002 f965 	bl	8006250 <SEGGER_SYSVIEW_OnIdle>
}
 8003f86:	e004      	b.n	8003f92 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003f88:	4b08      	ldr	r3, [pc, #32]	; (8003fac <vTaskSwitchContext+0xcc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f002 f9bd 	bl	800630c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000034c 	.word	0x2000034c
 8003fa0:	20000338 	.word	0x20000338
 8003fa4:	2000032c 	.word	0x2000032c
 8003fa8:	20000250 	.word	0x20000250
 8003fac:	2000024c 	.word	0x2000024c
 8003fb0:	20000348 	.word	0x20000348

08003fb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003fbc:	f000 f84c 	bl	8004058 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <prvIdleTask+0x20>)
 8003fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003fd0:	e7f4      	b.n	8003fbc <prvIdleTask+0x8>
 8003fd2:	bf00      	nop
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	e00c      	b.n	8003ffe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4a12      	ldr	r2, [pc, #72]	; (8004038 <prvInitialiseTaskLists+0x60>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fade 	bl	80035b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d9ef      	bls.n	8003fe4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004004:	480d      	ldr	r0, [pc, #52]	; (800403c <prvInitialiseTaskLists+0x64>)
 8004006:	f7ff fad5 	bl	80035b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800400a:	480d      	ldr	r0, [pc, #52]	; (8004040 <prvInitialiseTaskLists+0x68>)
 800400c:	f7ff fad2 	bl	80035b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004010:	480c      	ldr	r0, [pc, #48]	; (8004044 <prvInitialiseTaskLists+0x6c>)
 8004012:	f7ff facf 	bl	80035b4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004016:	480c      	ldr	r0, [pc, #48]	; (8004048 <prvInitialiseTaskLists+0x70>)
 8004018:	f7ff facc 	bl	80035b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800401c:	480b      	ldr	r0, [pc, #44]	; (800404c <prvInitialiseTaskLists+0x74>)
 800401e:	f7ff fac9 	bl	80035b4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <prvInitialiseTaskLists+0x78>)
 8004024:	4a05      	ldr	r2, [pc, #20]	; (800403c <prvInitialiseTaskLists+0x64>)
 8004026:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <prvInitialiseTaskLists+0x7c>)
 800402a:	4a05      	ldr	r2, [pc, #20]	; (8004040 <prvInitialiseTaskLists+0x68>)
 800402c:	601a      	str	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000250 	.word	0x20000250
 800403c:	200002b4 	.word	0x200002b4
 8004040:	200002c8 	.word	0x200002c8
 8004044:	200002e4 	.word	0x200002e4
 8004048:	200002f8 	.word	0x200002f8
 800404c:	20000310 	.word	0x20000310
 8004050:	200002dc 	.word	0x200002dc
 8004054:	200002e0 	.word	0x200002e0

08004058 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800405e:	e019      	b.n	8004094 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004060:	f000 fa02 	bl	8004468 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <prvCheckTasksWaitingTermination+0x50>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fb05 	bl	8003680 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <prvCheckTasksWaitingTermination+0x54>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3b01      	subs	r3, #1
 800407c:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <prvCheckTasksWaitingTermination+0x54>)
 800407e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <prvCheckTasksWaitingTermination+0x58>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3b01      	subs	r3, #1
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <prvCheckTasksWaitingTermination+0x58>)
 8004088:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800408a:	f000 fa1d 	bl	80044c8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f810 	bl	80040b4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <prvCheckTasksWaitingTermination+0x58>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e1      	bne.n	8004060 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	200002f8 	.word	0x200002f8
 80040ac:	20000324 	.word	0x20000324
 80040b0:	2000030c 	.word	0x2000030c

080040b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fb6d 	bl	80047a0 <vPortFree>
            vPortFree( pxTCB );
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fb6a 	bl	80047a0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <prvResetNextTaskUnblockTime+0x30>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <prvResetNextTaskUnblockTime+0x34>)
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295
 80040e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80040ea:	e005      	b.n	80040f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <prvResetNextTaskUnblockTime+0x30>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <prvResetNextTaskUnblockTime+0x34>)
 80040f6:	6013      	str	r3, [r2, #0]
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	200002dc 	.word	0x200002dc
 8004108:	20000344 	.word	0x20000344

0800410c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004116:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800411c:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3304      	adds	r3, #4
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff faac 	bl	8003680 <uxListRemove>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800412e:	4b31      	ldr	r3, [pc, #196]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	2201      	movs	r2, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	4b2e      	ldr	r3, [pc, #184]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xec>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4013      	ands	r3, r2
 8004142:	4a2d      	ldr	r2, [pc, #180]	; (80041f8 <prvAddCurrentTaskToDelayedList+0xec>)
 8004144:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414c:	d124      	bne.n	8004198 <prvAddCurrentTaskToDelayedList+0x8c>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d021      	beq.n	8004198 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	4b24      	ldr	r3, [pc, #144]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	6892      	ldr	r2, [r2, #8]
 800416a:	60da      	str	r2, [r3, #12]
 800416c:	4b21      	ldr	r3, [pc, #132]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	3204      	adds	r2, #4
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	1d1a      	adds	r2, r3, #4
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	4b1c      	ldr	r3, [pc, #112]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a1d      	ldr	r2, [pc, #116]	; (80041fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004188:	615a      	str	r2, [r3, #20]
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <prvAddCurrentTaskToDelayedList+0xf0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3301      	adds	r3, #1
 8004190:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <prvAddCurrentTaskToDelayedList+0xf0>)
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004196:	e026      	b.n	80041e6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041a0:	4b14      	ldr	r3, [pc, #80]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d209      	bcs.n	80041c4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041b0:	4b13      	ldr	r3, [pc, #76]	; (8004200 <prvAddCurrentTaskToDelayedList+0xf4>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b0f      	ldr	r3, [pc, #60]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f7ff fa26 	bl	800360e <vListInsert>
}
 80041c2:	e010      	b.n	80041e6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <prvAddCurrentTaskToDelayedList+0xf8>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7ff fa1c 	bl	800360e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <prvAddCurrentTaskToDelayedList+0xfc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d202      	bcs.n	80041e6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80041e0:	4a09      	ldr	r2, [pc, #36]	; (8004208 <prvAddCurrentTaskToDelayedList+0xfc>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6013      	str	r3, [r2, #0]
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000328 	.word	0x20000328
 80041f4:	2000024c 	.word	0x2000024c
 80041f8:	2000032c 	.word	0x2000032c
 80041fc:	20000310 	.word	0x20000310
 8004200:	200002e0 	.word	0x200002e0
 8004204:	200002dc 	.word	0x200002dc
 8004208:	20000344 	.word	0x20000344

0800420c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3b04      	subs	r3, #4
 800421c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004224:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3b04      	subs	r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 0201 	bic.w	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3b04      	subs	r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800423c:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <pxPortInitialiseStack+0x64>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	3b14      	subs	r3, #20
 8004246:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b04      	subs	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f06f 0202 	mvn.w	r2, #2
 800425a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3b20      	subs	r3, #32
 8004260:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	08004275 	.word	0x08004275

08004274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <prvTaskExitError+0x54>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d00a      	beq.n	800429e <prvTaskExitError+0x2a>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <prvTaskExitError+0x28>
        __asm volatile
 800429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	60bb      	str	r3, [r7, #8]
    }
 80042b0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042b2:	bf00      	nop
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0fc      	beq.n	80042b4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000014 	.word	0x20000014
 80042cc:	00000000 	.word	0x00000000

080042d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <pxCurrentTCBConst2>)
 80042d2:	6819      	ldr	r1, [r3, #0]
 80042d4:	6808      	ldr	r0, [r1, #0]
 80042d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	f380 8809 	msr	PSP, r0
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f04f 0000 	mov.w	r0, #0
 80042e6:	f380 8811 	msr	BASEPRI, r0
 80042ea:	4770      	bx	lr
 80042ec:	f3af 8000 	nop.w

080042f0 <pxCurrentTCBConst2>:
 80042f0:	2000024c 	.word	0x2000024c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop

080042f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80042f8:	4808      	ldr	r0, [pc, #32]	; (800431c <prvPortStartFirstTask+0x24>)
 80042fa:	6800      	ldr	r0, [r0, #0]
 80042fc:	6800      	ldr	r0, [r0, #0]
 80042fe:	f380 8808 	msr	MSP, r0
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8814 	msr	CONTROL, r0
 800430a:	b662      	cpsie	i
 800430c:	b661      	cpsie	f
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	df00      	svc	0
 8004318:	bf00      	nop
 800431a:	0000      	.short	0x0000
 800431c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop

08004324 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800432a:	4b46      	ldr	r3, [pc, #280]	; (8004444 <xPortStartScheduler+0x120>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a46      	ldr	r2, [pc, #280]	; (8004448 <xPortStartScheduler+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d10a      	bne.n	800434a <xPortStartScheduler+0x26>
        __asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
    }
 8004346:	bf00      	nop
 8004348:	e7fe      	b.n	8004348 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800434a:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <xPortStartScheduler+0x120>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a3f      	ldr	r2, [pc, #252]	; (800444c <xPortStartScheduler+0x128>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10a      	bne.n	800436a <xPortStartScheduler+0x46>
        __asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	60fb      	str	r3, [r7, #12]
    }
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800436a:	4b39      	ldr	r3, [pc, #228]	; (8004450 <xPortStartScheduler+0x12c>)
 800436c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	22ff      	movs	r2, #255	; 0xff
 800437a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004384:	78fb      	ldrb	r3, [r7, #3]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <xPortStartScheduler+0x130>)
 8004390:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004392:	4b31      	ldr	r3, [pc, #196]	; (8004458 <xPortStartScheduler+0x134>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004398:	e009      	b.n	80043ae <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800439a:	4b2f      	ldr	r3, [pc, #188]	; (8004458 <xPortStartScheduler+0x134>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <xPortStartScheduler+0x134>)
 80043a2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b6:	2b80      	cmp	r3, #128	; 0x80
 80043b8:	d0ef      	beq.n	800439a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ba:	4b27      	ldr	r3, [pc, #156]	; (8004458 <xPortStartScheduler+0x134>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1c3 0307 	rsb	r3, r3, #7
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	d00a      	beq.n	80043dc <xPortStartScheduler+0xb8>
        __asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60bb      	str	r3, [r7, #8]
    }
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <xPortStartScheduler+0x134>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <xPortStartScheduler+0x134>)
 80043e4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043e6:	4b1c      	ldr	r3, [pc, #112]	; (8004458 <xPortStartScheduler+0x134>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <xPortStartScheduler+0x134>)
 80043f0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043fa:	4b18      	ldr	r3, [pc, #96]	; (800445c <xPortStartScheduler+0x138>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a17      	ldr	r2, [pc, #92]	; (800445c <xPortStartScheduler+0x138>)
 8004400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004404:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004406:	4b15      	ldr	r3, [pc, #84]	; (800445c <xPortStartScheduler+0x138>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a14      	ldr	r2, [pc, #80]	; (800445c <xPortStartScheduler+0x138>)
 800440c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004410:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004412:	f000 f8db 	bl	80045cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <xPortStartScheduler+0x13c>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800441c:	f000 f8fa 	bl	8004614 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004420:	4b10      	ldr	r3, [pc, #64]	; (8004464 <xPortStartScheduler+0x140>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <xPortStartScheduler+0x140>)
 8004426:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800442a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800442c:	f7ff ff64 	bl	80042f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004430:	f7ff fd56 	bl	8003ee0 <vTaskSwitchContext>
    prvTaskExitError();
 8004434:	f7ff ff1e 	bl	8004274 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	e000ed00 	.word	0xe000ed00
 8004448:	410fc271 	.word	0x410fc271
 800444c:	410fc270 	.word	0x410fc270
 8004450:	e000e400 	.word	0xe000e400
 8004454:	20000350 	.word	0x20000350
 8004458:	20000354 	.word	0x20000354
 800445c:	e000ed20 	.word	0xe000ed20
 8004460:	20000014 	.word	0x20000014
 8004464:	e000ef34 	.word	0xe000ef34

08004468 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
        __asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	607b      	str	r3, [r7, #4]
    }
 8004480:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <vPortEnterCritical+0x58>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <vPortEnterCritical+0x58>)
 800448a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <vPortEnterCritical+0x58>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10f      	bne.n	80044b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <vPortEnterCritical+0x5c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	603b      	str	r3, [r7, #0]
    }
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <vPortEnterCritical+0x4a>
    }
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20000014 	.word	0x20000014
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80044ce:	4b12      	ldr	r3, [pc, #72]	; (8004518 <vPortExitCritical+0x50>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <vPortExitCritical+0x24>
        __asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	607b      	str	r3, [r7, #4]
    }
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <vPortExitCritical+0x50>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <vPortExitCritical+0x50>)
 80044f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044f6:	4b08      	ldr	r3, [pc, #32]	; (8004518 <vPortExitCritical+0x50>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d105      	bne.n	800450a <vPortExitCritical+0x42>
 80044fe:	2300      	movs	r3, #0
 8004500:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004508:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000014 	.word	0x20000014
 800451c:	00000000 	.word	0x00000000

08004520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004520:	f3ef 8009 	mrs	r0, PSP
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <pxCurrentTCBConst>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	f01e 0f10 	tst.w	lr, #16
 8004530:	bf08      	it	eq
 8004532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453a:	6010      	str	r0, [r2, #0]
 800453c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004540:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004544:	f380 8811 	msr	BASEPRI, r0
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f7ff fcc6 	bl	8003ee0 <vTaskSwitchContext>
 8004554:	f04f 0000 	mov.w	r0, #0
 8004558:	f380 8811 	msr	BASEPRI, r0
 800455c:	bc09      	pop	{r0, r3}
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	6808      	ldr	r0, [r1, #0]
 8004562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004566:	f01e 0f10 	tst.w	lr, #16
 800456a:	bf08      	it	eq
 800456c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004570:	f380 8809 	msr	PSP, r0
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst>:
 8004580:	2000024c 	.word	0x2000024c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
        __asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	607b      	str	r3, [r7, #4]
    }
 80045a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045a2:	f7ff fba5 	bl	8003cf0 <xTaskIncrementTick>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045ac:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <SysTick_Handler+0x40>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	f383 8811 	msr	BASEPRI, r3
    }
 80045be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80045c0:	bf00      	nop
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <vPortSetupTimerInterrupt+0x34>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <vPortSetupTimerInterrupt+0x38>)
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <vPortSetupTimerInterrupt+0x3c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a0a      	ldr	r2, [pc, #40]	; (800460c <vPortSetupTimerInterrupt+0x40>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	099b      	lsrs	r3, r3, #6
 80045e8:	4a09      	ldr	r2, [pc, #36]	; (8004610 <vPortSetupTimerInterrupt+0x44>)
 80045ea:	3b01      	subs	r3, #1
 80045ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045ee:	4b04      	ldr	r3, [pc, #16]	; (8004600 <vPortSetupTimerInterrupt+0x34>)
 80045f0:	2207      	movs	r2, #7
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	e000e010 	.word	0xe000e010
 8004604:	e000e018 	.word	0xe000e018
 8004608:	20000004 	.word	0x20000004
 800460c:	10624dd3 	.word	0x10624dd3
 8004610:	e000e014 	.word	0xe000e014

08004614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004614:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004624 <vPortEnableVFP+0x10>
 8004618:	6801      	ldr	r1, [r0, #0]
 800461a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800461e:	6001      	str	r1, [r0, #0]
 8004620:	4770      	bx	lr
 8004622:	0000      	.short	0x0000
 8004624:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop

0800462c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004638:	f7ff fa5a 	bl	8003af0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800463c:	4b53      	ldr	r3, [pc, #332]	; (800478c <pvPortMalloc+0x160>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004644:	f000 f908 	bl	8004858 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d012      	beq.n	8004674 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800464e:	2208      	movs	r2, #8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	3308      	adds	r3, #8
 800465a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	43db      	mvns	r3, r3
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	429a      	cmp	r2, r3
 8004664:	d804      	bhi.n	8004670 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	4413      	add	r3, r2
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	e001      	b.n	8004674 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	db70      	blt.n	800475c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d06d      	beq.n	800475c <pvPortMalloc+0x130>
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <pvPortMalloc+0x164>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	d868      	bhi.n	800475c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800468a:	4b42      	ldr	r3, [pc, #264]	; (8004794 <pvPortMalloc+0x168>)
 800468c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800468e:	4b41      	ldr	r3, [pc, #260]	; (8004794 <pvPortMalloc+0x168>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004694:	e004      	b.n	80046a0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d903      	bls.n	80046b2 <pvPortMalloc+0x86>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f1      	bne.n	8004696 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046b2:	4b36      	ldr	r3, [pc, #216]	; (800478c <pvPortMalloc+0x160>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d04f      	beq.n	800475c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2208      	movs	r2, #8
 80046c2:	4413      	add	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	1ad2      	subs	r2, r2, r3
 80046d6:	2308      	movs	r3, #8
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	429a      	cmp	r2, r3
 80046dc:	d91f      	bls.n	800471e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4413      	add	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <pvPortMalloc+0xda>
        __asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	613b      	str	r3, [r7, #16]
    }
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	1ad2      	subs	r2, r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004718:	6978      	ldr	r0, [r7, #20]
 800471a:	f000 f8f9 	bl	8004910 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <pvPortMalloc+0x164>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	4a19      	ldr	r2, [pc, #100]	; (8004790 <pvPortMalloc+0x164>)
 800472a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800472c:	4b18      	ldr	r3, [pc, #96]	; (8004790 <pvPortMalloc+0x164>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b19      	ldr	r3, [pc, #100]	; (8004798 <pvPortMalloc+0x16c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d203      	bcs.n	8004740 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <pvPortMalloc+0x164>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a16      	ldr	r2, [pc, #88]	; (8004798 <pvPortMalloc+0x16c>)
 800473e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <pvPortMalloc+0x170>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3301      	adds	r3, #1
 8004758:	4a10      	ldr	r2, [pc, #64]	; (800479c <pvPortMalloc+0x170>)
 800475a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800475c:	f7ff f9d6 	bl	8003b0c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <pvPortMalloc+0x154>
        __asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	60fb      	str	r3, [r7, #12]
    }
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <pvPortMalloc+0x152>
    return pvReturn;
 8004780:	69fb      	ldr	r3, [r7, #28]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3728      	adds	r7, #40	; 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	2000b760 	.word	0x2000b760
 8004790:	2000b764 	.word	0x2000b764
 8004794:	2000b758 	.word	0x2000b758
 8004798:	2000b768 	.word	0x2000b768
 800479c:	2000b76c 	.word	0x2000b76c

080047a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d049      	beq.n	8004846 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047b2:	2308      	movs	r3, #8
 80047b4:	425b      	negs	r3, r3
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4413      	add	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	db0a      	blt.n	80047de <vPortFree+0x3e>
        __asm volatile
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	60fb      	str	r3, [r7, #12]
    }
 80047da:	bf00      	nop
 80047dc:	e7fe      	b.n	80047dc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <vPortFree+0x5c>
        __asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	60bb      	str	r3, [r7, #8]
    }
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	0fdb      	lsrs	r3, r3, #31
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d118      	bne.n	8004846 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004820:	f7ff f966 	bl	8003af0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <vPortFree+0xb0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4413      	add	r3, r2
 800482e:	4a08      	ldr	r2, [pc, #32]	; (8004850 <vPortFree+0xb0>)
 8004830:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004832:	6938      	ldr	r0, [r7, #16]
 8004834:	f000 f86c 	bl	8004910 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <vPortFree+0xb4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	4a05      	ldr	r2, [pc, #20]	; (8004854 <vPortFree+0xb4>)
 8004840:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004842:	f7ff f963 	bl	8003b0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000b764 	.word	0x2000b764
 8004854:	2000b770 	.word	0x2000b770

08004858 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800485e:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 8004862:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <prvHeapInit+0xa4>)
 8004866:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00c      	beq.n	800488c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3307      	adds	r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <prvHeapInit+0xa4>)
 8004888:	4413      	add	r3, r2
 800488a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004890:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <prvHeapInit+0xa8>)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <prvHeapInit+0xa8>)
 8004898:	2200      	movs	r2, #0
 800489a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	4413      	add	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80048a4:	2208      	movs	r2, #8
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0307 	bic.w	r3, r3, #7
 80048b2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a13      	ldr	r2, [pc, #76]	; (8004904 <prvHeapInit+0xac>)
 80048b8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <prvHeapInit+0xac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2200      	movs	r2, #0
 80048c0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <prvHeapInit+0xac>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	1ad2      	subs	r2, r2, r3
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <prvHeapInit+0xac>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4a08      	ldr	r2, [pc, #32]	; (8004908 <prvHeapInit+0xb0>)
 80048e6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	4a07      	ldr	r2, [pc, #28]	; (800490c <prvHeapInit+0xb4>)
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000358 	.word	0x20000358
 8004900:	2000b758 	.word	0x2000b758
 8004904:	2000b760 	.word	0x2000b760
 8004908:	2000b768 	.word	0x2000b768
 800490c:	2000b764 	.word	0x2000b764

08004910 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004918:	4b28      	ldr	r3, [pc, #160]	; (80049bc <prvInsertBlockIntoFreeList+0xac>)
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e002      	b.n	8004924 <prvInsertBlockIntoFreeList+0x14>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d8f7      	bhi.n	800491e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	4413      	add	r3, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d108      	bne.n	8004952 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	441a      	add	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d118      	bne.n	8004998 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <prvInsertBlockIntoFreeList+0xb0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d00d      	beq.n	800498e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e008      	b.n	80049a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <prvInsertBlockIntoFreeList+0xb0>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	e003      	b.n	80049a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d002      	beq.n	80049ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	2000b758 	.word	0x2000b758
 80049c0:	2000b760 	.word	0x2000b760

080049c4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80049d2:	2205      	movs	r2, #5
 80049d4:	492b      	ldr	r1, [pc, #172]	; (8004a84 <SYSVIEW_AddTask+0xc0>)
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f002 fbf4 	bl	80071c4 <memcmp>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d04b      	beq.n	8004a7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80049e2:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b07      	cmp	r3, #7
 80049e8:	d903      	bls.n	80049f2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80049ea:	4828      	ldr	r0, [pc, #160]	; (8004a8c <SYSVIEW_AddTask+0xc8>)
 80049ec:	f001 fe02 	bl	80065f4 <SEGGER_SYSVIEW_Warn>
    return;
 80049f0:	e044      	b.n	8004a7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80049f2:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4926      	ldr	r1, [pc, #152]	; (8004a90 <SYSVIEW_AddTask+0xcc>)
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004a06:	4b20      	ldr	r3, [pc, #128]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4921      	ldr	r1, [pc, #132]	; (8004a90 <SYSVIEW_AddTask+0xcc>)
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	3304      	adds	r3, #4
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004a1c:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	491b      	ldr	r1, [pc, #108]	; (8004a90 <SYSVIEW_AddTask+0xcc>)
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4916      	ldr	r1, [pc, #88]	; (8004a90 <SYSVIEW_AddTask+0xcc>)
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	330c      	adds	r3, #12
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4910      	ldr	r1, [pc, #64]	; (8004a90 <SYSVIEW_AddTask+0xcc>)
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3310      	adds	r3, #16
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <SYSVIEW_AddTask+0xc4>)
 8004a66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f80e 	bl	8004a94 <SYSVIEW_SendTaskInfo>
 8004a78:	e000      	b.n	8004a7c <SYSVIEW_AddTask+0xb8>
    return;
 8004a7a:	bf00      	nop

}
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	08008330 	.word	0x08008330
 8004a88:	2000b814 	.word	0x2000b814
 8004a8c:	08008338 	.word	0x08008338
 8004a90:	2000b774 	.word	0x2000b774

08004a94 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	; 0x28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004aa2:	f107 0314 	add.w	r3, r7, #20
 8004aa6:	2214      	movs	r2, #20
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f002 fba8 	bl	8007200 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fa97 	bl	8005ffc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004ace:	bf00      	nop
 8004ad0:	3728      	adds	r7, #40	; 0x28
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <_DoInit+0xa0>)
 8004ae0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004ae2:	22a8      	movs	r2, #168	; 0xa8
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f002 fb8a 	bl	8007200 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2203      	movs	r2, #3
 8004af0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2203      	movs	r2, #3
 8004af6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	4a20      	ldr	r2, [pc, #128]	; (8004b7c <_DoInit+0xa4>)
 8004afc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <_DoInit+0xa8>)
 8004b02:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b0a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <_DoInit+0xa4>)
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <_DoInit+0xac>)
 8004b28:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004b42:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e00c      	b.n	8004b66 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f1c3 030f 	rsb	r3, r3, #15
 8004b52:	4a0d      	ldr	r2, [pc, #52]	; (8004b88 <_DoInit+0xb0>)
 8004b54:	5cd1      	ldrb	r1, [r2, r3]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	460a      	mov	r2, r1
 8004b5e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3301      	adds	r3, #1
 8004b64:	607b      	str	r3, [r7, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b0f      	cmp	r3, #15
 8004b6a:	d9ef      	bls.n	8004b4c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004b6c:	f3bf 8f5f 	dmb	sy
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	2000b818 	.word	0x2000b818
 8004b7c:	08008388 	.word	0x08008388
 8004b80:	2000b8c0 	.word	0x2000b8c0
 8004b84:	2000bcc0 	.word	0x2000bcc0
 8004b88:	080083c4 	.word	0x080083c4

08004b8c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	; 0x28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d905      	bls.n	8004bbc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	e007      	b.n	8004bcc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	1acb      	subs	r3, r1, r3
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bf28      	it	cs
 8004bda:	4613      	movcs	r3, r2
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4293      	cmp	r3, r2
 8004be4:	bf28      	it	cs
 8004be6:	4613      	movcs	r3, r2
 8004be8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	6978      	ldr	r0, [r7, #20]
 8004bfa:	f002 faf3 	bl	80071e4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004bfe:	6a3a      	ldr	r2, [r7, #32]
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	4413      	add	r3, r2
 8004c04:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	4413      	add	r3, r2
 8004c0c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	4413      	add	r3, r2
 8004c1c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d101      	bne.n	8004c2c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c2c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1b2      	bne.n	8004ba2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b088      	sub	sp, #32
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d911      	bls.n	8004c8e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	6938      	ldr	r0, [r7, #16]
 8004c7a:	f002 fab3 	bl	80071e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c7e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004c82:	69fa      	ldr	r2, [r7, #28]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	441a      	add	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004c8c:	e01f      	b.n	8004cce <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	6938      	ldr	r0, [r7, #16]
 8004ca2:	f002 fa9f 	bl	80071e4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	4413      	add	r3, r2
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6938      	ldr	r0, [r7, #16]
 8004cc0:	f002 fa90 	bl	80071e4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004cc4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	60da      	str	r2, [r3, #12]
}
 8004cce:	bf00      	nop
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d808      	bhi.n	8004d04 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad2      	subs	r2, r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	e004      	b.n	8004d0e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004d0e:	697b      	ldr	r3, [r7, #20]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08c      	sub	sp, #48	; 0x30
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d28:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d2a:	623b      	str	r3, [r7, #32]
 8004d2c:	6a3b      	ldr	r3, [r7, #32]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <SEGGER_RTT_ReadNoLock+0x1e>
 8004d36:	f7ff fecf 	bl	8004ad8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	3360      	adds	r3, #96	; 0x60
 8004d46:	4a37      	ldr	r2, [pc, #220]	; (8004e24 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d92b      	bls.n	8004dc0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4293      	cmp	r3, r2
 8004d78:	bf28      	it	cs
 8004d7a:	4613      	movcs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	4413      	add	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	6939      	ldr	r1, [r7, #16]
 8004d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d8e:	f002 fa29 	bl	80071e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	4413      	add	r3, r2
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d101      	bne.n	8004dc0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	bf28      	it	cs
 8004dd0:	4613      	movcs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d019      	beq.n	8004e0e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	4413      	add	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	6939      	ldr	r1, [r7, #16]
 8004de8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dea:	f002 f9fb 	bl	80071e4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e18:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3730      	adds	r7, #48	; 0x30
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	2000b818 	.word	0x2000b818

08004e28 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4413      	add	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004e46:	4413      	add	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d029      	beq.n	8004ea6 <SEGGER_RTT_WriteNoLock+0x7e>
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d82e      	bhi.n	8004eb4 <SEGGER_RTT_WriteNoLock+0x8c>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <SEGGER_RTT_WriteNoLock+0x38>
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d013      	beq.n	8004e86 <SEGGER_RTT_WriteNoLock+0x5e>
 8004e5e:	e029      	b.n	8004eb4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f7ff ff38 	bl	8004cd6 <_GetAvailWriteSpace>
 8004e66:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d202      	bcs.n	8004e76 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004e74:	e021      	b.n	8004eba <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	6978      	ldr	r0, [r7, #20]
 8004e80:	f7ff fee1 	bl	8004c46 <_WriteNoCheck>
    break;
 8004e84:	e019      	b.n	8004eba <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff ff25 	bl	8004cd6 <_GetAvailWriteSpace>
 8004e8c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	4293      	cmp	r3, r2
 8004e94:	bf28      	it	cs
 8004e96:	4613      	movcs	r3, r2
 8004e98:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	6978      	ldr	r0, [r7, #20]
 8004ea0:	f7ff fed1 	bl	8004c46 <_WriteNoCheck>
    break;
 8004ea4:	e009      	b.n	8004eba <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	6978      	ldr	r0, [r7, #20]
 8004eac:	f7ff fe6e 	bl	8004b8c <_WriteBlocking>
 8004eb0:	61f8      	str	r0, [r7, #28]
    break;
 8004eb2:	e002      	b.n	8004eba <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
    break;
 8004eb8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004eba:	69fb      	ldr	r3, [r7, #28]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	2000b818 	.word	0x2000b818

08004ec8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <SEGGER_RTT_Write+0x48>)
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <SEGGER_RTT_Write+0x1e>
 8004ee2:	f7ff fdf9 	bl	8004ad8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ee6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eea:	f04f 0120 	mov.w	r1, #32
 8004eee:	f381 8811 	msr	BASEPRI, r1
 8004ef2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7ff ff95 	bl	8004e28 <SEGGER_RTT_WriteNoLock>
 8004efe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004f06:	697b      	ldr	r3, [r7, #20]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	2000b818 	.word	0x2000b818

08004f14 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00f      	beq.n	8004f4a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004f2a:	e002      	b.n	8004f32 <_EncodeStr+0x1e>
      Len++;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	4413      	add	r3, r2
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1f6      	bne.n	8004f2c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d901      	bls.n	8004f4a <_EncodeStr+0x36>
      Len = Limit;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2bfe      	cmp	r3, #254	; 0xfe
 8004f4e:	d806      	bhi.n	8004f5e <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	60fa      	str	r2, [r7, #12]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e011      	b.n	8004f82 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	60fa      	str	r2, [r7, #12]
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	0a19      	lsrs	r1, r3, #8
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	60fa      	str	r2, [r7, #12]
 8004f7e:	b2ca      	uxtb	r2, r1
 8004f80:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f86:	e00a      	b.n	8004f9e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	1c53      	adds	r3, r2, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1c59      	adds	r1, r3, #1
 8004f92:	60f9      	str	r1, [r7, #12]
 8004f94:	7812      	ldrb	r2, [r2, #0]
 8004f96:	701a      	strb	r2, [r3, #0]
    n++;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3f0      	bcc.n	8004f88 <_EncodeStr+0x74>
  }
  return pPayload;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3307      	adds	r3, #7
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004fd2:	4b35      	ldr	r3, [pc, #212]	; (80050a8 <_HandleIncomingPacket+0xdc>)
 8004fd4:	7e1b      	ldrb	r3, [r3, #24]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	1cfb      	adds	r3, r7, #3
 8004fda:	2201      	movs	r2, #1
 8004fdc:	4619      	mov	r1, r3
 8004fde:	f7ff fe9d 	bl	8004d1c <SEGGER_RTT_ReadNoLock>
 8004fe2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d052      	beq.n	8005090 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	2b80      	cmp	r3, #128	; 0x80
 8004fee:	d031      	beq.n	8005054 <_HandleIncomingPacket+0x88>
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	dc40      	bgt.n	8005076 <_HandleIncomingPacket+0xaa>
 8004ff4:	2b07      	cmp	r3, #7
 8004ff6:	dc15      	bgt.n	8005024 <_HandleIncomingPacket+0x58>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dd3c      	ble.n	8005076 <_HandleIncomingPacket+0xaa>
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	2b06      	cmp	r3, #6
 8005000:	d839      	bhi.n	8005076 <_HandleIncomingPacket+0xaa>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <_HandleIncomingPacket+0x3c>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	0800502b 	.word	0x0800502b
 800500c:	08005031 	.word	0x08005031
 8005010:	08005037 	.word	0x08005037
 8005014:	0800503d 	.word	0x0800503d
 8005018:	08005043 	.word	0x08005043
 800501c:	08005049 	.word	0x08005049
 8005020:	0800504f 	.word	0x0800504f
 8005024:	2b7f      	cmp	r3, #127	; 0x7f
 8005026:	d035      	beq.n	8005094 <_HandleIncomingPacket+0xc8>
 8005028:	e025      	b.n	8005076 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800502a:	f000 fe6d 	bl	8005d08 <SEGGER_SYSVIEW_Start>
      break;
 800502e:	e036      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005030:	f000 ff24 	bl	8005e7c <SEGGER_SYSVIEW_Stop>
      break;
 8005034:	e033      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005036:	f001 f8d9 	bl	80061ec <SEGGER_SYSVIEW_RecordSystime>
      break;
 800503a:	e030      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800503c:	f001 f8c2 	bl	80061c4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005040:	e02d      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005042:	f000 ff41 	bl	8005ec8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005046:	e02a      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005048:	f001 fa82 	bl	8006550 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800504c:	e027      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800504e:	f001 fa61 	bl	8006514 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005052:	e024      	b.n	800509e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005054:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <_HandleIncomingPacket+0xdc>)
 8005056:	7e1b      	ldrb	r3, [r3, #24]
 8005058:	4618      	mov	r0, r3
 800505a:	1cfb      	adds	r3, r7, #3
 800505c:	2201      	movs	r2, #1
 800505e:	4619      	mov	r1, r3
 8005060:	f7ff fe5c 	bl	8004d1c <SEGGER_RTT_ReadNoLock>
 8005064:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d015      	beq.n	8005098 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	4618      	mov	r0, r3
 8005070:	f001 f9d0 	bl	8006414 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005074:	e010      	b.n	8005098 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	b25b      	sxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	da0e      	bge.n	800509c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <_HandleIncomingPacket+0xdc>)
 8005080:	7e1b      	ldrb	r3, [r3, #24]
 8005082:	4618      	mov	r0, r3
 8005084:	1cfb      	adds	r3, r7, #3
 8005086:	2201      	movs	r2, #1
 8005088:	4619      	mov	r1, r3
 800508a:	f7ff fe47 	bl	8004d1c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800508e:	e005      	b.n	800509c <_HandleIncomingPacket+0xd0>
    }
  }
 8005090:	bf00      	nop
 8005092:	e004      	b.n	800509e <_HandleIncomingPacket+0xd2>
      break;
 8005094:	bf00      	nop
 8005096:	e002      	b.n	800509e <_HandleIncomingPacket+0xd2>
      break;
 8005098:	bf00      	nop
 800509a:	e000      	b.n	800509e <_HandleIncomingPacket+0xd2>
      break;
 800509c:	bf00      	nop
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2000bcd0 	.word	0x2000bcd0

080050ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80050b2:	2301      	movs	r3, #1
 80050b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c0:	4b31      	ldr	r3, [pc, #196]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c6:	e00b      	b.n	80050e0 <_TrySendOverflowPacket+0x34>
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	1c59      	adds	r1, r3, #1
 80050d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	09db      	lsrs	r3, r3, #7
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e2:	2b7f      	cmp	r3, #127	; 0x7f
 80050e4:	d8f0      	bhi.n	80050c8 <_TrySendOverflowPacket+0x1c>
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]
 80050f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050f6:	4b25      	ldr	r3, [pc, #148]	; (800518c <_TrySendOverflowPacket+0xe0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	e00b      	b.n	8005128 <_TrySendOverflowPacket+0x7c>
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	b2da      	uxtb	r2, r3
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	1c59      	adds	r1, r3, #1
 8005118:	6279      	str	r1, [r7, #36]	; 0x24
 800511a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	09db      	lsrs	r3, r3, #7
 8005126:	623b      	str	r3, [r7, #32]
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	2b7f      	cmp	r3, #127	; 0x7f
 800512c:	d8f0      	bhi.n	8005110 <_TrySendOverflowPacket+0x64>
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	627a      	str	r2, [r7, #36]	; 0x24
 8005134:	6a3a      	ldr	r2, [r7, #32]
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	4618      	mov	r0, r3
 8005144:	1d3b      	adds	r3, r7, #4
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	461a      	mov	r2, r3
 800514c:	1d3b      	adds	r3, r7, #4
 800514e:	4619      	mov	r1, r3
 8005150:	f7fb f846 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005154:	4603      	mov	r3, r0
 8005156:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	3b01      	subs	r3, #1
 800516a:	b2da      	uxtb	r2, r3
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 800516e:	701a      	strb	r2, [r3, #0]
 8005170:	e004      	b.n	800517c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	3301      	adds	r3, #1
 8005178:	4a03      	ldr	r2, [pc, #12]	; (8005188 <_TrySendOverflowPacket+0xdc>)
 800517a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800517c:	693b      	ldr	r3, [r7, #16]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3730      	adds	r7, #48	; 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	2000bcd0 	.word	0x2000bcd0
 800518c:	e0001004 	.word	0xe0001004

08005190 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800519c:	4b98      	ldr	r3, [pc, #608]	; (8005400 <_SendPacket+0x270>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d010      	beq.n	80051c6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80051a4:	4b96      	ldr	r3, [pc, #600]	; (8005400 <_SendPacket+0x270>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 812d 	beq.w	8005408 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80051ae:	4b94      	ldr	r3, [pc, #592]	; (8005400 <_SendPacket+0x270>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d109      	bne.n	80051ca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80051b6:	f7ff ff79 	bl	80050ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80051ba:	4b91      	ldr	r3, [pc, #580]	; (8005400 <_SendPacket+0x270>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	f040 8124 	bne.w	800540c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80051c4:	e001      	b.n	80051ca <_SendPacket+0x3a>
    goto Send;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <_SendPacket+0x3c>
Send:
 80051ca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b1f      	cmp	r3, #31
 80051d0:	d809      	bhi.n	80051e6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80051d2:	4b8b      	ldr	r3, [pc, #556]	; (8005400 <_SendPacket+0x270>)
 80051d4:	69da      	ldr	r2, [r3, #28]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 8115 	bne.w	8005410 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b17      	cmp	r3, #23
 80051ea:	d807      	bhi.n	80051fc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	701a      	strb	r2, [r3, #0]
 80051fa:	e0c4      	b.n	8005386 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b7f      	cmp	r3, #127	; 0x7f
 8005208:	d912      	bls.n	8005230 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	09da      	lsrs	r2, r3, #7
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3b01      	subs	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	3a01      	subs	r2, #1
 8005222:	60fa      	str	r2, [r7, #12]
 8005224:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e006      	b.n	800523e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b01      	subs	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b7e      	cmp	r3, #126	; 0x7e
 8005242:	d807      	bhi.n	8005254 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3b01      	subs	r3, #1
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e098      	b.n	8005386 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800525a:	d212      	bcs.n	8005282 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	09da      	lsrs	r2, r3, #7
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3b01      	subs	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	3a01      	subs	r2, #1
 8005274:	60fa      	str	r2, [r7, #12]
 8005276:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800527a:	b2da      	uxtb	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	701a      	strb	r2, [r3, #0]
 8005280:	e081      	b.n	8005386 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005288:	d21d      	bcs.n	80052c6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0b9a      	lsrs	r2, r3, #14
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b01      	subs	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	09db      	lsrs	r3, r3, #7
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	3a01      	subs	r2, #1
 80052a4:	60fa      	str	r2, [r7, #12]
 80052a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	3a01      	subs	r2, #1
 80052b8:	60fa      	str	r2, [r7, #12]
 80052ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	701a      	strb	r2, [r3, #0]
 80052c4:	e05f      	b.n	8005386 <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052cc:	d228      	bcs.n	8005320 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0d5a      	lsrs	r2, r3, #21
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	0b9b      	lsrs	r3, r3, #14
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	3a01      	subs	r2, #1
 80052e8:	60fa      	str	r2, [r7, #12]
 80052ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	09db      	lsrs	r3, r3, #7
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	3a01      	subs	r2, #1
 80052fe:	60fa      	str	r2, [r7, #12]
 8005300:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	3a01      	subs	r2, #1
 8005312:	60fa      	str	r2, [r7, #12]
 8005314:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	e032      	b.n	8005386 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	0f1a      	lsrs	r2, r3, #28
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3b01      	subs	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0d5b      	lsrs	r3, r3, #21
 8005334:	b2db      	uxtb	r3, r3
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	3a01      	subs	r2, #1
 800533a:	60fa      	str	r2, [r7, #12]
 800533c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0b9b      	lsrs	r3, r3, #14
 800534a:	b2db      	uxtb	r3, r3
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	3a01      	subs	r2, #1
 8005350:	60fa      	str	r2, [r7, #12]
 8005352:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	b2db      	uxtb	r3, r3
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	3a01      	subs	r2, #1
 8005366:	60fa      	str	r2, [r7, #12]
 8005368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	3a01      	subs	r2, #1
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005386:	4b1f      	ldr	r3, [pc, #124]	; (8005404 <_SendPacket+0x274>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800538c:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <_SendPacket+0x270>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	e00b      	b.n	80053b8 <_SendPacket+0x228>
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	6279      	str	r1, [r7, #36]	; 0x24
 80053aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053ae:	b2d2      	uxtb	r2, r2
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	09db      	lsrs	r3, r3, #7
 80053b6:	623b      	str	r3, [r7, #32]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b7f      	cmp	r3, #127	; 0x7f
 80053bc:	d8f0      	bhi.n	80053a0 <_SendPacket+0x210>
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	627a      	str	r2, [r7, #36]	; 0x24
 80053c4:	6a3a      	ldr	r2, [r7, #32]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80053ce:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <_SendPacket+0x270>)
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	4618      	mov	r0, r3
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	68f9      	ldr	r1, [r7, #12]
 80053de:	f7fa feff 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80053e2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053ea:	4a05      	ldr	r2, [pc, #20]	; (8005400 <_SendPacket+0x270>)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	60d3      	str	r3, [r2, #12]
 80053f0:	e00f      	b.n	8005412 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80053f2:	4b03      	ldr	r3, [pc, #12]	; (8005400 <_SendPacket+0x270>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	3301      	adds	r3, #1
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	4b01      	ldr	r3, [pc, #4]	; (8005400 <_SendPacket+0x270>)
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e008      	b.n	8005412 <_SendPacket+0x282>
 8005400:	2000bcd0 	.word	0x2000bcd0
 8005404:	e0001004 	.word	0xe0001004
    goto SendDone;
 8005408:	bf00      	nop
 800540a:	e002      	b.n	8005412 <_SendPacket+0x282>
      goto SendDone;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <_SendPacket+0x282>
      goto SendDone;
 8005410:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <_SendPacket+0x2d4>)
 8005414:	7e1b      	ldrb	r3, [r3, #24]
 8005416:	4619      	mov	r1, r3
 8005418:	4a13      	ldr	r2, [pc, #76]	; (8005468 <_SendPacket+0x2d8>)
 800541a:	460b      	mov	r3, r1
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	440b      	add	r3, r1
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4413      	add	r3, r2
 8005424:	336c      	adds	r3, #108	; 0x6c
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <_SendPacket+0x2d4>)
 800542a:	7e1b      	ldrb	r3, [r3, #24]
 800542c:	4618      	mov	r0, r3
 800542e:	490e      	ldr	r1, [pc, #56]	; (8005468 <_SendPacket+0x2d8>)
 8005430:	4603      	mov	r3, r0
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	4403      	add	r3, r0
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	440b      	add	r3, r1
 800543a:	3370      	adds	r3, #112	; 0x70
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	429a      	cmp	r2, r3
 8005440:	d00b      	beq.n	800545a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <_SendPacket+0x2d4>)
 8005444:	789b      	ldrb	r3, [r3, #2]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d107      	bne.n	800545a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <_SendPacket+0x2d4>)
 800544c:	2201      	movs	r2, #1
 800544e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005450:	f7ff fdbc 	bl	8004fcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005454:	4b03      	ldr	r3, [pc, #12]	; (8005464 <_SendPacket+0x2d4>)
 8005456:	2200      	movs	r2, #0
 8005458:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800545a:	bf00      	nop
 800545c:	3728      	adds	r7, #40	; 0x28
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	2000bcd0 	.word	0x2000bcd0
 8005468:	2000b818 	.word	0x2000b818

0800546c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	; 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	3301      	adds	r3, #1
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d80a      	bhi.n	800549c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	6051      	str	r1, [r2, #4]
 8005490:	78fa      	ldrb	r2, [r7, #3]
 8005492:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d15a      	bne.n	800555a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	623b      	str	r3, [r7, #32]
 80054c4:	e00b      	b.n	80054de <_StoreChar+0x72>
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054cc:	1c59      	adds	r1, r3, #1
 80054ce:	6279      	str	r1, [r7, #36]	; 0x24
 80054d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	6a3b      	ldr	r3, [r7, #32]
 80054da:	09db      	lsrs	r3, r3, #7
 80054dc:	623b      	str	r3, [r7, #32]
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	2b7f      	cmp	r3, #127	; 0x7f
 80054e2:	d8f0      	bhi.n	80054c6 <_StoreChar+0x5a>
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	627a      	str	r2, [r7, #36]	; 0x24
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	61fb      	str	r3, [r7, #28]
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
 80054fc:	e00b      	b.n	8005516 <_StoreChar+0xaa>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	1c59      	adds	r1, r3, #1
 8005506:	61f9      	str	r1, [r7, #28]
 8005508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	09db      	lsrs	r3, r3, #7
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b7f      	cmp	r3, #127	; 0x7f
 800551a:	d8f0      	bhi.n	80054fe <_StoreChar+0x92>
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	1c5a      	adds	r2, r3, #1
 8005520:	61fa      	str	r2, [r7, #28]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	221a      	movs	r2, #26
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fe2b 	bl	8005190 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fd38 	bl	8004fb4 <_PreparePacket>
 8005544:	4602      	mov	r2, r0
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	611a      	str	r2, [r3, #16]
  }
}
 800555a:	bf00      	nop
 800555c:	3728      	adds	r7, #40	; 0x28
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005576:	2301      	movs	r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800557a:	2301      	movs	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800557e:	e007      	b.n	8005590 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005580:	6a3a      	ldr	r2, [r7, #32]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	623b      	str	r3, [r7, #32]
    Width++;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3301      	adds	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d2f3      	bcs.n	8005580 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	429a      	cmp	r2, r3
 800559e:	d901      	bls.n	80055a4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11f      	bne.n	80055ee <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01c      	beq.n	80055ee <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <_PrintUnsigned+0x66>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <_PrintUnsigned+0x66>
        c = '0';
 80055c4:	2330      	movs	r3, #48	; 0x30
 80055c6:	76fb      	strb	r3, [r7, #27]
 80055c8:	e001      	b.n	80055ce <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80055ca:	2320      	movs	r3, #32
 80055cc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055ce:	e007      	b.n	80055e0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	3b01      	subs	r3, #1
 80055d4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80055d6:	7efb      	ldrb	r3, [r7, #27]
 80055d8:	4619      	mov	r1, r3
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f7ff ff46 	bl	800546c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <_PrintUnsigned+0x8a>
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d3f0      	bcc.n	80055d0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d903      	bls.n	80055fc <_PrintUnsigned+0x98>
      NumDigits--;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	e009      	b.n	8005610 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	fbb2 f3f3 	udiv	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d200      	bcs.n	8005610 <_PrintUnsigned+0xac>
        break;
 800560e:	e005      	b.n	800561c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	fb02 f303 	mul.w	r3, r2, r3
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800561a:	e7e8      	b.n	80055ee <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	fbb2 f3f3 	udiv	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <_PrintUnsigned+0x128>)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	4619      	mov	r1, r3
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7ff ff14 	bl	800546c <_StoreChar>
    Digit /= Base;
 8005644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e3      	bne.n	800561c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d011      	beq.n	8005682 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00e      	beq.n	8005682 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005664:	e006      	b.n	8005674 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	3b01      	subs	r3, #1
 800566a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800566c:	2120      	movs	r1, #32
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff fefc 	bl	800546c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <_PrintUnsigned+0x11e>
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	429a      	cmp	r2, r3
 8005680:	d3f1      	bcc.n	8005666 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005682:	bf00      	nop
 8005684:	3728      	adds	r7, #40	; 0x28
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	080083e4 	.word	0x080083e4

08005690 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bfb8      	it	lt
 80056a4:	425b      	neglt	r3, r3
 80056a6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80056a8:	2301      	movs	r3, #1
 80056aa:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80056ac:	e007      	b.n	80056be <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80056b6:	613b      	str	r3, [r7, #16]
    Width++;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3301      	adds	r3, #1
 80056bc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	daf3      	bge.n	80056ae <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d901      	bls.n	80056d2 <_PrintInt+0x42>
    Width = NumDigits;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <_PrintInt+0x5e>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	db04      	blt.n	80056e8 <_PrintInt+0x58>
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <_PrintInt+0x5e>
    FieldWidth--;
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <_PrintInt+0x6e>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <_PrintInt+0x9c>
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	f003 0301 	and.w	r3, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800570e:	e006      	b.n	800571e <_PrintInt+0x8e>
        FieldWidth--;
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	3b01      	subs	r3, #1
 8005714:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005716:	2120      	movs	r1, #32
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff fea7 	bl	800546c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <_PrintInt+0x9c>
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	429a      	cmp	r2, r3
 800572a:	d3f1      	bcc.n	8005710 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	da07      	bge.n	8005742 <_PrintInt+0xb2>
    v = -v;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	425b      	negs	r3, r3
 8005736:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005738:	212d      	movs	r1, #45	; 0x2d
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fe96 	bl	800546c <_StoreChar>
 8005740:	e008      	b.n	8005754 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800574c:	212b      	movs	r1, #43	; 0x2b
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fe8c 	bl	800546c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d019      	beq.n	8005792 <_PrintInt+0x102>
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d114      	bne.n	8005792 <_PrintInt+0x102>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d111      	bne.n	8005792 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005774:	e006      	b.n	8005784 <_PrintInt+0xf4>
        FieldWidth--;
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	3b01      	subs	r3, #1
 800577a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800577c:	2130      	movs	r1, #48	; 0x30
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f7ff fe74 	bl	800546c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <_PrintInt+0x102>
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	429a      	cmp	r2, r3
 8005790:	d3f1      	bcc.n	8005776 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff fedf 	bl	8005564 <_PrintUnsigned>
}
 80057a6:	bf00      	nop
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b098      	sub	sp, #96	; 0x60
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057bc:	f3ef 8311 	mrs	r3, BASEPRI
 80057c0:	f04f 0120 	mov.w	r1, #32
 80057c4:	f381 8811 	msr	BASEPRI, r1
 80057c8:	633b      	str	r3, [r7, #48]	; 0x30
 80057ca:	48b7      	ldr	r0, [pc, #732]	; (8005aa8 <_VPrintTarget+0x2f8>)
 80057cc:	f7ff fbf2 	bl	8004fb4 <_PreparePacket>
 80057d0:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80057d2:	4bb5      	ldr	r3, [pc, #724]	; (8005aa8 <_VPrintTarget+0x2f8>)
 80057d4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80057d6:	2300      	movs	r3, #0
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3301      	adds	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80057f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8183 	beq.w	8005b06 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005804:	2b25      	cmp	r3, #37	; 0x25
 8005806:	f040 8170 	bne.w	8005aea <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800580a:	2300      	movs	r3, #0
 800580c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800581a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800581e:	3b23      	subs	r3, #35	; 0x23
 8005820:	2b0d      	cmp	r3, #13
 8005822:	d83f      	bhi.n	80058a4 <_VPrintTarget+0xf4>
 8005824:	a201      	add	r2, pc, #4	; (adr r2, 800582c <_VPrintTarget+0x7c>)
 8005826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582a:	bf00      	nop
 800582c:	08005895 	.word	0x08005895
 8005830:	080058a5 	.word	0x080058a5
 8005834:	080058a5 	.word	0x080058a5
 8005838:	080058a5 	.word	0x080058a5
 800583c:	080058a5 	.word	0x080058a5
 8005840:	080058a5 	.word	0x080058a5
 8005844:	080058a5 	.word	0x080058a5
 8005848:	080058a5 	.word	0x080058a5
 800584c:	08005885 	.word	0x08005885
 8005850:	080058a5 	.word	0x080058a5
 8005854:	08005865 	.word	0x08005865
 8005858:	080058a5 	.word	0x080058a5
 800585c:	080058a5 	.word	0x080058a5
 8005860:	08005875 	.word	0x08005875
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	64bb      	str	r3, [r7, #72]	; 0x48
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3301      	adds	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	e01a      	b.n	80058aa <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e012      	b.n	80058aa <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005886:	f043 0304 	orr.w	r3, r3, #4
 800588a:	64bb      	str	r3, [r7, #72]	; 0x48
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3301      	adds	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e00a      	b.n	80058aa <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005896:	f043 0308 	orr.w	r3, r3, #8
 800589a:	64bb      	str	r3, [r7, #72]	; 0x48
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	e002      	b.n	80058aa <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80058a4:	2300      	movs	r3, #0
 80058a6:	653b      	str	r3, [r7, #80]	; 0x50
 80058a8:	bf00      	nop
        }
      } while (v);
 80058aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1b0      	bne.n	8005812 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80058b0:	2300      	movs	r3, #0
 80058b2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80058bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c0:	2b2f      	cmp	r3, #47	; 0x2f
 80058c2:	d912      	bls.n	80058ea <_VPrintTarget+0x13a>
 80058c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b39      	cmp	r3, #57	; 0x39
 80058ca:	d80e      	bhi.n	80058ea <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80058d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	461a      	mov	r2, r3
 80058de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058e2:	4413      	add	r3, r2
 80058e4:	3b30      	subs	r3, #48	; 0x30
 80058e6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80058e8:	e7e4      	b.n	80058b4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80058ea:	2300      	movs	r3, #0
 80058ec:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80058f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fa:	2b2e      	cmp	r3, #46	; 0x2e
 80058fc:	d11d      	bne.n	800593a <_VPrintTarget+0x18a>
        sFormat++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800590c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005910:	2b2f      	cmp	r3, #47	; 0x2f
 8005912:	d912      	bls.n	800593a <_VPrintTarget+0x18a>
 8005914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005918:	2b39      	cmp	r3, #57	; 0x39
 800591a:	d80e      	bhi.n	800593a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	461a      	mov	r2, r3
 800592e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005932:	4413      	add	r3, r2
 8005934:	3b30      	subs	r3, #48	; 0x30
 8005936:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005938:	e7e4      	b.n	8005904 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005946:	2b6c      	cmp	r3, #108	; 0x6c
 8005948:	d003      	beq.n	8005952 <_VPrintTarget+0x1a2>
 800594a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800594e:	2b68      	cmp	r3, #104	; 0x68
 8005950:	d107      	bne.n	8005962 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005960:	e7ef      	b.n	8005942 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005962:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005966:	2b25      	cmp	r3, #37	; 0x25
 8005968:	f000 80b3 	beq.w	8005ad2 <_VPrintTarget+0x322>
 800596c:	2b25      	cmp	r3, #37	; 0x25
 800596e:	f2c0 80b7 	blt.w	8005ae0 <_VPrintTarget+0x330>
 8005972:	2b78      	cmp	r3, #120	; 0x78
 8005974:	f300 80b4 	bgt.w	8005ae0 <_VPrintTarget+0x330>
 8005978:	2b58      	cmp	r3, #88	; 0x58
 800597a:	f2c0 80b1 	blt.w	8005ae0 <_VPrintTarget+0x330>
 800597e:	3b58      	subs	r3, #88	; 0x58
 8005980:	2b20      	cmp	r3, #32
 8005982:	f200 80ad 	bhi.w	8005ae0 <_VPrintTarget+0x330>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <_VPrintTarget+0x1dc>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	08005a83 	.word	0x08005a83
 8005990:	08005ae1 	.word	0x08005ae1
 8005994:	08005ae1 	.word	0x08005ae1
 8005998:	08005ae1 	.word	0x08005ae1
 800599c:	08005ae1 	.word	0x08005ae1
 80059a0:	08005ae1 	.word	0x08005ae1
 80059a4:	08005ae1 	.word	0x08005ae1
 80059a8:	08005ae1 	.word	0x08005ae1
 80059ac:	08005ae1 	.word	0x08005ae1
 80059b0:	08005ae1 	.word	0x08005ae1
 80059b4:	08005ae1 	.word	0x08005ae1
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a37 	.word	0x08005a37
 80059c0:	08005ae1 	.word	0x08005ae1
 80059c4:	08005ae1 	.word	0x08005ae1
 80059c8:	08005ae1 	.word	0x08005ae1
 80059cc:	08005ae1 	.word	0x08005ae1
 80059d0:	08005ae1 	.word	0x08005ae1
 80059d4:	08005ae1 	.word	0x08005ae1
 80059d8:	08005ae1 	.word	0x08005ae1
 80059dc:	08005ae1 	.word	0x08005ae1
 80059e0:	08005ae1 	.word	0x08005ae1
 80059e4:	08005ae1 	.word	0x08005ae1
 80059e8:	08005ae1 	.word	0x08005ae1
 80059ec:	08005aad 	.word	0x08005aad
 80059f0:	08005ae1 	.word	0x08005ae1
 80059f4:	08005ae1 	.word	0x08005ae1
 80059f8:	08005ae1 	.word	0x08005ae1
 80059fc:	08005ae1 	.word	0x08005ae1
 8005a00:	08005a5d 	.word	0x08005a5d
 8005a04:	08005ae1 	.word	0x08005ae1
 8005a08:	08005ae1 	.word	0x08005ae1
 8005a0c:	08005a83 	.word	0x08005a83
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	1d19      	adds	r1, r3, #4
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6011      	str	r1, [r2, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005a24:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005a28:	f107 0314 	add.w	r3, r7, #20
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fd1c 	bl	800546c <_StoreChar>
        break;
 8005a34:	e055      	b.n	8005ae2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	1d19      	adds	r1, r3, #4
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	6011      	str	r1, [r2, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a44:	f107 0014 	add.w	r0, r7, #20
 8005a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a52:	220a      	movs	r2, #10
 8005a54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a56:	f7ff fe1b 	bl	8005690 <_PrintInt>
        break;
 8005a5a:	e042      	b.n	8005ae2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1d19      	adds	r1, r3, #4
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6011      	str	r1, [r2, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a6c:	f107 0014 	add.w	r0, r7, #20
 8005a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a72:	9301      	str	r3, [sp, #4]
 8005a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a7a:	220a      	movs	r2, #10
 8005a7c:	f7ff fd72 	bl	8005564 <_PrintUnsigned>
        break;
 8005a80:	e02f      	b.n	8005ae2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	1d19      	adds	r1, r3, #4
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6011      	str	r1, [r2, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005a90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a92:	f107 0014 	add.w	r0, r7, #20
 8005a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	f7ff fd5f 	bl	8005564 <_PrintUnsigned>
        break;
 8005aa6:	e01c      	b.n	8005ae2 <_VPrintTarget+0x332>
 8005aa8:	2000bd00 	.word	0x2000bd00
      case 'p':
        v = va_arg(*pParamList, int);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	1d19      	adds	r1, r3, #4
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6011      	str	r1, [r2, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005abc:	f107 0014 	add.w	r0, r7, #20
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	2308      	movs	r3, #8
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2308      	movs	r3, #8
 8005aca:	2210      	movs	r2, #16
 8005acc:	f7ff fd4a 	bl	8005564 <_PrintUnsigned>
        break;
 8005ad0:	e007      	b.n	8005ae2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005ad2:	f107 0314 	add.w	r3, r7, #20
 8005ad6:	2125      	movs	r1, #37	; 0x25
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fcc7 	bl	800546c <_StoreChar>
        break;
 8005ade:	e000      	b.n	8005ae2 <_VPrintTarget+0x332>
      default:
        break;
 8005ae0:	bf00      	nop
      }
      sFormat++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e007      	b.n	8005afa <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005aea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005aee:	f107 0314 	add.w	r3, r7, #20
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fcb9 	bl	800546c <_StoreChar>
    }
  } while (*sFormat);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f47f ae72 	bne.w	80057e8 <_VPrintTarget+0x38>
 8005b04:	e000      	b.n	8005b08 <_VPrintTarget+0x358>
      break;
 8005b06:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d041      	beq.n	8005b92 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b1e:	e00b      	b.n	8005b38 <_VPrintTarget+0x388>
 8005b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	6439      	str	r1, [r7, #64]	; 0x40
 8005b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]
 8005b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b34:	09db      	lsrs	r3, r3, #7
 8005b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b3c:	d8f0      	bhi.n	8005b20 <_VPrintTarget+0x370>
 8005b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	643a      	str	r2, [r7, #64]	; 0x40
 8005b44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b52:	2300      	movs	r3, #0
 8005b54:	637b      	str	r3, [r7, #52]	; 0x34
 8005b56:	e00b      	b.n	8005b70 <_VPrintTarget+0x3c0>
 8005b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5e:	1c59      	adds	r1, r3, #1
 8005b60:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	09db      	lsrs	r3, r3, #7
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	2b7f      	cmp	r3, #127	; 0x7f
 8005b74:	d8f0      	bhi.n	8005b58 <_VPrintTarget+0x3a8>
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	221a      	movs	r2, #26
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff faff 	bl	8005190 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005b98:	bf00      	nop
 8005b9a:	3758      	adds	r7, #88	; 0x58
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8005bac:	f04f 0120 	mov.w	r1, #32
 8005bb0:	f381 8811 	msr	BASEPRI, r1
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	4808      	ldr	r0, [pc, #32]	; (8005bd8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005bb8:	f7ff f9fc 	bl	8004fb4 <_PreparePacket>
 8005bbc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68b8      	ldr	r0, [r7, #8]
 8005bc4:	f7ff fae4 	bl	8005190 <_SendPacket>
  RECORD_END();
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f383 8811 	msr	BASEPRI, r3
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	2000bd00 	.word	0x2000bd00

08005bdc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005be6:	f3ef 8311 	mrs	r3, BASEPRI
 8005bea:	f04f 0120 	mov.w	r1, #32
 8005bee:	f381 8811 	msr	BASEPRI, r1
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	4816      	ldr	r0, [pc, #88]	; (8005c50 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005bf6:	f7ff f9dd 	bl	8004fb4 <_PreparePacket>
 8005bfa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	61bb      	str	r3, [r7, #24]
 8005c08:	e00b      	b.n	8005c22 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	1c59      	adds	r1, r3, #1
 8005c12:	61f9      	str	r1, [r7, #28]
 8005c14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	09db      	lsrs	r3, r3, #7
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	2b7f      	cmp	r3, #127	; 0x7f
 8005c26:	d8f0      	bhi.n	8005c0a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	61fa      	str	r2, [r7, #28]
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	6938      	ldr	r0, [r7, #16]
 8005c3e:	f7ff faa7 	bl	8005190 <_SendPacket>
  RECORD_END();
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f383 8811 	msr	BASEPRI, r3
}
 8005c48:	bf00      	nop
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	2000bd00 	.word	0x2000bd00

08005c54 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08c      	sub	sp, #48	; 0x30
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c60:	f3ef 8311 	mrs	r3, BASEPRI
 8005c64:	f04f 0120 	mov.w	r1, #32
 8005c68:	f381 8811 	msr	BASEPRI, r1
 8005c6c:	61fb      	str	r3, [r7, #28]
 8005c6e:	4825      	ldr	r0, [pc, #148]	; (8005d04 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005c70:	f7ff f9a0 	bl	8004fb4 <_PreparePacket>
 8005c74:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	623b      	str	r3, [r7, #32]
 8005cba:	e00b      	b.n	8005cd4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	6279      	str	r1, [r7, #36]	; 0x24
 8005cc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cca:	b2d2      	uxtb	r2, r2
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	09db      	lsrs	r3, r3, #7
 8005cd2:	623b      	str	r3, [r7, #32]
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd8:	d8f0      	bhi.n	8005cbc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	627a      	str	r2, [r7, #36]	; 0x24
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	69b8      	ldr	r0, [r7, #24]
 8005cf0:	f7ff fa4e 	bl	8005190 <_SendPacket>
  RECORD_END();
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f383 8811 	msr	BASEPRI, r3
}
 8005cfa:	bf00      	nop
 8005cfc:	3730      	adds	r7, #48	; 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	2000bd00 	.word	0x2000bd00

08005d08 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08c      	sub	sp, #48	; 0x30
 8005d0c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005d0e:	4b58      	ldr	r3, [pc, #352]	; (8005e70 <SEGGER_SYSVIEW_Start+0x168>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005d14:	f3ef 8311 	mrs	r3, BASEPRI
 8005d18:	f04f 0120 	mov.w	r1, #32
 8005d1c:	f381 8811 	msr	BASEPRI, r1
 8005d20:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005d22:	4b53      	ldr	r3, [pc, #332]	; (8005e70 <SEGGER_SYSVIEW_Start+0x168>)
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	220a      	movs	r2, #10
 8005d28:	4952      	ldr	r1, [pc, #328]	; (8005e74 <SEGGER_SYSVIEW_Start+0x16c>)
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fa fa58 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005d36:	200a      	movs	r0, #10
 8005d38:	f7ff ff32 	bl	8005ba0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d40:	f04f 0120 	mov.w	r1, #32
 8005d44:	f381 8811 	msr	BASEPRI, r1
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	484b      	ldr	r0, [pc, #300]	; (8005e78 <SEGGER_SYSVIEW_Start+0x170>)
 8005d4c:	f7ff f932 	bl	8004fb4 <_PreparePacket>
 8005d50:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <SEGGER_SYSVIEW_Start+0x168>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d60:	e00b      	b.n	8005d7a <SEGGER_SYSVIEW_Start+0x72>
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	1c59      	adds	r1, r3, #1
 8005d6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	09db      	lsrs	r3, r3, #7
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7e:	d8f0      	bhi.n	8005d62 <SEGGER_SYSVIEW_Start+0x5a>
 8005d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
 8005d94:	4b36      	ldr	r3, [pc, #216]	; (8005e70 <SEGGER_SYSVIEW_Start+0x168>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	623b      	str	r3, [r7, #32]
 8005d9a:	e00b      	b.n	8005db4 <SEGGER_SYSVIEW_Start+0xac>
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	1c59      	adds	r1, r3, #1
 8005da4:	6279      	str	r1, [r7, #36]	; 0x24
 8005da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	09db      	lsrs	r3, r3, #7
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b7f      	cmp	r3, #127	; 0x7f
 8005db8:	d8f0      	bhi.n	8005d9c <SEGGER_SYSVIEW_Start+0x94>
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	1c5a      	adds	r2, r3, #1
 8005dbe:	627a      	str	r2, [r7, #36]	; 0x24
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	61fb      	str	r3, [r7, #28]
 8005dce:	4b28      	ldr	r3, [pc, #160]	; (8005e70 <SEGGER_SYSVIEW_Start+0x168>)
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e00b      	b.n	8005dee <SEGGER_SYSVIEW_Start+0xe6>
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	1c59      	adds	r1, r3, #1
 8005dde:	61f9      	str	r1, [r7, #28]
 8005de0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	09db      	lsrs	r3, r3, #7
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b7f      	cmp	r3, #127	; 0x7f
 8005df2:	d8f0      	bhi.n	8005dd6 <SEGGER_SYSVIEW_Start+0xce>
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	61fa      	str	r2, [r7, #28]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	e00b      	b.n	8005e26 <SEGGER_SYSVIEW_Start+0x11e>
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	1c59      	adds	r1, r3, #1
 8005e16:	6179      	str	r1, [r7, #20]
 8005e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	09db      	lsrs	r3, r3, #7
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b7f      	cmp	r3, #127	; 0x7f
 8005e2a:	d8f0      	bhi.n	8005e0e <SEGGER_SYSVIEW_Start+0x106>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	617a      	str	r2, [r7, #20]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e3c:	2218      	movs	r2, #24
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff f9a5 	bl	8005190 <_SendPacket>
      RECORD_END();
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <SEGGER_SYSVIEW_Start+0x168>)
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <SEGGER_SYSVIEW_Start+0x168>)
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005e5a:	f000 f9c7 	bl	80061ec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005e5e:	f000 f9b1 	bl	80061c4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005e62:	f000 fb75 	bl	8006550 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005e66:	bf00      	nop
 8005e68:	3730      	adds	r7, #48	; 0x30
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	2000bcd0 	.word	0x2000bcd0
 8005e74:	080083d8 	.word	0x080083d8
 8005e78:	2000bd00 	.word	0x2000bd00

08005e7c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e82:	f3ef 8311 	mrs	r3, BASEPRI
 8005e86:	f04f 0120 	mov.w	r1, #32
 8005e8a:	f381 8811 	msr	BASEPRI, r1
 8005e8e:	607b      	str	r3, [r7, #4]
 8005e90:	480b      	ldr	r0, [pc, #44]	; (8005ec0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005e92:	f7ff f88f 	bl	8004fb4 <_PreparePacket>
 8005e96:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d007      	beq.n	8005eb0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005ea0:	220b      	movs	r2, #11
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6838      	ldr	r0, [r7, #0]
 8005ea6:	f7ff f973 	bl	8005190 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f383 8811 	msr	BASEPRI, r3
}
 8005eb6:	bf00      	nop
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	2000bd00 	.word	0x2000bd00
 8005ec4:	2000bcd0 	.word	0x2000bcd0

08005ec8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b08c      	sub	sp, #48	; 0x30
 8005ecc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ece:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed2:	f04f 0120 	mov.w	r1, #32
 8005ed6:	f381 8811 	msr	BASEPRI, r1
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	4845      	ldr	r0, [pc, #276]	; (8005ff4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005ede:	f7ff f869 	bl	8004fb4 <_PreparePacket>
 8005ee2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eec:	4b42      	ldr	r3, [pc, #264]	; (8005ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ef2:	e00b      	b.n	8005f0c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	09db      	lsrs	r3, r3, #7
 8005f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f10:	d8f0      	bhi.n	8005ef4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	e00b      	b.n	8005f46 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	6279      	str	r1, [r7, #36]	; 0x24
 8005f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	627a      	str	r2, [r7, #36]	; 0x24
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	4b25      	ldr	r3, [pc, #148]	; (8005ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	61bb      	str	r3, [r7, #24]
 8005f66:	e00b      	b.n	8005f80 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	1c59      	adds	r1, r3, #1
 8005f70:	61f9      	str	r1, [r7, #28]
 8005f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	701a      	strb	r2, [r3, #0]
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	09db      	lsrs	r3, r3, #7
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	2b7f      	cmp	r3, #127	; 0x7f
 8005f84:	d8f0      	bhi.n	8005f68 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	61fa      	str	r2, [r7, #28]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	b2d2      	uxtb	r2, r2
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	e00b      	b.n	8005fb8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	6179      	str	r1, [r7, #20]
 8005faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	09db      	lsrs	r3, r3, #7
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	2b7f      	cmp	r3, #127	; 0x7f
 8005fbc:	d8f0      	bhi.n	8005fa0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	617a      	str	r2, [r7, #20]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005fce:	2218      	movs	r2, #24
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68b8      	ldr	r0, [r7, #8]
 8005fd4:	f7ff f8dc 	bl	8005190 <_SendPacket>
  RECORD_END();
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005fe6:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	4798      	blx	r3
  }
}
 8005fec:	bf00      	nop
 8005fee:	3730      	adds	r7, #48	; 0x30
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	2000bd00 	.word	0x2000bd00
 8005ff8:	2000bcd0 	.word	0x2000bcd0

08005ffc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b092      	sub	sp, #72	; 0x48
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006004:	f3ef 8311 	mrs	r3, BASEPRI
 8006008:	f04f 0120 	mov.w	r1, #32
 800600c:	f381 8811 	msr	BASEPRI, r1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	486a      	ldr	r0, [pc, #424]	; (80061bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006014:	f7fe ffce 	bl	8004fb4 <_PreparePacket>
 8006018:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	647b      	str	r3, [r7, #68]	; 0x44
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b66      	ldr	r3, [pc, #408]	; (80061c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	643b      	str	r3, [r7, #64]	; 0x40
 800602e:	e00b      	b.n	8006048 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006032:	b2da      	uxtb	r2, r3
 8006034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	6479      	str	r1, [r7, #68]	; 0x44
 800603a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006044:	09db      	lsrs	r3, r3, #7
 8006046:	643b      	str	r3, [r7, #64]	; 0x40
 8006048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604a:	2b7f      	cmp	r3, #127	; 0x7f
 800604c:	d8f0      	bhi.n	8006030 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800604e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	647a      	str	r2, [r7, #68]	; 0x44
 8006054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800605c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
 8006068:	e00b      	b.n	8006082 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	b2da      	uxtb	r2, r3
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	1c59      	adds	r1, r3, #1
 8006072:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607e:	09db      	lsrs	r3, r3, #7
 8006080:	63bb      	str	r3, [r7, #56]	; 0x38
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	2b7f      	cmp	r3, #127	; 0x7f
 8006086:	d8f0      	bhi.n	800606a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800608e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	4619      	mov	r1, r3
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7fe ff37 	bl	8004f14 <_EncodeStr>
 80060a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80060a8:	2209      	movs	r2, #9
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6938      	ldr	r0, [r7, #16]
 80060ae:	f7ff f86f 	bl	8005190 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	633b      	str	r3, [r7, #48]	; 0x30
 80060c6:	e00b      	b.n	80060e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	6379      	str	r1, [r7, #52]	; 0x34
 80060d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	09db      	lsrs	r3, r3, #7
 80060de:	633b      	str	r3, [r7, #48]	; 0x30
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	2b7f      	cmp	r3, #127	; 0x7f
 80060e4:	d8f0      	bhi.n	80060c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80060e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	637a      	str	r2, [r7, #52]	; 0x34
 80060ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006100:	e00b      	b.n	800611a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	b2da      	uxtb	r2, r3
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	1c59      	adds	r1, r3, #1
 800610a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800610c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	09db      	lsrs	r3, r3, #7
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	2b7f      	cmp	r3, #127	; 0x7f
 800611e:	d8f0      	bhi.n	8006102 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	627b      	str	r3, [r7, #36]	; 0x24
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	623b      	str	r3, [r7, #32]
 800613a:	e00b      	b.n	8006154 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	1c59      	adds	r1, r3, #1
 8006144:	6279      	str	r1, [r7, #36]	; 0x24
 8006146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	09db      	lsrs	r3, r3, #7
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	2b7f      	cmp	r3, #127	; 0x7f
 8006158:	d8f0      	bhi.n	800613c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	627a      	str	r2, [r7, #36]	; 0x24
 8006160:	6a3a      	ldr	r2, [r7, #32]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	2300      	movs	r3, #0
 8006170:	61bb      	str	r3, [r7, #24]
 8006172:	e00b      	b.n	800618c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	b2da      	uxtb	r2, r3
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	1c59      	adds	r1, r3, #1
 800617c:	61f9      	str	r1, [r7, #28]
 800617e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	09db      	lsrs	r3, r3, #7
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b7f      	cmp	r3, #127	; 0x7f
 8006190:	d8f0      	bhi.n	8006174 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	61fa      	str	r2, [r7, #28]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80061a2:	2215      	movs	r2, #21
 80061a4:	68f9      	ldr	r1, [r7, #12]
 80061a6:	6938      	ldr	r0, [r7, #16]
 80061a8:	f7fe fff2 	bl	8005190 <_SendPacket>
  RECORD_END();
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f383 8811 	msr	BASEPRI, r3
}
 80061b2:	bf00      	nop
 80061b4:	3748      	adds	r7, #72	; 0x48
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	2000bd00 	.word	0x2000bd00
 80061c0:	2000bcd0 	.word	0x2000bcd0

080061c4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80061c8:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80061d0:	4b05      	ldr	r3, [pc, #20]	; (80061e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80061da:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80061dc:	6a1b      	ldr	r3, [r3, #32]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4798      	blx	r3
  }
}
 80061e2:	bf00      	nop
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	2000bcd0 	.word	0x2000bcd0

080061ec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01a      	beq.n	8006230 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d015      	beq.n	8006230 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006204:	4b10      	ldr	r3, [pc, #64]	; (8006248 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4798      	blx	r3
 800620c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006210:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006212:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006216:	f04f 0200 	mov.w	r2, #0
 800621a:	f04f 0300 	mov.w	r3, #0
 800621e:	000a      	movs	r2, r1
 8006220:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006222:	4613      	mov	r3, r2
 8006224:	461a      	mov	r2, r3
 8006226:	4621      	mov	r1, r4
 8006228:	200d      	movs	r0, #13
 800622a:	f7ff fd13 	bl	8005c54 <SEGGER_SYSVIEW_RecordU32x2>
 800622e:	e006      	b.n	800623e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006230:	4b06      	ldr	r3, [pc, #24]	; (800624c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4619      	mov	r1, r3
 8006236:	200c      	movs	r0, #12
 8006238:	f7ff fcd0 	bl	8005bdc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bd90      	pop	{r4, r7, pc}
 8006246:	bf00      	nop
 8006248:	2000bcd0 	.word	0x2000bcd0
 800624c:	e0001004 	.word	0xe0001004

08006250 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006256:	f3ef 8311 	mrs	r3, BASEPRI
 800625a:	f04f 0120 	mov.w	r1, #32
 800625e:	f381 8811 	msr	BASEPRI, r1
 8006262:	607b      	str	r3, [r7, #4]
 8006264:	4807      	ldr	r0, [pc, #28]	; (8006284 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006266:	f7fe fea5 	bl	8004fb4 <_PreparePacket>
 800626a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800626c:	2211      	movs	r2, #17
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6838      	ldr	r0, [r7, #0]
 8006272:	f7fe ff8d 	bl	8005190 <_SendPacket>
  RECORD_END();
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f383 8811 	msr	BASEPRI, r3
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	2000bd00 	.word	0x2000bd00

08006288 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006290:	f3ef 8311 	mrs	r3, BASEPRI
 8006294:	f04f 0120 	mov.w	r1, #32
 8006298:	f381 8811 	msr	BASEPRI, r1
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	4819      	ldr	r0, [pc, #100]	; (8006304 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062a0:	f7fe fe88 	bl	8004fb4 <_PreparePacket>
 80062a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062aa:	4b17      	ldr	r3, [pc, #92]	; (8006308 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e00b      	b.n	80062d6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	1c59      	adds	r1, r3, #1
 80062c6:	61f9      	str	r1, [r7, #28]
 80062c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	09db      	lsrs	r3, r3, #7
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	2b7f      	cmp	r3, #127	; 0x7f
 80062da:	d8f0      	bhi.n	80062be <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	61fa      	str	r2, [r7, #28]
 80062e2:	69ba      	ldr	r2, [r7, #24]
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80062ec:	2208      	movs	r2, #8
 80062ee:	68f9      	ldr	r1, [r7, #12]
 80062f0:	6938      	ldr	r0, [r7, #16]
 80062f2:	f7fe ff4d 	bl	8005190 <_SendPacket>
  RECORD_END();
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f383 8811 	msr	BASEPRI, r3
}
 80062fc:	bf00      	nop
 80062fe:	3720      	adds	r7, #32
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2000bd00 	.word	0x2000bd00
 8006308:	2000bcd0 	.word	0x2000bcd0

0800630c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006314:	f3ef 8311 	mrs	r3, BASEPRI
 8006318:	f04f 0120 	mov.w	r1, #32
 800631c:	f381 8811 	msr	BASEPRI, r1
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	4819      	ldr	r0, [pc, #100]	; (8006388 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006324:	f7fe fe46 	bl	8004fb4 <_PreparePacket>
 8006328:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	61bb      	str	r3, [r7, #24]
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	61f9      	str	r1, [r7, #28]
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	61fa      	str	r2, [r7, #28]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006370:	2204      	movs	r2, #4
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	6938      	ldr	r0, [r7, #16]
 8006376:	f7fe ff0b 	bl	8005190 <_SendPacket>
  RECORD_END();
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f383 8811 	msr	BASEPRI, r3
}
 8006380:	bf00      	nop
 8006382:	3720      	adds	r7, #32
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	2000bd00 	.word	0x2000bd00
 800638c:	2000bcd0 	.word	0x2000bcd0

08006390 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006398:	f3ef 8311 	mrs	r3, BASEPRI
 800639c:	f04f 0120 	mov.w	r1, #32
 80063a0:	f381 8811 	msr	BASEPRI, r1
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	4819      	ldr	r0, [pc, #100]	; (800640c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063a8:	f7fe fe04 	bl	8004fb4 <_PreparePacket>
 80063ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063b2:	4b17      	ldr	r3, [pc, #92]	; (8006410 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	61bb      	str	r3, [r7, #24]
 80063c4:	e00b      	b.n	80063de <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	61f9      	str	r1, [r7, #28]
 80063d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	09db      	lsrs	r3, r3, #7
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b7f      	cmp	r3, #127	; 0x7f
 80063e2:	d8f0      	bhi.n	80063c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	61fa      	str	r2, [r7, #28]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80063f4:	2206      	movs	r2, #6
 80063f6:	68f9      	ldr	r1, [r7, #12]
 80063f8:	6938      	ldr	r0, [r7, #16]
 80063fa:	f7fe fec9 	bl	8005190 <_SendPacket>
  RECORD_END();
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f383 8811 	msr	BASEPRI, r3
}
 8006404:	bf00      	nop
 8006406:	3720      	adds	r7, #32
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	2000bd00 	.word	0x2000bd00
 8006410:	2000bcd0 	.word	0x2000bcd0

08006414 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	; 0x30
 8006418:	af00      	add	r7, sp, #0
 800641a:	4603      	mov	r3, r0
 800641c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800641e:	4b3b      	ldr	r3, [pc, #236]	; (800650c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d06d      	beq.n	8006502 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006426:	4b39      	ldr	r3, [pc, #228]	; (800650c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800642c:	2300      	movs	r3, #0
 800642e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006430:	e008      	b.n	8006444 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800643e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006440:	3301      	adds	r3, #1
 8006442:	62bb      	str	r3, [r7, #40]	; 0x28
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006448:	429a      	cmp	r2, r3
 800644a:	d3f2      	bcc.n	8006432 <SEGGER_SYSVIEW_SendModule+0x1e>
 800644c:	e000      	b.n	8006450 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800644e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d055      	beq.n	8006502 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006456:	f3ef 8311 	mrs	r3, BASEPRI
 800645a:	f04f 0120 	mov.w	r1, #32
 800645e:	f381 8811 	msr	BASEPRI, r1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	482a      	ldr	r0, [pc, #168]	; (8006510 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006466:	f7fe fda5 	bl	8004fb4 <_PreparePacket>
 800646a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
 8006474:	79fb      	ldrb	r3, [r7, #7]
 8006476:	623b      	str	r3, [r7, #32]
 8006478:	e00b      	b.n	8006492 <SEGGER_SYSVIEW_SendModule+0x7e>
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	b2da      	uxtb	r2, r3
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	1c59      	adds	r1, r3, #1
 8006482:	6279      	str	r1, [r7, #36]	; 0x24
 8006484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	09db      	lsrs	r3, r3, #7
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2b7f      	cmp	r3, #127	; 0x7f
 8006496:	d8f0      	bhi.n	800647a <SEGGER_SYSVIEW_SendModule+0x66>
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	627a      	str	r2, [r7, #36]	; 0x24
 800649e:	6a3a      	ldr	r2, [r7, #32]
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e00b      	b.n	80064cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	1c59      	adds	r1, r3, #1
 80064bc:	61f9      	str	r1, [r7, #28]
 80064be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	09db      	lsrs	r3, r3, #7
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2b7f      	cmp	r3, #127	; 0x7f
 80064d0:	d8f0      	bhi.n	80064b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	61fa      	str	r2, [r7, #28]
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2280      	movs	r2, #128	; 0x80
 80064e8:	4619      	mov	r1, r3
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7fe fd12 	bl	8004f14 <_EncodeStr>
 80064f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80064f2:	2216      	movs	r2, #22
 80064f4:	68f9      	ldr	r1, [r7, #12]
 80064f6:	6938      	ldr	r0, [r7, #16]
 80064f8:	f7fe fe4a 	bl	8005190 <_SendPacket>
      RECORD_END();
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006502:	bf00      	nop
 8006504:	3730      	adds	r7, #48	; 0x30
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2000bcf8 	.word	0x2000bcf8
 8006510:	2000bd00 	.word	0x2000bd00

08006514 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00f      	beq.n	8006542 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006522:	4b0a      	ldr	r3, [pc, #40]	; (800654c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f2      	bne.n	8006528 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	2000bcf8 	.word	0x2000bcf8

08006550 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006556:	f3ef 8311 	mrs	r3, BASEPRI
 800655a:	f04f 0120 	mov.w	r1, #32
 800655e:	f381 8811 	msr	BASEPRI, r1
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	4817      	ldr	r0, [pc, #92]	; (80065c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006566:	f7fe fd25 	bl	8004fb4 <_PreparePacket>
 800656a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	e00b      	b.n	8006594 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1c59      	adds	r1, r3, #1
 8006584:	6179      	str	r1, [r7, #20]
 8006586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b7f      	cmp	r3, #127	; 0x7f
 8006598:	d8f0      	bhi.n	800657c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	617a      	str	r2, [r7, #20]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80065aa:	221b      	movs	r2, #27
 80065ac:	6879      	ldr	r1, [r7, #4]
 80065ae:	68b8      	ldr	r0, [r7, #8]
 80065b0:	f7fe fdee 	bl	8005190 <_SendPacket>
  RECORD_END();
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f383 8811 	msr	BASEPRI, r3
}
 80065ba:	bf00      	nop
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	2000bd00 	.word	0x2000bd00
 80065c8:	2000bcfc 	.word	0x2000bcfc

080065cc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80065cc:	b40f      	push	{r0, r1, r2, r3}
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80065d4:	f107 0314 	add.w	r3, r7, #20
 80065d8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80065da:	1d3b      	adds	r3, r7, #4
 80065dc:	461a      	mov	r2, r3
 80065de:	2100      	movs	r1, #0
 80065e0:	6938      	ldr	r0, [r7, #16]
 80065e2:	f7ff f8e5 	bl	80057b0 <_VPrintTarget>
  va_end(ParamList);
}
 80065e6:	bf00      	nop
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065f0:	b004      	add	sp, #16
 80065f2:	4770      	bx	lr

080065f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006600:	f04f 0120 	mov.w	r1, #32
 8006604:	f381 8811 	msr	BASEPRI, r1
 8006608:	617b      	str	r3, [r7, #20]
 800660a:	4827      	ldr	r0, [pc, #156]	; (80066a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800660c:	f7fe fcd2 	bl	8004fb4 <_PreparePacket>
 8006610:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006612:	2280      	movs	r2, #128	; 0x80
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	6938      	ldr	r0, [r7, #16]
 8006618:	f7fe fc7c 	bl	8004f14 <_EncodeStr>
 800661c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
 8006622:	2301      	movs	r3, #1
 8006624:	623b      	str	r3, [r7, #32]
 8006626:	e00b      	b.n	8006640 <SEGGER_SYSVIEW_Warn+0x4c>
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	b2da      	uxtb	r2, r3
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1c59      	adds	r1, r3, #1
 8006630:	6279      	str	r1, [r7, #36]	; 0x24
 8006632:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	09db      	lsrs	r3, r3, #7
 800663e:	623b      	str	r3, [r7, #32]
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	2b7f      	cmp	r3, #127	; 0x7f
 8006644:	d8f0      	bhi.n	8006628 <SEGGER_SYSVIEW_Warn+0x34>
 8006646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	627a      	str	r2, [r7, #36]	; 0x24
 800664c:	6a3a      	ldr	r2, [r7, #32]
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	61fb      	str	r3, [r7, #28]
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_Warn+0x84>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	61f9      	str	r1, [r7, #28]
 800666a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	61bb      	str	r3, [r7, #24]
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b7f      	cmp	r3, #127	; 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_Warn+0x6c>
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	61fa      	str	r2, [r7, #28]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800668e:	221a      	movs	r2, #26
 8006690:	68f9      	ldr	r1, [r7, #12]
 8006692:	6938      	ldr	r0, [r7, #16]
 8006694:	f7fe fd7c 	bl	8005190 <_SendPacket>
  RECORD_END();
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f383 8811 	msr	BASEPRI, r3
}
 800669e:	bf00      	nop
 80066a0:	3728      	adds	r7, #40	; 0x28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	2000bd00 	.word	0x2000bd00

080066ac <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	2000      	movs	r0, #0
 80066c0:	f7fe fc02 	bl	8004ec8 <SEGGER_RTT_Write>
  return len;
 80066c4:	683b      	ldr	r3, [r7, #0]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t* serNum);

void spi_cs_rfid_write(bool state)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	4603      	mov	r3, r0
 80066d8:	71fb      	strb	r3, [r7, #7]
	if(state)
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <spi_cs_rfid_write+0x18>
	{
		MFRC522_CS_HIGH();
 80066e0:	4b06      	ldr	r3, [pc, #24]	; (80066fc <spi_cs_rfid_write+0x2c>)
 80066e2:	2201      	movs	r2, #1
 80066e4:	619a      	str	r2, [r3, #24]
	}
	else
	{
		MFRC522_CS_LOW();
	}
}
 80066e6:	e003      	b.n	80066f0 <spi_cs_rfid_write+0x20>
		MFRC522_CS_LOW();
 80066e8:	4b04      	ldr	r3, [pc, #16]	; (80066fc <spi_cs_rfid_write+0x2c>)
 80066ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80066ee:	619a      	str	r2, [r3, #24]
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40020400 	.word	0x40020400

08006700 <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	71fb      	strb	r3, [r7, #7]
  spi_cs_rfid_write(0);
 800670a:	2000      	movs	r0, #0
 800670c:	f7ff ffe0 	bl	80066d0 <spi_cs_rfid_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	b25b      	sxtb	r3, r3
 8006716:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800671a:	b25b      	sxtb	r3, r3
 800671c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006720:	b25b      	sxtb	r3, r3
 8006722:	b2db      	uxtb	r3, r3
 8006724:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&spi1,(uint8_t *)&reg,1,100);
 8006726:	1df9      	adds	r1, r7, #7
 8006728:	2364      	movs	r3, #100	; 0x64
 800672a:	2201      	movs	r2, #1
 800672c:	4809      	ldr	r0, [pc, #36]	; (8006754 <rc522_regRead8+0x54>)
 800672e:	f7fb fbea 	bl	8001f06 <HAL_SPI_Transmit>
  uint8_t dataRd=0;
 8006732:	2300      	movs	r3, #0
 8006734:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&spi1,(uint8_t *)&dataRd,1,100);
 8006736:	f107 010f 	add.w	r1, r7, #15
 800673a:	2364      	movs	r3, #100	; 0x64
 800673c:	2201      	movs	r2, #1
 800673e:	4805      	ldr	r0, [pc, #20]	; (8006754 <rc522_regRead8+0x54>)
 8006740:	f7fb fd1d 	bl	800217e <HAL_SPI_Receive>
  spi_cs_rfid_write(1);
 8006744:	2001      	movs	r0, #1
 8006746:	f7ff ffc3 	bl	80066d0 <spi_cs_rfid_write>
  return dataRd;
 800674a:	7bfb      	ldrb	r3, [r7, #15]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	200000dc 	.word	0x200000dc

08006758 <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	460a      	mov	r2, r1
 8006762:	71fb      	strb	r3, [r7, #7]
 8006764:	4613      	mov	r3, r2
 8006766:	71bb      	strb	r3, [r7, #6]
  spi_cs_rfid_write(0);
 8006768:	2000      	movs	r0, #0
 800676a:	f7ff ffb1 	bl	80066d0 <spi_cs_rfid_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006778:	b2db      	uxtb	r3, r3
 800677a:	733b      	strb	r3, [r7, #12]
 800677c:	79bb      	ldrb	r3, [r7, #6]
 800677e:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(&spi1,(uint8_t *)&txData,2,100);
 8006780:	f107 010c 	add.w	r1, r7, #12
 8006784:	2364      	movs	r3, #100	; 0x64
 8006786:	2202      	movs	r2, #2
 8006788:	4804      	ldr	r0, [pc, #16]	; (800679c <rc522_regWrite8+0x44>)
 800678a:	f7fb fbbc 	bl	8001f06 <HAL_SPI_Transmit>
  spi_cs_rfid_write(1);
 800678e:	2001      	movs	r0, #1
 8006790:	f7ff ff9e 	bl	80066d0 <spi_cs_rfid_write>
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	200000dc 	.word	0x200000dc

080067a0 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	460a      	mov	r2, r1
 80067aa:	71fb      	strb	r3, [r7, #7]
 80067ac:	4613      	mov	r3, r2
 80067ae:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff ffa4 	bl	8006700 <rc522_regRead8>
 80067b8:	4603      	mov	r3, r0
 80067ba:	461a      	mov	r2, r3
 80067bc:	79bb      	ldrb	r3, [r7, #6]
 80067be:	4313      	orrs	r3, r2
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	4611      	mov	r1, r2
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff ffc6 	bl	8006758 <rc522_regWrite8>
}
 80067cc:	bf00      	nop
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	460a      	mov	r2, r1
 80067de:	71fb      	strb	r3, [r7, #7]
 80067e0:	4613      	mov	r3, r2
 80067e2:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff ff8a 	bl	8006700 <rc522_regRead8>
 80067ec:	4603      	mov	r3, r0
 80067ee:	b25a      	sxtb	r2, r3
 80067f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	b25b      	sxtb	r3, r3
 80067f8:	4013      	ands	r3, r2
 80067fa:	b25b      	sxtb	r3, r3
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	4611      	mov	r1, r2
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff ffa8 	bl	8006758 <rc522_regWrite8>
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 8006814:	210f      	movs	r1, #15
 8006816:	2001      	movs	r0, #1
 8006818:	f7ff ff9e 	bl	8006758 <rc522_regWrite8>
}
 800681c:	bf00      	nop
 800681e:	bd80      	pop	{r7, pc}

08006820 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 8006826:	2014      	movs	r0, #20
 8006828:	f7ff ff6a 	bl	8006700 <rc522_regRead8>
 800682c:	4603      	mov	r3, r0
 800682e:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d103      	bne.n	8006842 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 800683a:	2103      	movs	r1, #3
 800683c:	2014      	movs	r0, #20
 800683e:	f7ff ffaf 	bl	80067a0 <rc522_setBit>
  }
}
 8006842:	bf00      	nop
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  bool status=false;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	2026      	movs	r0, #38	; 0x26
 800685a:	f000 f811 	bl	8006880 <rc522_request>
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f904 	bl	8006a76 <rc522_antiColl>
 800686e:	4603      	mov	r3, r0
 8006870:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 8006872:	f000 f93d 	bl	8006af0 <rc522_halt>

    return status;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af02      	add	r7, sp, #8
 8006886:	4603      	mov	r3, r0
 8006888:	6039      	str	r1, [r7, #0]
 800688a:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 8006890:	2107      	movs	r1, #7
 8006892:	200d      	movs	r0, #13
 8006894:	f7ff ff60 	bl	8006758 <rc522_regWrite8>
  tagType[0] = reqMode;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	79fa      	ldrb	r2, [r7, #7]
 800689c:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 800689e:	f107 030c 	add.w	r3, r7, #12
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2201      	movs	r2, #1
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	200c      	movs	r0, #12
 80068ac:	f000 f812 	bl	80068d4 <rc522_toCard>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	f083 0301 	eor.w	r3, r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d102      	bne.n	80068c6 <rc522_request+0x46>
 80068c0:	89bb      	ldrh	r3, [r7, #12]
 80068c2:	2b10      	cmp	r3, #16
 80068c4:	d001      	beq.n	80068ca <rc522_request+0x4a>
    status = false;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607b      	str	r3, [r7, #4]
 80068de:	4603      	mov	r3, r0
 80068e0:	73fb      	strb	r3, [r7, #15]
 80068e2:	4613      	mov	r3, r2
 80068e4:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]
  uint8_t irqEn = 0x00;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75bb      	strb	r3, [r7, #22]
  uint8_t waitIRq = 0x00;
 80068ee:	2300      	movs	r3, #0
 80068f0:	757b      	strb	r3, [r7, #21]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d006      	beq.n	8006906 <rc522_toCard+0x32>
 80068f8:	2b0e      	cmp	r3, #14
 80068fa:	d109      	bne.n	8006910 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 80068fc:	2312      	movs	r3, #18
 80068fe:	75bb      	strb	r3, [r7, #22]
      waitIRq = 0x10;
 8006900:	2310      	movs	r3, #16
 8006902:	757b      	strb	r3, [r7, #21]
      break;
 8006904:	e005      	b.n	8006912 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 8006906:	2377      	movs	r3, #119	; 0x77
 8006908:	75bb      	strb	r3, [r7, #22]
      waitIRq = 0x30;
 800690a:	2330      	movs	r3, #48	; 0x30
 800690c:	757b      	strb	r3, [r7, #21]
      break;
 800690e:	e000      	b.n	8006912 <rc522_toCard+0x3e>
    }
    default:
      break;
 8006910:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8006912:	7dbb      	ldrb	r3, [r7, #22]
 8006914:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	2002      	movs	r0, #2
 800691e:	f7ff ff1b 	bl	8006758 <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 8006922:	2180      	movs	r1, #128	; 0x80
 8006924:	2004      	movs	r0, #4
 8006926:	f7ff ff55 	bl	80067d4 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 800692a:	2180      	movs	r1, #128	; 0x80
 800692c:	200a      	movs	r0, #10
 800692e:	f7ff ff37 	bl	80067a0 <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 8006932:	2100      	movs	r1, #0
 8006934:	2001      	movs	r0, #1
 8006936:	f7ff ff0f 	bl	8006758 <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 800693a:	2300      	movs	r3, #0
 800693c:	827b      	strh	r3, [r7, #18]
 800693e:	e00a      	b.n	8006956 <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8006940:	8a7b      	ldrh	r3, [r7, #18]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	4413      	add	r3, r2
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	4619      	mov	r1, r3
 800694a:	2009      	movs	r0, #9
 800694c:	f7ff ff04 	bl	8006758 <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 8006950:	8a7b      	ldrh	r3, [r7, #18]
 8006952:	3301      	adds	r3, #1
 8006954:	827b      	strh	r3, [r7, #18]
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	b29b      	uxth	r3, r3
 800695a:	8a7a      	ldrh	r2, [r7, #18]
 800695c:	429a      	cmp	r2, r3
 800695e:	d3ef      	bcc.n	8006940 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	4619      	mov	r1, r3
 8006964:	2001      	movs	r0, #1
 8006966:	f7ff fef7 	bl	8006758 <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 800696a:	7bfb      	ldrb	r3, [r7, #15]
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d103      	bne.n	8006978 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8006970:	2180      	movs	r1, #128	; 0x80
 8006972:	200d      	movs	r0, #13
 8006974:	f7ff ff14 	bl	80067a0 <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8006978:	2364      	movs	r3, #100	; 0x64
 800697a:	827b      	strh	r3, [r7, #18]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 800697c:	2004      	movs	r0, #4
 800697e:	f7ff febf 	bl	8006700 <rc522_regRead8>
 8006982:	4603      	mov	r3, r0
 8006984:	753b      	strb	r3, [r7, #20]
    i--;
 8006986:	8a7b      	ldrh	r3, [r7, #18]
 8006988:	3b01      	subs	r3, #1
 800698a:	827b      	strh	r3, [r7, #18]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800698c:	8a7b      	ldrh	r3, [r7, #18]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <rc522_toCard+0xd4>
 8006992:	7d3b      	ldrb	r3, [r7, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <rc522_toCard+0xd4>
 800699c:	7d3a      	ldrb	r2, [r7, #20]
 800699e:	7d7b      	ldrb	r3, [r7, #21]
 80069a0:	4013      	ands	r3, r2
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0e9      	beq.n	800697c <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 80069a8:	2180      	movs	r1, #128	; 0x80
 80069aa:	200d      	movs	r0, #13
 80069ac:	f7ff ff12 	bl	80067d4 <rc522_clearBit>

  if (i != 0)  {
 80069b0:	8a7b      	ldrh	r3, [r7, #18]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d05a      	beq.n	8006a6c <rc522_toCard+0x198>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 80069b6:	2006      	movs	r0, #6
 80069b8:	f7ff fea2 	bl	8006700 <rc522_regRead8>
 80069bc:	4603      	mov	r3, r0
 80069be:	f003 031b 	and.w	r3, r3, #27
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d150      	bne.n	8006a68 <rc522_toCard+0x194>
      status = true;
 80069c6:	2301      	movs	r3, #1
 80069c8:	75fb      	strb	r3, [r7, #23]
      if (n & irqEn & 0x01) {
 80069ca:	7d3a      	ldrb	r2, [r7, #20]
 80069cc:	7dbb      	ldrb	r3, [r7, #22]
 80069ce:	4013      	ands	r3, r2
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <rc522_toCard+0x10a>
        status = false;
 80069da:	2300      	movs	r3, #0
 80069dc:	75fb      	strb	r3, [r7, #23]
      }

      if (command == PCD_TRANSCEIVE) {
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d143      	bne.n	8006a6c <rc522_toCard+0x198>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 80069e4:	200a      	movs	r0, #10
 80069e6:	f7ff fe8b 	bl	8006700 <rc522_regRead8>
 80069ea:	4603      	mov	r3, r0
 80069ec:	753b      	strb	r3, [r7, #20]
 //       uint8_t l = n;
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 80069ee:	200c      	movs	r0, #12
 80069f0:	f7ff fe86 	bl	8006700 <rc522_regRead8>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f003 0307 	and.w	r3, r3, #7
 80069fa:	747b      	strb	r3, [r7, #17]
        if (lastBits) {
 80069fc:	7c7b      	ldrb	r3, [r7, #17]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <rc522_toCard+0x146>
          *backLen = (n - 1) * 8 + lastBits;
 8006a02:	7d3b      	ldrb	r3, [r7, #20]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	7c7b      	ldrb	r3, [r7, #17]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	4413      	add	r3, r2
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	801a      	strh	r2, [r3, #0]
 8006a18:	e005      	b.n	8006a26 <rc522_toCard+0x152>
        } else {
          *backLen = n * 8;
 8006a1a:	7d3b      	ldrb	r3, [r7, #20]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 8006a26:	7d3b      	ldrb	r3, [r7, #20]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <rc522_toCard+0x15c>
          n = 1;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	753b      	strb	r3, [r7, #20]
        }
        if (n > MFRC522_MAX_LEN) {
 8006a30:	7d3b      	ldrb	r3, [r7, #20]
 8006a32:	2b10      	cmp	r3, #16
 8006a34:	d901      	bls.n	8006a3a <rc522_toCard+0x166>
          n = MFRC522_MAX_LEN;
 8006a36:	2310      	movs	r3, #16
 8006a38:	753b      	strb	r3, [r7, #20]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) 
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	827b      	strh	r3, [r7, #18]
 8006a3e:	e00c      	b.n	8006a5a <rc522_toCard+0x186>
				{
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 8006a40:	2009      	movs	r0, #9
 8006a42:	f7ff fe5d 	bl	8006700 <rc522_regRead8>
 8006a46:	4603      	mov	r3, r0
 8006a48:	743b      	strb	r3, [r7, #16]
//          if (l == 4)
//            printf("%02x ", d);
          backData[i] = d;
 8006a4a:	8a7b      	ldrh	r3, [r7, #18]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4413      	add	r3, r2
 8006a50:	7c3a      	ldrb	r2, [r7, #16]
 8006a52:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) 
 8006a54:	8a7b      	ldrh	r3, [r7, #18]
 8006a56:	3301      	adds	r3, #1
 8006a58:	827b      	strh	r3, [r7, #18]
 8006a5a:	7d3b      	ldrb	r3, [r7, #20]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	8a7a      	ldrh	r2, [r7, #18]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d3ed      	bcc.n	8006a40 <rc522_toCard+0x16c>
        }
//       if (l==4)
//          printf("\r\n");
        return status;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	e002      	b.n	8006a6e <rc522_toCard+0x19a>
      }
    } 
		else 
		{
//      printf("error\r\n");
      status = false;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8006a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b086      	sub	sp, #24
 8006a7a:	af02      	add	r7, sp, #8
 8006a7c:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 8006a82:	2100      	movs	r1, #0
 8006a84:	200d      	movs	r0, #13
 8006a86:	f7ff fe67 	bl	8006758 <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2293      	movs	r2, #147	; 0x93
 8006a8e:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3301      	adds	r3, #1
 8006a94:	2220      	movs	r2, #32
 8006a96:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8006a98:	f107 030a 	add.w	r3, r7, #10
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	200c      	movs	r0, #12
 8006aa6:	f7ff ff15 	bl	80068d4 <rc522_toCard>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d018      	beq.n	8006ae6 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	73bb      	strb	r3, [r7, #14]
 8006ab8:	e009      	b.n	8006ace <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8006aba:	7bbb      	ldrb	r3, [r7, #14]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	4413      	add	r3, r2
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	7b7b      	ldrb	r3, [r7, #13]
 8006ac4:	4053      	eors	r3, r2
 8006ac6:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	3301      	adds	r3, #1
 8006acc:	73bb      	strb	r3, [r7, #14]
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d9f2      	bls.n	8006aba <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	4413      	add	r3, r2
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	7b7a      	ldrb	r2, [r7, #13]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d001      	beq.n	8006ae6 <rc522_antiColl+0x70>
      status = false;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <rc522_halt>:

void rc522_halt(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8006af6:	2350      	movs	r3, #80	; 0x50
 8006af8:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8006afe:	463b      	mov	r3, r7
 8006b00:	1c9a      	adds	r2, r3, #2
 8006b02:	463b      	mov	r3, r7
 8006b04:	2102      	movs	r1, #2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f80d 	bl	8006b26 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8006b0c:	463a      	mov	r2, r7
 8006b0e:	4639      	mov	r1, r7
 8006b10:	1dbb      	adds	r3, r7, #6
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	4613      	mov	r3, r2
 8006b16:	2204      	movs	r2, #4
 8006b18:	200c      	movs	r0, #12
 8006b1a:	f7ff fedb 	bl	80068d4 <rc522_toCard>
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 8006b26:	b590      	push	{r4, r7, lr}
 8006b28:	b087      	sub	sp, #28
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8006b34:	2104      	movs	r1, #4
 8006b36:	2005      	movs	r0, #5
 8006b38:	f7ff fe4c 	bl	80067d4 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8006b3c:	2180      	movs	r1, #128	; 0x80
 8006b3e:	200a      	movs	r0, #10
 8006b40:	f7ff fe2e 	bl	80067a0 <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8006b44:	2300      	movs	r3, #0
 8006b46:	75fb      	strb	r3, [r7, #23]
 8006b48:	e00a      	b.n	8006b60 <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	4619      	mov	r1, r3
 8006b54:	2009      	movs	r0, #9
 8006b56:	f7ff fdff 	bl	8006758 <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	75fb      	strb	r3, [r7, #23]
 8006b60:	7dfa      	ldrb	r2, [r7, #23]
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d3f0      	bcc.n	8006b4a <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 8006b68:	2103      	movs	r1, #3
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f7ff fdf4 	bl	8006758 <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8006b70:	23ff      	movs	r3, #255	; 0xff
 8006b72:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8006b74:	2005      	movs	r0, #5
 8006b76:	f7ff fdc3 	bl	8006700 <rc522_regRead8>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75bb      	strb	r3, [r7, #22]
    i--;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8006b84:	7dfb      	ldrb	r3, [r7, #23]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d004      	beq.n	8006b94 <rc522_calculateCRC+0x6e>
 8006b8a:	7dbb      	ldrb	r3, [r7, #22]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d0ef      	beq.n	8006b74 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8006b94:	2022      	movs	r0, #34	; 0x22
 8006b96:	f7ff fdb3 	bl	8006700 <rc522_regRead8>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	1c5c      	adds	r4, r3, #1
 8006ba6:	2021      	movs	r0, #33	; 0x21
 8006ba8:	f7ff fdaa 	bl	8006700 <rc522_regRead8>
 8006bac:	4603      	mov	r3, r0
 8006bae:	7023      	strb	r3, [r4, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd90      	pop	{r4, r7, pc}

08006bb8 <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0




  //GPIOA->BSRR= (1<<8)<<16;
  MFRC522_RST_LOW();
 8006bbc:	4b15      	ldr	r3, [pc, #84]	; (8006c14 <rc522_init+0x5c>)
 8006bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bc2:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 8006bc4:	200a      	movs	r0, #10
 8006bc6:	f7fa f9cd 	bl	8000f64 <HAL_Delay>
  MFRC522_RST_HIGH();
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <rc522_init+0x5c>)
 8006bcc:	2202      	movs	r2, #2
 8006bce:	619a      	str	r2, [r3, #24]
  //GPIOA->BSRR= (1<<8);
  HAL_Delay(10);
 8006bd0:	200a      	movs	r0, #10
 8006bd2:	f7fa f9c7 	bl	8000f64 <HAL_Delay>
	
  rc522_reset();
 8006bd6:	f7ff fe1b 	bl	8006810 <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	202a      	movs	r0, #42	; 0x2a
 8006bde:	f7ff fdbb 	bl	8006758 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8006be2:	21a9      	movs	r1, #169	; 0xa9
 8006be4:	202b      	movs	r0, #43	; 0x2b
 8006be6:	f7ff fdb7 	bl	8006758 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8006bea:	21e8      	movs	r1, #232	; 0xe8
 8006bec:	202d      	movs	r0, #45	; 0x2d
 8006bee:	f7ff fdb3 	bl	8006758 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8006bf2:	2103      	movs	r1, #3
 8006bf4:	202c      	movs	r0, #44	; 0x2c
 8006bf6:	f7ff fdaf 	bl	8006758 <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8006bfa:	2140      	movs	r1, #64	; 0x40
 8006bfc:	2015      	movs	r0, #21
 8006bfe:	f7ff fdab 	bl	8006758 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8006c02:	213d      	movs	r1, #61	; 0x3d
 8006c04:	2011      	movs	r0, #17
 8006c06:	f7ff fda7 	bl	8006758 <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8006c0a:	f7ff fe09 	bl	8006820 <rc522_antennaON>
}
 8006c0e:	bf00      	nop
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40020400 	.word	0x40020400

08006c18 <check_validcard>:

#include "mfrc522_config.h"


uint8_t check_validcard(void)
{
 8006c18:	b5b0      	push	{r4, r5, r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
	int i=4;
 8006c1e:	2304      	movs	r3, #4
 8006c20:	61fb      	str	r3, [r7, #28]

	while(i--)
 8006c22:	e01c      	b.n	8006c5e <check_validcard+0x46>
	{
		if(card_auth[i]!=rfid_id[i])
 8006c24:	4a13      	ldr	r2, [pc, #76]	; (8006c74 <check_validcard+0x5c>)
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	781a      	ldrb	r2, [r3, #0]
 8006c2c:	4912      	ldr	r1, [pc, #72]	; (8006c78 <check_validcard+0x60>)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	440b      	add	r3, r1
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d012      	beq.n	8006c5e <check_validcard+0x46>
		{
			char msg[] = "Unauthorised Access\r\n";
 8006c38:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <check_validcard+0x64>)
 8006c3a:	1d3c      	adds	r4, r7, #4
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006c46:	6020      	str	r0, [r4, #0]
 8006c48:	3404      	adds	r4, #4
 8006c4a:	8021      	strh	r1, [r4, #0]
			HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
 8006c4c:	1d39      	adds	r1, r7, #4
 8006c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c52:	2216      	movs	r2, #22
 8006c54:	480a      	ldr	r0, [pc, #40]	; (8006c80 <check_validcard+0x68>)
 8006c56:	f7fc f938 	bl	8002eca <HAL_UART_Transmit>
			return 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e005      	b.n	8006c6a <check_validcard+0x52>
	while(i--)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	61fa      	str	r2, [r7, #28]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1dd      	bne.n	8006c24 <check_validcard+0xc>
			break;
		}
	}
	return 1;
 8006c68:	2301      	movs	r3, #1
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bdb0      	pop	{r4, r5, r7, pc}
 8006c72:	bf00      	nop
 8006c74:	20000000 	.word	0x20000000
 8006c78:	200001d8 	.word	0x200001d8
 8006c7c:	08008394 	.word	0x08008394
 8006c80:	20000098 	.word	0x20000098

08006c84 <write_cmd>:
	Current_Font = fonts;
}
float Time = 1.0;

void write_cmd(unsigned int data)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
	write_8bit(data);		// OR GPIOA->ODR  = data;
 8006c8c:	4b25      	ldr	r3, [pc, #148]	; (8006d24 <write_cmd+0xa0>)
 8006c8e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8006c92:	619a      	str	r2, [r3, #24]
 8006c94:	4a23      	ldr	r2, [pc, #140]	; (8006d24 <write_cmd+0xa0>)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	6193      	str	r3, [r2, #24]
 8006c9e:	4a21      	ldr	r2, [pc, #132]	; (8006d24 <write_cmd+0xa0>)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	6193      	str	r3, [r2, #24]
 8006ca8:	4a1e      	ldr	r2, [pc, #120]	; (8006d24 <write_cmd+0xa0>)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f003 0304 	and.w	r3, r3, #4
 8006cb0:	6193      	str	r3, [r2, #24]
 8006cb2:	4a1c      	ldr	r2, [pc, #112]	; (8006d24 <write_cmd+0xa0>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	6193      	str	r3, [r2, #24]
 8006cbc:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <write_cmd+0xa0>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	6193      	str	r3, [r2, #24]
 8006cc6:	4a17      	ldr	r2, [pc, #92]	; (8006d24 <write_cmd+0xa0>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	6193      	str	r3, [r2, #24]
 8006cd0:	4a14      	ldr	r2, [pc, #80]	; (8006d24 <write_cmd+0xa0>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd8:	6193      	str	r3, [r2, #24]
 8006cda:	4a12      	ldr	r2, [pc, #72]	; (8006d24 <write_cmd+0xa0>)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce2:	6193      	str	r3, [r2, #24]
	RS_PORT->BSRR  = SSD1963_PIN_RS <<16;		// RS bit RESET IN CMD MODE
 8006ce4:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <write_cmd+0xa4>)
 8006ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006cea:	619a      	str	r2, [r3, #24]
	CS_PORT->BSRR  = SSD1963_PIN_CS <<16;		// CS,WR bit RESET
 8006cec:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <write_cmd+0xa4>)
 8006cee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cf2:	619a      	str	r2, [r3, #24]
	WR_PORT->BSRR  = SSD1963_PIN_WR <<16;
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <write_cmd+0xa4>)
 8006cf6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006cfa:	619a      	str	r2, [r3, #24]
	//GPIOC->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
	__asm("nop");
 8006cfc:	bf00      	nop
	CS_PORT->BSRR  = SSD1963_PIN_CS;			// CS, RS, WR bit SET
 8006cfe:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <write_cmd+0xa4>)
 8006d00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d04:	619a      	str	r2, [r3, #24]
	WR_PORT->BSRR  = SSD1963_PIN_WR;
 8006d06:	4b08      	ldr	r3, [pc, #32]	; (8006d28 <write_cmd+0xa4>)
 8006d08:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d0c:	619a      	str	r2, [r3, #24]
	RS_PORT->BSRR  = SSD1963_PIN_RS;			// !!!!!  RS PIN SHOULD BE SET LAST
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <write_cmd+0xa4>)
 8006d10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d14:	619a      	str	r2, [r3, #24]
	//GPIOC->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
}
 8006d16:	bf00      	nop
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40020000 	.word	0x40020000
 8006d28:	40020800 	.word	0x40020800

08006d2c <write_data>:

void write_data(unsigned int data)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	write_8bit(data);	// OR GPIOA->ODR  = data;
 8006d34:	4b23      	ldr	r3, [pc, #140]	; (8006dc4 <write_data+0x98>)
 8006d36:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8006d3a:	619a      	str	r2, [r3, #24]
 8006d3c:	4a21      	ldr	r2, [pc, #132]	; (8006dc4 <write_data+0x98>)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	6193      	str	r3, [r2, #24]
 8006d46:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <write_data+0x98>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	6193      	str	r3, [r2, #24]
 8006d50:	4a1c      	ldr	r2, [pc, #112]	; (8006dc4 <write_data+0x98>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	6193      	str	r3, [r2, #24]
 8006d5a:	4a1a      	ldr	r2, [pc, #104]	; (8006dc4 <write_data+0x98>)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	6193      	str	r3, [r2, #24]
 8006d64:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <write_data+0x98>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	6193      	str	r3, [r2, #24]
 8006d6e:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <write_data+0x98>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	6193      	str	r3, [r2, #24]
 8006d78:	4a12      	ldr	r2, [pc, #72]	; (8006dc4 <write_data+0x98>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d80:	6193      	str	r3, [r2, #24]
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <write_data+0x98>)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	6193      	str	r3, [r2, #24]

	RS_PORT->BSRR = SSD1963_PIN_RS;				//  RS bit SET in DATA MODE
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <write_data+0x9c>)
 8006d8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d92:	619a      	str	r2, [r3, #24]
	CS_PORT->BSRR = SSD1963_PIN_CS<<16;			// CS, WR bit RESET
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <write_data+0x9c>)
 8006d96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d9a:	619a      	str	r2, [r3, #24]
	WR_PORT->BSRR = SSD1963_PIN_WR<<16;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <write_data+0x9c>)
 8006d9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006da2:	619a      	str	r2, [r3, #24]
	__asm("nop");
 8006da4:	bf00      	nop
	CS_PORT->BSRR = SSD1963_PIN_CS;				// CS ,WR bit SET
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <write_data+0x9c>)
 8006da8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006dac:	619a      	str	r2, [r3, #24]
	WR_PORT->BSRR = SSD1963_PIN_WR;
 8006dae:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <write_data+0x9c>)
 8006db0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006db4:	619a      	str	r2, [r3, #24]
}
 8006db6:	bf00      	nop
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40020000 	.word	0x40020000
 8006dc8:	40020800 	.word	0x40020800

08006dcc <ssd1963_setup>:
	}
}

// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
void ssd1963_setup (void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
	GPIOB->BSRR = SSD1963_PIN_RD;
 8006dd0:	4b81      	ldr	r3, [pc, #516]	; (8006fd8 <ssd1963_setup+0x20c>)
 8006dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dd6:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = SSD1963_PIN_RST << 16;
 8006dd8:	4b7f      	ldr	r3, [pc, #508]	; (8006fd8 <ssd1963_setup+0x20c>)
 8006dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dde:	619a      	str	r2, [r3, #24]
	HAL_Delay(100);
 8006de0:	2064      	movs	r0, #100	; 0x64
 8006de2:	f7fa f8bf 	bl	8000f64 <HAL_Delay>
	GPIOB->BSRR = SSD1963_PIN_RST;
 8006de6:	4b7c      	ldr	r3, [pc, #496]	; (8006fd8 <ssd1963_setup+0x20c>)
 8006de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dec:	619a      	str	r2, [r3, #24]
	HAL_Delay(10);
 8006dee:	200a      	movs	r0, #10
 8006df0:	f7fa f8b8 	bl	8000f64 <HAL_Delay>

	//HAL_Delay(200);

	write_cmd(0xE2);														//PLL multiplier, set PLL clock to 120M
 8006df4:	20e2      	movs	r0, #226	; 0xe2
 8006df6:	f7ff ff45 	bl	8006c84 <write_cmd>
	write_data(0x1E);	    											//N=0x36 for 6.5M, 0x23 for 10M crystal
 8006dfa:	201e      	movs	r0, #30
 8006dfc:	f7ff ff96 	bl	8006d2c <write_data>
	write_data(0x02);
 8006e00:	2002      	movs	r0, #2
 8006e02:	f7ff ff93 	bl	8006d2c <write_data>
	write_data(0x54);
 8006e06:	2054      	movs	r0, #84	; 0x54
 8006e08:	f7ff ff90 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006e0c:	2001      	movs	r0, #1
 8006e0e:	f7fa f8a9 	bl	8000f64 <HAL_Delay>
	write_cmd(0xE0);														// PLL enable
 8006e12:	20e0      	movs	r0, #224	; 0xe0
 8006e14:	f7ff ff36 	bl	8006c84 <write_cmd>
	write_data(0x01);
 8006e18:	2001      	movs	r0, #1
 8006e1a:	f7ff ff87 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006e1e:	2001      	movs	r0, #1
 8006e20:	f7fa f8a0 	bl	8000f64 <HAL_Delay>
	write_cmd(0xE0);
 8006e24:	20e0      	movs	r0, #224	; 0xe0
 8006e26:	f7ff ff2d 	bl	8006c84 <write_cmd>
	write_data(0x03);
 8006e2a:	2003      	movs	r0, #3
 8006e2c:	f7ff ff7e 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006e30:	2001      	movs	r0, #1
 8006e32:	f7fa f897 	bl	8000f64 <HAL_Delay>
	write_cmd(0x01);														// software reset
 8006e36:	2001      	movs	r0, #1
 8006e38:	f7ff ff24 	bl	8006c84 <write_cmd>
	HAL_Delay(1);
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	f7fa f891 	bl	8000f64 <HAL_Delay>
	write_cmd(0xE6);														//PLL setting for PCLK, depends on resolution
 8006e42:	20e6      	movs	r0, #230	; 0xe6
 8006e44:	f7ff ff1e 	bl	8006c84 <write_cmd>
	write_data(0x03);
 8006e48:	2003      	movs	r0, #3
 8006e4a:	f7ff ff6f 	bl	8006d2c <write_data>
	write_data(0xFF);
 8006e4e:	20ff      	movs	r0, #255	; 0xff
 8006e50:	f7ff ff6c 	bl	8006d2c <write_data>
	write_data(0xFF);
 8006e54:	20ff      	movs	r0, #255	; 0xff
 8006e56:	f7ff ff69 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	f7fa f882 	bl	8000f64 <HAL_Delay>
	write_cmd(0xB0);														//LCD SPECIFICATION
 8006e60:	20b0      	movs	r0, #176	; 0xb0
 8006e62:	f7ff ff0f 	bl	8006c84 <write_cmd>
	write_data(0x20);
 8006e66:	2020      	movs	r0, #32
 8006e68:	f7ff ff60 	bl	8006d2c <write_data>
	write_data(0x00);													//Hsync+Vsync +DE mode  TFT mode
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f7ff ff5d 	bl	8006d2c <write_data>
	write_data(0x03);														//Set HDP	799
 8006e72:	2003      	movs	r0, #3
 8006e74:	f7ff ff5a 	bl	8006d2c <write_data>
	write_data(0x1F);
 8006e78:	201f      	movs	r0, #31
 8006e7a:	f7ff ff57 	bl	8006d2c <write_data>
	write_data(0x01);														//Set VDP	479
 8006e7e:	2001      	movs	r0, #1
 8006e80:	f7ff ff54 	bl	8006d2c <write_data>
	write_data(0xDF);
 8006e84:	20df      	movs	r0, #223	; 0xdf
 8006e86:	f7ff ff51 	bl	8006d2c <write_data>
	write_data(0x00);
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f7ff ff4e 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006e90:	2001      	movs	r0, #1
 8006e92:	f7fa f867 	bl	8000f64 <HAL_Delay>

	write_cmd(0xB4);	//HSYNC
 8006e96:	20b4      	movs	r0, #180	; 0xb4
 8006e98:	f7ff fef4 	bl	8006c84 <write_cmd>
	write_data(0x04);  //Set HT
 8006e9c:	2004      	movs	r0, #4
 8006e9e:	f7ff ff45 	bl	8006d2c <write_data>
	write_data(0x1f);
 8006ea2:	201f      	movs	r0, #31
 8006ea4:	f7ff ff42 	bl	8006d2c <write_data>
	write_data(0x00);  //Set HPS
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	f7ff ff3f 	bl	8006d2c <write_data>
	write_data(0xd2);
 8006eae:	20d2      	movs	r0, #210	; 0xd2
 8006eb0:	f7ff ff3c 	bl	8006d2c <write_data>
	write_data(0x00);			   //Set HPW
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f7ff ff39 	bl	8006d2c <write_data>
	write_data(0x00);  //Set HPS
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f7ff ff36 	bl	8006d2c <write_data>
	write_data(0x00);
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	f7ff ff33 	bl	8006d2c <write_data>
	write_data(0x00);
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7ff ff30 	bl	8006d2c <write_data>

	write_cmd(0xB6);	//VSYNC
 8006ecc:	20b6      	movs	r0, #182	; 0xb6
 8006ece:	f7ff fed9 	bl	8006c84 <write_cmd>
	write_data(0x02);   //Set VT
 8006ed2:	2002      	movs	r0, #2
 8006ed4:	f7ff ff2a 	bl	8006d2c <write_data>
	write_data(0x0c);
 8006ed8:	200c      	movs	r0, #12
 8006eda:	f7ff ff27 	bl	8006d2c <write_data>
	write_data(0x00);  //Set VPS
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f7ff ff24 	bl	8006d2c <write_data>
	write_data(0x22);
 8006ee4:	2022      	movs	r0, #34	; 0x22
 8006ee6:	f7ff ff21 	bl	8006d2c <write_data>
	write_data(0x00);		//Set VPW
 8006eea:	2000      	movs	r0, #0
 8006eec:	f7ff ff1e 	bl	8006d2c <write_data>
	write_data(0x00);  //Set FPS
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	f7ff ff1b 	bl	8006d2c <write_data>
	write_data(0x00);
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	f7ff ff18 	bl	8006d2c <write_data>
				write_data(0x10);
				write_data(0x10);														//Set VPW	16
				write_data(0x00);														//Set FPS	8
				write_data(0x08);
	 */
	HAL_Delay(1);
 8006efc:	2001      	movs	r0, #1
 8006efe:	f7fa f831 	bl	8000f64 <HAL_Delay>
	write_cmd(0xBA);
 8006f02:	20ba      	movs	r0, #186	; 0xba
 8006f04:	f7ff febe 	bl	8006c84 <write_cmd>
	write_data(0x0F);														//GPIO[3:0] out 1
 8006f08:	200f      	movs	r0, #15
 8006f0a:	f7ff ff0f 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006f0e:	2001      	movs	r0, #1
 8006f10:	f7fa f828 	bl	8000f64 <HAL_Delay>
	write_cmd(0xB8);
 8006f14:	20b8      	movs	r0, #184	; 0xb8
 8006f16:	f7ff feb5 	bl	8006c84 <write_cmd>
	write_data(0x07);	   											 //GPIO3=input, GPIO[2:0]=output
 8006f1a:	2007      	movs	r0, #7
 8006f1c:	f7ff ff06 	bl	8006d2c <write_data>
	write_data(0x01);														//GPIO0 normal
 8006f20:	2001      	movs	r0, #1
 8006f22:	f7ff ff03 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006f26:	2001      	movs	r0, #1
 8006f28:	f7fa f81c 	bl	8000f64 <HAL_Delay>
	write_cmd(0x36);														//rotation
 8006f2c:	2036      	movs	r0, #54	; 0x36
 8006f2e:	f7ff fea9 	bl	8006c84 <write_cmd>
	write_data(0x08);		//write_data(0x2A);
 8006f32:	2008      	movs	r0, #8
 8006f34:	f7ff fefa 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006f38:	2001      	movs	r0, #1
 8006f3a:	f7fa f813 	bl	8000f64 <HAL_Delay>

	write_cmd(0xF0);														//pixel data interface
 8006f3e:	20f0      	movs	r0, #240	; 0xf0
 8006f40:	f7ff fea0 	bl	8006c84 <write_cmd>
	write_data(0x00);
 8006f44:	2000      	movs	r0, #0
 8006f46:	f7ff fef1 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	f7fa f80a 	bl	8000f64 <HAL_Delay>
	write_cmd(0xB8);
 8006f50:	20b8      	movs	r0, #184	; 0xb8
 8006f52:	f7ff fe97 	bl	8006c84 <write_cmd>
	write_data(0x0f);   											 //GPIO is controlled by host GPIO[3:0]=output   GPIO[0]=1  LCD ON  GPIO[0]=1  LCD OFF
 8006f56:	200f      	movs	r0, #15
 8006f58:	f7ff fee8 	bl	8006d2c <write_data>
	write_data(0x01);   											 //GPIO0 normal
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	f7ff fee5 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006f62:	2001      	movs	r0, #1
 8006f64:	f7f9 fffe 	bl	8000f64 <HAL_Delay>
	write_cmd(0xBA);
 8006f68:	20ba      	movs	r0, #186	; 0xba
 8006f6a:	f7ff fe8b 	bl	8006c84 <write_cmd>
	write_data(0x01);    												//GPIO[0] out 1 --- LCD display on/off control PIN
 8006f6e:	2001      	movs	r0, #1
 8006f70:	f7ff fedc 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7f9 fff5 	bl	8000f64 <HAL_Delay>
	write_cmd(0x29);														//display on
 8006f7a:	2029      	movs	r0, #41	; 0x29
 8006f7c:	f7ff fe82 	bl	8006c84 <write_cmd>
	write_cmd(0xBE);														//set PWM for B/L
 8006f80:	20be      	movs	r0, #190	; 0xbe
 8006f82:	f7ff fe7f 	bl	8006c84 <write_cmd>
	write_data(0x06);
 8006f86:	2006      	movs	r0, #6
 8006f88:	f7ff fed0 	bl	8006d2c <write_data>
	write_data(0xf0);
 8006f8c:	20f0      	movs	r0, #240	; 0xf0
 8006f8e:	f7ff fecd 	bl	8006d2c <write_data>
	write_data(0x00);
 8006f92:	2000      	movs	r0, #0
 8006f94:	f7ff feca 	bl	8006d2c <write_data>
	write_data(0xf0);
 8006f98:	20f0      	movs	r0, #240	; 0xf0
 8006f9a:	f7ff fec7 	bl	8006d2c <write_data>
	write_data(0x00);
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	f7ff fec4 	bl	8006d2c <write_data>
	write_data(0x00);
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	f7ff fec1 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006faa:	2001      	movs	r0, #1
 8006fac:	f7f9 ffda 	bl	8000f64 <HAL_Delay>
	write_cmd(0xd0);
 8006fb0:	20d0      	movs	r0, #208	; 0xd0
 8006fb2:	f7ff fe67 	bl	8006c84 <write_cmd>
	write_data(0x0d);
 8006fb6:	200d      	movs	r0, #13
 8006fb8:	f7ff feb8 	bl	8006d2c <write_data>
	HAL_Delay(1);
 8006fbc:	2001      	movs	r0, #1
 8006fbe:	f7f9 ffd1 	bl	8000f64 <HAL_Delay>
	write_cmd(0x2C);
 8006fc2:	202c      	movs	r0, #44	; 0x2c
 8006fc4:	f7ff fe5e 	bl	8006c84 <write_cmd>
	HAL_Delay(1);
 8006fc8:	2001      	movs	r0, #1
 8006fca:	f7f9 ffcb 	bl	8000f64 <HAL_Delay>
	//			write_data(0x40);//contrast value
	//			write_data(0x80);//brightness value
	//			write_data(0x40);//saturation value
	//			write_data(0x01);//Post Processor Enable

	write_cmd(0x29);
 8006fce:	2029      	movs	r0, #41	; 0x29
 8006fd0:	f7ff fe58 	bl	8006c84 <write_cmd>
}
 8006fd4:	bf00      	nop
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40020400 	.word	0x40020400

08006fdc <map>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

static inline uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8006fdc:	b490      	push	{r4, r7}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4623      	mov	r3, r4
 8006fec:	80fb      	strh	r3, [r7, #6]
 8006fee:	4603      	mov	r3, r0
 8006ff0:	80bb      	strh	r3, [r7, #4]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	807b      	strh	r3, [r7, #2]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	88bb      	ldrh	r3, [r7, #4]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	8a39      	ldrh	r1, [r7, #16]
 8007002:	883a      	ldrh	r2, [r7, #0]
 8007004:	1a8a      	subs	r2, r1, r2
 8007006:	fb03 f202 	mul.w	r2, r3, r2
 800700a:	8879      	ldrh	r1, [r7, #2]
 800700c:	88bb      	ldrh	r3, [r7, #4]
 800700e:	1acb      	subs	r3, r1, r3
 8007010:	fb92 f3f3 	sdiv	r3, r2, r3
 8007014:	b29a      	uxth	r2, r3
 8007016:	883b      	ldrh	r3, [r7, #0]
 8007018:	4413      	add	r3, r2
 800701a:	b29b      	uxth	r3, r3
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bc90      	pop	{r4, r7}
 8007024:	4770      	bx	lr
	...

08007028 <getRaw>:

uint16_t getRaw(uint8_t address)      // static
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af02      	add	r7, sp, #8
 800702e:	4603      	mov	r3, r0
 8007030:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	for(int dly = 0; dly < 10000; dly++);
 8007032:	2300      	movs	r3, #0
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e002      	b.n	800703e <getRaw+0x16>
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	3301      	adds	r3, #1
 800703c:	617b      	str	r3, [r7, #20]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f242 720f 	movw	r2, #9999	; 0x270f
 8007044:	4293      	cmp	r3, r2
 8007046:	ddf7      	ble.n	8007038 <getRaw+0x10>
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 8007048:	2200      	movs	r2, #0
 800704a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800704e:	481b      	ldr	r0, [pc, #108]	; (80070bc <getRaw+0x94>)
 8007050:	f7fa fa12 	bl	8001478 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&spi2, &address, 1, 1000);
 8007054:	1df9      	adds	r1, r7, #7
 8007056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800705a:	2201      	movs	r2, #1
 800705c:	4818      	ldr	r0, [pc, #96]	; (80070c0 <getRaw+0x98>)
 800705e:	f7fa ff52 	bl	8001f06 <HAL_SPI_Transmit>
	address = 0x00;
 8007062:	2300      	movs	r3, #0
 8007064:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 8007066:	f107 020f 	add.w	r2, r7, #15
 800706a:	1df9      	adds	r1, r7, #7
 800706c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	2301      	movs	r3, #1
 8007074:	4812      	ldr	r0, [pc, #72]	; (80070c0 <getRaw+0x98>)
 8007076:	f7fb f993 	bl	80023a0 <HAL_SPI_TransmitReceive>
	MSB = data;   
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	827b      	strh	r3, [r7, #18]
	address = 0x00;
 800707e:	2300      	movs	r3, #0
 8007080:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 8007082:	f107 020f 	add.w	r2, r7, #15
 8007086:	1df9      	adds	r1, r7, #7
 8007088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	2301      	movs	r3, #1
 8007090:	480b      	ldr	r0, [pc, #44]	; (80070c0 <getRaw+0x98>)
 8007092:	f7fb f985 	bl	80023a0 <HAL_SPI_TransmitReceive>
	LSB = data;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	823b      	strh	r3, [r7, #16]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);      // if (XPT2046_NSS_SOFT)	
 800709a:	2201      	movs	r2, #1
 800709c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80070a0:	4806      	ldr	r0, [pc, #24]	; (80070bc <getRaw+0x94>)
 80070a2:	f7fa f9e9 	bl	8001478 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 80070a6:	8a7b      	ldrh	r3, [r7, #18]
 80070a8:	021a      	lsls	r2, r3, #8
 80070aa:	8a3b      	ldrh	r3, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	10db      	asrs	r3, r3, #3
 80070b0:	b29b      	uxth	r3, r3
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	40020400 	.word	0x40020400
 80070c0:	20000134 	.word	0x20000134

080070c4 <getX>:

uint16_t getX(void)
{ 
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_X)
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MAX_X, OUT_MIN_X);
	else
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80070ca:	20d0      	movs	r0, #208	; 0xd0
 80070cc:	f7ff ffac 	bl	8007028 <getRaw>
 80070d0:	4603      	mov	r3, r0
 80070d2:	4618      	mov	r0, r3
 80070d4:	f240 331f 	movw	r3, #799	; 0x31f
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	2300      	movs	r3, #0
 80070dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80070e0:	21c8      	movs	r1, #200	; 0xc8
 80070e2:	f7ff ff7b 	bl	8006fdc <map>
 80070e6:	4603      	mov	r3, r0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <getY>:

uint16_t getY(void)
{ 
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_Y)
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MAX_Y, OUT_MIN_Y);
 80070f4:	2090      	movs	r0, #144	; 0x90
 80070f6:	f7ff ff97 	bl	8007028 <getRaw>
 80070fa:	4603      	mov	r3, r0
 80070fc:	4618      	mov	r0, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	f240 13df 	movw	r3, #479	; 0x1df
 8007106:	f640 62d8 	movw	r2, #3800	; 0xed8
 800710a:	21c8      	movs	r1, #200	; 0xc8
 800710c:	f7ff ff66 	bl	8006fdc <map>
 8007110:	4603      	mov	r3, r0
	else
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
}
 8007112:	4618      	mov	r0, r3
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
	uint8_t address = 0x00;
 800711e:	2300      	movs	r3, #0
 8007120:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);  // if (XPT2046_NSS_SOFT)
 8007122:	2200      	movs	r2, #0
 8007124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007128:	4812      	ldr	r0, [pc, #72]	; (8007174 <XPT2046_Init+0x5c>)
 800712a:	f7fa f9a5 	bl	8001478 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&spi2, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 800712e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007132:	2201      	movs	r2, #1
 8007134:	2180      	movs	r1, #128	; 0x80
 8007136:	4810      	ldr	r0, [pc, #64]	; (8007178 <XPT2046_Init+0x60>)
 8007138:	f7fa fee5 	bl	8001f06 <HAL_SPI_Transmit>
	address = 0x00;
 800713c:	2300      	movs	r3, #0
 800713e:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi2, &address, 1, 1000);
 8007140:	1df9      	adds	r1, r7, #7
 8007142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007146:	2201      	movs	r2, #1
 8007148:	480b      	ldr	r0, [pc, #44]	; (8007178 <XPT2046_Init+0x60>)
 800714a:	f7fa fedc 	bl	8001f06 <HAL_SPI_Transmit>
	address = 0x00;
 800714e:	2300      	movs	r3, #0
 8007150:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi2, &address, 1, 1000);
 8007152:	1df9      	adds	r1, r7, #7
 8007154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007158:	2201      	movs	r2, #1
 800715a:	4807      	ldr	r0, [pc, #28]	; (8007178 <XPT2046_Init+0x60>)
 800715c:	f7fa fed3 	bl	8001f06 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);   // if (XPT2046_NSS_SOFT)
 8007160:	2201      	movs	r2, #1
 8007162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007166:	4803      	ldr	r0, [pc, #12]	; (8007174 <XPT2046_Init+0x5c>)
 8007168:	f7fa f986 	bl	8001478 <HAL_GPIO_WritePin>

#if 0
//#ifndef (DEBUG)
	printf("Touch init completed\r\n");
#endif
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40020400 	.word	0x40020400
 8007178:	20000134 	.word	0x20000134

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f001 f83e 	bl	8008210 <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	08008494 	.word	0x08008494
 80071b8:	08008494 	.word	0x08008494
 80071bc:	08008494 	.word	0x08008494
 80071c0:	08008498 	.word	0x08008498

080071c4 <memcmp>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	3901      	subs	r1, #1
 80071c8:	4402      	add	r2, r0
 80071ca:	4290      	cmp	r0, r2
 80071cc:	d101      	bne.n	80071d2 <memcmp+0xe>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e005      	b.n	80071de <memcmp+0x1a>
 80071d2:	7803      	ldrb	r3, [r0, #0]
 80071d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80071d8:	42a3      	cmp	r3, r4
 80071da:	d001      	beq.n	80071e0 <memcmp+0x1c>
 80071dc:	1b18      	subs	r0, r3, r4
 80071de:	bd10      	pop	{r4, pc}
 80071e0:	3001      	adds	r0, #1
 80071e2:	e7f2      	b.n	80071ca <memcmp+0x6>

080071e4 <memcpy>:
 80071e4:	440a      	add	r2, r1
 80071e6:	4291      	cmp	r1, r2
 80071e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071ec:	d100      	bne.n	80071f0 <memcpy+0xc>
 80071ee:	4770      	bx	lr
 80071f0:	b510      	push	{r4, lr}
 80071f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071fa:	4291      	cmp	r1, r2
 80071fc:	d1f9      	bne.n	80071f2 <memcpy+0xe>
 80071fe:	bd10      	pop	{r4, pc}

08007200 <memset>:
 8007200:	4402      	add	r2, r0
 8007202:	4603      	mov	r3, r0
 8007204:	4293      	cmp	r3, r2
 8007206:	d100      	bne.n	800720a <memset+0xa>
 8007208:	4770      	bx	lr
 800720a:	f803 1b01 	strb.w	r1, [r3], #1
 800720e:	e7f9      	b.n	8007204 <memset+0x4>

08007210 <iprintf>:
 8007210:	b40f      	push	{r0, r1, r2, r3}
 8007212:	4b0a      	ldr	r3, [pc, #40]	; (800723c <iprintf+0x2c>)
 8007214:	b513      	push	{r0, r1, r4, lr}
 8007216:	681c      	ldr	r4, [r3, #0]
 8007218:	b124      	cbz	r4, 8007224 <iprintf+0x14>
 800721a:	69a3      	ldr	r3, [r4, #24]
 800721c:	b913      	cbnz	r3, 8007224 <iprintf+0x14>
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fa5e 	bl	80076e0 <__sinit>
 8007224:	ab05      	add	r3, sp, #20
 8007226:	9a04      	ldr	r2, [sp, #16]
 8007228:	68a1      	ldr	r1, [r4, #8]
 800722a:	9301      	str	r3, [sp, #4]
 800722c:	4620      	mov	r0, r4
 800722e:	f000 fc67 	bl	8007b00 <_vfiprintf_r>
 8007232:	b002      	add	sp, #8
 8007234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007238:	b004      	add	sp, #16
 800723a:	4770      	bx	lr
 800723c:	20000018 	.word	0x20000018

08007240 <_puts_r>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	460e      	mov	r6, r1
 8007244:	4605      	mov	r5, r0
 8007246:	b118      	cbz	r0, 8007250 <_puts_r+0x10>
 8007248:	6983      	ldr	r3, [r0, #24]
 800724a:	b90b      	cbnz	r3, 8007250 <_puts_r+0x10>
 800724c:	f000 fa48 	bl	80076e0 <__sinit>
 8007250:	69ab      	ldr	r3, [r5, #24]
 8007252:	68ac      	ldr	r4, [r5, #8]
 8007254:	b913      	cbnz	r3, 800725c <_puts_r+0x1c>
 8007256:	4628      	mov	r0, r5
 8007258:	f000 fa42 	bl	80076e0 <__sinit>
 800725c:	4b2c      	ldr	r3, [pc, #176]	; (8007310 <_puts_r+0xd0>)
 800725e:	429c      	cmp	r4, r3
 8007260:	d120      	bne.n	80072a4 <_puts_r+0x64>
 8007262:	686c      	ldr	r4, [r5, #4]
 8007264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007266:	07db      	lsls	r3, r3, #31
 8007268:	d405      	bmi.n	8007276 <_puts_r+0x36>
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	0598      	lsls	r0, r3, #22
 800726e:	d402      	bmi.n	8007276 <_puts_r+0x36>
 8007270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007272:	f000 fad3 	bl	800781c <__retarget_lock_acquire_recursive>
 8007276:	89a3      	ldrh	r3, [r4, #12]
 8007278:	0719      	lsls	r1, r3, #28
 800727a:	d51d      	bpl.n	80072b8 <_puts_r+0x78>
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	b1db      	cbz	r3, 80072b8 <_puts_r+0x78>
 8007280:	3e01      	subs	r6, #1
 8007282:	68a3      	ldr	r3, [r4, #8]
 8007284:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007288:	3b01      	subs	r3, #1
 800728a:	60a3      	str	r3, [r4, #8]
 800728c:	bb39      	cbnz	r1, 80072de <_puts_r+0x9e>
 800728e:	2b00      	cmp	r3, #0
 8007290:	da38      	bge.n	8007304 <_puts_r+0xc4>
 8007292:	4622      	mov	r2, r4
 8007294:	210a      	movs	r1, #10
 8007296:	4628      	mov	r0, r5
 8007298:	f000 f848 	bl	800732c <__swbuf_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d011      	beq.n	80072c4 <_puts_r+0x84>
 80072a0:	250a      	movs	r5, #10
 80072a2:	e011      	b.n	80072c8 <_puts_r+0x88>
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <_puts_r+0xd4>)
 80072a6:	429c      	cmp	r4, r3
 80072a8:	d101      	bne.n	80072ae <_puts_r+0x6e>
 80072aa:	68ac      	ldr	r4, [r5, #8]
 80072ac:	e7da      	b.n	8007264 <_puts_r+0x24>
 80072ae:	4b1a      	ldr	r3, [pc, #104]	; (8007318 <_puts_r+0xd8>)
 80072b0:	429c      	cmp	r4, r3
 80072b2:	bf08      	it	eq
 80072b4:	68ec      	ldreq	r4, [r5, #12]
 80072b6:	e7d5      	b.n	8007264 <_puts_r+0x24>
 80072b8:	4621      	mov	r1, r4
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f888 	bl	80073d0 <__swsetup_r>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	d0dd      	beq.n	8007280 <_puts_r+0x40>
 80072c4:	f04f 35ff 	mov.w	r5, #4294967295
 80072c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072ca:	07da      	lsls	r2, r3, #31
 80072cc:	d405      	bmi.n	80072da <_puts_r+0x9a>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	059b      	lsls	r3, r3, #22
 80072d2:	d402      	bmi.n	80072da <_puts_r+0x9a>
 80072d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072d6:	f000 faa2 	bl	800781e <__retarget_lock_release_recursive>
 80072da:	4628      	mov	r0, r5
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da04      	bge.n	80072ec <_puts_r+0xac>
 80072e2:	69a2      	ldr	r2, [r4, #24]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	dc06      	bgt.n	80072f6 <_puts_r+0xb6>
 80072e8:	290a      	cmp	r1, #10
 80072ea:	d004      	beq.n	80072f6 <_puts_r+0xb6>
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	7019      	strb	r1, [r3, #0]
 80072f4:	e7c5      	b.n	8007282 <_puts_r+0x42>
 80072f6:	4622      	mov	r2, r4
 80072f8:	4628      	mov	r0, r5
 80072fa:	f000 f817 	bl	800732c <__swbuf_r>
 80072fe:	3001      	adds	r0, #1
 8007300:	d1bf      	bne.n	8007282 <_puts_r+0x42>
 8007302:	e7df      	b.n	80072c4 <_puts_r+0x84>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	250a      	movs	r5, #10
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	6022      	str	r2, [r4, #0]
 800730c:	701d      	strb	r5, [r3, #0]
 800730e:	e7db      	b.n	80072c8 <_puts_r+0x88>
 8007310:	08008418 	.word	0x08008418
 8007314:	08008438 	.word	0x08008438
 8007318:	080083f8 	.word	0x080083f8

0800731c <puts>:
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <puts+0xc>)
 800731e:	4601      	mov	r1, r0
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	f7ff bf8d 	b.w	8007240 <_puts_r>
 8007326:	bf00      	nop
 8007328:	20000018 	.word	0x20000018

0800732c <__swbuf_r>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	460e      	mov	r6, r1
 8007330:	4614      	mov	r4, r2
 8007332:	4605      	mov	r5, r0
 8007334:	b118      	cbz	r0, 800733e <__swbuf_r+0x12>
 8007336:	6983      	ldr	r3, [r0, #24]
 8007338:	b90b      	cbnz	r3, 800733e <__swbuf_r+0x12>
 800733a:	f000 f9d1 	bl	80076e0 <__sinit>
 800733e:	4b21      	ldr	r3, [pc, #132]	; (80073c4 <__swbuf_r+0x98>)
 8007340:	429c      	cmp	r4, r3
 8007342:	d12b      	bne.n	800739c <__swbuf_r+0x70>
 8007344:	686c      	ldr	r4, [r5, #4]
 8007346:	69a3      	ldr	r3, [r4, #24]
 8007348:	60a3      	str	r3, [r4, #8]
 800734a:	89a3      	ldrh	r3, [r4, #12]
 800734c:	071a      	lsls	r2, r3, #28
 800734e:	d52f      	bpl.n	80073b0 <__swbuf_r+0x84>
 8007350:	6923      	ldr	r3, [r4, #16]
 8007352:	b36b      	cbz	r3, 80073b0 <__swbuf_r+0x84>
 8007354:	6923      	ldr	r3, [r4, #16]
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	1ac0      	subs	r0, r0, r3
 800735a:	6963      	ldr	r3, [r4, #20]
 800735c:	b2f6      	uxtb	r6, r6
 800735e:	4283      	cmp	r3, r0
 8007360:	4637      	mov	r7, r6
 8007362:	dc04      	bgt.n	800736e <__swbuf_r+0x42>
 8007364:	4621      	mov	r1, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f926 	bl	80075b8 <_fflush_r>
 800736c:	bb30      	cbnz	r0, 80073bc <__swbuf_r+0x90>
 800736e:	68a3      	ldr	r3, [r4, #8]
 8007370:	3b01      	subs	r3, #1
 8007372:	60a3      	str	r3, [r4, #8]
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	6022      	str	r2, [r4, #0]
 800737a:	701e      	strb	r6, [r3, #0]
 800737c:	6963      	ldr	r3, [r4, #20]
 800737e:	3001      	adds	r0, #1
 8007380:	4283      	cmp	r3, r0
 8007382:	d004      	beq.n	800738e <__swbuf_r+0x62>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	07db      	lsls	r3, r3, #31
 8007388:	d506      	bpl.n	8007398 <__swbuf_r+0x6c>
 800738a:	2e0a      	cmp	r6, #10
 800738c:	d104      	bne.n	8007398 <__swbuf_r+0x6c>
 800738e:	4621      	mov	r1, r4
 8007390:	4628      	mov	r0, r5
 8007392:	f000 f911 	bl	80075b8 <_fflush_r>
 8007396:	b988      	cbnz	r0, 80073bc <__swbuf_r+0x90>
 8007398:	4638      	mov	r0, r7
 800739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <__swbuf_r+0x9c>)
 800739e:	429c      	cmp	r4, r3
 80073a0:	d101      	bne.n	80073a6 <__swbuf_r+0x7a>
 80073a2:	68ac      	ldr	r4, [r5, #8]
 80073a4:	e7cf      	b.n	8007346 <__swbuf_r+0x1a>
 80073a6:	4b09      	ldr	r3, [pc, #36]	; (80073cc <__swbuf_r+0xa0>)
 80073a8:	429c      	cmp	r4, r3
 80073aa:	bf08      	it	eq
 80073ac:	68ec      	ldreq	r4, [r5, #12]
 80073ae:	e7ca      	b.n	8007346 <__swbuf_r+0x1a>
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	f000 f80c 	bl	80073d0 <__swsetup_r>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d0cb      	beq.n	8007354 <__swbuf_r+0x28>
 80073bc:	f04f 37ff 	mov.w	r7, #4294967295
 80073c0:	e7ea      	b.n	8007398 <__swbuf_r+0x6c>
 80073c2:	bf00      	nop
 80073c4:	08008418 	.word	0x08008418
 80073c8:	08008438 	.word	0x08008438
 80073cc:	080083f8 	.word	0x080083f8

080073d0 <__swsetup_r>:
 80073d0:	4b32      	ldr	r3, [pc, #200]	; (800749c <__swsetup_r+0xcc>)
 80073d2:	b570      	push	{r4, r5, r6, lr}
 80073d4:	681d      	ldr	r5, [r3, #0]
 80073d6:	4606      	mov	r6, r0
 80073d8:	460c      	mov	r4, r1
 80073da:	b125      	cbz	r5, 80073e6 <__swsetup_r+0x16>
 80073dc:	69ab      	ldr	r3, [r5, #24]
 80073de:	b913      	cbnz	r3, 80073e6 <__swsetup_r+0x16>
 80073e0:	4628      	mov	r0, r5
 80073e2:	f000 f97d 	bl	80076e0 <__sinit>
 80073e6:	4b2e      	ldr	r3, [pc, #184]	; (80074a0 <__swsetup_r+0xd0>)
 80073e8:	429c      	cmp	r4, r3
 80073ea:	d10f      	bne.n	800740c <__swsetup_r+0x3c>
 80073ec:	686c      	ldr	r4, [r5, #4]
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f4:	0719      	lsls	r1, r3, #28
 80073f6:	d42c      	bmi.n	8007452 <__swsetup_r+0x82>
 80073f8:	06dd      	lsls	r5, r3, #27
 80073fa:	d411      	bmi.n	8007420 <__swsetup_r+0x50>
 80073fc:	2309      	movs	r3, #9
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007404:	81a3      	strh	r3, [r4, #12]
 8007406:	f04f 30ff 	mov.w	r0, #4294967295
 800740a:	e03e      	b.n	800748a <__swsetup_r+0xba>
 800740c:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <__swsetup_r+0xd4>)
 800740e:	429c      	cmp	r4, r3
 8007410:	d101      	bne.n	8007416 <__swsetup_r+0x46>
 8007412:	68ac      	ldr	r4, [r5, #8]
 8007414:	e7eb      	b.n	80073ee <__swsetup_r+0x1e>
 8007416:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <__swsetup_r+0xd8>)
 8007418:	429c      	cmp	r4, r3
 800741a:	bf08      	it	eq
 800741c:	68ec      	ldreq	r4, [r5, #12]
 800741e:	e7e6      	b.n	80073ee <__swsetup_r+0x1e>
 8007420:	0758      	lsls	r0, r3, #29
 8007422:	d512      	bpl.n	800744a <__swsetup_r+0x7a>
 8007424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007426:	b141      	cbz	r1, 800743a <__swsetup_r+0x6a>
 8007428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800742c:	4299      	cmp	r1, r3
 800742e:	d002      	beq.n	8007436 <__swsetup_r+0x66>
 8007430:	4630      	mov	r0, r6
 8007432:	f000 fa5b 	bl	80078ec <_free_r>
 8007436:	2300      	movs	r3, #0
 8007438:	6363      	str	r3, [r4, #52]	; 0x34
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	2300      	movs	r3, #0
 8007444:	6063      	str	r3, [r4, #4]
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f043 0308 	orr.w	r3, r3, #8
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	6923      	ldr	r3, [r4, #16]
 8007454:	b94b      	cbnz	r3, 800746a <__swsetup_r+0x9a>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007460:	d003      	beq.n	800746a <__swsetup_r+0x9a>
 8007462:	4621      	mov	r1, r4
 8007464:	4630      	mov	r0, r6
 8007466:	f000 fa01 	bl	800786c <__smakebuf_r>
 800746a:	89a0      	ldrh	r0, [r4, #12]
 800746c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007470:	f010 0301 	ands.w	r3, r0, #1
 8007474:	d00a      	beq.n	800748c <__swsetup_r+0xbc>
 8007476:	2300      	movs	r3, #0
 8007478:	60a3      	str	r3, [r4, #8]
 800747a:	6963      	ldr	r3, [r4, #20]
 800747c:	425b      	negs	r3, r3
 800747e:	61a3      	str	r3, [r4, #24]
 8007480:	6923      	ldr	r3, [r4, #16]
 8007482:	b943      	cbnz	r3, 8007496 <__swsetup_r+0xc6>
 8007484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007488:	d1ba      	bne.n	8007400 <__swsetup_r+0x30>
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	0781      	lsls	r1, r0, #30
 800748e:	bf58      	it	pl
 8007490:	6963      	ldrpl	r3, [r4, #20]
 8007492:	60a3      	str	r3, [r4, #8]
 8007494:	e7f4      	b.n	8007480 <__swsetup_r+0xb0>
 8007496:	2000      	movs	r0, #0
 8007498:	e7f7      	b.n	800748a <__swsetup_r+0xba>
 800749a:	bf00      	nop
 800749c:	20000018 	.word	0x20000018
 80074a0:	08008418 	.word	0x08008418
 80074a4:	08008438 	.word	0x08008438
 80074a8:	080083f8 	.word	0x080083f8

080074ac <__sflush_r>:
 80074ac:	898a      	ldrh	r2, [r1, #12]
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	4605      	mov	r5, r0
 80074b4:	0710      	lsls	r0, r2, #28
 80074b6:	460c      	mov	r4, r1
 80074b8:	d458      	bmi.n	800756c <__sflush_r+0xc0>
 80074ba:	684b      	ldr	r3, [r1, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	dc05      	bgt.n	80074cc <__sflush_r+0x20>
 80074c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	dc02      	bgt.n	80074cc <__sflush_r+0x20>
 80074c6:	2000      	movs	r0, #0
 80074c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ce:	2e00      	cmp	r6, #0
 80074d0:	d0f9      	beq.n	80074c6 <__sflush_r+0x1a>
 80074d2:	2300      	movs	r3, #0
 80074d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074d8:	682f      	ldr	r7, [r5, #0]
 80074da:	602b      	str	r3, [r5, #0]
 80074dc:	d032      	beq.n	8007544 <__sflush_r+0x98>
 80074de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	075a      	lsls	r2, r3, #29
 80074e4:	d505      	bpl.n	80074f2 <__sflush_r+0x46>
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	1ac0      	subs	r0, r0, r3
 80074ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074ec:	b10b      	cbz	r3, 80074f2 <__sflush_r+0x46>
 80074ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074f0:	1ac0      	subs	r0, r0, r3
 80074f2:	2300      	movs	r3, #0
 80074f4:	4602      	mov	r2, r0
 80074f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074f8:	6a21      	ldr	r1, [r4, #32]
 80074fa:	4628      	mov	r0, r5
 80074fc:	47b0      	blx	r6
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	d106      	bne.n	8007512 <__sflush_r+0x66>
 8007504:	6829      	ldr	r1, [r5, #0]
 8007506:	291d      	cmp	r1, #29
 8007508:	d82c      	bhi.n	8007564 <__sflush_r+0xb8>
 800750a:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <__sflush_r+0x108>)
 800750c:	40ca      	lsrs	r2, r1
 800750e:	07d6      	lsls	r6, r2, #31
 8007510:	d528      	bpl.n	8007564 <__sflush_r+0xb8>
 8007512:	2200      	movs	r2, #0
 8007514:	6062      	str	r2, [r4, #4]
 8007516:	04d9      	lsls	r1, r3, #19
 8007518:	6922      	ldr	r2, [r4, #16]
 800751a:	6022      	str	r2, [r4, #0]
 800751c:	d504      	bpl.n	8007528 <__sflush_r+0x7c>
 800751e:	1c42      	adds	r2, r0, #1
 8007520:	d101      	bne.n	8007526 <__sflush_r+0x7a>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	b903      	cbnz	r3, 8007528 <__sflush_r+0x7c>
 8007526:	6560      	str	r0, [r4, #84]	; 0x54
 8007528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752a:	602f      	str	r7, [r5, #0]
 800752c:	2900      	cmp	r1, #0
 800752e:	d0ca      	beq.n	80074c6 <__sflush_r+0x1a>
 8007530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007534:	4299      	cmp	r1, r3
 8007536:	d002      	beq.n	800753e <__sflush_r+0x92>
 8007538:	4628      	mov	r0, r5
 800753a:	f000 f9d7 	bl	80078ec <_free_r>
 800753e:	2000      	movs	r0, #0
 8007540:	6360      	str	r0, [r4, #52]	; 0x34
 8007542:	e7c1      	b.n	80074c8 <__sflush_r+0x1c>
 8007544:	6a21      	ldr	r1, [r4, #32]
 8007546:	2301      	movs	r3, #1
 8007548:	4628      	mov	r0, r5
 800754a:	47b0      	blx	r6
 800754c:	1c41      	adds	r1, r0, #1
 800754e:	d1c7      	bne.n	80074e0 <__sflush_r+0x34>
 8007550:	682b      	ldr	r3, [r5, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0c4      	beq.n	80074e0 <__sflush_r+0x34>
 8007556:	2b1d      	cmp	r3, #29
 8007558:	d001      	beq.n	800755e <__sflush_r+0xb2>
 800755a:	2b16      	cmp	r3, #22
 800755c:	d101      	bne.n	8007562 <__sflush_r+0xb6>
 800755e:	602f      	str	r7, [r5, #0]
 8007560:	e7b1      	b.n	80074c6 <__sflush_r+0x1a>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007568:	81a3      	strh	r3, [r4, #12]
 800756a:	e7ad      	b.n	80074c8 <__sflush_r+0x1c>
 800756c:	690f      	ldr	r7, [r1, #16]
 800756e:	2f00      	cmp	r7, #0
 8007570:	d0a9      	beq.n	80074c6 <__sflush_r+0x1a>
 8007572:	0793      	lsls	r3, r2, #30
 8007574:	680e      	ldr	r6, [r1, #0]
 8007576:	bf08      	it	eq
 8007578:	694b      	ldreq	r3, [r1, #20]
 800757a:	600f      	str	r7, [r1, #0]
 800757c:	bf18      	it	ne
 800757e:	2300      	movne	r3, #0
 8007580:	eba6 0807 	sub.w	r8, r6, r7
 8007584:	608b      	str	r3, [r1, #8]
 8007586:	f1b8 0f00 	cmp.w	r8, #0
 800758a:	dd9c      	ble.n	80074c6 <__sflush_r+0x1a>
 800758c:	6a21      	ldr	r1, [r4, #32]
 800758e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007590:	4643      	mov	r3, r8
 8007592:	463a      	mov	r2, r7
 8007594:	4628      	mov	r0, r5
 8007596:	47b0      	blx	r6
 8007598:	2800      	cmp	r0, #0
 800759a:	dc06      	bgt.n	80075aa <__sflush_r+0xfe>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a2:	81a3      	strh	r3, [r4, #12]
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295
 80075a8:	e78e      	b.n	80074c8 <__sflush_r+0x1c>
 80075aa:	4407      	add	r7, r0
 80075ac:	eba8 0800 	sub.w	r8, r8, r0
 80075b0:	e7e9      	b.n	8007586 <__sflush_r+0xda>
 80075b2:	bf00      	nop
 80075b4:	20400001 	.word	0x20400001

080075b8 <_fflush_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	690b      	ldr	r3, [r1, #16]
 80075bc:	4605      	mov	r5, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	b913      	cbnz	r3, 80075c8 <_fflush_r+0x10>
 80075c2:	2500      	movs	r5, #0
 80075c4:	4628      	mov	r0, r5
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	b118      	cbz	r0, 80075d2 <_fflush_r+0x1a>
 80075ca:	6983      	ldr	r3, [r0, #24]
 80075cc:	b90b      	cbnz	r3, 80075d2 <_fflush_r+0x1a>
 80075ce:	f000 f887 	bl	80076e0 <__sinit>
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <_fflush_r+0x6c>)
 80075d4:	429c      	cmp	r4, r3
 80075d6:	d11b      	bne.n	8007610 <_fflush_r+0x58>
 80075d8:	686c      	ldr	r4, [r5, #4]
 80075da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0ef      	beq.n	80075c2 <_fflush_r+0xa>
 80075e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075e4:	07d0      	lsls	r0, r2, #31
 80075e6:	d404      	bmi.n	80075f2 <_fflush_r+0x3a>
 80075e8:	0599      	lsls	r1, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_fflush_r+0x3a>
 80075ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ee:	f000 f915 	bl	800781c <__retarget_lock_acquire_recursive>
 80075f2:	4628      	mov	r0, r5
 80075f4:	4621      	mov	r1, r4
 80075f6:	f7ff ff59 	bl	80074ac <__sflush_r>
 80075fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075fc:	07da      	lsls	r2, r3, #31
 80075fe:	4605      	mov	r5, r0
 8007600:	d4e0      	bmi.n	80075c4 <_fflush_r+0xc>
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	059b      	lsls	r3, r3, #22
 8007606:	d4dd      	bmi.n	80075c4 <_fflush_r+0xc>
 8007608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760a:	f000 f908 	bl	800781e <__retarget_lock_release_recursive>
 800760e:	e7d9      	b.n	80075c4 <_fflush_r+0xc>
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <_fflush_r+0x70>)
 8007612:	429c      	cmp	r4, r3
 8007614:	d101      	bne.n	800761a <_fflush_r+0x62>
 8007616:	68ac      	ldr	r4, [r5, #8]
 8007618:	e7df      	b.n	80075da <_fflush_r+0x22>
 800761a:	4b04      	ldr	r3, [pc, #16]	; (800762c <_fflush_r+0x74>)
 800761c:	429c      	cmp	r4, r3
 800761e:	bf08      	it	eq
 8007620:	68ec      	ldreq	r4, [r5, #12]
 8007622:	e7da      	b.n	80075da <_fflush_r+0x22>
 8007624:	08008418 	.word	0x08008418
 8007628:	08008438 	.word	0x08008438
 800762c:	080083f8 	.word	0x080083f8

08007630 <std>:
 8007630:	2300      	movs	r3, #0
 8007632:	b510      	push	{r4, lr}
 8007634:	4604      	mov	r4, r0
 8007636:	e9c0 3300 	strd	r3, r3, [r0]
 800763a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800763e:	6083      	str	r3, [r0, #8]
 8007640:	8181      	strh	r1, [r0, #12]
 8007642:	6643      	str	r3, [r0, #100]	; 0x64
 8007644:	81c2      	strh	r2, [r0, #14]
 8007646:	6183      	str	r3, [r0, #24]
 8007648:	4619      	mov	r1, r3
 800764a:	2208      	movs	r2, #8
 800764c:	305c      	adds	r0, #92	; 0x5c
 800764e:	f7ff fdd7 	bl	8007200 <memset>
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x38>)
 8007654:	6263      	str	r3, [r4, #36]	; 0x24
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x3c>)
 8007658:	62a3      	str	r3, [r4, #40]	; 0x28
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <std+0x40>)
 800765c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <std+0x44>)
 8007660:	6224      	str	r4, [r4, #32]
 8007662:	6323      	str	r3, [r4, #48]	; 0x30
 8007664:	bd10      	pop	{r4, pc}
 8007666:	bf00      	nop
 8007668:	080080a9 	.word	0x080080a9
 800766c:	080080cb 	.word	0x080080cb
 8007670:	08008103 	.word	0x08008103
 8007674:	08008127 	.word	0x08008127

08007678 <_cleanup_r>:
 8007678:	4901      	ldr	r1, [pc, #4]	; (8007680 <_cleanup_r+0x8>)
 800767a:	f000 b8af 	b.w	80077dc <_fwalk_reent>
 800767e:	bf00      	nop
 8007680:	080075b9 	.word	0x080075b9

08007684 <__sfmoreglue>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	2268      	movs	r2, #104	; 0x68
 8007688:	1e4d      	subs	r5, r1, #1
 800768a:	4355      	muls	r5, r2
 800768c:	460e      	mov	r6, r1
 800768e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007692:	f000 f997 	bl	80079c4 <_malloc_r>
 8007696:	4604      	mov	r4, r0
 8007698:	b140      	cbz	r0, 80076ac <__sfmoreglue+0x28>
 800769a:	2100      	movs	r1, #0
 800769c:	e9c0 1600 	strd	r1, r6, [r0]
 80076a0:	300c      	adds	r0, #12
 80076a2:	60a0      	str	r0, [r4, #8]
 80076a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076a8:	f7ff fdaa 	bl	8007200 <memset>
 80076ac:	4620      	mov	r0, r4
 80076ae:	bd70      	pop	{r4, r5, r6, pc}

080076b0 <__sfp_lock_acquire>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__sfp_lock_acquire+0x8>)
 80076b2:	f000 b8b3 	b.w	800781c <__retarget_lock_acquire_recursive>
 80076b6:	bf00      	nop
 80076b8:	2000bde4 	.word	0x2000bde4

080076bc <__sfp_lock_release>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__sfp_lock_release+0x8>)
 80076be:	f000 b8ae 	b.w	800781e <__retarget_lock_release_recursive>
 80076c2:	bf00      	nop
 80076c4:	2000bde4 	.word	0x2000bde4

080076c8 <__sinit_lock_acquire>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__sinit_lock_acquire+0x8>)
 80076ca:	f000 b8a7 	b.w	800781c <__retarget_lock_acquire_recursive>
 80076ce:	bf00      	nop
 80076d0:	2000bde5 	.word	0x2000bde5

080076d4 <__sinit_lock_release>:
 80076d4:	4801      	ldr	r0, [pc, #4]	; (80076dc <__sinit_lock_release+0x8>)
 80076d6:	f000 b8a2 	b.w	800781e <__retarget_lock_release_recursive>
 80076da:	bf00      	nop
 80076dc:	2000bde5 	.word	0x2000bde5

080076e0 <__sinit>:
 80076e0:	b510      	push	{r4, lr}
 80076e2:	4604      	mov	r4, r0
 80076e4:	f7ff fff0 	bl	80076c8 <__sinit_lock_acquire>
 80076e8:	69a3      	ldr	r3, [r4, #24]
 80076ea:	b11b      	cbz	r3, 80076f4 <__sinit+0x14>
 80076ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f0:	f7ff bff0 	b.w	80076d4 <__sinit_lock_release>
 80076f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076f8:	6523      	str	r3, [r4, #80]	; 0x50
 80076fa:	4b13      	ldr	r3, [pc, #76]	; (8007748 <__sinit+0x68>)
 80076fc:	4a13      	ldr	r2, [pc, #76]	; (800774c <__sinit+0x6c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	62a2      	str	r2, [r4, #40]	; 0x28
 8007702:	42a3      	cmp	r3, r4
 8007704:	bf04      	itt	eq
 8007706:	2301      	moveq	r3, #1
 8007708:	61a3      	streq	r3, [r4, #24]
 800770a:	4620      	mov	r0, r4
 800770c:	f000 f820 	bl	8007750 <__sfp>
 8007710:	6060      	str	r0, [r4, #4]
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f81c 	bl	8007750 <__sfp>
 8007718:	60a0      	str	r0, [r4, #8]
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f818 	bl	8007750 <__sfp>
 8007720:	2200      	movs	r2, #0
 8007722:	60e0      	str	r0, [r4, #12]
 8007724:	2104      	movs	r1, #4
 8007726:	6860      	ldr	r0, [r4, #4]
 8007728:	f7ff ff82 	bl	8007630 <std>
 800772c:	68a0      	ldr	r0, [r4, #8]
 800772e:	2201      	movs	r2, #1
 8007730:	2109      	movs	r1, #9
 8007732:	f7ff ff7d 	bl	8007630 <std>
 8007736:	68e0      	ldr	r0, [r4, #12]
 8007738:	2202      	movs	r2, #2
 800773a:	2112      	movs	r1, #18
 800773c:	f7ff ff78 	bl	8007630 <std>
 8007740:	2301      	movs	r3, #1
 8007742:	61a3      	str	r3, [r4, #24]
 8007744:	e7d2      	b.n	80076ec <__sinit+0xc>
 8007746:	bf00      	nop
 8007748:	080083f4 	.word	0x080083f4
 800774c:	08007679 	.word	0x08007679

08007750 <__sfp>:
 8007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007752:	4607      	mov	r7, r0
 8007754:	f7ff ffac 	bl	80076b0 <__sfp_lock_acquire>
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <__sfp+0x84>)
 800775a:	681e      	ldr	r6, [r3, #0]
 800775c:	69b3      	ldr	r3, [r6, #24]
 800775e:	b913      	cbnz	r3, 8007766 <__sfp+0x16>
 8007760:	4630      	mov	r0, r6
 8007762:	f7ff ffbd 	bl	80076e0 <__sinit>
 8007766:	3648      	adds	r6, #72	; 0x48
 8007768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800776c:	3b01      	subs	r3, #1
 800776e:	d503      	bpl.n	8007778 <__sfp+0x28>
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	b30b      	cbz	r3, 80077b8 <__sfp+0x68>
 8007774:	6836      	ldr	r6, [r6, #0]
 8007776:	e7f7      	b.n	8007768 <__sfp+0x18>
 8007778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800777c:	b9d5      	cbnz	r5, 80077b4 <__sfp+0x64>
 800777e:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <__sfp+0x88>)
 8007780:	60e3      	str	r3, [r4, #12]
 8007782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007786:	6665      	str	r5, [r4, #100]	; 0x64
 8007788:	f000 f847 	bl	800781a <__retarget_lock_init_recursive>
 800778c:	f7ff ff96 	bl	80076bc <__sfp_lock_release>
 8007790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007798:	6025      	str	r5, [r4, #0]
 800779a:	61a5      	str	r5, [r4, #24]
 800779c:	2208      	movs	r2, #8
 800779e:	4629      	mov	r1, r5
 80077a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077a4:	f7ff fd2c 	bl	8007200 <memset>
 80077a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077b0:	4620      	mov	r0, r4
 80077b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b4:	3468      	adds	r4, #104	; 0x68
 80077b6:	e7d9      	b.n	800776c <__sfp+0x1c>
 80077b8:	2104      	movs	r1, #4
 80077ba:	4638      	mov	r0, r7
 80077bc:	f7ff ff62 	bl	8007684 <__sfmoreglue>
 80077c0:	4604      	mov	r4, r0
 80077c2:	6030      	str	r0, [r6, #0]
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d1d5      	bne.n	8007774 <__sfp+0x24>
 80077c8:	f7ff ff78 	bl	80076bc <__sfp_lock_release>
 80077cc:	230c      	movs	r3, #12
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	e7ee      	b.n	80077b0 <__sfp+0x60>
 80077d2:	bf00      	nop
 80077d4:	080083f4 	.word	0x080083f4
 80077d8:	ffff0001 	.word	0xffff0001

080077dc <_fwalk_reent>:
 80077dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e0:	4606      	mov	r6, r0
 80077e2:	4688      	mov	r8, r1
 80077e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077e8:	2700      	movs	r7, #0
 80077ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ee:	f1b9 0901 	subs.w	r9, r9, #1
 80077f2:	d505      	bpl.n	8007800 <_fwalk_reent+0x24>
 80077f4:	6824      	ldr	r4, [r4, #0]
 80077f6:	2c00      	cmp	r4, #0
 80077f8:	d1f7      	bne.n	80077ea <_fwalk_reent+0xe>
 80077fa:	4638      	mov	r0, r7
 80077fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007800:	89ab      	ldrh	r3, [r5, #12]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d907      	bls.n	8007816 <_fwalk_reent+0x3a>
 8007806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800780a:	3301      	adds	r3, #1
 800780c:	d003      	beq.n	8007816 <_fwalk_reent+0x3a>
 800780e:	4629      	mov	r1, r5
 8007810:	4630      	mov	r0, r6
 8007812:	47c0      	blx	r8
 8007814:	4307      	orrs	r7, r0
 8007816:	3568      	adds	r5, #104	; 0x68
 8007818:	e7e9      	b.n	80077ee <_fwalk_reent+0x12>

0800781a <__retarget_lock_init_recursive>:
 800781a:	4770      	bx	lr

0800781c <__retarget_lock_acquire_recursive>:
 800781c:	4770      	bx	lr

0800781e <__retarget_lock_release_recursive>:
 800781e:	4770      	bx	lr

08007820 <__swhatbuf_r>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	460e      	mov	r6, r1
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	2900      	cmp	r1, #0
 800782a:	b096      	sub	sp, #88	; 0x58
 800782c:	4614      	mov	r4, r2
 800782e:	461d      	mov	r5, r3
 8007830:	da08      	bge.n	8007844 <__swhatbuf_r+0x24>
 8007832:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007836:	2200      	movs	r2, #0
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	061a      	lsls	r2, r3, #24
 800783c:	d410      	bmi.n	8007860 <__swhatbuf_r+0x40>
 800783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007842:	e00e      	b.n	8007862 <__swhatbuf_r+0x42>
 8007844:	466a      	mov	r2, sp
 8007846:	f000 fc83 	bl	8008150 <_fstat_r>
 800784a:	2800      	cmp	r0, #0
 800784c:	dbf1      	blt.n	8007832 <__swhatbuf_r+0x12>
 800784e:	9a01      	ldr	r2, [sp, #4]
 8007850:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007854:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007858:	425a      	negs	r2, r3
 800785a:	415a      	adcs	r2, r3
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	e7ee      	b.n	800783e <__swhatbuf_r+0x1e>
 8007860:	2340      	movs	r3, #64	; 0x40
 8007862:	2000      	movs	r0, #0
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	b016      	add	sp, #88	; 0x58
 8007868:	bd70      	pop	{r4, r5, r6, pc}
	...

0800786c <__smakebuf_r>:
 800786c:	898b      	ldrh	r3, [r1, #12]
 800786e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007870:	079d      	lsls	r5, r3, #30
 8007872:	4606      	mov	r6, r0
 8007874:	460c      	mov	r4, r1
 8007876:	d507      	bpl.n	8007888 <__smakebuf_r+0x1c>
 8007878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	6123      	str	r3, [r4, #16]
 8007880:	2301      	movs	r3, #1
 8007882:	6163      	str	r3, [r4, #20]
 8007884:	b002      	add	sp, #8
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	ab01      	add	r3, sp, #4
 800788a:	466a      	mov	r2, sp
 800788c:	f7ff ffc8 	bl	8007820 <__swhatbuf_r>
 8007890:	9900      	ldr	r1, [sp, #0]
 8007892:	4605      	mov	r5, r0
 8007894:	4630      	mov	r0, r6
 8007896:	f000 f895 	bl	80079c4 <_malloc_r>
 800789a:	b948      	cbnz	r0, 80078b0 <__smakebuf_r+0x44>
 800789c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a0:	059a      	lsls	r2, r3, #22
 80078a2:	d4ef      	bmi.n	8007884 <__smakebuf_r+0x18>
 80078a4:	f023 0303 	bic.w	r3, r3, #3
 80078a8:	f043 0302 	orr.w	r3, r3, #2
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	e7e3      	b.n	8007878 <__smakebuf_r+0xc>
 80078b0:	4b0d      	ldr	r3, [pc, #52]	; (80078e8 <__smakebuf_r+0x7c>)
 80078b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	6020      	str	r0, [r4, #0]
 80078b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	9b00      	ldr	r3, [sp, #0]
 80078c0:	6163      	str	r3, [r4, #20]
 80078c2:	9b01      	ldr	r3, [sp, #4]
 80078c4:	6120      	str	r0, [r4, #16]
 80078c6:	b15b      	cbz	r3, 80078e0 <__smakebuf_r+0x74>
 80078c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078cc:	4630      	mov	r0, r6
 80078ce:	f000 fc51 	bl	8008174 <_isatty_r>
 80078d2:	b128      	cbz	r0, 80078e0 <__smakebuf_r+0x74>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	89a0      	ldrh	r0, [r4, #12]
 80078e2:	4305      	orrs	r5, r0
 80078e4:	81a5      	strh	r5, [r4, #12]
 80078e6:	e7cd      	b.n	8007884 <__smakebuf_r+0x18>
 80078e8:	08007679 	.word	0x08007679

080078ec <_free_r>:
 80078ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ee:	2900      	cmp	r1, #0
 80078f0:	d044      	beq.n	800797c <_free_r+0x90>
 80078f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f6:	9001      	str	r0, [sp, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f1a1 0404 	sub.w	r4, r1, #4
 80078fe:	bfb8      	it	lt
 8007900:	18e4      	addlt	r4, r4, r3
 8007902:	f000 fc59 	bl	80081b8 <__malloc_lock>
 8007906:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <_free_r+0x94>)
 8007908:	9801      	ldr	r0, [sp, #4]
 800790a:	6813      	ldr	r3, [r2, #0]
 800790c:	b933      	cbnz	r3, 800791c <_free_r+0x30>
 800790e:	6063      	str	r3, [r4, #4]
 8007910:	6014      	str	r4, [r2, #0]
 8007912:	b003      	add	sp, #12
 8007914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007918:	f000 bc54 	b.w	80081c4 <__malloc_unlock>
 800791c:	42a3      	cmp	r3, r4
 800791e:	d908      	bls.n	8007932 <_free_r+0x46>
 8007920:	6825      	ldr	r5, [r4, #0]
 8007922:	1961      	adds	r1, r4, r5
 8007924:	428b      	cmp	r3, r1
 8007926:	bf01      	itttt	eq
 8007928:	6819      	ldreq	r1, [r3, #0]
 800792a:	685b      	ldreq	r3, [r3, #4]
 800792c:	1949      	addeq	r1, r1, r5
 800792e:	6021      	streq	r1, [r4, #0]
 8007930:	e7ed      	b.n	800790e <_free_r+0x22>
 8007932:	461a      	mov	r2, r3
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	b10b      	cbz	r3, 800793c <_free_r+0x50>
 8007938:	42a3      	cmp	r3, r4
 800793a:	d9fa      	bls.n	8007932 <_free_r+0x46>
 800793c:	6811      	ldr	r1, [r2, #0]
 800793e:	1855      	adds	r5, r2, r1
 8007940:	42a5      	cmp	r5, r4
 8007942:	d10b      	bne.n	800795c <_free_r+0x70>
 8007944:	6824      	ldr	r4, [r4, #0]
 8007946:	4421      	add	r1, r4
 8007948:	1854      	adds	r4, r2, r1
 800794a:	42a3      	cmp	r3, r4
 800794c:	6011      	str	r1, [r2, #0]
 800794e:	d1e0      	bne.n	8007912 <_free_r+0x26>
 8007950:	681c      	ldr	r4, [r3, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	6053      	str	r3, [r2, #4]
 8007956:	4421      	add	r1, r4
 8007958:	6011      	str	r1, [r2, #0]
 800795a:	e7da      	b.n	8007912 <_free_r+0x26>
 800795c:	d902      	bls.n	8007964 <_free_r+0x78>
 800795e:	230c      	movs	r3, #12
 8007960:	6003      	str	r3, [r0, #0]
 8007962:	e7d6      	b.n	8007912 <_free_r+0x26>
 8007964:	6825      	ldr	r5, [r4, #0]
 8007966:	1961      	adds	r1, r4, r5
 8007968:	428b      	cmp	r3, r1
 800796a:	bf04      	itt	eq
 800796c:	6819      	ldreq	r1, [r3, #0]
 800796e:	685b      	ldreq	r3, [r3, #4]
 8007970:	6063      	str	r3, [r4, #4]
 8007972:	bf04      	itt	eq
 8007974:	1949      	addeq	r1, r1, r5
 8007976:	6021      	streq	r1, [r4, #0]
 8007978:	6054      	str	r4, [r2, #4]
 800797a:	e7ca      	b.n	8007912 <_free_r+0x26>
 800797c:	b003      	add	sp, #12
 800797e:	bd30      	pop	{r4, r5, pc}
 8007980:	2000bde8 	.word	0x2000bde8

08007984 <sbrk_aligned>:
 8007984:	b570      	push	{r4, r5, r6, lr}
 8007986:	4e0e      	ldr	r6, [pc, #56]	; (80079c0 <sbrk_aligned+0x3c>)
 8007988:	460c      	mov	r4, r1
 800798a:	6831      	ldr	r1, [r6, #0]
 800798c:	4605      	mov	r5, r0
 800798e:	b911      	cbnz	r1, 8007996 <sbrk_aligned+0x12>
 8007990:	f000 fb7a 	bl	8008088 <_sbrk_r>
 8007994:	6030      	str	r0, [r6, #0]
 8007996:	4621      	mov	r1, r4
 8007998:	4628      	mov	r0, r5
 800799a:	f000 fb75 	bl	8008088 <_sbrk_r>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d00a      	beq.n	80079b8 <sbrk_aligned+0x34>
 80079a2:	1cc4      	adds	r4, r0, #3
 80079a4:	f024 0403 	bic.w	r4, r4, #3
 80079a8:	42a0      	cmp	r0, r4
 80079aa:	d007      	beq.n	80079bc <sbrk_aligned+0x38>
 80079ac:	1a21      	subs	r1, r4, r0
 80079ae:	4628      	mov	r0, r5
 80079b0:	f000 fb6a 	bl	8008088 <_sbrk_r>
 80079b4:	3001      	adds	r0, #1
 80079b6:	d101      	bne.n	80079bc <sbrk_aligned+0x38>
 80079b8:	f04f 34ff 	mov.w	r4, #4294967295
 80079bc:	4620      	mov	r0, r4
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	2000bdec 	.word	0x2000bdec

080079c4 <_malloc_r>:
 80079c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c8:	1ccd      	adds	r5, r1, #3
 80079ca:	f025 0503 	bic.w	r5, r5, #3
 80079ce:	3508      	adds	r5, #8
 80079d0:	2d0c      	cmp	r5, #12
 80079d2:	bf38      	it	cc
 80079d4:	250c      	movcc	r5, #12
 80079d6:	2d00      	cmp	r5, #0
 80079d8:	4607      	mov	r7, r0
 80079da:	db01      	blt.n	80079e0 <_malloc_r+0x1c>
 80079dc:	42a9      	cmp	r1, r5
 80079de:	d905      	bls.n	80079ec <_malloc_r+0x28>
 80079e0:	230c      	movs	r3, #12
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	2600      	movs	r6, #0
 80079e6:	4630      	mov	r0, r6
 80079e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079ec:	4e2e      	ldr	r6, [pc, #184]	; (8007aa8 <_malloc_r+0xe4>)
 80079ee:	f000 fbe3 	bl	80081b8 <__malloc_lock>
 80079f2:	6833      	ldr	r3, [r6, #0]
 80079f4:	461c      	mov	r4, r3
 80079f6:	bb34      	cbnz	r4, 8007a46 <_malloc_r+0x82>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4638      	mov	r0, r7
 80079fc:	f7ff ffc2 	bl	8007984 <sbrk_aligned>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	4604      	mov	r4, r0
 8007a04:	d14d      	bne.n	8007aa2 <_malloc_r+0xde>
 8007a06:	6834      	ldr	r4, [r6, #0]
 8007a08:	4626      	mov	r6, r4
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	d140      	bne.n	8007a90 <_malloc_r+0xcc>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	4631      	mov	r1, r6
 8007a12:	4638      	mov	r0, r7
 8007a14:	eb04 0803 	add.w	r8, r4, r3
 8007a18:	f000 fb36 	bl	8008088 <_sbrk_r>
 8007a1c:	4580      	cmp	r8, r0
 8007a1e:	d13a      	bne.n	8007a96 <_malloc_r+0xd2>
 8007a20:	6821      	ldr	r1, [r4, #0]
 8007a22:	3503      	adds	r5, #3
 8007a24:	1a6d      	subs	r5, r5, r1
 8007a26:	f025 0503 	bic.w	r5, r5, #3
 8007a2a:	3508      	adds	r5, #8
 8007a2c:	2d0c      	cmp	r5, #12
 8007a2e:	bf38      	it	cc
 8007a30:	250c      	movcc	r5, #12
 8007a32:	4629      	mov	r1, r5
 8007a34:	4638      	mov	r0, r7
 8007a36:	f7ff ffa5 	bl	8007984 <sbrk_aligned>
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	d02b      	beq.n	8007a96 <_malloc_r+0xd2>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	442b      	add	r3, r5
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	e00e      	b.n	8007a64 <_malloc_r+0xa0>
 8007a46:	6822      	ldr	r2, [r4, #0]
 8007a48:	1b52      	subs	r2, r2, r5
 8007a4a:	d41e      	bmi.n	8007a8a <_malloc_r+0xc6>
 8007a4c:	2a0b      	cmp	r2, #11
 8007a4e:	d916      	bls.n	8007a7e <_malloc_r+0xba>
 8007a50:	1961      	adds	r1, r4, r5
 8007a52:	42a3      	cmp	r3, r4
 8007a54:	6025      	str	r5, [r4, #0]
 8007a56:	bf18      	it	ne
 8007a58:	6059      	strne	r1, [r3, #4]
 8007a5a:	6863      	ldr	r3, [r4, #4]
 8007a5c:	bf08      	it	eq
 8007a5e:	6031      	streq	r1, [r6, #0]
 8007a60:	5162      	str	r2, [r4, r5]
 8007a62:	604b      	str	r3, [r1, #4]
 8007a64:	4638      	mov	r0, r7
 8007a66:	f104 060b 	add.w	r6, r4, #11
 8007a6a:	f000 fbab 	bl	80081c4 <__malloc_unlock>
 8007a6e:	f026 0607 	bic.w	r6, r6, #7
 8007a72:	1d23      	adds	r3, r4, #4
 8007a74:	1af2      	subs	r2, r6, r3
 8007a76:	d0b6      	beq.n	80079e6 <_malloc_r+0x22>
 8007a78:	1b9b      	subs	r3, r3, r6
 8007a7a:	50a3      	str	r3, [r4, r2]
 8007a7c:	e7b3      	b.n	80079e6 <_malloc_r+0x22>
 8007a7e:	6862      	ldr	r2, [r4, #4]
 8007a80:	42a3      	cmp	r3, r4
 8007a82:	bf0c      	ite	eq
 8007a84:	6032      	streq	r2, [r6, #0]
 8007a86:	605a      	strne	r2, [r3, #4]
 8007a88:	e7ec      	b.n	8007a64 <_malloc_r+0xa0>
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	6864      	ldr	r4, [r4, #4]
 8007a8e:	e7b2      	b.n	80079f6 <_malloc_r+0x32>
 8007a90:	4634      	mov	r4, r6
 8007a92:	6876      	ldr	r6, [r6, #4]
 8007a94:	e7b9      	b.n	8007a0a <_malloc_r+0x46>
 8007a96:	230c      	movs	r3, #12
 8007a98:	603b      	str	r3, [r7, #0]
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f000 fb92 	bl	80081c4 <__malloc_unlock>
 8007aa0:	e7a1      	b.n	80079e6 <_malloc_r+0x22>
 8007aa2:	6025      	str	r5, [r4, #0]
 8007aa4:	e7de      	b.n	8007a64 <_malloc_r+0xa0>
 8007aa6:	bf00      	nop
 8007aa8:	2000bde8 	.word	0x2000bde8

08007aac <__sfputc_r>:
 8007aac:	6893      	ldr	r3, [r2, #8]
 8007aae:	3b01      	subs	r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	b410      	push	{r4}
 8007ab4:	6093      	str	r3, [r2, #8]
 8007ab6:	da08      	bge.n	8007aca <__sfputc_r+0x1e>
 8007ab8:	6994      	ldr	r4, [r2, #24]
 8007aba:	42a3      	cmp	r3, r4
 8007abc:	db01      	blt.n	8007ac2 <__sfputc_r+0x16>
 8007abe:	290a      	cmp	r1, #10
 8007ac0:	d103      	bne.n	8007aca <__sfputc_r+0x1e>
 8007ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ac6:	f7ff bc31 	b.w	800732c <__swbuf_r>
 8007aca:	6813      	ldr	r3, [r2, #0]
 8007acc:	1c58      	adds	r0, r3, #1
 8007ace:	6010      	str	r0, [r2, #0]
 8007ad0:	7019      	strb	r1, [r3, #0]
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <__sfputs_r>:
 8007ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007adc:	4606      	mov	r6, r0
 8007ade:	460f      	mov	r7, r1
 8007ae0:	4614      	mov	r4, r2
 8007ae2:	18d5      	adds	r5, r2, r3
 8007ae4:	42ac      	cmp	r4, r5
 8007ae6:	d101      	bne.n	8007aec <__sfputs_r+0x12>
 8007ae8:	2000      	movs	r0, #0
 8007aea:	e007      	b.n	8007afc <__sfputs_r+0x22>
 8007aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af0:	463a      	mov	r2, r7
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff ffda 	bl	8007aac <__sfputc_r>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d1f3      	bne.n	8007ae4 <__sfputs_r+0xa>
 8007afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b00 <_vfiprintf_r>:
 8007b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b04:	460d      	mov	r5, r1
 8007b06:	b09d      	sub	sp, #116	; 0x74
 8007b08:	4614      	mov	r4, r2
 8007b0a:	4698      	mov	r8, r3
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	b118      	cbz	r0, 8007b18 <_vfiprintf_r+0x18>
 8007b10:	6983      	ldr	r3, [r0, #24]
 8007b12:	b90b      	cbnz	r3, 8007b18 <_vfiprintf_r+0x18>
 8007b14:	f7ff fde4 	bl	80076e0 <__sinit>
 8007b18:	4b89      	ldr	r3, [pc, #548]	; (8007d40 <_vfiprintf_r+0x240>)
 8007b1a:	429d      	cmp	r5, r3
 8007b1c:	d11b      	bne.n	8007b56 <_vfiprintf_r+0x56>
 8007b1e:	6875      	ldr	r5, [r6, #4]
 8007b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b22:	07d9      	lsls	r1, r3, #31
 8007b24:	d405      	bmi.n	8007b32 <_vfiprintf_r+0x32>
 8007b26:	89ab      	ldrh	r3, [r5, #12]
 8007b28:	059a      	lsls	r2, r3, #22
 8007b2a:	d402      	bmi.n	8007b32 <_vfiprintf_r+0x32>
 8007b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2e:	f7ff fe75 	bl	800781c <__retarget_lock_acquire_recursive>
 8007b32:	89ab      	ldrh	r3, [r5, #12]
 8007b34:	071b      	lsls	r3, r3, #28
 8007b36:	d501      	bpl.n	8007b3c <_vfiprintf_r+0x3c>
 8007b38:	692b      	ldr	r3, [r5, #16]
 8007b3a:	b9eb      	cbnz	r3, 8007b78 <_vfiprintf_r+0x78>
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	4630      	mov	r0, r6
 8007b40:	f7ff fc46 	bl	80073d0 <__swsetup_r>
 8007b44:	b1c0      	cbz	r0, 8007b78 <_vfiprintf_r+0x78>
 8007b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b48:	07dc      	lsls	r4, r3, #31
 8007b4a:	d50e      	bpl.n	8007b6a <_vfiprintf_r+0x6a>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b50:	b01d      	add	sp, #116	; 0x74
 8007b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b56:	4b7b      	ldr	r3, [pc, #492]	; (8007d44 <_vfiprintf_r+0x244>)
 8007b58:	429d      	cmp	r5, r3
 8007b5a:	d101      	bne.n	8007b60 <_vfiprintf_r+0x60>
 8007b5c:	68b5      	ldr	r5, [r6, #8]
 8007b5e:	e7df      	b.n	8007b20 <_vfiprintf_r+0x20>
 8007b60:	4b79      	ldr	r3, [pc, #484]	; (8007d48 <_vfiprintf_r+0x248>)
 8007b62:	429d      	cmp	r5, r3
 8007b64:	bf08      	it	eq
 8007b66:	68f5      	ldreq	r5, [r6, #12]
 8007b68:	e7da      	b.n	8007b20 <_vfiprintf_r+0x20>
 8007b6a:	89ab      	ldrh	r3, [r5, #12]
 8007b6c:	0598      	lsls	r0, r3, #22
 8007b6e:	d4ed      	bmi.n	8007b4c <_vfiprintf_r+0x4c>
 8007b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b72:	f7ff fe54 	bl	800781e <__retarget_lock_release_recursive>
 8007b76:	e7e9      	b.n	8007b4c <_vfiprintf_r+0x4c>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b86:	2330      	movs	r3, #48	; 0x30
 8007b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007d4c <_vfiprintf_r+0x24c>
 8007b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b90:	f04f 0901 	mov.w	r9, #1
 8007b94:	4623      	mov	r3, r4
 8007b96:	469a      	mov	sl, r3
 8007b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b9c:	b10a      	cbz	r2, 8007ba2 <_vfiprintf_r+0xa2>
 8007b9e:	2a25      	cmp	r2, #37	; 0x25
 8007ba0:	d1f9      	bne.n	8007b96 <_vfiprintf_r+0x96>
 8007ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ba6:	d00b      	beq.n	8007bc0 <_vfiprintf_r+0xc0>
 8007ba8:	465b      	mov	r3, fp
 8007baa:	4622      	mov	r2, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7ff ff93 	bl	8007ada <__sfputs_r>
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	f000 80aa 	beq.w	8007d0e <_vfiprintf_r+0x20e>
 8007bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bbc:	445a      	add	r2, fp
 8007bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 80a2 	beq.w	8007d0e <_vfiprintf_r+0x20e>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bd4:	f10a 0a01 	add.w	sl, sl, #1
 8007bd8:	9304      	str	r3, [sp, #16]
 8007bda:	9307      	str	r3, [sp, #28]
 8007bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007be0:	931a      	str	r3, [sp, #104]	; 0x68
 8007be2:	4654      	mov	r4, sl
 8007be4:	2205      	movs	r2, #5
 8007be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bea:	4858      	ldr	r0, [pc, #352]	; (8007d4c <_vfiprintf_r+0x24c>)
 8007bec:	f7f8 fb48 	bl	8000280 <memchr>
 8007bf0:	9a04      	ldr	r2, [sp, #16]
 8007bf2:	b9d8      	cbnz	r0, 8007c2c <_vfiprintf_r+0x12c>
 8007bf4:	06d1      	lsls	r1, r2, #27
 8007bf6:	bf44      	itt	mi
 8007bf8:	2320      	movmi	r3, #32
 8007bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bfe:	0713      	lsls	r3, r2, #28
 8007c00:	bf44      	itt	mi
 8007c02:	232b      	movmi	r3, #43	; 0x2b
 8007c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c08:	f89a 3000 	ldrb.w	r3, [sl]
 8007c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c0e:	d015      	beq.n	8007c3c <_vfiprintf_r+0x13c>
 8007c10:	9a07      	ldr	r2, [sp, #28]
 8007c12:	4654      	mov	r4, sl
 8007c14:	2000      	movs	r0, #0
 8007c16:	f04f 0c0a 	mov.w	ip, #10
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c20:	3b30      	subs	r3, #48	; 0x30
 8007c22:	2b09      	cmp	r3, #9
 8007c24:	d94e      	bls.n	8007cc4 <_vfiprintf_r+0x1c4>
 8007c26:	b1b0      	cbz	r0, 8007c56 <_vfiprintf_r+0x156>
 8007c28:	9207      	str	r2, [sp, #28]
 8007c2a:	e014      	b.n	8007c56 <_vfiprintf_r+0x156>
 8007c2c:	eba0 0308 	sub.w	r3, r0, r8
 8007c30:	fa09 f303 	lsl.w	r3, r9, r3
 8007c34:	4313      	orrs	r3, r2
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	46a2      	mov	sl, r4
 8007c3a:	e7d2      	b.n	8007be2 <_vfiprintf_r+0xe2>
 8007c3c:	9b03      	ldr	r3, [sp, #12]
 8007c3e:	1d19      	adds	r1, r3, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	9103      	str	r1, [sp, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfbb      	ittet	lt
 8007c48:	425b      	neglt	r3, r3
 8007c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c4e:	9307      	strge	r3, [sp, #28]
 8007c50:	9307      	strlt	r3, [sp, #28]
 8007c52:	bfb8      	it	lt
 8007c54:	9204      	strlt	r2, [sp, #16]
 8007c56:	7823      	ldrb	r3, [r4, #0]
 8007c58:	2b2e      	cmp	r3, #46	; 0x2e
 8007c5a:	d10c      	bne.n	8007c76 <_vfiprintf_r+0x176>
 8007c5c:	7863      	ldrb	r3, [r4, #1]
 8007c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c60:	d135      	bne.n	8007cce <_vfiprintf_r+0x1ce>
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	1d1a      	adds	r2, r3, #4
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	9203      	str	r2, [sp, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	bfb8      	it	lt
 8007c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c72:	3402      	adds	r4, #2
 8007c74:	9305      	str	r3, [sp, #20]
 8007c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d5c <_vfiprintf_r+0x25c>
 8007c7a:	7821      	ldrb	r1, [r4, #0]
 8007c7c:	2203      	movs	r2, #3
 8007c7e:	4650      	mov	r0, sl
 8007c80:	f7f8 fafe 	bl	8000280 <memchr>
 8007c84:	b140      	cbz	r0, 8007c98 <_vfiprintf_r+0x198>
 8007c86:	2340      	movs	r3, #64	; 0x40
 8007c88:	eba0 000a 	sub.w	r0, r0, sl
 8007c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8007c90:	9b04      	ldr	r3, [sp, #16]
 8007c92:	4303      	orrs	r3, r0
 8007c94:	3401      	adds	r4, #1
 8007c96:	9304      	str	r3, [sp, #16]
 8007c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9c:	482c      	ldr	r0, [pc, #176]	; (8007d50 <_vfiprintf_r+0x250>)
 8007c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ca2:	2206      	movs	r2, #6
 8007ca4:	f7f8 faec 	bl	8000280 <memchr>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d03f      	beq.n	8007d2c <_vfiprintf_r+0x22c>
 8007cac:	4b29      	ldr	r3, [pc, #164]	; (8007d54 <_vfiprintf_r+0x254>)
 8007cae:	bb1b      	cbnz	r3, 8007cf8 <_vfiprintf_r+0x1f8>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	3307      	adds	r3, #7
 8007cb4:	f023 0307 	bic.w	r3, r3, #7
 8007cb8:	3308      	adds	r3, #8
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbe:	443b      	add	r3, r7
 8007cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc2:	e767      	b.n	8007b94 <_vfiprintf_r+0x94>
 8007cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cc8:	460c      	mov	r4, r1
 8007cca:	2001      	movs	r0, #1
 8007ccc:	e7a5      	b.n	8007c1a <_vfiprintf_r+0x11a>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	3401      	adds	r4, #1
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	f04f 0c0a 	mov.w	ip, #10
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce0:	3a30      	subs	r2, #48	; 0x30
 8007ce2:	2a09      	cmp	r2, #9
 8007ce4:	d903      	bls.n	8007cee <_vfiprintf_r+0x1ee>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0c5      	beq.n	8007c76 <_vfiprintf_r+0x176>
 8007cea:	9105      	str	r1, [sp, #20]
 8007cec:	e7c3      	b.n	8007c76 <_vfiprintf_r+0x176>
 8007cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e7f0      	b.n	8007cda <_vfiprintf_r+0x1da>
 8007cf8:	ab03      	add	r3, sp, #12
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	462a      	mov	r2, r5
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <_vfiprintf_r+0x258>)
 8007d00:	a904      	add	r1, sp, #16
 8007d02:	4630      	mov	r0, r6
 8007d04:	f3af 8000 	nop.w
 8007d08:	4607      	mov	r7, r0
 8007d0a:	1c78      	adds	r0, r7, #1
 8007d0c:	d1d6      	bne.n	8007cbc <_vfiprintf_r+0x1bc>
 8007d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d10:	07d9      	lsls	r1, r3, #31
 8007d12:	d405      	bmi.n	8007d20 <_vfiprintf_r+0x220>
 8007d14:	89ab      	ldrh	r3, [r5, #12]
 8007d16:	059a      	lsls	r2, r3, #22
 8007d18:	d402      	bmi.n	8007d20 <_vfiprintf_r+0x220>
 8007d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1c:	f7ff fd7f 	bl	800781e <__retarget_lock_release_recursive>
 8007d20:	89ab      	ldrh	r3, [r5, #12]
 8007d22:	065b      	lsls	r3, r3, #25
 8007d24:	f53f af12 	bmi.w	8007b4c <_vfiprintf_r+0x4c>
 8007d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d2a:	e711      	b.n	8007b50 <_vfiprintf_r+0x50>
 8007d2c:	ab03      	add	r3, sp, #12
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	462a      	mov	r2, r5
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <_vfiprintf_r+0x258>)
 8007d34:	a904      	add	r1, sp, #16
 8007d36:	4630      	mov	r0, r6
 8007d38:	f000 f880 	bl	8007e3c <_printf_i>
 8007d3c:	e7e4      	b.n	8007d08 <_vfiprintf_r+0x208>
 8007d3e:	bf00      	nop
 8007d40:	08008418 	.word	0x08008418
 8007d44:	08008438 	.word	0x08008438
 8007d48:	080083f8 	.word	0x080083f8
 8007d4c:	08008458 	.word	0x08008458
 8007d50:	08008462 	.word	0x08008462
 8007d54:	00000000 	.word	0x00000000
 8007d58:	08007adb 	.word	0x08007adb
 8007d5c:	0800845e 	.word	0x0800845e

08007d60 <_printf_common>:
 8007d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d64:	4616      	mov	r6, r2
 8007d66:	4699      	mov	r9, r3
 8007d68:	688a      	ldr	r2, [r1, #8]
 8007d6a:	690b      	ldr	r3, [r1, #16]
 8007d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d70:	4293      	cmp	r3, r2
 8007d72:	bfb8      	it	lt
 8007d74:	4613      	movlt	r3, r2
 8007d76:	6033      	str	r3, [r6, #0]
 8007d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	b10a      	cbz	r2, 8007d86 <_printf_common+0x26>
 8007d82:	3301      	adds	r3, #1
 8007d84:	6033      	str	r3, [r6, #0]
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	0699      	lsls	r1, r3, #26
 8007d8a:	bf42      	ittt	mi
 8007d8c:	6833      	ldrmi	r3, [r6, #0]
 8007d8e:	3302      	addmi	r3, #2
 8007d90:	6033      	strmi	r3, [r6, #0]
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	f015 0506 	ands.w	r5, r5, #6
 8007d98:	d106      	bne.n	8007da8 <_printf_common+0x48>
 8007d9a:	f104 0a19 	add.w	sl, r4, #25
 8007d9e:	68e3      	ldr	r3, [r4, #12]
 8007da0:	6832      	ldr	r2, [r6, #0]
 8007da2:	1a9b      	subs	r3, r3, r2
 8007da4:	42ab      	cmp	r3, r5
 8007da6:	dc26      	bgt.n	8007df6 <_printf_common+0x96>
 8007da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007dac:	1e13      	subs	r3, r2, #0
 8007dae:	6822      	ldr	r2, [r4, #0]
 8007db0:	bf18      	it	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	0692      	lsls	r2, r2, #26
 8007db6:	d42b      	bmi.n	8007e10 <_printf_common+0xb0>
 8007db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dbc:	4649      	mov	r1, r9
 8007dbe:	4638      	mov	r0, r7
 8007dc0:	47c0      	blx	r8
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d01e      	beq.n	8007e04 <_printf_common+0xa4>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	68e5      	ldr	r5, [r4, #12]
 8007dca:	6832      	ldr	r2, [r6, #0]
 8007dcc:	f003 0306 	and.w	r3, r3, #6
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	bf08      	it	eq
 8007dd4:	1aad      	subeq	r5, r5, r2
 8007dd6:	68a3      	ldr	r3, [r4, #8]
 8007dd8:	6922      	ldr	r2, [r4, #16]
 8007dda:	bf0c      	ite	eq
 8007ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007de0:	2500      	movne	r5, #0
 8007de2:	4293      	cmp	r3, r2
 8007de4:	bfc4      	itt	gt
 8007de6:	1a9b      	subgt	r3, r3, r2
 8007de8:	18ed      	addgt	r5, r5, r3
 8007dea:	2600      	movs	r6, #0
 8007dec:	341a      	adds	r4, #26
 8007dee:	42b5      	cmp	r5, r6
 8007df0:	d11a      	bne.n	8007e28 <_printf_common+0xc8>
 8007df2:	2000      	movs	r0, #0
 8007df4:	e008      	b.n	8007e08 <_printf_common+0xa8>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4652      	mov	r2, sl
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	47c0      	blx	r8
 8007e00:	3001      	adds	r0, #1
 8007e02:	d103      	bne.n	8007e0c <_printf_common+0xac>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0c:	3501      	adds	r5, #1
 8007e0e:	e7c6      	b.n	8007d9e <_printf_common+0x3e>
 8007e10:	18e1      	adds	r1, r4, r3
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	2030      	movs	r0, #48	; 0x30
 8007e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e1a:	4422      	add	r2, r4
 8007e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e24:	3302      	adds	r3, #2
 8007e26:	e7c7      	b.n	8007db8 <_printf_common+0x58>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	4622      	mov	r2, r4
 8007e2c:	4649      	mov	r1, r9
 8007e2e:	4638      	mov	r0, r7
 8007e30:	47c0      	blx	r8
 8007e32:	3001      	adds	r0, #1
 8007e34:	d0e6      	beq.n	8007e04 <_printf_common+0xa4>
 8007e36:	3601      	adds	r6, #1
 8007e38:	e7d9      	b.n	8007dee <_printf_common+0x8e>
	...

08007e3c <_printf_i>:
 8007e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e40:	7e0f      	ldrb	r7, [r1, #24]
 8007e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e44:	2f78      	cmp	r7, #120	; 0x78
 8007e46:	4691      	mov	r9, r2
 8007e48:	4680      	mov	r8, r0
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	469a      	mov	sl, r3
 8007e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e52:	d807      	bhi.n	8007e64 <_printf_i+0x28>
 8007e54:	2f62      	cmp	r7, #98	; 0x62
 8007e56:	d80a      	bhi.n	8007e6e <_printf_i+0x32>
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	f000 80d8 	beq.w	800800e <_printf_i+0x1d2>
 8007e5e:	2f58      	cmp	r7, #88	; 0x58
 8007e60:	f000 80a3 	beq.w	8007faa <_printf_i+0x16e>
 8007e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e6c:	e03a      	b.n	8007ee4 <_printf_i+0xa8>
 8007e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e72:	2b15      	cmp	r3, #21
 8007e74:	d8f6      	bhi.n	8007e64 <_printf_i+0x28>
 8007e76:	a101      	add	r1, pc, #4	; (adr r1, 8007e7c <_printf_i+0x40>)
 8007e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e7c:	08007ed5 	.word	0x08007ed5
 8007e80:	08007ee9 	.word	0x08007ee9
 8007e84:	08007e65 	.word	0x08007e65
 8007e88:	08007e65 	.word	0x08007e65
 8007e8c:	08007e65 	.word	0x08007e65
 8007e90:	08007e65 	.word	0x08007e65
 8007e94:	08007ee9 	.word	0x08007ee9
 8007e98:	08007e65 	.word	0x08007e65
 8007e9c:	08007e65 	.word	0x08007e65
 8007ea0:	08007e65 	.word	0x08007e65
 8007ea4:	08007e65 	.word	0x08007e65
 8007ea8:	08007ff5 	.word	0x08007ff5
 8007eac:	08007f19 	.word	0x08007f19
 8007eb0:	08007fd7 	.word	0x08007fd7
 8007eb4:	08007e65 	.word	0x08007e65
 8007eb8:	08007e65 	.word	0x08007e65
 8007ebc:	08008017 	.word	0x08008017
 8007ec0:	08007e65 	.word	0x08007e65
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007e65 	.word	0x08007e65
 8007ecc:	08007e65 	.word	0x08007e65
 8007ed0:	08007fdf 	.word	0x08007fdf
 8007ed4:	682b      	ldr	r3, [r5, #0]
 8007ed6:	1d1a      	adds	r2, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	602a      	str	r2, [r5, #0]
 8007edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e0a3      	b.n	8008030 <_printf_i+0x1f4>
 8007ee8:	6820      	ldr	r0, [r4, #0]
 8007eea:	6829      	ldr	r1, [r5, #0]
 8007eec:	0606      	lsls	r6, r0, #24
 8007eee:	f101 0304 	add.w	r3, r1, #4
 8007ef2:	d50a      	bpl.n	8007f0a <_printf_i+0xce>
 8007ef4:	680e      	ldr	r6, [r1, #0]
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	2e00      	cmp	r6, #0
 8007efa:	da03      	bge.n	8007f04 <_printf_i+0xc8>
 8007efc:	232d      	movs	r3, #45	; 0x2d
 8007efe:	4276      	negs	r6, r6
 8007f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f04:	485e      	ldr	r0, [pc, #376]	; (8008080 <_printf_i+0x244>)
 8007f06:	230a      	movs	r3, #10
 8007f08:	e019      	b.n	8007f3e <_printf_i+0x102>
 8007f0a:	680e      	ldr	r6, [r1, #0]
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f12:	bf18      	it	ne
 8007f14:	b236      	sxthne	r6, r6
 8007f16:	e7ef      	b.n	8007ef8 <_printf_i+0xbc>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	6820      	ldr	r0, [r4, #0]
 8007f1c:	1d19      	adds	r1, r3, #4
 8007f1e:	6029      	str	r1, [r5, #0]
 8007f20:	0601      	lsls	r1, r0, #24
 8007f22:	d501      	bpl.n	8007f28 <_printf_i+0xec>
 8007f24:	681e      	ldr	r6, [r3, #0]
 8007f26:	e002      	b.n	8007f2e <_printf_i+0xf2>
 8007f28:	0646      	lsls	r6, r0, #25
 8007f2a:	d5fb      	bpl.n	8007f24 <_printf_i+0xe8>
 8007f2c:	881e      	ldrh	r6, [r3, #0]
 8007f2e:	4854      	ldr	r0, [pc, #336]	; (8008080 <_printf_i+0x244>)
 8007f30:	2f6f      	cmp	r7, #111	; 0x6f
 8007f32:	bf0c      	ite	eq
 8007f34:	2308      	moveq	r3, #8
 8007f36:	230a      	movne	r3, #10
 8007f38:	2100      	movs	r1, #0
 8007f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f3e:	6865      	ldr	r5, [r4, #4]
 8007f40:	60a5      	str	r5, [r4, #8]
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	bfa2      	ittt	ge
 8007f46:	6821      	ldrge	r1, [r4, #0]
 8007f48:	f021 0104 	bicge.w	r1, r1, #4
 8007f4c:	6021      	strge	r1, [r4, #0]
 8007f4e:	b90e      	cbnz	r6, 8007f54 <_printf_i+0x118>
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	d04d      	beq.n	8007ff0 <_printf_i+0x1b4>
 8007f54:	4615      	mov	r5, r2
 8007f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007f5e:	5dc7      	ldrb	r7, [r0, r7]
 8007f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f64:	4637      	mov	r7, r6
 8007f66:	42bb      	cmp	r3, r7
 8007f68:	460e      	mov	r6, r1
 8007f6a:	d9f4      	bls.n	8007f56 <_printf_i+0x11a>
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d10b      	bne.n	8007f88 <_printf_i+0x14c>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	07de      	lsls	r6, r3, #31
 8007f74:	d508      	bpl.n	8007f88 <_printf_i+0x14c>
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	6861      	ldr	r1, [r4, #4]
 8007f7a:	4299      	cmp	r1, r3
 8007f7c:	bfde      	ittt	le
 8007f7e:	2330      	movle	r3, #48	; 0x30
 8007f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f88:	1b52      	subs	r2, r2, r5
 8007f8a:	6122      	str	r2, [r4, #16]
 8007f8c:	f8cd a000 	str.w	sl, [sp]
 8007f90:	464b      	mov	r3, r9
 8007f92:	aa03      	add	r2, sp, #12
 8007f94:	4621      	mov	r1, r4
 8007f96:	4640      	mov	r0, r8
 8007f98:	f7ff fee2 	bl	8007d60 <_printf_common>
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d14c      	bne.n	800803a <_printf_i+0x1fe>
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	b004      	add	sp, #16
 8007fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007faa:	4835      	ldr	r0, [pc, #212]	; (8008080 <_printf_i+0x244>)
 8007fac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fb0:	6829      	ldr	r1, [r5, #0]
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fb8:	6029      	str	r1, [r5, #0]
 8007fba:	061d      	lsls	r5, r3, #24
 8007fbc:	d514      	bpl.n	8007fe8 <_printf_i+0x1ac>
 8007fbe:	07df      	lsls	r7, r3, #31
 8007fc0:	bf44      	itt	mi
 8007fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8007fc6:	6023      	strmi	r3, [r4, #0]
 8007fc8:	b91e      	cbnz	r6, 8007fd2 <_printf_i+0x196>
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	f023 0320 	bic.w	r3, r3, #32
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	e7b0      	b.n	8007f38 <_printf_i+0xfc>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f043 0320 	orr.w	r3, r3, #32
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	2378      	movs	r3, #120	; 0x78
 8007fe0:	4828      	ldr	r0, [pc, #160]	; (8008084 <_printf_i+0x248>)
 8007fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fe6:	e7e3      	b.n	8007fb0 <_printf_i+0x174>
 8007fe8:	0659      	lsls	r1, r3, #25
 8007fea:	bf48      	it	mi
 8007fec:	b2b6      	uxthmi	r6, r6
 8007fee:	e7e6      	b.n	8007fbe <_printf_i+0x182>
 8007ff0:	4615      	mov	r5, r2
 8007ff2:	e7bb      	b.n	8007f6c <_printf_i+0x130>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	6826      	ldr	r6, [r4, #0]
 8007ff8:	6961      	ldr	r1, [r4, #20]
 8007ffa:	1d18      	adds	r0, r3, #4
 8007ffc:	6028      	str	r0, [r5, #0]
 8007ffe:	0635      	lsls	r5, r6, #24
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	d501      	bpl.n	8008008 <_printf_i+0x1cc>
 8008004:	6019      	str	r1, [r3, #0]
 8008006:	e002      	b.n	800800e <_printf_i+0x1d2>
 8008008:	0670      	lsls	r0, r6, #25
 800800a:	d5fb      	bpl.n	8008004 <_printf_i+0x1c8>
 800800c:	8019      	strh	r1, [r3, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	4615      	mov	r5, r2
 8008014:	e7ba      	b.n	8007f8c <_printf_i+0x150>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	602a      	str	r2, [r5, #0]
 800801c:	681d      	ldr	r5, [r3, #0]
 800801e:	6862      	ldr	r2, [r4, #4]
 8008020:	2100      	movs	r1, #0
 8008022:	4628      	mov	r0, r5
 8008024:	f7f8 f92c 	bl	8000280 <memchr>
 8008028:	b108      	cbz	r0, 800802e <_printf_i+0x1f2>
 800802a:	1b40      	subs	r0, r0, r5
 800802c:	6060      	str	r0, [r4, #4]
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	2300      	movs	r3, #0
 8008034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008038:	e7a8      	b.n	8007f8c <_printf_i+0x150>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	462a      	mov	r2, r5
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d0ab      	beq.n	8007fa0 <_printf_i+0x164>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	079b      	lsls	r3, r3, #30
 800804c:	d413      	bmi.n	8008076 <_printf_i+0x23a>
 800804e:	68e0      	ldr	r0, [r4, #12]
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	4298      	cmp	r0, r3
 8008054:	bfb8      	it	lt
 8008056:	4618      	movlt	r0, r3
 8008058:	e7a4      	b.n	8007fa4 <_printf_i+0x168>
 800805a:	2301      	movs	r3, #1
 800805c:	4632      	mov	r2, r6
 800805e:	4649      	mov	r1, r9
 8008060:	4640      	mov	r0, r8
 8008062:	47d0      	blx	sl
 8008064:	3001      	adds	r0, #1
 8008066:	d09b      	beq.n	8007fa0 <_printf_i+0x164>
 8008068:	3501      	adds	r5, #1
 800806a:	68e3      	ldr	r3, [r4, #12]
 800806c:	9903      	ldr	r1, [sp, #12]
 800806e:	1a5b      	subs	r3, r3, r1
 8008070:	42ab      	cmp	r3, r5
 8008072:	dcf2      	bgt.n	800805a <_printf_i+0x21e>
 8008074:	e7eb      	b.n	800804e <_printf_i+0x212>
 8008076:	2500      	movs	r5, #0
 8008078:	f104 0619 	add.w	r6, r4, #25
 800807c:	e7f5      	b.n	800806a <_printf_i+0x22e>
 800807e:	bf00      	nop
 8008080:	08008469 	.word	0x08008469
 8008084:	0800847a 	.word	0x0800847a

08008088 <_sbrk_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d06      	ldr	r5, [pc, #24]	; (80080a4 <_sbrk_r+0x1c>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f000 f8ae 	bl	80081f4 <_sbrk>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_sbrk_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_sbrk_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	2000bdf0 	.word	0x2000bdf0

080080a8 <__sread>:
 80080a8:	b510      	push	{r4, lr}
 80080aa:	460c      	mov	r4, r1
 80080ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080b0:	f000 f88e 	bl	80081d0 <_read_r>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	bfab      	itete	ge
 80080b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080ba:	89a3      	ldrhlt	r3, [r4, #12]
 80080bc:	181b      	addge	r3, r3, r0
 80080be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080c2:	bfac      	ite	ge
 80080c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080c6:	81a3      	strhlt	r3, [r4, #12]
 80080c8:	bd10      	pop	{r4, pc}

080080ca <__swrite>:
 80080ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ce:	461f      	mov	r7, r3
 80080d0:	898b      	ldrh	r3, [r1, #12]
 80080d2:	05db      	lsls	r3, r3, #23
 80080d4:	4605      	mov	r5, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	4616      	mov	r6, r2
 80080da:	d505      	bpl.n	80080e8 <__swrite+0x1e>
 80080dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080e0:	2302      	movs	r3, #2
 80080e2:	2200      	movs	r2, #0
 80080e4:	f000 f856 	bl	8008194 <_lseek_r>
 80080e8:	89a3      	ldrh	r3, [r4, #12]
 80080ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	4632      	mov	r2, r6
 80080f6:	463b      	mov	r3, r7
 80080f8:	4628      	mov	r0, r5
 80080fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080fe:	f7fe bad5 	b.w	80066ac <_write_r>

08008102 <__sseek>:
 8008102:	b510      	push	{r4, lr}
 8008104:	460c      	mov	r4, r1
 8008106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810a:	f000 f843 	bl	8008194 <_lseek_r>
 800810e:	1c43      	adds	r3, r0, #1
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	bf15      	itete	ne
 8008114:	6560      	strne	r0, [r4, #84]	; 0x54
 8008116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800811a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800811e:	81a3      	strheq	r3, [r4, #12]
 8008120:	bf18      	it	ne
 8008122:	81a3      	strhne	r3, [r4, #12]
 8008124:	bd10      	pop	{r4, pc}

08008126 <__sclose>:
 8008126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812a:	f000 b801 	b.w	8008130 <_close_r>
	...

08008130 <_close_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d06      	ldr	r5, [pc, #24]	; (800814c <_close_r+0x1c>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	f7f8 fe5f 	bl	8000dfe <_close>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_close_r+0x1a>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_close_r+0x1a>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	2000bdf0 	.word	0x2000bdf0

08008150 <_fstat_r>:
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4d07      	ldr	r5, [pc, #28]	; (8008170 <_fstat_r+0x20>)
 8008154:	2300      	movs	r3, #0
 8008156:	4604      	mov	r4, r0
 8008158:	4608      	mov	r0, r1
 800815a:	4611      	mov	r1, r2
 800815c:	602b      	str	r3, [r5, #0]
 800815e:	f7f8 fe5a 	bl	8000e16 <_fstat>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d102      	bne.n	800816c <_fstat_r+0x1c>
 8008166:	682b      	ldr	r3, [r5, #0]
 8008168:	b103      	cbz	r3, 800816c <_fstat_r+0x1c>
 800816a:	6023      	str	r3, [r4, #0]
 800816c:	bd38      	pop	{r3, r4, r5, pc}
 800816e:	bf00      	nop
 8008170:	2000bdf0 	.word	0x2000bdf0

08008174 <_isatty_r>:
 8008174:	b538      	push	{r3, r4, r5, lr}
 8008176:	4d06      	ldr	r5, [pc, #24]	; (8008190 <_isatty_r+0x1c>)
 8008178:	2300      	movs	r3, #0
 800817a:	4604      	mov	r4, r0
 800817c:	4608      	mov	r0, r1
 800817e:	602b      	str	r3, [r5, #0]
 8008180:	f7f8 fe59 	bl	8000e36 <_isatty>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_isatty_r+0x1a>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_isatty_r+0x1a>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	2000bdf0 	.word	0x2000bdf0

08008194 <_lseek_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	; (80081b4 <_lseek_r+0x20>)
 8008198:	4604      	mov	r4, r0
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	602a      	str	r2, [r5, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f7f8 fe52 	bl	8000e4c <_lseek>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_lseek_r+0x1e>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_lseek_r+0x1e>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	2000bdf0 	.word	0x2000bdf0

080081b8 <__malloc_lock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_lock+0x8>)
 80081ba:	f7ff bb2f 	b.w	800781c <__retarget_lock_acquire_recursive>
 80081be:	bf00      	nop
 80081c0:	2000bde3 	.word	0x2000bde3

080081c4 <__malloc_unlock>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__malloc_unlock+0x8>)
 80081c6:	f7ff bb2a 	b.w	800781e <__retarget_lock_release_recursive>
 80081ca:	bf00      	nop
 80081cc:	2000bde3 	.word	0x2000bde3

080081d0 <_read_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_read_r+0x20>)
 80081d4:	4604      	mov	r4, r0
 80081d6:	4608      	mov	r0, r1
 80081d8:	4611      	mov	r1, r2
 80081da:	2200      	movs	r2, #0
 80081dc:	602a      	str	r2, [r5, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f7f8 fdf0 	bl	8000dc4 <_read>
 80081e4:	1c43      	adds	r3, r0, #1
 80081e6:	d102      	bne.n	80081ee <_read_r+0x1e>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	b103      	cbz	r3, 80081ee <_read_r+0x1e>
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	bd38      	pop	{r3, r4, r5, pc}
 80081f0:	2000bdf0 	.word	0x2000bdf0

080081f4 <_sbrk>:
 80081f4:	4a04      	ldr	r2, [pc, #16]	; (8008208 <_sbrk+0x14>)
 80081f6:	6811      	ldr	r1, [r2, #0]
 80081f8:	4603      	mov	r3, r0
 80081fa:	b909      	cbnz	r1, 8008200 <_sbrk+0xc>
 80081fc:	4903      	ldr	r1, [pc, #12]	; (800820c <_sbrk+0x18>)
 80081fe:	6011      	str	r1, [r2, #0]
 8008200:	6810      	ldr	r0, [r2, #0]
 8008202:	4403      	add	r3, r0
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4770      	bx	lr
 8008208:	2000bdf4 	.word	0x2000bdf4
 800820c:	2000bdf8 	.word	0x2000bdf8

08008210 <_init>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	bf00      	nop
 8008214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008216:	bc08      	pop	{r3}
 8008218:	469e      	mov	lr, r3
 800821a:	4770      	bx	lr

0800821c <_fini>:
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	bf00      	nop
 8008220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008222:	bc08      	pop	{r3}
 8008224:	469e      	mov	lr, r3
 8008226:	4770      	bx	lr
