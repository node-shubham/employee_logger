
AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08006570  08006570  00016570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800672c  0800672c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800672c  0800672c  0001672c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006734  08006734  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006734  08006734  00016734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800673c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000074  080067b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  080067b0  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0ca  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350c  00000000  00000000  0003c16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  0003f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00040e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad34  00000000  00000000  00042548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b759  00000000  00000000  0005d27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1cc2  00000000  00000000  000789d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e84  00000000  00000000  0011a6e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006558 	.word	0x08006558

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006558 	.word	0x08006558

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20000318 	.word	0x20000318
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <TIM5_IRQHandler>:
	HAL_IncTick();
}
*/

void TIM5_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

	HAL_TIM_IRQHandler(&tim5);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <TIM5_IRQHandler+0x10>)
 800062a:	f002 fb83 	bl	8002d34 <HAL_TIM_IRQHandler>

}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200001d8 	.word	0x200001d8

08000638 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void)	// Timebase source
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim11);
 800063c:	4802      	ldr	r0, [pc, #8]	; (8000648 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800063e:	f002 fb79 	bl	8002d34 <HAL_TIM_IRQHandler>

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000238 	.word	0x20000238

0800064c <main>:
extern uint8_t check_validcard(void);
void rfid_read(void);


int main()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000650:	f000 fc48 	bl	8000ee4 <HAL_Init>
	sysclock_config();
 8000654:	f000 f818 	bl	8000688 <sysclock_config>

	gpio_init();
 8000658:	f000 f850 	bl	80006fc <gpio_init>
	uart_init();
 800065c:	f000 f8ba 	bl	80007d4 <uart_init>
	spi1_init();
 8000660:	f000 f906 	bl	8000870 <spi1_init>
	spi2_init();
 8000664:	f000 f934 	bl	80008d0 <spi2_init>
	i2c2_init();
 8000668:	f000 f966 	bl	8000938 <i2c2_init>
	tim5_init();
 800066c:	f000 f8de 	bl	800082c <tim5_init>

	rc522_init();
 8000670:	f004 fe34 	bl	80052dc <rc522_init>
	ssd1963_setup();
	XPT2046_Init();
#endif

	/* Timebase start 100ms */
	HAL_TIM_Base_Start_IT(&tim5);
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <main+0x38>)
 8000676:	f002 fafb 	bl	8002c70 <HAL_TIM_Base_Start_IT>
#if (DEBUG_UART)
	HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
#endif
	while(1)
	{
		read_touch();
 800067a:	f000 f9a3 	bl	80009c4 <read_touch>
		rfid_read();
 800067e:	f000 f9c5 	bl	8000a0c <rfid_read>
		read_touch();
 8000682:	e7fa      	b.n	800067a <main+0x2e>
 8000684:	200001d8 	.word	0x200001d8

08000688 <sysclock_config>:

	return 0;
}

void sysclock_config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b092      	sub	sp, #72	; 0x48
 800068c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc;

	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068e:	2301      	movs	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
	osc.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	61bb      	str	r3, [r7, #24]

	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	4618      	mov	r0, r3
 800069e:	f001 f865 	bl	800176c <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <sysclock_config+0x26>
	{
		printf("HSE Init failed\n\r");
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <sysclock_config+0x68>)
 80006aa:	f004 ff55 	bl	8005558 <iprintf>
	}

	RCC_ClkInitTypeDef clock;

	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 80006ae:	2301      	movs	r3, #1
 80006b0:	603b      	str	r3, [r7, #0]
	clock.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006b2:	2301      	movs	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
	clock.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
	clock.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]

	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_0)!=HAL_OK)
 80006c2:	463b      	mov	r3, r7
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fac8 	bl	8001c5c <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d002      	beq.n	80006d8 <sysclock_config+0x50>
	{
		printf("clock config failed\n\r");
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <sysclock_config+0x6c>)
 80006d4:	f004 ff40 	bl	8005558 <iprintf>
	}

	uint32_t freq=HAL_RCC_GetSysClockFreq();
 80006d8:	f001 fba6 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 80006dc:	6478      	str	r0, [r7, #68]	; 0x44
	printf("Sysclock frequency : %lu \r\n",freq);
 80006de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <sysclock_config+0x70>)
 80006e2:	f004 ff39 	bl	8005558 <iprintf>
}
 80006e6:	bf00      	nop
 80006e8:	3748      	adds	r7, #72	; 0x48
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08006570 	.word	0x08006570
 80006f4:	08006584 	.word	0x08006584
 80006f8:	0800659c 	.word	0x0800659c

080006fc <gpio_init>:


void gpio_init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <gpio_init+0xc8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <gpio_init+0xc8>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <gpio_init+0xc8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <gpio_init+0xc8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a27      	ldr	r2, [pc, #156]	; (80007c4 <gpio_init+0xc8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <gpio_init+0xc8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <gpio_init+0xc8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <gpio_init+0xc8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <gpio_init+0xc8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 ;

	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
#endif

	GPIO_InitTypeDef RFID_SPI ={0};
 8000756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
	RFID_SPI.Pin = GPIO_PIN_0;
 8000766:	2301      	movs	r3, #1
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
	RFID_SPI.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	62bb      	str	r3, [r7, #40]	; 0x28
	RFID_SPI.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	62fb      	str	r3, [r7, #44]	; 0x2c
	RFID_SPI.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	633b      	str	r3, [r7, #48]	; 0x30

	HAL_GPIO_Init(GPIOB, &RFID_SPI);
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <gpio_init+0xcc>)
 800077e:	f000 fcf9 	bl	8001174 <HAL_GPIO_Init>

	RFID_SPI.Pin = (GPIO_PIN_8|GPIO_PIN_0);
 8000782:	f240 1301 	movw	r3, #257	; 0x101
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &RFID_SPI);
 8000788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	480f      	ldr	r0, [pc, #60]	; (80007cc <gpio_init+0xd0>)
 8000790:	f000 fcf0 	bl	8001174 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2101      	movs	r1, #1
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <gpio_init+0xd0>)
 800079a:	f000 fe6f 	bl	800147c <HAL_GPIO_WritePin>


#if (DEBUG_LED)
	GPIO_InitTypeDef LED;

	LED.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	613b      	str	r3, [r7, #16]

	LED.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
	LED.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
	LED.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &LED);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <gpio_init+0xd4>)
 80007b8:	f000 fcdc 	bl	8001174 <HAL_GPIO_Init>
#endif

}
 80007bc:	bf00      	nop
 80007be:	3738      	adds	r7, #56	; 0x38
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40020800 	.word	0x40020800

080007d4 <uart_init>:

void uart_init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	uart1.Instance = USART1;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <uart_init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <uart_init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
	uart1.Init.BaudRate =9600;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <uart_init+0x4c>)
 80007e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e4:	605a      	str	r2, [r3, #4]
	uart1.Init.Parity=UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <uart_init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
	uart1.Init.Mode =UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <uart_init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
	uart1.Init.StopBits= UART_STOPBITS_1;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <uart_init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
	uart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <uart_init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
	uart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <uart_init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
	uart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <uart_init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(&uart1)!= HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <uart_init+0x4c>)
 800080c:	f002 fc56 	bl	80030bc <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d002      	beq.n	800081c <uart_init+0x48>
	{
		printf("Uart 1 Init Failed\r\n");
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <uart_init+0x54>)
 8000818:	f004 ff24 	bl	8005664 <puts>
	}
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000090 	.word	0x20000090
 8000824:	40011000 	.word	0x40011000
 8000828:	080065b8 	.word	0x080065b8

0800082c <tim5_init>:

void tim5_init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	tim5.Instance = TIM5;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <tim5_init+0x38>)
 8000832:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <tim5_init+0x3c>)
 8000834:	601a      	str	r2, [r3, #0]

	tim5.Init.Prescaler = 2499;		// for 25 MHz - 1tick : 100us
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <tim5_init+0x38>)
 8000838:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800083c:	605a      	str	r2, [r3, #4]
	tim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <tim5_init+0x38>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	619a      	str	r2, [r3, #24]
	tim5.Init.Period = 1000;		// period : 100ms
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <tim5_init+0x38>)
 8000846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800084a:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&tim5) != HAL_OK)
 800084c:	4805      	ldr	r0, [pc, #20]	; (8000864 <tim5_init+0x38>)
 800084e:	f002 f9bf 	bl	8002bd0 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d002      	beq.n	800085e <tim5_init+0x32>
	{
		printf("Timer 5 base Init Failed\r\n");
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <tim5_init+0x40>)
 800085a:	f004 ff03 	bl	8005664 <puts>
	}
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001d8 	.word	0x200001d8
 8000868:	40000c00 	.word	0x40000c00
 800086c:	080065cc 	.word	0x080065cc

08000870 <spi1_init>:


void spi1_init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

	spi1.Instance = SPI1;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <spi1_init+0x54>)
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <spi1_init+0x58>)
 8000878:	601a      	str	r2, [r3, #0]
	spi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <spi1_init+0x54>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
	spi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <spi1_init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
	spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <spi1_init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
	spi1.Init.DataSize = SPI_DATASIZE_8BIT ;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <spi1_init+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
	spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <spi1_init+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
	spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <spi1_init+0x54>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
	spi1.Init.NSS = SPI_NSS_SOFT ;
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <spi1_init+0x54>)
 80008a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a6:	619a      	str	r2, [r3, #24]
	spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <spi1_init+0x54>)
 80008aa:	2210      	movs	r2, #16
 80008ac:	61da      	str	r2, [r3, #28]


	if(HAL_SPI_Init(&spi1) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <spi1_init+0x54>)
 80008b0:	f001 fbe6 	bl	8002080 <HAL_SPI_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <spi1_init+0x50>
	{
		printf("SPI1 Init Failed\r\n");
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <spi1_init+0x5c>)
 80008bc:	f004 fed2 	bl	8005664 <puts>
	}

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000d4 	.word	0x200000d4
 80008c8:	40013000 	.word	0x40013000
 80008cc:	080065e8 	.word	0x080065e8

080008d0 <spi2_init>:

void spi2_init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

	spi2.Instance = SPI2;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <spi2_init+0x5c>)
 80008d6:	4a16      	ldr	r2, [pc, #88]	; (8000930 <spi2_init+0x60>)
 80008d8:	601a      	str	r2, [r3, #0]
	spi2.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <spi2_init+0x5c>)
 80008dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e0:	605a      	str	r2, [r3, #4]
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <spi2_init+0x5c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <spi2_init+0x5c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
	spi2.Init.DataSize = SPI_DATASIZE_8BIT ;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <spi2_init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <spi2_init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
	spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <spi2_init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	615a      	str	r2, [r3, #20]
	spi2.Init.NSS = SPI_NSS_HARD_OUTPUT ;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <spi2_init+0x5c>)
 8000902:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000906:	619a      	str	r2, [r3, #24]
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <spi2_init+0x5c>)
 800090a:	2210      	movs	r2, #16
 800090c:	61da      	str	r2, [r3, #28]
	spi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <spi2_init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_SPI_Init(&spi2) != HAL_OK)
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <spi2_init+0x5c>)
 8000916:	f001 fbb3 	bl	8002080 <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d002      	beq.n	8000926 <spi2_init+0x56>
	{
		printf("SPI2 Init Failed\r\n");
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <spi2_init+0x64>)
 8000922:	f004 fe9f 	bl	8005664 <puts>
	}

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000012c 	.word	0x2000012c
 8000930:	40003800 	.word	0x40003800
 8000934:	080065fc 	.word	0x080065fc

08000938 <i2c2_init>:

void i2c2_init()  //incomplete !!  please verify once before using it
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	i2c2.Instance = I2C2;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <i2c2_init+0x3c>)
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <i2c2_init+0x40>)
 8000940:	601a      	str	r2, [r3, #0]
	i2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <i2c2_init+0x3c>)
 8000944:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000948:	611a      	str	r2, [r3, #16]
	i2c2.Init.ClockSpeed = 4000000;
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <i2c2_init+0x3c>)
 800094c:	4a0b      	ldr	r2, [pc, #44]	; (800097c <i2c2_init+0x44>)
 800094e:	605a      	str	r2, [r3, #4]
	i2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <i2c2_init+0x3c>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
	i2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <i2c2_init+0x3c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]

	if(HAL_I2C_Init(&i2c2) != HAL_OK)
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <i2c2_init+0x3c>)
 800095e:	f000 fdc1 	bl	80014e4 <HAL_I2C_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d002      	beq.n	800096e <i2c2_init+0x36>
	{
		printf("I2C2 Init Failed\r\n");
 8000968:	4805      	ldr	r0, [pc, #20]	; (8000980 <i2c2_init+0x48>)
 800096a:	f004 fe7b 	bl	8005664 <puts>
	}


}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000184 	.word	0x20000184
 8000978:	40005800 	.word	0x40005800
 800097c:	003d0900 	.word	0x003d0900
 8000980:	08006610 	.word	0x08006610

08000984 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM11)	/* TimeBase for HAL Layer */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d101      	bne.n	800099a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000996:	f000 fac7 	bl	8000f28 <HAL_IncTick>
	}

	if(htim->Instance == TIM5)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d104      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
#if (DEBUG_LED)
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80009a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009aa:	f000 fd80 	bl	80014ae <HAL_GPIO_TogglePin>
#endif
	}


}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40014800 	.word	0x40014800
 80009bc:	40000c00 	.word	0x40000c00
 80009c0:	40020800 	.word	0x40020800

080009c4 <read_touch>:
 * @ret:	None
 * @arg: 	None
 */

static void read_touch(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	g_pos_x = getX()+12;	// calibration
 80009c8:	f004 fd62 	bl	8005490 <getX>
 80009cc:	4603      	mov	r3, r0
 80009ce:	330c      	adds	r3, #12
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <read_touch+0x3c>)
 80009d4:	801a      	strh	r2, [r3, #0]
	g_pos_y = 470-getY();
 80009d6:	f004 fd70 	bl	80054ba <getY>
 80009da:	4603      	mov	r3, r0
 80009dc:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 80009e0:	b29a      	uxth	r2, r3
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <read_touch+0x40>)
 80009e4:	801a      	strh	r2, [r3, #0]

	while(!(TIM5->SR & TIM_SR_UIF)){}; 		// delay from time base
 80009e6:	bf00      	nop
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <read_touch+0x44>)
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f9      	beq.n	80009e8 <read_touch+0x24>
	TIM5->SR = 0;
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <read_touch+0x44>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000280 	.word	0x20000280
 8000a04:	20000282 	.word	0x20000282
 8000a08:	40000c00 	.word	0x40000c00

08000a0c <rfid_read>:


void rfid_read(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	if(rc522_checkCard(rfid_id))
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <rfid_read+0x54>)
 8000a12:	f004 faac 	bl	8004f6e <rc522_checkCard>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d01b      	beq.n	8000a54 <rfid_read+0x48>
		{

			memset(data,0,sizeof(data));
 8000a1c:	2214      	movs	r2, #20
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4810      	ldr	r0, [pc, #64]	; (8000a64 <rfid_read+0x58>)
 8000a22:	f004 fd91 	bl	8005548 <memset>
#if (DEBUG_UART)
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
			HAL_UART_Transmit(&uart1,(uint8_t *)data,sizeof(data),1000);
#endif
			if(1==check_validcard())
 8000a26:	f004 fc89 	bl	800533c <check_validcard>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10d      	bne.n	8000a4c <rfid_read+0x40>
			{
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2101      	movs	r1, #1
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <rfid_read+0x5c>)
 8000a36:	f000 fd21 	bl	800147c <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000a3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a3e:	f000 fa93 	bl	8000f68 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	4808      	ldr	r0, [pc, #32]	; (8000a68 <rfid_read+0x5c>)
 8000a48:	f000 fd18 	bl	800147c <HAL_GPIO_WritePin>
#if (DEBUG_UART)
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
#endif
			}

			HAL_Delay(2000);
 8000a4c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a50:	f000 fa8a 	bl	8000f68 <HAL_Delay>
		}
	HAL_Delay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f000 fa87 	bl	8000f68 <HAL_Delay>

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000220 	.word	0x20000220
 8000a64:	20000224 	.word	0x20000224
 8000a68:	40020000 	.word	0x40020000

08000a6c <HAL_MspInit>:

extern SPI_HandleTypeDef spi2;
extern TIM_HandleTypeDef tim5;

void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();		// exti line controller clock
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();			// pwr  controller clcok
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	// enable the peripheral clock
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a1a      	ldr	r2, [pc, #104]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	613b      	str	r3, [r7, #16]
 8000ade:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_USART1_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6453      	str	r3, [r2, #68]	; 0x44
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af4:	f003 0310 	and.w	r3, r3, #16
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef gpio_uart;

	gpio_uart.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8000afc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b00:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode 	=GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
	gpio_uart.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	61fb      	str	r3, [r7, #28]
	gpio_uart.Alternate = GPIO_AF7_USART1;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000b1a:	f000 fb2b 	bl	8001174 <HAL_GPIO_Init>

	// enable NVIC irq line
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b1e:	2025      	movs	r0, #37	; 0x25
 8000b20:	f000 fb1a 	bl	8001158 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	210f      	movs	r1, #15
 8000b28:	2025      	movs	r0, #37	; 0x25
 8000b2a:	f000 faf9 	bl	8001120 <HAL_NVIC_SetPriority>

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef spi_pins;

	if(hspi->Instance == SPI1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <HAL_SPI_MspInit+0xd0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d129      	bne.n	8000ba6 <HAL_SPI_MspInit+0x66>
	{
		__HAL_RCC_SPI1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	4b2f      	ldr	r3, [pc, #188]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a2e      	ldr	r2, [pc, #184]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000b5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b2c      	ldr	r3, [pc, #176]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]

		spi_pins.Pin = (GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7);
 8000b8a:	23e0      	movs	r3, #224	; 0xe0
 8000b8c:	61fb      	str	r3, [r7, #28]
		spi_pins.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
		spi_pins.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
		spi_pins.Alternate = GPIO_AF5_SPI1;
 8000b96:	2305      	movs	r3, #5
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_GPIO_Init(GPIOA, &spi_pins);
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	481d      	ldr	r0, [pc, #116]	; (8000c18 <HAL_SPI_MspInit+0xd8>)
 8000ba2:	f000 fae7 	bl	8001174 <HAL_GPIO_Init>
	}

	if(hspi->Instance == SPI2)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <HAL_SPI_MspInit+0xdc>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d12a      	bne.n	8000c06 <HAL_SPI_MspInit+0xc6>
	{
		__HAL_RCC_SPI2_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_SPI_MspInit+0xd4>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]

		spi_pins.Pin = (GPIO_PIN_12 | GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8000be8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bec:	61fb      	str	r3, [r7, #28]
		spi_pins.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	623b      	str	r3, [r7, #32]
		spi_pins.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
		spi_pins.Alternate = GPIO_AF5_SPI2;
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c

		HAL_GPIO_Init(GPIOB, &spi_pins);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4807      	ldr	r0, [pc, #28]	; (8000c20 <HAL_SPI_MspInit+0xe0>)
 8000c02:	f000 fab7 	bl	8001174 <HAL_GPIO_Init>
	}

}
 8000c06:	bf00      	nop
 8000c08:	3730      	adds	r7, #48	; 0x30
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40013000 	.word	0x40013000
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000
 8000c1c:	40003800 	.word	0x40003800
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_TIM_Base_MspInit+0x48>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d115      	bne.n	8000c62 <HAL_TIM_Base_MspInit+0x3e>
	{
		__HAL_RCC_TIM5_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_TIM_Base_MspInit+0x4c>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a0c      	ldr	r2, [pc, #48]	; (8000c70 <HAL_TIM_Base_MspInit+0x4c>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_TIM_Base_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2105      	movs	r1, #5
 8000c56:	2032      	movs	r0, #50	; 0x32
 8000c58:	f000 fa62 	bl	8001120 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c5c:	2032      	movs	r0, #50	; 0x32
 8000c5e:	f000 fa7b 	bl	8001158 <HAL_NVIC_EnableIRQ>

	}

}
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40000c00 	.word	0x40000c00
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C2_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_I2C_MspInit+0x68>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_I2C_MspInit+0x68>)
 8000c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_I2C_MspInit+0x68>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_I2C_MspInit+0x68>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_I2C_MspInit+0x68>)
 8000ca2:	f043 0302 	orr.w	r3, r3, #2
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_I2C_MspInit+0x68>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef i2c2_pins;

	i2c2_pins.Pin = (GPIO_PIN_10 | GPIO_PIN_11);
 8000cb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cb8:	617b      	str	r3, [r7, #20]
	i2c2_pins.Mode = GPIO_MODE_AF_OD;
 8000cba:	2312      	movs	r3, #18
 8000cbc:	61bb      	str	r3, [r7, #24]
	i2c2_pins.Pull = GPIO_PULLUP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61fb      	str	r3, [r7, #28]
	i2c2_pins.Alternate = GPIO_AF4_I2C2;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOB, &i2c2_pins);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <HAL_I2C_MspInit+0x6c>)
 8000cce:	f000 fa51 	bl	8001174 <HAL_GPIO_Init>
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_InitTick+0xd0>)
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	4a2d      	ldr	r2, [pc, #180]	; (8000db4 <HAL_InitTick+0xd0>)
 8000cfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <HAL_InitTick+0xd0>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d10:	f107 020c 	add.w	r2, r7, #12
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f97e 	bl	800201c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d20:	f001 f968 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 8000d24:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d28:	4a23      	ldr	r2, [pc, #140]	; (8000db8 <HAL_InitTick+0xd4>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	0c9b      	lsrs	r3, r3, #18
 8000d30:	3b01      	subs	r3, #1
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d36:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <HAL_InitTick+0xdc>)
 8000d38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000d3a:	4b20      	ldr	r3, [pc, #128]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d40:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000d42:	4a1e      	ldr	r2, [pc, #120]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000d5a:	4818      	ldr	r0, [pc, #96]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d5c:	f001 ff38 	bl	8002bd0 <HAL_TIM_Base_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d11b      	bne.n	8000da6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000d6e:	4813      	ldr	r0, [pc, #76]	; (8000dbc <HAL_InitTick+0xd8>)
 8000d70:	f001 ff7e 	bl	8002c70 <HAL_TIM_Base_Start_IT>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d111      	bne.n	8000da6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d82:	201a      	movs	r0, #26
 8000d84:	f000 f9e8 	bl	8001158 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	d808      	bhi.n	8000da0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	201a      	movs	r0, #26
 8000d94:	f000 f9c4 	bl	8001120 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_InitTick+0xe0>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e002      	b.n	8000da6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3730      	adds	r7, #48	; 0x30
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	431bde83 	.word	0x431bde83
 8000dbc:	20000238 	.word	0x20000238
 8000dc0:	40014800 	.word	0x40014800
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e00a      	b.n	8000df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dda:	f3af 8000 	nop.w
 8000dde:	4601      	mov	r1, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf0      	blt.n	8000dda <_read+0x12>
  }

  return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_isatty>:

int _isatty(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ffd7 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f004 fb11 	bl	80054e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fbc3 	bl	800064c <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ed4:	0800673c 	.word	0x0800673c
  ldr r2, =_sbss
 8000ed8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000edc:	200008f8 	.word	0x200008f8

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	; (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f8fc 	bl	800110a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f7ff fee6 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fda8 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	20000284 	.word	0x20000284

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000284 	.word	0x20000284

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000000c 	.word	0x2000000c

08000fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <__NVIC_GetPriorityGrouping+0x18>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	f003 0307 	and.w	r3, r3, #7
}
 8001006:	4618      	mov	r0, r3
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db0b      	blt.n	800103e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4907      	ldr	r1, [pc, #28]	; (800104c <__NVIC_EnableIRQ+0x38>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000e100 	.word	0xe000e100

08001050 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	6039      	str	r1, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db0a      	blt.n	800107a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	b2da      	uxtb	r2, r3
 8001068:	490c      	ldr	r1, [pc, #48]	; (800109c <__NVIC_SetPriority+0x4c>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	440b      	add	r3, r1
 8001074:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001078:	e00a      	b.n	8001090 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4908      	ldr	r1, [pc, #32]	; (80010a0 <__NVIC_SetPriority+0x50>)
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	3b04      	subs	r3, #4
 8001088:	0112      	lsls	r2, r2, #4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	440b      	add	r3, r1
 800108e:	761a      	strb	r2, [r3, #24]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000e100 	.word	0xe000e100
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f1c3 0307 	rsb	r3, r3, #7
 80010be:	2b04      	cmp	r3, #4
 80010c0:	bf28      	it	cs
 80010c2:	2304      	movcs	r3, #4
 80010c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3304      	adds	r3, #4
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d902      	bls.n	80010d4 <NVIC_EncodePriority+0x30>
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3b03      	subs	r3, #3
 80010d2:	e000      	b.n	80010d6 <NVIC_EncodePriority+0x32>
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	401a      	ands	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ec:	f04f 31ff 	mov.w	r1, #4294967295
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	4313      	orrs	r3, r2
         );
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ff4c 	bl	8000fb0 <__NVIC_SetPriorityGrouping>
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001132:	f7ff ff61 	bl	8000ff8 <__NVIC_GetPriorityGrouping>
 8001136:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	68b9      	ldr	r1, [r7, #8]
 800113c:	6978      	ldr	r0, [r7, #20]
 800113e:	f7ff ffb1 	bl	80010a4 <NVIC_EncodePriority>
 8001142:	4602      	mov	r2, r0
 8001144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff80 	bl	8001050 <__NVIC_SetPriority>
}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff54 	bl	8001014 <__NVIC_EnableIRQ>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
 800118e:	e159      	b.n	8001444 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001190:	2201      	movs	r2, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f040 8148 	bne.w	800143e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d130      	bne.n	8001228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	2203      	movs	r2, #3
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43db      	mvns	r3, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4013      	ands	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	091b      	lsrs	r3, r3, #4
 8001212:	f003 0201 	and.w	r2, r3, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b03      	cmp	r3, #3
 8001232:	d017      	beq.n	8001264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d123      	bne.n	80012b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	691a      	ldr	r2, [r3, #16]
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	08da      	lsrs	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3208      	adds	r2, #8
 80012b2:	69b9      	ldr	r1, [r7, #24]
 80012b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0203 	and.w	r2, r3, #3
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	f000 80a2 	beq.w	800143e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b57      	ldr	r3, [pc, #348]	; (800145c <HAL_GPIO_Init+0x2e8>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a56      	ldr	r2, [pc, #344]	; (800145c <HAL_GPIO_Init+0x2e8>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44
 800130a:	4b54      	ldr	r3, [pc, #336]	; (800145c <HAL_GPIO_Init+0x2e8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <HAL_GPIO_Init+0x2ec>)
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	220f      	movs	r2, #15
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a49      	ldr	r2, [pc, #292]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d019      	beq.n	8001376 <HAL_GPIO_Init+0x202>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a48      	ldr	r2, [pc, #288]	; (8001468 <HAL_GPIO_Init+0x2f4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0x1fe>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a47      	ldr	r2, [pc, #284]	; (800146c <HAL_GPIO_Init+0x2f8>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d00d      	beq.n	800136e <HAL_GPIO_Init+0x1fa>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a46      	ldr	r2, [pc, #280]	; (8001470 <HAL_GPIO_Init+0x2fc>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d007      	beq.n	800136a <HAL_GPIO_Init+0x1f6>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a45      	ldr	r2, [pc, #276]	; (8001474 <HAL_GPIO_Init+0x300>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_GPIO_Init+0x1f2>
 8001362:	2304      	movs	r3, #4
 8001364:	e008      	b.n	8001378 <HAL_GPIO_Init+0x204>
 8001366:	2307      	movs	r3, #7
 8001368:	e006      	b.n	8001378 <HAL_GPIO_Init+0x204>
 800136a:	2303      	movs	r3, #3
 800136c:	e004      	b.n	8001378 <HAL_GPIO_Init+0x204>
 800136e:	2302      	movs	r3, #2
 8001370:	e002      	b.n	8001378 <HAL_GPIO_Init+0x204>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_GPIO_Init+0x204>
 8001376:	2300      	movs	r3, #0
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	f002 0203 	and.w	r2, r2, #3
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	4093      	lsls	r3, r2
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001388:	4935      	ldr	r1, [pc, #212]	; (8001460 <HAL_GPIO_Init+0x2ec>)
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	089b      	lsrs	r3, r3, #2
 800138e:	3302      	adds	r3, #2
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <HAL_GPIO_Init+0x304>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_GPIO_Init+0x304>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a24      	ldr	r2, [pc, #144]	; (8001478 <HAL_GPIO_Init+0x304>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ea:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_GPIO_Init+0x304>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800140e:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_GPIO_Init+0x304>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001438:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_GPIO_Init+0x304>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3301      	adds	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	2b0f      	cmp	r3, #15
 8001448:	f67f aea2 	bls.w	8001190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40013800 	.word	0x40013800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00
 8001474:	40021000 	.word	0x40021000
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001498:	e003      	b.n	80014a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	041a      	lsls	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	460b      	mov	r3, r1
 80014b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c0:	887a      	ldrh	r2, [r7, #2]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	041a      	lsls	r2, r3, #16
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	400b      	ands	r3, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e12b      	b.n	800174e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff fbb2 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2224      	movs	r2, #36	; 0x24
 8001514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001548:	f000 fd40 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 800154c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a81      	ldr	r2, [pc, #516]	; (8001758 <HAL_I2C_Init+0x274>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d807      	bhi.n	8001568 <HAL_I2C_Init+0x84>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a80      	ldr	r2, [pc, #512]	; (800175c <HAL_I2C_Init+0x278>)
 800155c:	4293      	cmp	r3, r2
 800155e:	bf94      	ite	ls
 8001560:	2301      	movls	r3, #1
 8001562:	2300      	movhi	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	e006      	b.n	8001576 <HAL_I2C_Init+0x92>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a7d      	ldr	r2, [pc, #500]	; (8001760 <HAL_I2C_Init+0x27c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e0e7      	b.n	800174e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4a78      	ldr	r2, [pc, #480]	; (8001764 <HAL_I2C_Init+0x280>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	430a      	orrs	r2, r1
 800159c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a6a      	ldr	r2, [pc, #424]	; (8001758 <HAL_I2C_Init+0x274>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d802      	bhi.n	80015b8 <HAL_I2C_Init+0xd4>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3301      	adds	r3, #1
 80015b6:	e009      	b.n	80015cc <HAL_I2C_Init+0xe8>
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015be:	fb02 f303 	mul.w	r3, r2, r3
 80015c2:	4a69      	ldr	r2, [pc, #420]	; (8001768 <HAL_I2C_Init+0x284>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	099b      	lsrs	r3, r3, #6
 80015ca:	3301      	adds	r3, #1
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	495c      	ldr	r1, [pc, #368]	; (8001758 <HAL_I2C_Init+0x274>)
 80015e8:	428b      	cmp	r3, r1
 80015ea:	d819      	bhi.n	8001620 <HAL_I2C_Init+0x13c>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e59      	subs	r1, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015fa:	1c59      	adds	r1, r3, #1
 80015fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001600:	400b      	ands	r3, r1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_I2C_Init+0x138>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	1e59      	subs	r1, r3, #1
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	fbb1 f3f3 	udiv	r3, r1, r3
 8001614:	3301      	adds	r3, #1
 8001616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161a:	e051      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 800161c:	2304      	movs	r3, #4
 800161e:	e04f      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d111      	bne.n	800164c <HAL_I2C_Init+0x168>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e58      	subs	r0, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	440b      	add	r3, r1
 8001636:	fbb0 f3f3 	udiv	r3, r0, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	e012      	b.n	8001672 <HAL_I2C_Init+0x18e>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1e58      	subs	r0, r3, #1
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6859      	ldr	r1, [r3, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	0099      	lsls	r1, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001662:	3301      	adds	r3, #1
 8001664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001668:	2b00      	cmp	r3, #0
 800166a:	bf0c      	ite	eq
 800166c:	2301      	moveq	r3, #1
 800166e:	2300      	movne	r3, #0
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Init+0x196>
 8001676:	2301      	movs	r3, #1
 8001678:	e022      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10e      	bne.n	80016a0 <HAL_I2C_Init+0x1bc>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1e58      	subs	r0, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	460b      	mov	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	440b      	add	r3, r1
 8001690:	fbb0 f3f3 	udiv	r3, r0, r3
 8001694:	3301      	adds	r3, #1
 8001696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	e00f      	b.n	80016c0 <HAL_I2C_Init+0x1dc>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	0099      	lsls	r1, r3, #2
 80016b0:	440b      	add	r3, r1
 80016b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b6:	3301      	adds	r3, #1
 80016b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	6809      	ldr	r1, [r1, #0]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69da      	ldr	r2, [r3, #28]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6911      	ldr	r1, [r2, #16]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68d2      	ldr	r2, [r2, #12]
 80016fa:	4311      	orrs	r1, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	430b      	orrs	r3, r1
 8001702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	000186a0 	.word	0x000186a0
 800175c:	001e847f 	.word	0x001e847f
 8001760:	003d08ff 	.word	0x003d08ff
 8001764:	431bde83 	.word	0x431bde83
 8001768:	10624dd3 	.word	0x10624dd3

0800176c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e267      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d075      	beq.n	8001876 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178a:	4b88      	ldr	r3, [pc, #544]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b04      	cmp	r3, #4
 8001794:	d00c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001796:	4b85      	ldr	r3, [pc, #532]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d112      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017a2:	4b82      	ldr	r3, [pc, #520]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ae:	d10b      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	4b7e      	ldr	r3, [pc, #504]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d05b      	beq.n	8001874 <HAL_RCC_OscConfig+0x108>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d157      	bne.n	8001874 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e242      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d0:	d106      	bne.n	80017e0 <HAL_RCC_OscConfig+0x74>
 80017d2:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a75      	ldr	r2, [pc, #468]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e01d      	b.n	800181c <HAL_RCC_OscConfig+0xb0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e8:	d10c      	bne.n	8001804 <HAL_RCC_OscConfig+0x98>
 80017ea:	4b70      	ldr	r3, [pc, #448]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6f      	ldr	r2, [pc, #444]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	4b6d      	ldr	r3, [pc, #436]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6c      	ldr	r2, [pc, #432]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80017fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e00b      	b.n	800181c <HAL_RCC_OscConfig+0xb0>
 8001804:	4b69      	ldr	r3, [pc, #420]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a68      	ldr	r2, [pc, #416]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 800180a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b66      	ldr	r3, [pc, #408]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a65      	ldr	r2, [pc, #404]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d013      	beq.n	800184c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fb94 	bl	8000f50 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182c:	f7ff fb90 	bl	8000f50 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b64      	cmp	r3, #100	; 0x64
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e207      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0xc0>
 800184a:	e014      	b.n	8001876 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fb80 	bl	8000f50 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fb7c 	bl	8000f50 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1f3      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0xe8>
 8001872:	e000      	b.n	8001876 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d063      	beq.n	800194a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001882:	4b4a      	ldr	r3, [pc, #296]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188e:	4b47      	ldr	r3, [pc, #284]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001896:	2b08      	cmp	r3, #8
 8001898:	d11c      	bne.n	80018d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189a:	4b44      	ldr	r3, [pc, #272]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d116      	bne.n	80018d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a6:	4b41      	ldr	r3, [pc, #260]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d005      	beq.n	80018be <HAL_RCC_OscConfig+0x152>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e1c7      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	e03a      	b.n	800194a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x244>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb35 	bl	8000f50 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ea:	f7ff fb31 	bl	8000f50 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e1a8      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	691b      	ldr	r3, [r3, #16]
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4925      	ldr	r1, [pc, #148]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001918:	4313      	orrs	r3, r2
 800191a:	600b      	str	r3, [r1, #0]
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_OscConfig+0x244>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fb14 	bl	8000f50 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192c:	f7ff fb10 	bl	8000f50 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e187      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d036      	beq.n	80019c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d016      	beq.n	800198c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <HAL_RCC_OscConfig+0x248>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7ff faf4 	bl	8000f50 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff faf0 	bl	8000f50 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e167      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_RCC_OscConfig+0x240>)
 8001980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x200>
 800198a:	e01b      	b.n	80019c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_OscConfig+0x248>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff fadd 	bl	8000f50 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	e00e      	b.n	80019b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199a:	f7ff fad9 	bl	8000f50 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d907      	bls.n	80019b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e150      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
 80019ac:	40023800 	.word	0x40023800
 80019b0:	42470000 	.word	0x42470000
 80019b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 80019ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ea      	bne.n	800199a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 8097 	beq.w	8001b00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b81      	ldr	r3, [pc, #516]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10f      	bne.n	8001a02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b7d      	ldr	r3, [pc, #500]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a7c      	ldr	r2, [pc, #496]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fe:	2301      	movs	r3, #1
 8001a00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	4b77      	ldr	r3, [pc, #476]	; (8001be0 <HAL_RCC_OscConfig+0x474>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d118      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0e:	4b74      	ldr	r3, [pc, #464]	; (8001be0 <HAL_RCC_OscConfig+0x474>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a73      	ldr	r2, [pc, #460]	; (8001be0 <HAL_RCC_OscConfig+0x474>)
 8001a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1a:	f7ff fa99 	bl	8000f50 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a22:	f7ff fa95 	bl	8000f50 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e10c      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	4b6a      	ldr	r3, [pc, #424]	; (8001be0 <HAL_RCC_OscConfig+0x474>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2ea>
 8001a48:	4b64      	ldr	r3, [pc, #400]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4c:	4a63      	ldr	r2, [pc, #396]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	6713      	str	r3, [r2, #112]	; 0x70
 8001a54:	e01c      	b.n	8001a90 <HAL_RCC_OscConfig+0x324>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b05      	cmp	r3, #5
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x30c>
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	4a5e      	ldr	r2, [pc, #376]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6713      	str	r3, [r2, #112]	; 0x70
 8001a6a:	4b5c      	ldr	r3, [pc, #368]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a5b      	ldr	r2, [pc, #364]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0x324>
 8001a78:	4b58      	ldr	r3, [pc, #352]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	4a57      	ldr	r2, [pc, #348]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70
 8001a84:	4b55      	ldr	r3, [pc, #340]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	4a54      	ldr	r2, [pc, #336]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d015      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff fa5a 	bl	8000f50 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fa56 	bl	8000f50 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e0cb      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab6:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ee      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x334>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fa44 	bl	8000f50 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001acc:	f7ff fa40 	bl	8000f50 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0b5      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ee      	bne.n	8001acc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aee:	7dfb      	ldrb	r3, [r7, #23]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a38      	ldr	r2, [pc, #224]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 80a1 	beq.w	8001c4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b0a:	4b34      	ldr	r3, [pc, #208]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d05c      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d141      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <HAL_RCC_OscConfig+0x478>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa14 	bl	8000f50 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff fa10 	bl	8000f50 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e087      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69da      	ldr	r2, [r3, #28]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	019b      	lsls	r3, r3, #6
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	3b01      	subs	r3, #1
 8001b64:	041b      	lsls	r3, r3, #16
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	491b      	ldr	r1, [pc, #108]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <HAL_RCC_OscConfig+0x478>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f9e9 	bl	8000f50 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f9e5 	bl	8000f50 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e05c      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x416>
 8001ba0:	e054      	b.n	8001c4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_RCC_OscConfig+0x478>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f9d2 	bl	8000f50 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f9ce 	bl	8000f50 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e045      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCC_OscConfig+0x470>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x444>
 8001bce:	e03d      	b.n	8001c4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e038      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000
 8001be4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_RCC_OscConfig+0x4ec>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d028      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d121      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d11a      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c18:	4013      	ands	r3, r2
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d111      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	085b      	lsrs	r3, r3, #1
 8001c30:	3b01      	subs	r3, #1
 8001c32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800

08001c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0cc      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c70:	4b68      	ldr	r3, [pc, #416]	; (8001e14 <HAL_RCC_ClockConfig+0x1b8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d90c      	bls.n	8001c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0b8      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d020      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb0:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a58      	ldr	r2, [pc, #352]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	494d      	ldr	r1, [pc, #308]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d044      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d119      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e07f      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d003      	beq.n	8001d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d107      	bne.n	8001d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1a:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e06f      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e067      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3a:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 0203 	bic.w	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4934      	ldr	r1, [pc, #208]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d4c:	f7ff f900 	bl	8000f50 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d54:	f7ff f8fc 	bl	8000f50 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e04f      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	4b2b      	ldr	r3, [pc, #172]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 020c 	and.w	r2, r3, #12
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d1eb      	bne.n	8001d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d20c      	bcs.n	8001da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8a:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCC_ClockConfig+0x1b8>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e032      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4916      	ldr	r1, [pc, #88]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	490e      	ldr	r1, [pc, #56]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de2:	f000 f821 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001de6:	4602      	mov	r2, r0
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	490a      	ldr	r1, [pc, #40]	; (8001e1c <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	5ccb      	ldrb	r3, [r1, r3]
 8001df6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe ff6e 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023c00 	.word	0x40023c00
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	0800665c 	.word	0x0800665c
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000008 	.word	0x20000008

08001e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e2c:	b090      	sub	sp, #64	; 0x40
 8001e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
 8001e34:	2300      	movs	r3, #0
 8001e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e38:	2300      	movs	r3, #0
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d00d      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x40>
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	f200 80a1 	bhi.w	8001f94 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x34>
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e5a:	e09b      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e60:	e09b      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e62:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e66:	e098      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e72:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d028      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	2200      	movs	r2, #0
 8001e86:	623b      	str	r3, [r7, #32]
 8001e88:	627a      	str	r2, [r7, #36]	; 0x24
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e90:	2100      	movs	r1, #0
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e94:	fb03 f201 	mul.w	r2, r3, r1
 8001e98:	2300      	movs	r3, #0
 8001e9a:	fb00 f303 	mul.w	r3, r0, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a43      	ldr	r2, [pc, #268]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ea2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	62ba      	str	r2, [r7, #40]	; 0x28
 8001eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eae:	4413      	add	r3, r2
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	61fa      	str	r2, [r7, #28]
 8001eba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ebe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ec2:	f7fe fa2d 	bl	8000320 <__aeabi_uldivmod>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4613      	mov	r3, r2
 8001ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ece:	e053      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed0:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	617a      	str	r2, [r7, #20]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ee2:	f04f 0b00 	mov.w	fp, #0
 8001ee6:	4652      	mov	r2, sl
 8001ee8:	465b      	mov	r3, fp
 8001eea:	f04f 0000 	mov.w	r0, #0
 8001eee:	f04f 0100 	mov.w	r1, #0
 8001ef2:	0159      	lsls	r1, r3, #5
 8001ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef8:	0150      	lsls	r0, r2, #5
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	ebb2 080a 	subs.w	r8, r2, sl
 8001f02:	eb63 090b 	sbc.w	r9, r3, fp
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f1a:	ebb2 0408 	subs.w	r4, r2, r8
 8001f1e:	eb63 0509 	sbc.w	r5, r3, r9
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f04f 0300 	mov.w	r3, #0
 8001f2a:	00eb      	lsls	r3, r5, #3
 8001f2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f30:	00e2      	lsls	r2, r4, #3
 8001f32:	4614      	mov	r4, r2
 8001f34:	461d      	mov	r5, r3
 8001f36:	eb14 030a 	adds.w	r3, r4, sl
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	eb45 030b 	adc.w	r3, r5, fp
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4e:	4629      	mov	r1, r5
 8001f50:	028b      	lsls	r3, r1, #10
 8001f52:	4621      	mov	r1, r4
 8001f54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f58:	4621      	mov	r1, r4
 8001f5a:	028a      	lsls	r2, r1, #10
 8001f5c:	4610      	mov	r0, r2
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f62:	2200      	movs	r2, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	60fa      	str	r2, [r7, #12]
 8001f68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f6c:	f7fe f9d8 	bl	8000320 <__aeabi_uldivmod>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4613      	mov	r3, r2
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	3301      	adds	r3, #1
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetSysClockFreq+0x184>)
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3740      	adds	r7, #64	; 0x40
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	017d7840 	.word	0x017d7840

08001fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000004 	.word	0x20000004

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0a9b      	lsrs	r3, r3, #10
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4903      	ldr	r1, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe2:	5ccb      	ldrb	r3, [r1, r3]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	0800666c 	.word	0x0800666c

08001ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff8:	f7ff ffdc 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	0800666c 	.word	0x0800666c

0800201c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	220f      	movs	r2, #15
 800202a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCC_GetClockConfig+0x60>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0207 	and.w	r2, r3, #7
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07b      	b.n	800218a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	2b00      	cmp	r3, #0
 8002098:	d108      	bne.n	80020ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020a2:	d009      	beq.n	80020b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
 80020aa:	e005      	b.n	80020b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7fe fd34 	bl	8000b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	ea42 0103 	orr.w	r1, r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 0104 	and.w	r1, r3, #4
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	f003 0210 	and.w	r2, r3, #16
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002178:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b088      	sub	sp, #32
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_SPI_Transmit+0x22>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e126      	b.n	8002402 <HAL_SPI_Transmit+0x270>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021bc:	f7fe fec8 	bl	8000f50 <HAL_GetTick>
 80021c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d002      	beq.n	80021d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021d6:	e10b      	b.n	80023f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Transmit+0x52>
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80021e8:	e102      	b.n	80023f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2203      	movs	r2, #3
 80021ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	88fa      	ldrh	r2, [r7, #6]
 8002208:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002230:	d10f      	bne.n	8002252 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002240:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002250:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225c:	2b40      	cmp	r3, #64	; 0x40
 800225e:	d007      	beq.n	8002270 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002278:	d14b      	bne.n	8002312 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_SPI_Transmit+0xf6>
 8002282:	8afb      	ldrh	r3, [r7, #22]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d13e      	bne.n	8002306 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	881a      	ldrh	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	1c9a      	adds	r2, r3, #2
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022ac:	e02b      	b.n	8002306 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d112      	bne.n	80022e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	881a      	ldrh	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	1c9a      	adds	r2, r3, #2
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	3b01      	subs	r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	86da      	strh	r2, [r3, #54]	; 0x36
 80022e0:	e011      	b.n	8002306 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022e2:	f7fe fe35 	bl	8000f50 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d803      	bhi.n	80022fa <HAL_SPI_Transmit+0x168>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d102      	bne.n	8002300 <HAL_SPI_Transmit+0x16e>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002304:	e074      	b.n	80023f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ce      	bne.n	80022ae <HAL_SPI_Transmit+0x11c>
 8002310:	e04c      	b.n	80023ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_SPI_Transmit+0x18e>
 800231a:	8afb      	ldrh	r3, [r7, #22]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d140      	bne.n	80023a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	330c      	adds	r3, #12
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002346:	e02c      	b.n	80023a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b02      	cmp	r3, #2
 8002354:	d113      	bne.n	800237e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	86da      	strh	r2, [r3, #54]	; 0x36
 800237c:	e011      	b.n	80023a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800237e:	f7fe fde7 	bl	8000f50 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d803      	bhi.n	8002396 <HAL_SPI_Transmit+0x204>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d102      	bne.n	800239c <HAL_SPI_Transmit+0x20a>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d102      	bne.n	80023a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80023a0:	e026      	b.n	80023f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1cd      	bne.n	8002348 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	6839      	ldr	r1, [r7, #0]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fbcb 	bl	8002b4c <SPI_EndRxTxTransaction>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	77fb      	strb	r3, [r7, #31]
 80023ec:	e000      	b.n	80023f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80023ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002400:	7ffb      	ldrb	r3, [r7, #31]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b088      	sub	sp, #32
 800240e:	af02      	add	r7, sp, #8
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002426:	d112      	bne.n	800244e <HAL_SPI_Receive+0x44>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10e      	bne.n	800244e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2204      	movs	r2, #4
 8002434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002438:	88fa      	ldrh	r2, [r7, #6]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	4613      	mov	r3, r2
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f8f1 	bl	800262c <HAL_SPI_TransmitReceive>
 800244a:	4603      	mov	r3, r0
 800244c:	e0ea      	b.n	8002624 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_SPI_Receive+0x52>
 8002458:	2302      	movs	r3, #2
 800245a:	e0e3      	b.n	8002624 <HAL_SPI_Receive+0x21a>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002464:	f7fe fd74 	bl	8000f50 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d002      	beq.n	800247c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	75fb      	strb	r3, [r7, #23]
    goto error;
 800247a:	e0ca      	b.n	8002612 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_SPI_Receive+0x7e>
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800248c:	e0c1      	b.n	8002612 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2204      	movs	r2, #4
 8002492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	88fa      	ldrh	r2, [r7, #6]
 80024a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	88fa      	ldrh	r2, [r7, #6]
 80024ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d4:	d10f      	bne.n	80024f6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d007      	beq.n	8002514 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d162      	bne.n	80025e2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800251c:	e02e      	b.n	800257c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d115      	bne.n	8002558 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f103 020c 	add.w	r2, r3, #12
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002556:	e011      	b.n	800257c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002558:	f7fe fcfa 	bl	8000f50 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d803      	bhi.n	8002570 <HAL_SPI_Receive+0x166>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d102      	bne.n	8002576 <HAL_SPI_Receive+0x16c>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d102      	bne.n	800257c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	75fb      	strb	r3, [r7, #23]
          goto error;
 800257a:	e04a      	b.n	8002612 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1cb      	bne.n	800251e <HAL_SPI_Receive+0x114>
 8002586:	e031      	b.n	80025ec <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d113      	bne.n	80025be <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a0:	b292      	uxth	r2, r2
 80025a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025bc:	e011      	b.n	80025e2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025be:	f7fe fcc7 	bl	8000f50 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d803      	bhi.n	80025d6 <HAL_SPI_Receive+0x1cc>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d4:	d102      	bne.n	80025dc <HAL_SPI_Receive+0x1d2>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80025e0:	e017      	b.n	8002612 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1cd      	bne.n	8002588 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 fa45 	bl	8002a80 <SPI_EndRxTransaction>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2220      	movs	r2, #32
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
 800260e:	e000      	b.n	8002612 <HAL_SPI_Receive+0x208>
  }

error :
 8002610:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002622:	7dfb      	ldrb	r3, [r7, #23]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800263a:	2301      	movs	r3, #1
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_SPI_TransmitReceive+0x26>
 800264e:	2302      	movs	r3, #2
 8002650:	e18a      	b.n	8002968 <HAL_SPI_TransmitReceive+0x33c>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800265a:	f7fe fc79 	bl	8000f50 <HAL_GetTick>
 800265e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002674:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002678:	2b01      	cmp	r3, #1
 800267a:	d00f      	beq.n	800269c <HAL_SPI_TransmitReceive+0x70>
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002682:	d107      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d103      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x68>
 800268c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002690:	2b04      	cmp	r3, #4
 8002692:	d003      	beq.n	800269c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002694:	2302      	movs	r3, #2
 8002696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800269a:	e15b      	b.n	8002954 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x82>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x82>
 80026a8:	887b      	ldrh	r3, [r7, #2]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d103      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80026b4:	e14e      	b.n	8002954 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d003      	beq.n	80026ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2205      	movs	r2, #5
 80026c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	887a      	ldrh	r2, [r7, #2]
 80026da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	887a      	ldrh	r2, [r7, #2]
 80026f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d007      	beq.n	800271e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002726:	d178      	bne.n	800281a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_SPI_TransmitReceive+0x10a>
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d166      	bne.n	8002804 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	1c9a      	adds	r2, r3, #2
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275a:	e053      	b.n	8002804 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d11b      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x176>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d016      	beq.n	80027a2 <HAL_SPI_TransmitReceive+0x176>
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	2b01      	cmp	r3, #1
 8002778:	d113      	bne.n	80027a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	881a      	ldrh	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	1c9a      	adds	r2, r3, #2
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002794:	b29b      	uxth	r3, r3
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d119      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x1b8>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d014      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c4:	b292      	uxth	r2, r2
 80027c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	1c9a      	adds	r2, r3, #2
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027e4:	f7fe fbb4 	bl	8000f50 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d807      	bhi.n	8002804 <HAL_SPI_TransmitReceive+0x1d8>
 80027f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d003      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002802:	e0a7      	b.n	8002954 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1a6      	bne.n	800275c <HAL_SPI_TransmitReceive+0x130>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1a1      	bne.n	800275c <HAL_SPI_TransmitReceive+0x130>
 8002818:	e07c      	b.n	8002914 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d002      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x1fc>
 8002822:	8b7b      	ldrh	r3, [r7, #26]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d16b      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	330c      	adds	r3, #12
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800284e:	e057      	b.n	8002900 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d11c      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x26c>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d017      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x26c>
 8002868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800286a:	2b01      	cmp	r3, #1
 800286c:	d114      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d119      	bne.n	80028da <HAL_SPI_TransmitReceive+0x2ae>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d014      	beq.n	80028da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028d6:	2301      	movs	r3, #1
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028da:	f7fe fb39 	bl	8000f50 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d803      	bhi.n	80028f2 <HAL_SPI_TransmitReceive+0x2c6>
 80028ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f0:	d102      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0x2cc>
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d103      	bne.n	8002900 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80028fe:	e029      	b.n	8002954 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1a2      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x224>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	d19d      	bne.n	8002850 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f917 	bl	8002b4c <SPI_EndRxTxTransaction>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002930:	e010      	b.n	8002954 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10b      	bne.n	8002952 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	e000      	b.n	8002954 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002964:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002968:	4618      	mov	r0, r3
 800296a:	3730      	adds	r7, #48	; 0x30
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002980:	f7fe fae6 	bl	8000f50 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	4413      	add	r3, r2
 800298e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002990:	f7fe fade 	bl	8000f50 <HAL_GetTick>
 8002994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	015b      	lsls	r3, r3, #5
 800299c:	0d1b      	lsrs	r3, r3, #20
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	fb02 f303 	mul.w	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a6:	e054      	b.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ae:	d050      	beq.n	8002a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029b0:	f7fe face 	bl	8000f50 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d902      	bls.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d13d      	bne.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029de:	d111      	bne.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e8:	d004      	beq.n	80029f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f2:	d107      	bne.n	8002a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0c:	d10f      	bne.n	8002a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e017      	b.n	8002a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d19b      	bne.n	80029a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000004 	.word	0x20000004

08002a80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a94:	d111      	bne.n	8002aba <SPI_EndRxTransaction+0x3a>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a9e:	d004      	beq.n	8002aaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa8:	d107      	bne.n	8002aba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ac2:	d12a      	bne.n	8002b1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002acc:	d012      	beq.n	8002af4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2180      	movs	r1, #128	; 0x80
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f7ff ff49 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d02d      	beq.n	8002b40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f043 0220 	orr.w	r2, r3, #32
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e026      	b.n	8002b42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2200      	movs	r2, #0
 8002afc:	2101      	movs	r1, #1
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f7ff ff36 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01a      	beq.n	8002b40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0e:	f043 0220 	orr.w	r2, r3, #32
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e013      	b.n	8002b42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2200      	movs	r2, #0
 8002b22:	2101      	movs	r1, #1
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff ff23 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d007      	beq.n	8002b40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <SPI_EndRxTxTransaction+0x7c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <SPI_EndRxTxTransaction+0x80>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0d5b      	lsrs	r3, r3, #21
 8002b64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b76:	d112      	bne.n	8002b9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2180      	movs	r1, #128	; 0x80
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f7ff fef4 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d016      	beq.n	8002bbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e00f      	b.n	8002bbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb4:	2b80      	cmp	r3, #128	; 0x80
 8002bb6:	d0f2      	beq.n	8002b9e <SPI_EndRxTxTransaction+0x52>
 8002bb8:	e000      	b.n	8002bbc <SPI_EndRxTxTransaction+0x70>
        break;
 8002bba:	bf00      	nop
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	165e9f81 	.word	0x165e9f81

08002bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e041      	b.n	8002c66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe f814 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f000 f9c0 	bl	8002f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
	...

08002c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d001      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e044      	b.n	8002d12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0201 	orr.w	r2, r2, #1
 8002c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d018      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x6c>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d013      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x6c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_TIM_Base_Start_IT+0xb4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x6c>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a19      	ldr	r2, [pc, #100]	; (8002d28 <HAL_TIM_Base_Start_IT+0xb8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d009      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x6c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <HAL_TIM_Base_Start_IT+0xbc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x6c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <HAL_TIM_Base_Start_IT+0xc0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d111      	bne.n	8002d00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d010      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfe:	e007      	b.n	8002d10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40000800 	.word	0x40000800
 8002d2c:	40000c00 	.word	0x40000c00
 8002d30:	40014000 	.word	0x40014000

08002d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d122      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d11b      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0202 	mvn.w	r2, #2
 8002d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f8ee 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e005      	b.n	8002d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f8e0 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f8f1 	bl	8002f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0204 	mvn.w	r2, #4
 8002db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f8c4 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f8b6 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f8c7 	bl	8002f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d122      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d11b      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0208 	mvn.w	r2, #8
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0303 	and.w	r3, r3, #3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f89a 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f88c 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f89d 	bl	8002f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d122      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d11b      	bne.n	8002e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0210 	mvn.w	r2, #16
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2208      	movs	r2, #8
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f870 	bl	8002f58 <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f862 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f873 	bl	8002f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10e      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d107      	bne.n	8002eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 0201 	mvn.w	r2, #1
 8002eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fd66 	bl	8000984 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec2:	2b80      	cmp	r3, #128	; 0x80
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d107      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8e2 	bl	80030a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eee:	2b40      	cmp	r3, #64	; 0x40
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d107      	bne.n	8002f10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f838 	bl	8002f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b20      	cmp	r3, #32
 8002f1c:	d10e      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d107      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0220 	mvn.w	r2, #32
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8ac 	bl	8003094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a34      	ldr	r2, [pc, #208]	; (8003078 <TIM_Base_SetConfig+0xe4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00f      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a31      	ldr	r2, [pc, #196]	; (800307c <TIM_Base_SetConfig+0xe8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a30      	ldr	r2, [pc, #192]	; (8003080 <TIM_Base_SetConfig+0xec>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <TIM_Base_SetConfig+0xf0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d108      	bne.n	8002fde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a25      	ldr	r2, [pc, #148]	; (8003078 <TIM_Base_SetConfig+0xe4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01b      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d017      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <TIM_Base_SetConfig+0xe8>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d013      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a21      	ldr	r2, [pc, #132]	; (8003080 <TIM_Base_SetConfig+0xec>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00f      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a20      	ldr	r2, [pc, #128]	; (8003084 <TIM_Base_SetConfig+0xf0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00b      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a1f      	ldr	r2, [pc, #124]	; (8003088 <TIM_Base_SetConfig+0xf4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a1e      	ldr	r2, [pc, #120]	; (800308c <TIM_Base_SetConfig+0xf8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <TIM_Base_SetConfig+0xfc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d108      	bne.n	8003030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a08      	ldr	r2, [pc, #32]	; (8003078 <TIM_Base_SetConfig+0xe4>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d103      	bne.n	8003064 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	615a      	str	r2, [r3, #20]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010000 	.word	0x40010000
 800307c:	40000400 	.word	0x40000400
 8003080:	40000800 	.word	0x40000800
 8003084:	40000c00 	.word	0x40000c00
 8003088:	40014000 	.word	0x40014000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800

08003094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e03f      	b.n	800314e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fcea 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f929 	bl	8003358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	691a      	ldr	r2, [r3, #16]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b08a      	sub	sp, #40	; 0x28
 800315a:	af02      	add	r7, sp, #8
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	d17c      	bne.n	8003270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_UART_Transmit+0x2c>
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e075      	b.n	8003272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_UART_Transmit+0x3e>
 8003190:	2302      	movs	r3, #2
 8003192:	e06e      	b.n	8003272 <HAL_UART_Transmit+0x11c>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2221      	movs	r2, #33	; 0x21
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031aa:	f7fd fed1 	bl	8000f50 <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	88fa      	ldrh	r2, [r7, #6]
 80031b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d108      	bne.n	80031d8 <HAL_UART_Transmit+0x82>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	61bb      	str	r3, [r7, #24]
 80031d6:	e003      	b.n	80031e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80031e8:	e02a      	b.n	8003240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2180      	movs	r1, #128	; 0x80
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f840 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e036      	b.n	8003272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10b      	bne.n	8003222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	3302      	adds	r3, #2
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	e007      	b.n	8003232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	781a      	ldrb	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3301      	adds	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1cf      	bne.n	80031ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f810 	bl	800327a <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e006      	b.n	8003272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003270:	2302      	movs	r3, #2
  }
}
 8003272:	4618      	mov	r0, r3
 8003274:	3720      	adds	r7, #32
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b090      	sub	sp, #64	; 0x40
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328a:	e050      	b.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003292:	d04c      	beq.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
 800329a:	f7fd fe59 	bl	8000f50 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d241      	bcs.n	800332e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	330c      	adds	r3, #12
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	e853 3f00 	ldrex	r3, [r3]
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	330c      	adds	r3, #12
 80032c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ca:	637a      	str	r2, [r7, #52]	; 0x34
 80032cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e5      	bne.n	80032aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	613b      	str	r3, [r7, #16]
   return(result);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3314      	adds	r3, #20
 80032fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032fe:	623a      	str	r2, [r7, #32]
 8003300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003302:	69f9      	ldr	r1, [r7, #28]
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	61bb      	str	r3, [r7, #24]
   return(result);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1e5      	bne.n	80032de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e00f      	b.n	800334e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4013      	ands	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	bf0c      	ite	eq
 800333e:	2301      	moveq	r3, #1
 8003340:	2300      	movne	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	461a      	mov	r2, r3
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	429a      	cmp	r2, r3
 800334a:	d09f      	beq.n	800328c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3740      	adds	r7, #64	; 0x40
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b0c0      	sub	sp, #256	; 0x100
 800335e:	af00      	add	r7, sp, #0
 8003360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	68d9      	ldr	r1, [r3, #12]
 8003376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	ea40 0301 	orr.w	r3, r0, r1
 8003380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	431a      	orrs	r2, r3
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	431a      	orrs	r2, r3
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033b0:	f021 010c 	bic.w	r1, r1, #12
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033be:	430b      	orrs	r3, r1
 80033c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	6999      	ldr	r1, [r3, #24]
 80033d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	ea40 0301 	orr.w	r3, r0, r1
 80033de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <UART_SetConfig+0x2cc>)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d005      	beq.n	80033f8 <UART_SetConfig+0xa0>
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b8d      	ldr	r3, [pc, #564]	; (8003628 <UART_SetConfig+0x2d0>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d104      	bne.n	8003402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033f8:	f7fe fdfc 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 80033fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003400:	e003      	b.n	800340a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003402:	f7fe fde3 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8003406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800340a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003414:	f040 810c 	bne.w	8003630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800341c:	2200      	movs	r2, #0
 800341e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800342a:	4622      	mov	r2, r4
 800342c:	462b      	mov	r3, r5
 800342e:	1891      	adds	r1, r2, r2
 8003430:	65b9      	str	r1, [r7, #88]	; 0x58
 8003432:	415b      	adcs	r3, r3
 8003434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800343a:	4621      	mov	r1, r4
 800343c:	eb12 0801 	adds.w	r8, r2, r1
 8003440:	4629      	mov	r1, r5
 8003442:	eb43 0901 	adc.w	r9, r3, r1
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345a:	4690      	mov	r8, r2
 800345c:	4699      	mov	r9, r3
 800345e:	4623      	mov	r3, r4
 8003460:	eb18 0303 	adds.w	r3, r8, r3
 8003464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003468:	462b      	mov	r3, r5
 800346a:	eb49 0303 	adc.w	r3, r9, r3
 800346e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800347e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003486:	460b      	mov	r3, r1
 8003488:	18db      	adds	r3, r3, r3
 800348a:	653b      	str	r3, [r7, #80]	; 0x50
 800348c:	4613      	mov	r3, r2
 800348e:	eb42 0303 	adc.w	r3, r2, r3
 8003492:	657b      	str	r3, [r7, #84]	; 0x54
 8003494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800349c:	f7fc ff40 	bl	8000320 <__aeabi_uldivmod>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4b61      	ldr	r3, [pc, #388]	; (800362c <UART_SetConfig+0x2d4>)
 80034a6:	fba3 2302 	umull	r2, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	011c      	lsls	r4, r3, #4
 80034ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034c0:	4642      	mov	r2, r8
 80034c2:	464b      	mov	r3, r9
 80034c4:	1891      	adds	r1, r2, r2
 80034c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034c8:	415b      	adcs	r3, r3
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034d0:	4641      	mov	r1, r8
 80034d2:	eb12 0a01 	adds.w	sl, r2, r1
 80034d6:	4649      	mov	r1, r9
 80034d8:	eb43 0b01 	adc.w	fp, r3, r1
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f0:	4692      	mov	sl, r2
 80034f2:	469b      	mov	fp, r3
 80034f4:	4643      	mov	r3, r8
 80034f6:	eb1a 0303 	adds.w	r3, sl, r3
 80034fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034fe:	464b      	mov	r3, r9
 8003500:	eb4b 0303 	adc.w	r3, fp, r3
 8003504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800351c:	460b      	mov	r3, r1
 800351e:	18db      	adds	r3, r3, r3
 8003520:	643b      	str	r3, [r7, #64]	; 0x40
 8003522:	4613      	mov	r3, r2
 8003524:	eb42 0303 	adc.w	r3, r2, r3
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
 800352a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800352e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003532:	f7fc fef5 	bl	8000320 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4611      	mov	r1, r2
 800353c:	4b3b      	ldr	r3, [pc, #236]	; (800362c <UART_SetConfig+0x2d4>)
 800353e:	fba3 2301 	umull	r2, r3, r3, r1
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2264      	movs	r2, #100	; 0x64
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	1acb      	subs	r3, r1, r3
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <UART_SetConfig+0x2d4>)
 8003554:	fba3 2302 	umull	r2, r3, r3, r2
 8003558:	095b      	lsrs	r3, r3, #5
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003560:	441c      	add	r4, r3
 8003562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003566:	2200      	movs	r2, #0
 8003568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800356c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	1891      	adds	r1, r2, r2
 800357a:	63b9      	str	r1, [r7, #56]	; 0x38
 800357c:	415b      	adcs	r3, r3
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003584:	4641      	mov	r1, r8
 8003586:	1851      	adds	r1, r2, r1
 8003588:	6339      	str	r1, [r7, #48]	; 0x30
 800358a:	4649      	mov	r1, r9
 800358c:	414b      	adcs	r3, r1
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800359c:	4659      	mov	r1, fp
 800359e:	00cb      	lsls	r3, r1, #3
 80035a0:	4651      	mov	r1, sl
 80035a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035a6:	4651      	mov	r1, sl
 80035a8:	00ca      	lsls	r2, r1, #3
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	4642      	mov	r2, r8
 80035b2:	189b      	adds	r3, r3, r2
 80035b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b8:	464b      	mov	r3, r9
 80035ba:	460a      	mov	r2, r1
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035d8:	460b      	mov	r3, r1
 80035da:	18db      	adds	r3, r3, r3
 80035dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80035de:	4613      	mov	r3, r2
 80035e0:	eb42 0303 	adc.w	r3, r2, r3
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035ee:	f7fc fe97 	bl	8000320 <__aeabi_uldivmod>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4b0d      	ldr	r3, [pc, #52]	; (800362c <UART_SetConfig+0x2d4>)
 80035f8:	fba3 1302 	umull	r1, r3, r3, r2
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	2164      	movs	r1, #100	; 0x64
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	3332      	adds	r3, #50	; 0x32
 800360a:	4a08      	ldr	r2, [pc, #32]	; (800362c <UART_SetConfig+0x2d4>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	f003 0207 	and.w	r2, r3, #7
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4422      	add	r2, r4
 800361e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003620:	e105      	b.n	800382e <UART_SetConfig+0x4d6>
 8003622:	bf00      	nop
 8003624:	40011000 	.word	0x40011000
 8003628:	40011400 	.word	0x40011400
 800362c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003634:	2200      	movs	r2, #0
 8003636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800363a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800363e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003642:	4642      	mov	r2, r8
 8003644:	464b      	mov	r3, r9
 8003646:	1891      	adds	r1, r2, r2
 8003648:	6239      	str	r1, [r7, #32]
 800364a:	415b      	adcs	r3, r3
 800364c:	627b      	str	r3, [r7, #36]	; 0x24
 800364e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003652:	4641      	mov	r1, r8
 8003654:	1854      	adds	r4, r2, r1
 8003656:	4649      	mov	r1, r9
 8003658:	eb43 0501 	adc.w	r5, r3, r1
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	00eb      	lsls	r3, r5, #3
 8003666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800366a:	00e2      	lsls	r2, r4, #3
 800366c:	4614      	mov	r4, r2
 800366e:	461d      	mov	r5, r3
 8003670:	4643      	mov	r3, r8
 8003672:	18e3      	adds	r3, r4, r3
 8003674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003678:	464b      	mov	r3, r9
 800367a:	eb45 0303 	adc.w	r3, r5, r3
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800368e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800369e:	4629      	mov	r1, r5
 80036a0:	008b      	lsls	r3, r1, #2
 80036a2:	4621      	mov	r1, r4
 80036a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a8:	4621      	mov	r1, r4
 80036aa:	008a      	lsls	r2, r1, #2
 80036ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036b0:	f7fc fe36 	bl	8000320 <__aeabi_uldivmod>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4b60      	ldr	r3, [pc, #384]	; (800383c <UART_SetConfig+0x4e4>)
 80036ba:	fba3 2302 	umull	r2, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	011c      	lsls	r4, r3, #4
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	1891      	adds	r1, r2, r2
 80036da:	61b9      	str	r1, [r7, #24]
 80036dc:	415b      	adcs	r3, r3
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e4:	4641      	mov	r1, r8
 80036e6:	1851      	adds	r1, r2, r1
 80036e8:	6139      	str	r1, [r7, #16]
 80036ea:	4649      	mov	r1, r9
 80036ec:	414b      	adcs	r3, r1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036fc:	4659      	mov	r1, fp
 80036fe:	00cb      	lsls	r3, r1, #3
 8003700:	4651      	mov	r1, sl
 8003702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003706:	4651      	mov	r1, sl
 8003708:	00ca      	lsls	r2, r1, #3
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	4603      	mov	r3, r0
 8003710:	4642      	mov	r2, r8
 8003712:	189b      	adds	r3, r3, r2
 8003714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003718:	464b      	mov	r3, r9
 800371a:	460a      	mov	r2, r1
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	67bb      	str	r3, [r7, #120]	; 0x78
 800372e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800373c:	4649      	mov	r1, r9
 800373e:	008b      	lsls	r3, r1, #2
 8003740:	4641      	mov	r1, r8
 8003742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003746:	4641      	mov	r1, r8
 8003748:	008a      	lsls	r2, r1, #2
 800374a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800374e:	f7fc fde7 	bl	8000320 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <UART_SetConfig+0x4e4>)
 8003758:	fba3 1302 	umull	r1, r3, r3, r2
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	2164      	movs	r1, #100	; 0x64
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	3332      	adds	r3, #50	; 0x32
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <UART_SetConfig+0x4e4>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003776:	441c      	add	r4, r3
 8003778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800377c:	2200      	movs	r2, #0
 800377e:	673b      	str	r3, [r7, #112]	; 0x70
 8003780:	677a      	str	r2, [r7, #116]	; 0x74
 8003782:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003786:	4642      	mov	r2, r8
 8003788:	464b      	mov	r3, r9
 800378a:	1891      	adds	r1, r2, r2
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	415b      	adcs	r3, r3
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003796:	4641      	mov	r1, r8
 8003798:	1851      	adds	r1, r2, r1
 800379a:	6039      	str	r1, [r7, #0]
 800379c:	4649      	mov	r1, r9
 800379e:	414b      	adcs	r3, r1
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ae:	4659      	mov	r1, fp
 80037b0:	00cb      	lsls	r3, r1, #3
 80037b2:	4651      	mov	r1, sl
 80037b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037b8:	4651      	mov	r1, sl
 80037ba:	00ca      	lsls	r2, r1, #3
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	4603      	mov	r3, r0
 80037c2:	4642      	mov	r2, r8
 80037c4:	189b      	adds	r3, r3, r2
 80037c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c8:	464b      	mov	r3, r9
 80037ca:	460a      	mov	r2, r1
 80037cc:	eb42 0303 	adc.w	r3, r2, r3
 80037d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	663b      	str	r3, [r7, #96]	; 0x60
 80037dc:	667a      	str	r2, [r7, #100]	; 0x64
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037ea:	4649      	mov	r1, r9
 80037ec:	008b      	lsls	r3, r1, #2
 80037ee:	4641      	mov	r1, r8
 80037f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f4:	4641      	mov	r1, r8
 80037f6:	008a      	lsls	r2, r1, #2
 80037f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80037fc:	f7fc fd90 	bl	8000320 <__aeabi_uldivmod>
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <UART_SetConfig+0x4e4>)
 8003806:	fba3 1302 	umull	r1, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2164      	movs	r1, #100	; 0x64
 800380e:	fb01 f303 	mul.w	r3, r1, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a08      	ldr	r2, [pc, #32]	; (800383c <UART_SetConfig+0x4e4>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 020f 	and.w	r2, r3, #15
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4422      	add	r2, r4
 800382c:	609a      	str	r2, [r3, #8]
}
 800382e:	bf00      	nop
 8003830:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	51eb851f 	.word	0x51eb851f

08003840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800384a:	4b7f      	ldr	r3, [pc, #508]	; (8003a48 <xTaskIncrementTick+0x208>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 80f0 	bne.w	8003a34 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003854:	4b7d      	ldr	r3, [pc, #500]	; (8003a4c <xTaskIncrementTick+0x20c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800385c:	4a7b      	ldr	r2, [pc, #492]	; (8003a4c <xTaskIncrementTick+0x20c>)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d120      	bne.n	80038aa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003868:	4b79      	ldr	r3, [pc, #484]	; (8003a50 <xTaskIncrementTick+0x210>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003884:	bf00      	nop
 8003886:	e7fe      	b.n	8003886 <xTaskIncrementTick+0x46>
 8003888:	4b71      	ldr	r3, [pc, #452]	; (8003a50 <xTaskIncrementTick+0x210>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	4b71      	ldr	r3, [pc, #452]	; (8003a54 <xTaskIncrementTick+0x214>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6f      	ldr	r2, [pc, #444]	; (8003a50 <xTaskIncrementTick+0x210>)
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4a6f      	ldr	r2, [pc, #444]	; (8003a54 <xTaskIncrementTick+0x214>)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b6e      	ldr	r3, [pc, #440]	; (8003a58 <xTaskIncrementTick+0x218>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	4a6d      	ldr	r2, [pc, #436]	; (8003a58 <xTaskIncrementTick+0x218>)
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	f000 f94f 	bl	8003b48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80038aa:	4b6c      	ldr	r3, [pc, #432]	; (8003a5c <xTaskIncrementTick+0x21c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f0c0 80aa 	bcc.w	8003a0a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038b6:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <xTaskIncrementTick+0x210>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d104      	bne.n	80038ca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c0:	4b66      	ldr	r3, [pc, #408]	; (8003a5c <xTaskIncrementTick+0x21c>)
 80038c2:	f04f 32ff 	mov.w	r2, #4294967295
 80038c6:	601a      	str	r2, [r3, #0]
                    break;
 80038c8:	e09f      	b.n	8003a0a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ca:	4b61      	ldr	r3, [pc, #388]	; (8003a50 <xTaskIncrementTick+0x210>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d203      	bcs.n	80038ea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80038e2:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <xTaskIncrementTick+0x21c>)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80038e8:	e08f      	b.n	8003a0a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	68d2      	ldr	r2, [r2, #12]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	6892      	ldr	r2, [r2, #8]
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	3304      	adds	r3, #4
 800390c:	429a      	cmp	r2, r3
 800390e:	d103      	bne.n	8003918 <xTaskIncrementTick+0xd8>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2200      	movs	r2, #0
 800391c:	615a      	str	r2, [r3, #20]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	1e5a      	subs	r2, r3, #1
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01e      	beq.n	800396e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	6a12      	ldr	r2, [r2, #32]
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	69d2      	ldr	r2, [r2, #28]
 8003948:	605a      	str	r2, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3318      	adds	r3, #24
 8003952:	429a      	cmp	r2, r3
 8003954:	d103      	bne.n	800395e <xTaskIncrementTick+0x11e>
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	6a1a      	ldr	r2, [r3, #32]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	2200      	movs	r2, #0
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1e5a      	subs	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	4618      	mov	r0, r3
 8003972:	f001 f90f 	bl	8004b94 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397a:	2201      	movs	r2, #1
 800397c:	409a      	lsls	r2, r3
 800397e:	4b38      	ldr	r3, [pc, #224]	; (8003a60 <xTaskIncrementTick+0x220>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	4a36      	ldr	r2, [pc, #216]	; (8003a60 <xTaskIncrementTick+0x220>)
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	4935      	ldr	r1, [pc, #212]	; (8003a64 <xTaskIncrementTick+0x224>)
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	3304      	adds	r3, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	3204      	adds	r2, #4
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	609a      	str	r2, [r3, #8]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <xTaskIncrementTick+0x224>)
 80039cc:	441a      	add	r2, r3
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	615a      	str	r2, [r3, #20]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d6:	4923      	ldr	r1, [pc, #140]	; (8003a64 <xTaskIncrementTick+0x224>)
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1c59      	adds	r1, r3, #1
 80039e6:	481f      	ldr	r0, [pc, #124]	; (8003a64 <xTaskIncrementTick+0x224>)
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4403      	add	r3, r0
 80039f2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <xTaskIncrementTick+0x228>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fe:	429a      	cmp	r2, r3
 8003a00:	f67f af59 	bls.w	80038b6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a08:	e755      	b.n	80038b6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a0a:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <xTaskIncrementTick+0x228>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a10:	4914      	ldr	r1, [pc, #80]	; (8003a64 <xTaskIncrementTick+0x224>)
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d901      	bls.n	8003a26 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003a26:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <xTaskIncrementTick+0x22c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
 8003a32:	e004      	b.n	8003a3e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003a34:	4b0e      	ldr	r3, [pc, #56]	; (8003a70 <xTaskIncrementTick+0x230>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <xTaskIncrementTick+0x230>)
 8003a3c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3728      	adds	r7, #40	; 0x28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000314 	.word	0x20000314
 8003a4c:	200002f8 	.word	0x200002f8
 8003a50:	200002f0 	.word	0x200002f0
 8003a54:	200002f4 	.word	0x200002f4
 8003a58:	20000308 	.word	0x20000308
 8003a5c:	2000030c 	.word	0x2000030c
 8003a60:	200002fc 	.word	0x200002fc
 8003a64:	2000028c 	.word	0x2000028c
 8003a68:	20000288 	.word	0x20000288
 8003a6c:	20000304 	.word	0x20000304
 8003a70:	20000300 	.word	0x20000300

08003a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a7a:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <vTaskSwitchContext+0xbc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a82:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <vTaskSwitchContext+0xc0>)
 8003a84:	2201      	movs	r2, #1
 8003a86:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003a88:	e04d      	b.n	8003b26 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003a8a:	4b2a      	ldr	r3, [pc, #168]	; (8003b34 <vTaskSwitchContext+0xc0>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <vTaskSwitchContext+0xc4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	fab3 f383 	clz	r3, r3
 8003a9c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	f1c3 031f 	rsb	r3, r3, #31
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	4925      	ldr	r1, [pc, #148]	; (8003b3c <vTaskSwitchContext+0xc8>)
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	607b      	str	r3, [r7, #4]
    }
 8003acc:	bf00      	nop
 8003ace:	e7fe      	b.n	8003ace <vTaskSwitchContext+0x5a>
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a18      	ldr	r2, [pc, #96]	; (8003b3c <vTaskSwitchContext+0xc8>)
 8003adc:	4413      	add	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	3308      	adds	r3, #8
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d104      	bne.n	8003b00 <vTaskSwitchContext+0x8c>
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a0e      	ldr	r2, [pc, #56]	; (8003b40 <vTaskSwitchContext+0xcc>)
 8003b08:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <vTaskSwitchContext+0xcc>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <vTaskSwitchContext+0xd0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d102      	bne.n	8003b1c <vTaskSwitchContext+0xa8>
 8003b16:	f000 ffdf 	bl	8004ad8 <SEGGER_SYSVIEW_OnIdle>
}
 8003b1a:	e004      	b.n	8003b26 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <vTaskSwitchContext+0xcc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fff5 	bl	8004b10 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003b26:	bf00      	nop
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000314 	.word	0x20000314
 8003b34:	20000304 	.word	0x20000304
 8003b38:	200002fc 	.word	0x200002fc
 8003b3c:	2000028c 	.word	0x2000028c
 8003b40:	20000288 	.word	0x20000288
 8003b44:	20000310 	.word	0x20000310

08003b48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <prvResetNextTaskUnblockTime+0x30>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d104      	bne.n	8003b60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <prvResetNextTaskUnblockTime+0x34>)
 8003b58:	f04f 32ff 	mov.w	r2, #4294967295
 8003b5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b5e:	e005      	b.n	8003b6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <prvResetNextTaskUnblockTime+0x30>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <prvResetNextTaskUnblockTime+0x34>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	200002f0 	.word	0x200002f0
 8003b7c:	2000030c 	.word	0x2000030c

08003b80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	4770      	bx	lr
 8003b9c:	f3af 8000 	nop.w

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	20000288 	.word	0x20000288
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
	...

08003bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003bb0:	f3ef 8009 	mrs	r0, PSP
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <pxCurrentTCBConst>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	f01e 0f10 	tst.w	lr, #16
 8003bc0:	bf08      	it	eq
 8003bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bca:	6010      	str	r0, [r2, #0]
 8003bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003bd4:	f380 8811 	msr	BASEPRI, r0
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f7ff ff48 	bl	8003a74 <vTaskSwitchContext>
 8003be4:	f04f 0000 	mov.w	r0, #0
 8003be8:	f380 8811 	msr	BASEPRI, r0
 8003bec:	bc09      	pop	{r0, r3}
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	6808      	ldr	r0, [r1, #0]
 8003bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf6:	f01e 0f10 	tst.w	lr, #16
 8003bfa:	bf08      	it	eq
 8003bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c00:	f380 8809 	msr	PSP, r0
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	f3af 8000 	nop.w

08003c10 <pxCurrentTCBConst>:
 8003c10:	20000288 	.word	0x20000288
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop

08003c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	607b      	str	r3, [r7, #4]
    }
 8003c30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003c32:	f7ff fe05 	bl	8003840 <xTaskIncrementTick>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <SysTick_Handler+0x40>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003c4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c62:	4b26      	ldr	r3, [pc, #152]	; (8003cfc <_DoInit+0xa0>)
 8003c64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003c66:	22a8      	movs	r2, #168	; 0xa8
 8003c68:	2100      	movs	r1, #0
 8003c6a:	6838      	ldr	r0, [r7, #0]
 8003c6c:	f001 fc6c 	bl	8005548 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2203      	movs	r2, #3
 8003c74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4a20      	ldr	r2, [pc, #128]	; (8003d00 <_DoInit+0xa4>)
 8003c80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <_DoInit+0xa8>)
 8003c86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <_DoInit+0xa4>)
 8003ca6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <_DoInit+0xac>)
 8003cac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cc6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	e00c      	b.n	8003cea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f1c3 030f 	rsb	r3, r3, #15
 8003cd6:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <_DoInit+0xb0>)
 8003cd8:	5cd1      	ldrb	r1, [r2, r3]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	460a      	mov	r2, r1
 8003ce2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b0f      	cmp	r3, #15
 8003cee:	d9ef      	bls.n	8003cd0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cf0:	f3bf 8f5f 	dmb	sy
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000318 	.word	0x20000318
 8003d00:	08006638 	.word	0x08006638
 8003d04:	200003c0 	.word	0x200003c0
 8003d08:	200007c0 	.word	0x200007c0
 8003d0c:	08006674 	.word	0x08006674

08003d10 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d905      	bls.n	8003d40 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	e007      	b.n	8003d50 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	69b9      	ldr	r1, [r7, #24]
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	1acb      	subs	r3, r1, r3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	bf28      	it	cs
 8003d5e:	4613      	movcs	r3, r2
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4293      	cmp	r3, r2
 8003d68:	bf28      	it	cs
 8003d6a:	4613      	movcs	r3, r2
 8003d6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	6978      	ldr	r0, [r7, #20]
 8003d7e:	f001 fbd5 	bl	800552c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003d82:	6a3a      	ldr	r2, [r7, #32]
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	4413      	add	r3, r2
 8003d88:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	4413      	add	r3, r2
 8003d90:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	4413      	add	r3, r2
 8003da0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d101      	bne.n	8003db0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003db0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1b2      	bne.n	8003d26 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b088      	sub	sp, #32
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d911      	bls.n	8003e12 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	4413      	add	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	6938      	ldr	r0, [r7, #16]
 8003dfe:	f001 fb95 	bl	800552c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e02:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	441a      	add	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003e10:	e01f      	b.n	8003e52 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	685a      	ldr	r2, [r3, #4]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	6938      	ldr	r0, [r7, #16]
 8003e26:	f001 fb81 	bl	800552c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4619      	mov	r1, r3
 8003e42:	6938      	ldr	r0, [r7, #16]
 8003e44:	f001 fb72 	bl	800552c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e48:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	60da      	str	r2, [r3, #12]
}
 8003e52:	bf00      	nop
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003e5a:	b480      	push	{r7}
 8003e5c:	b087      	sub	sp, #28
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d808      	bhi.n	8003e88 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	1ad2      	subs	r2, r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	4413      	add	r3, r2
 8003e82:	3b01      	subs	r3, #1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	e004      	b.n	8003e92 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e92:	697b      	ldr	r3, [r7, #20]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003eac:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <SEGGER_RTT_ReadNoLock+0x1e>
 8003eba:	f7ff fecf 	bl	8003c5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	3360      	adds	r3, #96	; 0x60
 8003eca:	4a37      	ldr	r2, [pc, #220]	; (8003fa8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d92b      	bls.n	8003f44 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4293      	cmp	r3, r2
 8003efc:	bf28      	it	cs
 8003efe:	4613      	movcs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	4413      	add	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	6939      	ldr	r1, [r7, #16]
 8003f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f12:	f001 fb0b 	bl	800552c <memcpy>
    NumBytesRead += NumBytesRem;
 8003f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4413      	add	r3, r2
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	4413      	add	r3, r2
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d101      	bne.n	8003f44 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf28      	it	cs
 8003f54:	4613      	movcs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d019      	beq.n	8003f92 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	4413      	add	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	6939      	ldr	r1, [r7, #16]
 8003f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f6e:	f001 fadd 	bl	800552c <memcpy>
    NumBytesRead += NumBytesRem;
 8003f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4413      	add	r3, r2
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4413      	add	r3, r2
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4413      	add	r3, r2
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3730      	adds	r7, #48	; 0x30
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	20000318 	.word	0x20000318

08003fac <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003fca:	4413      	add	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d029      	beq.n	800402a <SEGGER_RTT_WriteNoLock+0x7e>
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d82e      	bhi.n	8004038 <SEGGER_RTT_WriteNoLock+0x8c>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <SEGGER_RTT_WriteNoLock+0x38>
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d013      	beq.n	800400a <SEGGER_RTT_WriteNoLock+0x5e>
 8003fe2:	e029      	b.n	8004038 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003fe4:	6978      	ldr	r0, [r7, #20]
 8003fe6:	f7ff ff38 	bl	8003e5a <_GetAvailWriteSpace>
 8003fea:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d202      	bcs.n	8003ffa <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003ff8:	e021      	b.n	800403e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	6978      	ldr	r0, [r7, #20]
 8004004:	f7ff fee1 	bl	8003dca <_WriteNoCheck>
    break;
 8004008:	e019      	b.n	800403e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800400a:	6978      	ldr	r0, [r7, #20]
 800400c:	f7ff ff25 	bl	8003e5a <_GetAvailWriteSpace>
 8004010:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	4293      	cmp	r3, r2
 8004018:	bf28      	it	cs
 800401a:	4613      	movcs	r3, r2
 800401c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	6978      	ldr	r0, [r7, #20]
 8004024:	f7ff fed1 	bl	8003dca <_WriteNoCheck>
    break;
 8004028:	e009      	b.n	800403e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	69b9      	ldr	r1, [r7, #24]
 800402e:	6978      	ldr	r0, [r7, #20]
 8004030:	f7ff fe6e 	bl	8003d10 <_WriteBlocking>
 8004034:	61f8      	str	r0, [r7, #28]
    break;
 8004036:	e002      	b.n	800403e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004038:	2300      	movs	r3, #0
 800403a:	61fb      	str	r3, [r7, #28]
    break;
 800403c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800403e:	69fb      	ldr	r3, [r7, #28]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000318 	.word	0x20000318

0800404c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <SEGGER_RTT_Write+0x48>)
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <SEGGER_RTT_Write+0x1e>
 8004066:	f7ff fdf9 	bl	8003c5c <_DoInit>
  SEGGER_RTT_LOCK();
 800406a:	f3ef 8311 	mrs	r3, BASEPRI
 800406e:	f04f 0120 	mov.w	r1, #32
 8004072:	f381 8811 	msr	BASEPRI, r1
 8004076:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f7ff ff95 	bl	8003fac <SEGGER_RTT_WriteNoLock>
 8004082:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800408a:	697b      	ldr	r3, [r7, #20]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000318 	.word	0x20000318

08004098 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004098:	b480      	push	{r7}
 800409a:	b087      	sub	sp, #28
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00f      	beq.n	80040ce <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80040ae:	e002      	b.n	80040b6 <_EncodeStr+0x1e>
      Len++;
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	3301      	adds	r3, #1
 80040b4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f6      	bne.n	80040b0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d901      	bls.n	80040ce <_EncodeStr+0x36>
      Len = Limit;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2bfe      	cmp	r3, #254	; 0xfe
 80040d2:	d806      	bhi.n	80040e2 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	60fa      	str	r2, [r7, #12]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e011      	b.n	8004106 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	22ff      	movs	r2, #255	; 0xff
 80040ea:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	60fa      	str	r2, [r7, #12]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	0a19      	lsrs	r1, r3, #8
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	60fa      	str	r2, [r7, #12]
 8004102:	b2ca      	uxtb	r2, r1
 8004104:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004106:	2300      	movs	r3, #0
 8004108:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800410a:	e00a      	b.n	8004122 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	1c53      	adds	r3, r2, #1
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	1c59      	adds	r1, r3, #1
 8004116:	60f9      	str	r1, [r7, #12]
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	701a      	strb	r2, [r3, #0]
    n++;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	3301      	adds	r3, #1
 8004120:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	429a      	cmp	r2, r3
 8004128:	d3f0      	bcc.n	800410c <_EncodeStr+0x74>
  }
  return pPayload;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3307      	adds	r3, #7
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004156:	4b35      	ldr	r3, [pc, #212]	; (800422c <_HandleIncomingPacket+0xdc>)
 8004158:	7e1b      	ldrb	r3, [r3, #24]
 800415a:	4618      	mov	r0, r3
 800415c:	1cfb      	adds	r3, r7, #3
 800415e:	2201      	movs	r2, #1
 8004160:	4619      	mov	r1, r3
 8004162:	f7ff fe9d 	bl	8003ea0 <SEGGER_RTT_ReadNoLock>
 8004166:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d052      	beq.n	8004214 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	2b80      	cmp	r3, #128	; 0x80
 8004172:	d031      	beq.n	80041d8 <_HandleIncomingPacket+0x88>
 8004174:	2b80      	cmp	r3, #128	; 0x80
 8004176:	dc40      	bgt.n	80041fa <_HandleIncomingPacket+0xaa>
 8004178:	2b07      	cmp	r3, #7
 800417a:	dc15      	bgt.n	80041a8 <_HandleIncomingPacket+0x58>
 800417c:	2b00      	cmp	r3, #0
 800417e:	dd3c      	ble.n	80041fa <_HandleIncomingPacket+0xaa>
 8004180:	3b01      	subs	r3, #1
 8004182:	2b06      	cmp	r3, #6
 8004184:	d839      	bhi.n	80041fa <_HandleIncomingPacket+0xaa>
 8004186:	a201      	add	r2, pc, #4	; (adr r2, 800418c <_HandleIncomingPacket+0x3c>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041af 	.word	0x080041af
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041bb 	.word	0x080041bb
 8004198:	080041c1 	.word	0x080041c1
 800419c:	080041c7 	.word	0x080041c7
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	080041d3 	.word	0x080041d3
 80041a8:	2b7f      	cmp	r3, #127	; 0x7f
 80041aa:	d035      	beq.n	8004218 <_HandleIncomingPacket+0xc8>
 80041ac:	e025      	b.n	80041fa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80041ae:	f000 fad3 	bl	8004758 <SEGGER_SYSVIEW_Start>
      break;
 80041b2:	e036      	b.n	8004222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80041b4:	f000 fb8a 	bl	80048cc <SEGGER_SYSVIEW_Stop>
      break;
 80041b8:	e033      	b.n	8004222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80041ba:	f000 fc5b 	bl	8004a74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80041be:	e030      	b.n	8004222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80041c0:	f000 fc44 	bl	8004a4c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80041c4:	e02d      	b.n	8004222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80041c6:	f000 fba7 	bl	8004918 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80041ca:	e02a      	b.n	8004222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80041cc:	f000 fdc2 	bl	8004d54 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80041d0:	e027      	b.n	8004222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80041d2:	f000 fda1 	bl	8004d18 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80041d6:	e024      	b.n	8004222 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <_HandleIncomingPacket+0xdc>)
 80041da:	7e1b      	ldrb	r3, [r3, #24]
 80041dc:	4618      	mov	r0, r3
 80041de:	1cfb      	adds	r3, r7, #3
 80041e0:	2201      	movs	r2, #1
 80041e2:	4619      	mov	r1, r3
 80041e4:	f7ff fe5c 	bl	8003ea0 <SEGGER_RTT_ReadNoLock>
 80041e8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fd10 	bl	8004c18 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80041f8:	e010      	b.n	800421c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	b25b      	sxtb	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da0e      	bge.n	8004220 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <_HandleIncomingPacket+0xdc>)
 8004204:	7e1b      	ldrb	r3, [r3, #24]
 8004206:	4618      	mov	r0, r3
 8004208:	1cfb      	adds	r3, r7, #3
 800420a:	2201      	movs	r2, #1
 800420c:	4619      	mov	r1, r3
 800420e:	f7ff fe47 	bl	8003ea0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004212:	e005      	b.n	8004220 <_HandleIncomingPacket+0xd0>
    }
  }
 8004214:	bf00      	nop
 8004216:	e004      	b.n	8004222 <_HandleIncomingPacket+0xd2>
      break;
 8004218:	bf00      	nop
 800421a:	e002      	b.n	8004222 <_HandleIncomingPacket+0xd2>
      break;
 800421c:	bf00      	nop
 800421e:	e000      	b.n	8004222 <_HandleIncomingPacket+0xd2>
      break;
 8004220:	bf00      	nop
}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	200007d0 	.word	0x200007d0

08004230 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b08c      	sub	sp, #48	; 0x30
 8004234:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004236:	2301      	movs	r3, #1
 8004238:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800423a:	1d3b      	adds	r3, r7, #4
 800423c:	3301      	adds	r3, #1
 800423e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004244:	4b31      	ldr	r3, [pc, #196]	; (800430c <_TrySendOverflowPacket+0xdc>)
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	62bb      	str	r3, [r7, #40]	; 0x28
 800424a:	e00b      	b.n	8004264 <_TrySendOverflowPacket+0x34>
 800424c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424e:	b2da      	uxtb	r2, r3
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	1c59      	adds	r1, r3, #1
 8004254:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	09db      	lsrs	r3, r3, #7
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	2b7f      	cmp	r3, #127	; 0x7f
 8004268:	d8f0      	bhi.n	800424c <_TrySendOverflowPacket+0x1c>
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004278:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800427a:	4b25      	ldr	r3, [pc, #148]	; (8004310 <_TrySendOverflowPacket+0xe0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004280:	4b22      	ldr	r3, [pc, #136]	; (800430c <_TrySendOverflowPacket+0xdc>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	e00b      	b.n	80042ac <_TrySendOverflowPacket+0x7c>
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	b2da      	uxtb	r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	6279      	str	r1, [r7, #36]	; 0x24
 800429e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	09db      	lsrs	r3, r3, #7
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	2b7f      	cmp	r3, #127	; 0x7f
 80042b0:	d8f0      	bhi.n	8004294 <_TrySendOverflowPacket+0x64>
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	627a      	str	r2, [r7, #36]	; 0x24
 80042b8:	6a3a      	ldr	r2, [r7, #32]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <_TrySendOverflowPacket+0xdc>)
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	4618      	mov	r0, r3
 80042c8:	1d3b      	adds	r3, r7, #4
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	1d3b      	adds	r3, r7, #4
 80042d2:	4619      	mov	r1, r3
 80042d4:	f7fb ff84 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80042d8:	4603      	mov	r3, r0
 80042da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80042e2:	4a0a      	ldr	r2, [pc, #40]	; (800430c <_TrySendOverflowPacket+0xdc>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <_TrySendOverflowPacket+0xdc>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <_TrySendOverflowPacket+0xdc>)
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e004      	b.n	8004300 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <_TrySendOverflowPacket+0xdc>)
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	3301      	adds	r3, #1
 80042fc:	4a03      	ldr	r2, [pc, #12]	; (800430c <_TrySendOverflowPacket+0xdc>)
 80042fe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004300:	693b      	ldr	r3, [r7, #16]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3730      	adds	r7, #48	; 0x30
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	200007d0 	.word	0x200007d0
 8004310:	e0001004 	.word	0xe0001004

08004314 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	; 0x28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004320:	4b98      	ldr	r3, [pc, #608]	; (8004584 <_SendPacket+0x270>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d010      	beq.n	800434a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004328:	4b96      	ldr	r3, [pc, #600]	; (8004584 <_SendPacket+0x270>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 812d 	beq.w	800458c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004332:	4b94      	ldr	r3, [pc, #592]	; (8004584 <_SendPacket+0x270>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d109      	bne.n	800434e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800433a:	f7ff ff79 	bl	8004230 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800433e:	4b91      	ldr	r3, [pc, #580]	; (8004584 <_SendPacket+0x270>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	f040 8124 	bne.w	8004590 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004348:	e001      	b.n	800434e <_SendPacket+0x3a>
    goto Send;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <_SendPacket+0x3c>
Send:
 800434e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b1f      	cmp	r3, #31
 8004354:	d809      	bhi.n	800436a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004356:	4b8b      	ldr	r3, [pc, #556]	; (8004584 <_SendPacket+0x270>)
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8115 	bne.w	8004594 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b17      	cmp	r3, #23
 800436e:	d807      	bhi.n	8004380 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e0c4      	b.n	800450a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b7f      	cmp	r3, #127	; 0x7f
 800438c:	d912      	bls.n	80043b4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	09da      	lsrs	r2, r3, #7
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b01      	subs	r3, #1
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	3a01      	subs	r2, #1
 80043a6:	60fa      	str	r2, [r7, #12]
 80043a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e006      	b.n	80043c2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b7e      	cmp	r3, #126	; 0x7e
 80043c6:	d807      	bhi.n	80043d8 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e098      	b.n	800450a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043de:	d212      	bcs.n	8004406 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	09da      	lsrs	r2, r3, #7
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	3a01      	subs	r2, #1
 80043f8:	60fa      	str	r2, [r7, #12]
 80043fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e081      	b.n	800450a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800440c:	d21d      	bcs.n	800444a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0b9a      	lsrs	r2, r3, #14
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b01      	subs	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	09db      	lsrs	r3, r3, #7
 8004422:	b2db      	uxtb	r3, r3
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	3a01      	subs	r2, #1
 8004428:	60fa      	str	r2, [r7, #12]
 800442a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442e:	b2da      	uxtb	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	3a01      	subs	r2, #1
 800443c:	60fa      	str	r2, [r7, #12]
 800443e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	e05f      	b.n	800450a <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004450:	d228      	bcs.n	80044a4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	0d5a      	lsrs	r2, r3, #21
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3b01      	subs	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	0b9b      	lsrs	r3, r3, #14
 8004466:	b2db      	uxtb	r3, r3
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	3a01      	subs	r2, #1
 800446c:	60fa      	str	r2, [r7, #12]
 800446e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	09db      	lsrs	r3, r3, #7
 800447c:	b2db      	uxtb	r3, r3
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	3a01      	subs	r2, #1
 8004482:	60fa      	str	r2, [r7, #12]
 8004484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004488:	b2da      	uxtb	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	b2db      	uxtb	r3, r3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	3a01      	subs	r2, #1
 8004496:	60fa      	str	r2, [r7, #12]
 8004498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e032      	b.n	800450a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	0f1a      	lsrs	r2, r3, #28
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0d5b      	lsrs	r3, r3, #21
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	3a01      	subs	r2, #1
 80044be:	60fa      	str	r2, [r7, #12]
 80044c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0b9b      	lsrs	r3, r3, #14
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	3a01      	subs	r2, #1
 80044d4:	60fa      	str	r2, [r7, #12]
 80044d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	09db      	lsrs	r3, r3, #7
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	3a01      	subs	r2, #1
 80044ea:	60fa      	str	r2, [r7, #12]
 80044ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	3a01      	subs	r2, #1
 80044fe:	60fa      	str	r2, [r7, #12]
 8004500:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800450a:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <_SendPacket+0x274>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004510:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <_SendPacket+0x270>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e00b      	b.n	800453c <_SendPacket+0x228>
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	b2da      	uxtb	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	1c59      	adds	r1, r3, #1
 800452c:	6279      	str	r1, [r7, #36]	; 0x24
 800452e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	09db      	lsrs	r3, r3, #7
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	2b7f      	cmp	r3, #127	; 0x7f
 8004540:	d8f0      	bhi.n	8004524 <_SendPacket+0x210>
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	627a      	str	r2, [r7, #36]	; 0x24
 8004548:	6a3a      	ldr	r2, [r7, #32]
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <_SendPacket+0x270>)
 8004554:	785b      	ldrb	r3, [r3, #1]
 8004556:	4618      	mov	r0, r3
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	461a      	mov	r2, r3
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	f7fb fe3d 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004566:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800456e:	4a05      	ldr	r2, [pc, #20]	; (8004584 <_SendPacket+0x270>)
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	60d3      	str	r3, [r2, #12]
 8004574:	e00f      	b.n	8004596 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004576:	4b03      	ldr	r3, [pc, #12]	; (8004584 <_SendPacket+0x270>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	b2da      	uxtb	r2, r3
 800457e:	4b01      	ldr	r3, [pc, #4]	; (8004584 <_SendPacket+0x270>)
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e008      	b.n	8004596 <_SendPacket+0x282>
 8004584:	200007d0 	.word	0x200007d0
 8004588:	e0001004 	.word	0xe0001004
    goto SendDone;
 800458c:	bf00      	nop
 800458e:	e002      	b.n	8004596 <_SendPacket+0x282>
      goto SendDone;
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <_SendPacket+0x282>
      goto SendDone;
 8004594:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <_SendPacket+0x2d4>)
 8004598:	7e1b      	ldrb	r3, [r3, #24]
 800459a:	4619      	mov	r1, r3
 800459c:	4a13      	ldr	r2, [pc, #76]	; (80045ec <_SendPacket+0x2d8>)
 800459e:	460b      	mov	r3, r1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	440b      	add	r3, r1
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	336c      	adds	r3, #108	; 0x6c
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <_SendPacket+0x2d4>)
 80045ae:	7e1b      	ldrb	r3, [r3, #24]
 80045b0:	4618      	mov	r0, r3
 80045b2:	490e      	ldr	r1, [pc, #56]	; (80045ec <_SendPacket+0x2d8>)
 80045b4:	4603      	mov	r3, r0
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	4403      	add	r3, r0
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	440b      	add	r3, r1
 80045be:	3370      	adds	r3, #112	; 0x70
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d00b      	beq.n	80045de <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <_SendPacket+0x2d4>)
 80045c8:	789b      	ldrb	r3, [r3, #2]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d107      	bne.n	80045de <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <_SendPacket+0x2d4>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80045d4:	f7ff fdbc 	bl	8004150 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <_SendPacket+0x2d4>)
 80045da:	2200      	movs	r2, #0
 80045dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80045de:	bf00      	nop
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	200007d0 	.word	0x200007d0
 80045ec:	20000318 	.word	0x20000318

080045f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045f8:	f3ef 8311 	mrs	r3, BASEPRI
 80045fc:	f04f 0120 	mov.w	r1, #32
 8004600:	f381 8811 	msr	BASEPRI, r1
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	4808      	ldr	r0, [pc, #32]	; (8004628 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004608:	f7ff fd96 	bl	8004138 <_PreparePacket>
 800460c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68b8      	ldr	r0, [r7, #8]
 8004614:	f7ff fe7e 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f383 8811 	msr	BASEPRI, r3
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000800 	.word	0x20000800

0800462c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004636:	f3ef 8311 	mrs	r3, BASEPRI
 800463a:	f04f 0120 	mov.w	r1, #32
 800463e:	f381 8811 	msr	BASEPRI, r1
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	4816      	ldr	r0, [pc, #88]	; (80046a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004646:	f7ff fd77 	bl	8004138 <_PreparePacket>
 800464a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	61fb      	str	r3, [r7, #28]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	e00b      	b.n	8004672 <SEGGER_SYSVIEW_RecordU32+0x46>
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	1c59      	adds	r1, r3, #1
 8004662:	61f9      	str	r1, [r7, #28]
 8004664:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	09db      	lsrs	r3, r3, #7
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	2b7f      	cmp	r3, #127	; 0x7f
 8004676:	d8f0      	bhi.n	800465a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	61fa      	str	r2, [r7, #28]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	6938      	ldr	r0, [r7, #16]
 800468e:	f7ff fe41 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f383 8811 	msr	BASEPRI, r3
}
 8004698:	bf00      	nop
 800469a:	3720      	adds	r7, #32
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000800 	.word	0x20000800

080046a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08c      	sub	sp, #48	; 0x30
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80046b0:	f3ef 8311 	mrs	r3, BASEPRI
 80046b4:	f04f 0120 	mov.w	r1, #32
 80046b8:	f381 8811 	msr	BASEPRI, r1
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	4825      	ldr	r0, [pc, #148]	; (8004754 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80046c0:	f7ff fd3a 	bl	8004138 <_PreparePacket>
 80046c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	e00b      	b.n	80046ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	1c59      	adds	r1, r3, #1
 80046dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	09db      	lsrs	r3, r3, #7
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	2b7f      	cmp	r3, #127	; 0x7f
 80046f0:	d8f0      	bhi.n	80046d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	e00b      	b.n	8004724 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	1c59      	adds	r1, r3, #1
 8004714:	6279      	str	r1, [r7, #36]	; 0x24
 8004716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	09db      	lsrs	r3, r3, #7
 8004722:	623b      	str	r3, [r7, #32]
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b7f      	cmp	r3, #127	; 0x7f
 8004728:	d8f0      	bhi.n	800470c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	627a      	str	r2, [r7, #36]	; 0x24
 8004730:	6a3a      	ldr	r2, [r7, #32]
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	6979      	ldr	r1, [r7, #20]
 800473e:	69b8      	ldr	r0, [r7, #24]
 8004740:	f7ff fde8 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f383 8811 	msr	BASEPRI, r3
}
 800474a:	bf00      	nop
 800474c:	3730      	adds	r7, #48	; 0x30
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	20000800 	.word	0x20000800

08004758 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b08c      	sub	sp, #48	; 0x30
 800475c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800475e:	4b58      	ldr	r3, [pc, #352]	; (80048c0 <SEGGER_SYSVIEW_Start+0x168>)
 8004760:	2201      	movs	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004764:	f3ef 8311 	mrs	r3, BASEPRI
 8004768:	f04f 0120 	mov.w	r1, #32
 800476c:	f381 8811 	msr	BASEPRI, r1
 8004770:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004772:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <SEGGER_SYSVIEW_Start+0x168>)
 8004774:	785b      	ldrb	r3, [r3, #1]
 8004776:	220a      	movs	r2, #10
 8004778:	4952      	ldr	r1, [pc, #328]	; (80048c4 <SEGGER_SYSVIEW_Start+0x16c>)
 800477a:	4618      	mov	r0, r3
 800477c:	f7fb fd30 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004786:	200a      	movs	r0, #10
 8004788:	f7ff ff32 	bl	80045f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800478c:	f3ef 8311 	mrs	r3, BASEPRI
 8004790:	f04f 0120 	mov.w	r1, #32
 8004794:	f381 8811 	msr	BASEPRI, r1
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	484b      	ldr	r0, [pc, #300]	; (80048c8 <SEGGER_SYSVIEW_Start+0x170>)
 800479c:	f7ff fccc 	bl	8004138 <_PreparePacket>
 80047a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047aa:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <SEGGER_SYSVIEW_Start+0x168>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	e00b      	b.n	80047ca <SEGGER_SYSVIEW_Start+0x72>
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	1c59      	adds	r1, r3, #1
 80047ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	09db      	lsrs	r3, r3, #7
 80047c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	2b7f      	cmp	r3, #127	; 0x7f
 80047ce:	d8f0      	bhi.n	80047b2 <SEGGER_SYSVIEW_Start+0x5a>
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <SEGGER_SYSVIEW_Start+0x168>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	623b      	str	r3, [r7, #32]
 80047ea:	e00b      	b.n	8004804 <SEGGER_SYSVIEW_Start+0xac>
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	6279      	str	r1, [r7, #36]	; 0x24
 80047f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	6a3b      	ldr	r3, [r7, #32]
 8004800:	09db      	lsrs	r3, r3, #7
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b7f      	cmp	r3, #127	; 0x7f
 8004808:	d8f0      	bhi.n	80047ec <SEGGER_SYSVIEW_Start+0x94>
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	627a      	str	r2, [r7, #36]	; 0x24
 8004810:	6a3a      	ldr	r2, [r7, #32]
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	61fb      	str	r3, [r7, #28]
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <SEGGER_SYSVIEW_Start+0x168>)
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	61bb      	str	r3, [r7, #24]
 8004824:	e00b      	b.n	800483e <SEGGER_SYSVIEW_Start+0xe6>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	1c59      	adds	r1, r3, #1
 800482e:	61f9      	str	r1, [r7, #28]
 8004830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	09db      	lsrs	r3, r3, #7
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b7f      	cmp	r3, #127	; 0x7f
 8004842:	d8f0      	bhi.n	8004826 <SEGGER_SYSVIEW_Start+0xce>
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	61fa      	str	r2, [r7, #28]
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	e00b      	b.n	8004876 <SEGGER_SYSVIEW_Start+0x11e>
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	b2da      	uxtb	r2, r3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	1c59      	adds	r1, r3, #1
 8004866:	6179      	str	r1, [r7, #20]
 8004868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	09db      	lsrs	r3, r3, #7
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b7f      	cmp	r3, #127	; 0x7f
 800487a:	d8f0      	bhi.n	800485e <SEGGER_SYSVIEW_Start+0x106>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	617a      	str	r2, [r7, #20]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800488c:	2218      	movs	r2, #24
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fd3f 	bl	8004314 <_SendPacket>
      RECORD_END();
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <SEGGER_SYSVIEW_Start+0x168>)
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80048a4:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <SEGGER_SYSVIEW_Start+0x168>)
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80048aa:	f000 f8e3 	bl	8004a74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80048ae:	f000 f8cd 	bl	8004a4c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80048b2:	f000 fa4f 	bl	8004d54 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80048b6:	bf00      	nop
 80048b8:	3730      	adds	r7, #48	; 0x30
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	200007d0 	.word	0x200007d0
 80048c4:	08006688 	.word	0x08006688
 80048c8:	20000800 	.word	0x20000800

080048cc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048d2:	f3ef 8311 	mrs	r3, BASEPRI
 80048d6:	f04f 0120 	mov.w	r1, #32
 80048da:	f381 8811 	msr	BASEPRI, r1
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	480b      	ldr	r0, [pc, #44]	; (8004910 <SEGGER_SYSVIEW_Stop+0x44>)
 80048e2:	f7ff fc29 	bl	8004138 <_PreparePacket>
 80048e6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <SEGGER_SYSVIEW_Stop+0x48>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80048f0:	220b      	movs	r2, #11
 80048f2:	6839      	ldr	r1, [r7, #0]
 80048f4:	6838      	ldr	r0, [r7, #0]
 80048f6:	f7ff fd0d 	bl	8004314 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <SEGGER_SYSVIEW_Stop+0x48>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f383 8811 	msr	BASEPRI, r3
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000800 	.word	0x20000800
 8004914:	200007d0 	.word	0x200007d0

08004918 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b08c      	sub	sp, #48	; 0x30
 800491c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800491e:	f3ef 8311 	mrs	r3, BASEPRI
 8004922:	f04f 0120 	mov.w	r1, #32
 8004926:	f381 8811 	msr	BASEPRI, r1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	4845      	ldr	r0, [pc, #276]	; (8004a44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800492e:	f7ff fc03 	bl	8004138 <_PreparePacket>
 8004932:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493c:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	e00b      	b.n	800495c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004946:	b2da      	uxtb	r2, r3
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800494e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	09db      	lsrs	r3, r3, #7
 800495a:	62bb      	str	r3, [r7, #40]	; 0x28
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	2b7f      	cmp	r3, #127	; 0x7f
 8004960:	d8f0      	bhi.n	8004944 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	e00b      	b.n	8004996 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	6279      	str	r1, [r7, #36]	; 0x24
 8004988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	09db      	lsrs	r3, r3, #7
 8004994:	623b      	str	r3, [r7, #32]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	2b7f      	cmp	r3, #127	; 0x7f
 800499a:	d8f0      	bhi.n	800497e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	627a      	str	r2, [r7, #36]	; 0x24
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e00b      	b.n	80049d0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	1c59      	adds	r1, r3, #1
 80049c0:	61f9      	str	r1, [r7, #28]
 80049c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c6:	b2d2      	uxtb	r2, r2
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	09db      	lsrs	r3, r3, #7
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b7f      	cmp	r3, #127	; 0x7f
 80049d4:	d8f0      	bhi.n	80049b8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	61fa      	str	r2, [r7, #28]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	e00b      	b.n	8004a08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1c59      	adds	r1, r3, #1
 80049f8:	6179      	str	r1, [r7, #20]
 80049fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	09db      	lsrs	r3, r3, #7
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a0c:	d8f0      	bhi.n	80049f0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	617a      	str	r2, [r7, #20]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a1e:	2218      	movs	r2, #24
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f7ff fc76 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a2e:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a36:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	4798      	blx	r3
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3730      	adds	r7, #48	; 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000800 	.word	0x20000800
 8004a48:	200007d0 	.word	0x200007d0

08004a4c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d008      	beq.n	8004a6a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004a62:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4798      	blx	r3
  }
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	200007d0 	.word	0x200007d0

08004a74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004a7a:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01a      	beq.n	8004ab8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d015      	beq.n	8004ab8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004a8c:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4798      	blx	r3
 8004a94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a98:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004a9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	000a      	movs	r2, r1
 8004aa8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004aaa:	4613      	mov	r3, r2
 8004aac:	461a      	mov	r2, r3
 8004aae:	4621      	mov	r1, r4
 8004ab0:	200d      	movs	r0, #13
 8004ab2:	f7ff fdf7 	bl	80046a4 <SEGGER_SYSVIEW_RecordU32x2>
 8004ab6:	e006      	b.n	8004ac6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4619      	mov	r1, r3
 8004abe:	200c      	movs	r0, #12
 8004ac0:	f7ff fdb4 	bl	800462c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd90      	pop	{r4, r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200007d0 	.word	0x200007d0
 8004ad4:	e0001004 	.word	0xe0001004

08004ad8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ade:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae2:	f04f 0120 	mov.w	r1, #32
 8004ae6:	f381 8811 	msr	BASEPRI, r1
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	4807      	ldr	r0, [pc, #28]	; (8004b0c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004aee:	f7ff fb23 	bl	8004138 <_PreparePacket>
 8004af2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004af4:	2211      	movs	r2, #17
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f7ff fc0b 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f383 8811 	msr	BASEPRI, r3
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20000800 	.word	0x20000800

08004b10 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b18:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1c:	f04f 0120 	mov.w	r1, #32
 8004b20:	f381 8811 	msr	BASEPRI, r1
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	4819      	ldr	r0, [pc, #100]	; (8004b8c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004b28:	f7ff fb06 	bl	8004138 <_PreparePacket>
 8004b2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b32:	4b17      	ldr	r3, [pc, #92]	; (8004b90 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e00b      	b.n	8004b5e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	1c59      	adds	r1, r3, #1
 8004b4e:	61f9      	str	r1, [r7, #28]
 8004b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	09db      	lsrs	r3, r3, #7
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b7f      	cmp	r3, #127	; 0x7f
 8004b62:	d8f0      	bhi.n	8004b46 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	61fa      	str	r2, [r7, #28]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004b74:	2204      	movs	r2, #4
 8004b76:	68f9      	ldr	r1, [r7, #12]
 8004b78:	6938      	ldr	r0, [r7, #16]
 8004b7a:	f7ff fbcb 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f383 8811 	msr	BASEPRI, r3
}
 8004b84:	bf00      	nop
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000800 	.word	0x20000800
 8004b90:	200007d0 	.word	0x200007d0

08004b94 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba0:	f04f 0120 	mov.w	r1, #32
 8004ba4:	f381 8811 	msr	BASEPRI, r1
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	4819      	ldr	r0, [pc, #100]	; (8004c10 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004bac:	f7ff fac4 	bl	8004138 <_PreparePacket>
 8004bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004bb6:	4b17      	ldr	r3, [pc, #92]	; (8004c14 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e00b      	b.n	8004be2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	1c59      	adds	r1, r3, #1
 8004bd2:	61f9      	str	r1, [r7, #28]
 8004bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	09db      	lsrs	r3, r3, #7
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b7f      	cmp	r3, #127	; 0x7f
 8004be6:	d8f0      	bhi.n	8004bca <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	61fa      	str	r2, [r7, #28]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004bf8:	2206      	movs	r2, #6
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	6938      	ldr	r0, [r7, #16]
 8004bfe:	f7ff fb89 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f383 8811 	msr	BASEPRI, r3
}
 8004c08:	bf00      	nop
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	20000800 	.word	0x20000800
 8004c14:	200007d0 	.word	0x200007d0

08004c18 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004c22:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d06d      	beq.n	8004d06 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004c2a:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004c30:	2300      	movs	r3, #0
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c34:	e008      	b.n	8004c48 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	3301      	adds	r3, #1
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c48:	79fb      	ldrb	r3, [r7, #7]
 8004c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d3f2      	bcc.n	8004c36 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004c50:	e000      	b.n	8004c54 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004c52:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d055      	beq.n	8004d06 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5e:	f04f 0120 	mov.w	r1, #32
 8004c62:	f381 8811 	msr	BASEPRI, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	482a      	ldr	r0, [pc, #168]	; (8004d14 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004c6a:	f7ff fa65 	bl	8004138 <_PreparePacket>
 8004c6e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	e00b      	b.n	8004c96 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	6279      	str	r1, [r7, #36]	; 0x24
 8004c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	09db      	lsrs	r3, r3, #7
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9a:	d8f0      	bhi.n	8004c7e <SEGGER_SYSVIEW_SendModule+0x66>
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	627a      	str	r2, [r7, #36]	; 0x24
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	61bb      	str	r3, [r7, #24]
 8004cb6:	e00b      	b.n	8004cd0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	61f9      	str	r1, [r7, #28]
 8004cc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	09db      	lsrs	r3, r3, #7
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd4:	d8f0      	bhi.n	8004cb8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	61fa      	str	r2, [r7, #28]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2280      	movs	r2, #128	; 0x80
 8004cec:	4619      	mov	r1, r3
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff f9d2 	bl	8004098 <_EncodeStr>
 8004cf4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004cf6:	2216      	movs	r2, #22
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	6938      	ldr	r0, [r7, #16]
 8004cfc:	f7ff fb0a 	bl	8004314 <_SendPacket>
      RECORD_END();
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004d06:	bf00      	nop
 8004d08:	3730      	adds	r7, #48	; 0x30
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	200007f8 	.word	0x200007f8
 8004d14:	20000800 	.word	0x20000800

08004d18 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00f      	beq.n	8004d46 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f2      	bne.n	8004d2c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200007f8 	.word	0x200007f8

08004d54 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004d5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5e:	f04f 0120 	mov.w	r1, #32
 8004d62:	f381 8811 	msr	BASEPRI, r1
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	4817      	ldr	r0, [pc, #92]	; (8004dc8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004d6a:	f7ff f9e5 	bl	8004138 <_PreparePacket>
 8004d6e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	e00b      	b.n	8004d98 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1c59      	adds	r1, r3, #1
 8004d88:	6179      	str	r1, [r7, #20]
 8004d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8e:	b2d2      	uxtb	r2, r2
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	09db      	lsrs	r3, r3, #7
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9c:	d8f0      	bhi.n	8004d80 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	617a      	str	r2, [r7, #20]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004dae:	221b      	movs	r2, #27
 8004db0:	6879      	ldr	r1, [r7, #4]
 8004db2:	68b8      	ldr	r0, [r7, #8]
 8004db4:	f7ff faae 	bl	8004314 <_SendPacket>
  RECORD_END();
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f383 8811 	msr	BASEPRI, r3
}
 8004dbe:	bf00      	nop
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000800 	.word	0x20000800
 8004dcc:	200007fc 	.word	0x200007fc

08004dd0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
 8004ddc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	2000      	movs	r0, #0
 8004de4:	f7ff f932 	bl	800404c <SEGGER_RTT_Write>
  return len;
 8004de8:	683b      	ldr	r3, [r7, #0]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t* serNum);

void spi_cs_rfid_write(bool state)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71fb      	strb	r3, [r7, #7]
	if(state)
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <spi_cs_rfid_write+0x18>
	{
		MFRC522_CS_HIGH();
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <spi_cs_rfid_write+0x2c>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	619a      	str	r2, [r3, #24]
	}
	else
	{
		MFRC522_CS_LOW();
	}
}
 8004e0a:	e003      	b.n	8004e14 <spi_cs_rfid_write+0x20>
		MFRC522_CS_LOW();
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <spi_cs_rfid_write+0x2c>)
 8004e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e12:	619a      	str	r2, [r3, #24]
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr
 8004e20:	40020400 	.word	0x40020400

08004e24 <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	71fb      	strb	r3, [r7, #7]
  spi_cs_rfid_write(0);
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7ff ffe0 	bl	8004df4 <spi_cs_rfid_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	b25b      	sxtb	r3, r3
 8004e3a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&spi1,(uint8_t *)&reg,1,100);
 8004e4a:	1df9      	adds	r1, r7, #7
 8004e4c:	2364      	movs	r3, #100	; 0x64
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4809      	ldr	r0, [pc, #36]	; (8004e78 <rc522_regRead8+0x54>)
 8004e52:	f7fd f99e 	bl	8002192 <HAL_SPI_Transmit>
  uint8_t dataRd=0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]
  HAL_SPI_Receive(&spi1,(uint8_t *)&dataRd,1,100);
 8004e5a:	f107 010f 	add.w	r1, r7, #15
 8004e5e:	2364      	movs	r3, #100	; 0x64
 8004e60:	2201      	movs	r2, #1
 8004e62:	4805      	ldr	r0, [pc, #20]	; (8004e78 <rc522_regRead8+0x54>)
 8004e64:	f7fd fad1 	bl	800240a <HAL_SPI_Receive>
  spi_cs_rfid_write(1);
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f7ff ffc3 	bl	8004df4 <spi_cs_rfid_write>
  return dataRd;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200000d4 	.word	0x200000d4

08004e7c <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	460a      	mov	r2, r1
 8004e86:	71fb      	strb	r3, [r7, #7]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	71bb      	strb	r3, [r7, #6]
  spi_cs_rfid_write(0);
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f7ff ffb1 	bl	8004df4 <spi_cs_rfid_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	733b      	strb	r3, [r7, #12]
 8004ea0:	79bb      	ldrb	r3, [r7, #6]
 8004ea2:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(&spi1,(uint8_t *)&txData,2,100);
 8004ea4:	f107 010c 	add.w	r1, r7, #12
 8004ea8:	2364      	movs	r3, #100	; 0x64
 8004eaa:	2202      	movs	r2, #2
 8004eac:	4804      	ldr	r0, [pc, #16]	; (8004ec0 <rc522_regWrite8+0x44>)
 8004eae:	f7fd f970 	bl	8002192 <HAL_SPI_Transmit>
  spi_cs_rfid_write(1);
 8004eb2:	2001      	movs	r0, #1
 8004eb4:	f7ff ff9e 	bl	8004df4 <spi_cs_rfid_write>
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	200000d4 	.word	0x200000d4

08004ec4 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460a      	mov	r2, r1
 8004ece:	71fb      	strb	r3, [r7, #7]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff ffa4 	bl	8004e24 <rc522_regRead8>
 8004edc:	4603      	mov	r3, r0
 8004ede:	461a      	mov	r2, r3
 8004ee0:	79bb      	ldrb	r3, [r7, #6]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff ffc6 	bl	8004e7c <rc522_regWrite8>
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	460a      	mov	r2, r1
 8004f02:	71fb      	strb	r3, [r7, #7]
 8004f04:	4613      	mov	r3, r2
 8004f06:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff ff8a 	bl	8004e24 <rc522_regRead8>
 8004f10:	4603      	mov	r3, r0
 8004f12:	b25a      	sxtb	r2, r3
 8004f14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	b25b      	sxtb	r3, r3
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	79fb      	ldrb	r3, [r7, #7]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff ffa8 	bl	8004e7c <rc522_regWrite8>
}
 8004f2c:	bf00      	nop
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 8004f38:	210f      	movs	r1, #15
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f7ff ff9e 	bl	8004e7c <rc522_regWrite8>
}
 8004f40:	bf00      	nop
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 8004f4a:	2014      	movs	r0, #20
 8004f4c:	f7ff ff6a 	bl	8004e24 <rc522_regRead8>
 8004f50:	4603      	mov	r3, r0
 8004f52:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d103      	bne.n	8004f66 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 8004f5e:	2103      	movs	r1, #3
 8004f60:	2014      	movs	r0, #20
 8004f62:	f7ff ffaf 	bl	8004ec4 <rc522_setBit>
  }
}
 8004f66:	bf00      	nop
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  bool status=false;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	2026      	movs	r0, #38	; 0x26
 8004f7e:	f000 f811 	bl	8004fa4 <rc522_request>
 8004f82:	4603      	mov	r3, r0
 8004f84:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 8004f86:	7bfb      	ldrb	r3, [r7, #15]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f904 	bl	800519a <rc522_antiColl>
 8004f92:	4603      	mov	r3, r0
 8004f94:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 8004f96:	f000 f93d 	bl	8005214 <rc522_halt>

    return status;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	4603      	mov	r3, r0
 8004fac:	6039      	str	r1, [r7, #0]
 8004fae:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 8004fb4:	2107      	movs	r1, #7
 8004fb6:	200d      	movs	r0, #13
 8004fb8:	f7ff ff60 	bl	8004e7c <rc522_regWrite8>
  tagType[0] = reqMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	79fa      	ldrb	r2, [r7, #7]
 8004fc0:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 8004fc2:	f107 030c 	add.w	r3, r7, #12
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	200c      	movs	r0, #12
 8004fd0:	f000 f812 	bl	8004ff8 <rc522_toCard>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	f083 0301 	eor.w	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <rc522_request+0x46>
 8004fe4:	89bb      	ldrh	r3, [r7, #12]
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d001      	beq.n	8004fee <rc522_request+0x4a>
    status = false;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607b      	str	r3, [r7, #4]
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]
 8005006:	4613      	mov	r3, r2
 8005008:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]
  uint8_t irqEn = 0x00;
 800500e:	2300      	movs	r3, #0
 8005010:	75bb      	strb	r3, [r7, #22]
  uint8_t waitIRq = 0x00;
 8005012:	2300      	movs	r3, #0
 8005014:	757b      	strb	r3, [r7, #21]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	2b0c      	cmp	r3, #12
 800501a:	d006      	beq.n	800502a <rc522_toCard+0x32>
 800501c:	2b0e      	cmp	r3, #14
 800501e:	d109      	bne.n	8005034 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 8005020:	2312      	movs	r3, #18
 8005022:	75bb      	strb	r3, [r7, #22]
      waitIRq = 0x10;
 8005024:	2310      	movs	r3, #16
 8005026:	757b      	strb	r3, [r7, #21]
      break;
 8005028:	e005      	b.n	8005036 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 800502a:	2377      	movs	r3, #119	; 0x77
 800502c:	75bb      	strb	r3, [r7, #22]
      waitIRq = 0x30;
 800502e:	2330      	movs	r3, #48	; 0x30
 8005030:	757b      	strb	r3, [r7, #21]
      break;
 8005032:	e000      	b.n	8005036 <rc522_toCard+0x3e>
    }
    default:
      break;
 8005034:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8005036:	7dbb      	ldrb	r3, [r7, #22]
 8005038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800503c:	b2db      	uxtb	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	2002      	movs	r0, #2
 8005042:	f7ff ff1b 	bl	8004e7c <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	2004      	movs	r0, #4
 800504a:	f7ff ff55 	bl	8004ef8 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 800504e:	2180      	movs	r1, #128	; 0x80
 8005050:	200a      	movs	r0, #10
 8005052:	f7ff ff37 	bl	8004ec4 <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 8005056:	2100      	movs	r1, #0
 8005058:	2001      	movs	r0, #1
 800505a:	f7ff ff0f 	bl	8004e7c <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 800505e:	2300      	movs	r3, #0
 8005060:	827b      	strh	r3, [r7, #18]
 8005062:	e00a      	b.n	800507a <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8005064:	8a7b      	ldrh	r3, [r7, #18]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4413      	add	r3, r2
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	2009      	movs	r0, #9
 8005070:	f7ff ff04 	bl	8004e7c <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	3301      	adds	r3, #1
 8005078:	827b      	strh	r3, [r7, #18]
 800507a:	7bbb      	ldrb	r3, [r7, #14]
 800507c:	b29b      	uxth	r3, r3
 800507e:	8a7a      	ldrh	r2, [r7, #18]
 8005080:	429a      	cmp	r2, r3
 8005082:	d3ef      	bcc.n	8005064 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	4619      	mov	r1, r3
 8005088:	2001      	movs	r0, #1
 800508a:	f7ff fef7 	bl	8004e7c <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b0c      	cmp	r3, #12
 8005092:	d103      	bne.n	800509c <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8005094:	2180      	movs	r1, #128	; 0x80
 8005096:	200d      	movs	r0, #13
 8005098:	f7ff ff14 	bl	8004ec4 <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 800509c:	2364      	movs	r3, #100	; 0x64
 800509e:	827b      	strh	r3, [r7, #18]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 80050a0:	2004      	movs	r0, #4
 80050a2:	f7ff febf 	bl	8004e24 <rc522_regRead8>
 80050a6:	4603      	mov	r3, r0
 80050a8:	753b      	strb	r3, [r7, #20]
    i--;
 80050aa:	8a7b      	ldrh	r3, [r7, #18]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	827b      	strh	r3, [r7, #18]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80050b0:	8a7b      	ldrh	r3, [r7, #18]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <rc522_toCard+0xd4>
 80050b6:	7d3b      	ldrb	r3, [r7, #20]
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d105      	bne.n	80050cc <rc522_toCard+0xd4>
 80050c0:	7d3a      	ldrb	r2, [r7, #20]
 80050c2:	7d7b      	ldrb	r3, [r7, #21]
 80050c4:	4013      	ands	r3, r2
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0e9      	beq.n	80050a0 <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 80050cc:	2180      	movs	r1, #128	; 0x80
 80050ce:	200d      	movs	r0, #13
 80050d0:	f7ff ff12 	bl	8004ef8 <rc522_clearBit>

  if (i != 0)  {
 80050d4:	8a7b      	ldrh	r3, [r7, #18]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d05a      	beq.n	8005190 <rc522_toCard+0x198>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 80050da:	2006      	movs	r0, #6
 80050dc:	f7ff fea2 	bl	8004e24 <rc522_regRead8>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f003 031b 	and.w	r3, r3, #27
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d150      	bne.n	800518c <rc522_toCard+0x194>
      status = true;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
      if (n & irqEn & 0x01) {
 80050ee:	7d3a      	ldrb	r2, [r7, #20]
 80050f0:	7dbb      	ldrb	r3, [r7, #22]
 80050f2:	4013      	ands	r3, r2
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <rc522_toCard+0x10a>
        status = false;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]
      }

      if (command == PCD_TRANSCEIVE) {
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b0c      	cmp	r3, #12
 8005106:	d143      	bne.n	8005190 <rc522_toCard+0x198>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8005108:	200a      	movs	r0, #10
 800510a:	f7ff fe8b 	bl	8004e24 <rc522_regRead8>
 800510e:	4603      	mov	r3, r0
 8005110:	753b      	strb	r3, [r7, #20]
 //       uint8_t l = n;
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 8005112:	200c      	movs	r0, #12
 8005114:	f7ff fe86 	bl	8004e24 <rc522_regRead8>
 8005118:	4603      	mov	r3, r0
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	747b      	strb	r3, [r7, #17]
        if (lastBits) {
 8005120:	7c7b      	ldrb	r3, [r7, #17]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <rc522_toCard+0x146>
          *backLen = (n - 1) * 8 + lastBits;
 8005126:	7d3b      	ldrb	r3, [r7, #20]
 8005128:	3b01      	subs	r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	b29a      	uxth	r2, r3
 8005130:	7c7b      	ldrb	r3, [r7, #17]
 8005132:	b29b      	uxth	r3, r3
 8005134:	4413      	add	r3, r2
 8005136:	b29a      	uxth	r2, r3
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e005      	b.n	800514a <rc522_toCard+0x152>
        } else {
          *backLen = n * 8;
 800513e:	7d3b      	ldrb	r3, [r7, #20]
 8005140:	b29b      	uxth	r3, r3
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	b29a      	uxth	r2, r3
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 800514a:	7d3b      	ldrb	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <rc522_toCard+0x15c>
          n = 1;
 8005150:	2301      	movs	r3, #1
 8005152:	753b      	strb	r3, [r7, #20]
        }
        if (n > MFRC522_MAX_LEN) {
 8005154:	7d3b      	ldrb	r3, [r7, #20]
 8005156:	2b10      	cmp	r3, #16
 8005158:	d901      	bls.n	800515e <rc522_toCard+0x166>
          n = MFRC522_MAX_LEN;
 800515a:	2310      	movs	r3, #16
 800515c:	753b      	strb	r3, [r7, #20]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) 
 800515e:	2300      	movs	r3, #0
 8005160:	827b      	strh	r3, [r7, #18]
 8005162:	e00c      	b.n	800517e <rc522_toCard+0x186>
				{
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 8005164:	2009      	movs	r0, #9
 8005166:	f7ff fe5d 	bl	8004e24 <rc522_regRead8>
 800516a:	4603      	mov	r3, r0
 800516c:	743b      	strb	r3, [r7, #16]
//          if (l == 4)
//            printf("%02x ", d);
          backData[i] = d;
 800516e:	8a7b      	ldrh	r3, [r7, #18]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	4413      	add	r3, r2
 8005174:	7c3a      	ldrb	r2, [r7, #16]
 8005176:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) 
 8005178:	8a7b      	ldrh	r3, [r7, #18]
 800517a:	3301      	adds	r3, #1
 800517c:	827b      	strh	r3, [r7, #18]
 800517e:	7d3b      	ldrb	r3, [r7, #20]
 8005180:	b29b      	uxth	r3, r3
 8005182:	8a7a      	ldrh	r2, [r7, #18]
 8005184:	429a      	cmp	r2, r3
 8005186:	d3ed      	bcc.n	8005164 <rc522_toCard+0x16c>
        }
//       if (l==4)
//          printf("\r\n");
        return status;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
 800518a:	e002      	b.n	8005192 <rc522_toCard+0x19a>
      }
    } 
		else 
		{
//      printf("error\r\n");
      status = false;
 800518c:	2300      	movs	r3, #0
 800518e:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af02      	add	r7, sp, #8
 80051a0:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 80051a6:	2100      	movs	r1, #0
 80051a8:	200d      	movs	r0, #13
 80051aa:	f7ff fe67 	bl	8004e7c <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2293      	movs	r2, #147	; 0x93
 80051b2:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3301      	adds	r3, #1
 80051b8:	2220      	movs	r2, #32
 80051ba:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80051bc:	f107 030a 	add.w	r3, r7, #10
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	200c      	movs	r0, #12
 80051ca:	f7ff ff15 	bl	8004ff8 <rc522_toCard>
 80051ce:	4603      	mov	r3, r0
 80051d0:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d018      	beq.n	800520a <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 80051d8:	2300      	movs	r3, #0
 80051da:	73bb      	strb	r3, [r7, #14]
 80051dc:	e009      	b.n	80051f2 <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 80051de:	7bbb      	ldrb	r3, [r7, #14]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	4413      	add	r3, r2
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	7b7b      	ldrb	r3, [r7, #13]
 80051e8:	4053      	eors	r3, r2
 80051ea:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 80051ec:	7bbb      	ldrb	r3, [r7, #14]
 80051ee:	3301      	adds	r3, #1
 80051f0:	73bb      	strb	r3, [r7, #14]
 80051f2:	7bbb      	ldrb	r3, [r7, #14]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d9f2      	bls.n	80051de <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	7b7a      	ldrb	r2, [r7, #13]
 8005202:	429a      	cmp	r2, r3
 8005204:	d001      	beq.n	800520a <rc522_antiColl+0x70>
      status = false;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <rc522_halt>:

void rc522_halt(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 800521a:	2350      	movs	r3, #80	; 0x50
 800521c:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8005222:	463b      	mov	r3, r7
 8005224:	1c9a      	adds	r2, r3, #2
 8005226:	463b      	mov	r3, r7
 8005228:	2102      	movs	r1, #2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f80d 	bl	800524a <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8005230:	463a      	mov	r2, r7
 8005232:	4639      	mov	r1, r7
 8005234:	1dbb      	adds	r3, r7, #6
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	2204      	movs	r2, #4
 800523c:	200c      	movs	r0, #12
 800523e:	f7ff fedb 	bl	8004ff8 <rc522_toCard>
}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 800524a:	b590      	push	{r4, r7, lr}
 800524c:	b087      	sub	sp, #28
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	460b      	mov	r3, r1
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8005258:	2104      	movs	r1, #4
 800525a:	2005      	movs	r0, #5
 800525c:	f7ff fe4c 	bl	8004ef8 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 8005260:	2180      	movs	r1, #128	; 0x80
 8005262:	200a      	movs	r0, #10
 8005264:	f7ff fe2e 	bl	8004ec4 <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8005268:	2300      	movs	r3, #0
 800526a:	75fb      	strb	r3, [r7, #23]
 800526c:	e00a      	b.n	8005284 <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	2009      	movs	r0, #9
 800527a:	f7ff fdff 	bl	8004e7c <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	3301      	adds	r3, #1
 8005282:	75fb      	strb	r3, [r7, #23]
 8005284:	7dfa      	ldrb	r2, [r7, #23]
 8005286:	7afb      	ldrb	r3, [r7, #11]
 8005288:	429a      	cmp	r2, r3
 800528a:	d3f0      	bcc.n	800526e <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800528c:	2103      	movs	r1, #3
 800528e:	2001      	movs	r0, #1
 8005290:	f7ff fdf4 	bl	8004e7c <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8005294:	23ff      	movs	r3, #255	; 0xff
 8005296:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8005298:	2005      	movs	r0, #5
 800529a:	f7ff fdc3 	bl	8004e24 <rc522_regRead8>
 800529e:	4603      	mov	r3, r0
 80052a0:	75bb      	strb	r3, [r7, #22]
    i--;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <rc522_calculateCRC+0x6e>
 80052ae:	7dbb      	ldrb	r3, [r7, #22]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 80052b8:	2022      	movs	r0, #34	; 0x22
 80052ba:	f7ff fdb3 	bl	8004e24 <rc522_regRead8>
 80052be:	4603      	mov	r3, r0
 80052c0:	461a      	mov	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	1c5c      	adds	r4, r3, #1
 80052ca:	2021      	movs	r0, #33	; 0x21
 80052cc:	f7ff fdaa 	bl	8004e24 <rc522_regRead8>
 80052d0:	4603      	mov	r3, r0
 80052d2:	7023      	strb	r3, [r4, #0]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}

080052dc <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0




  //GPIOA->BSRR= (1<<8)<<16;
  MFRC522_RST_LOW();
 80052e0:	4b15      	ldr	r3, [pc, #84]	; (8005338 <rc522_init+0x5c>)
 80052e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052e6:	619a      	str	r2, [r3, #24]
  HAL_Delay(10);
 80052e8:	200a      	movs	r0, #10
 80052ea:	f7fb fe3d 	bl	8000f68 <HAL_Delay>
  MFRC522_RST_HIGH();
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <rc522_init+0x5c>)
 80052f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f4:	619a      	str	r2, [r3, #24]
  //GPIOA->BSRR= (1<<8);
  HAL_Delay(10);
 80052f6:	200a      	movs	r0, #10
 80052f8:	f7fb fe36 	bl	8000f68 <HAL_Delay>
	
  rc522_reset();
 80052fc:	f7ff fe1a 	bl	8004f34 <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8005300:	2180      	movs	r1, #128	; 0x80
 8005302:	202a      	movs	r0, #42	; 0x2a
 8005304:	f7ff fdba 	bl	8004e7c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8005308:	21a9      	movs	r1, #169	; 0xa9
 800530a:	202b      	movs	r0, #43	; 0x2b
 800530c:	f7ff fdb6 	bl	8004e7c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8005310:	21e8      	movs	r1, #232	; 0xe8
 8005312:	202d      	movs	r0, #45	; 0x2d
 8005314:	f7ff fdb2 	bl	8004e7c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8005318:	2103      	movs	r1, #3
 800531a:	202c      	movs	r0, #44	; 0x2c
 800531c:	f7ff fdae 	bl	8004e7c <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8005320:	2140      	movs	r1, #64	; 0x40
 8005322:	2015      	movs	r0, #21
 8005324:	f7ff fdaa 	bl	8004e7c <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8005328:	213d      	movs	r1, #61	; 0x3d
 800532a:	2011      	movs	r0, #17
 800532c:	f7ff fda6 	bl	8004e7c <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8005330:	f7ff fe08 	bl	8004f44 <rc522_antennaON>
}
 8005334:	bf00      	nop
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40020000 	.word	0x40020000

0800533c <check_validcard>:

#include "mfrc522_config.h"


uint8_t check_validcard(void)
{
 800533c:	b5b0      	push	{r4, r5, r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
	int i=4;
 8005342:	2304      	movs	r3, #4
 8005344:	61fb      	str	r3, [r7, #28]

	while(i--)
 8005346:	e01c      	b.n	8005382 <check_validcard+0x46>
	{
		if(card_auth[i]!=rfid_id[i])
 8005348:	4a13      	ldr	r2, [pc, #76]	; (8005398 <check_validcard+0x5c>)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	4413      	add	r3, r2
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	4912      	ldr	r1, [pc, #72]	; (800539c <check_validcard+0x60>)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	440b      	add	r3, r1
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d012      	beq.n	8005382 <check_validcard+0x46>
		{
			char msg[] = "Unauthorised Access\r\n";
 800535c:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <check_validcard+0x64>)
 800535e:	1d3c      	adds	r4, r7, #4
 8005360:	461d      	mov	r5, r3
 8005362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005366:	e895 0003 	ldmia.w	r5, {r0, r1}
 800536a:	6020      	str	r0, [r4, #0]
 800536c:	3404      	adds	r4, #4
 800536e:	8021      	strh	r1, [r4, #0]
			HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
 8005370:	1d39      	adds	r1, r7, #4
 8005372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005376:	2216      	movs	r2, #22
 8005378:	480a      	ldr	r0, [pc, #40]	; (80053a4 <check_validcard+0x68>)
 800537a:	f7fd feec 	bl	8003156 <HAL_UART_Transmit>
			return 0;
 800537e:	2300      	movs	r3, #0
 8005380:	e005      	b.n	800538e <check_validcard+0x52>
	while(i--)
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	1e5a      	subs	r2, r3, #1
 8005386:	61fa      	str	r2, [r7, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1dd      	bne.n	8005348 <check_validcard+0xc>
			break;
		}
	}
	return 1;
 800538c:	2301      	movs	r3, #1
}
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bdb0      	pop	{r4, r5, r7, pc}
 8005396:	bf00      	nop
 8005398:	20000000 	.word	0x20000000
 800539c:	20000220 	.word	0x20000220
 80053a0:	08006644 	.word	0x08006644
 80053a4:	20000090 	.word	0x20000090

080053a8 <map>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

static inline uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 80053a8:	b490      	push	{r4, r7}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	461a      	mov	r2, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	80fb      	strh	r3, [r7, #6]
 80053ba:	4603      	mov	r3, r0
 80053bc:	80bb      	strh	r3, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	807b      	strh	r3, [r7, #2]
 80053c2:	4613      	mov	r3, r2
 80053c4:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	88bb      	ldrh	r3, [r7, #4]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	8a39      	ldrh	r1, [r7, #16]
 80053ce:	883a      	ldrh	r2, [r7, #0]
 80053d0:	1a8a      	subs	r2, r1, r2
 80053d2:	fb03 f202 	mul.w	r2, r3, r2
 80053d6:	8879      	ldrh	r1, [r7, #2]
 80053d8:	88bb      	ldrh	r3, [r7, #4]
 80053da:	1acb      	subs	r3, r1, r3
 80053dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	883b      	ldrh	r3, [r7, #0]
 80053e4:	4413      	add	r3, r2
 80053e6:	b29b      	uxth	r3, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc90      	pop	{r4, r7}
 80053f0:	4770      	bx	lr
	...

080053f4 <getRaw>:

uint16_t getRaw(uint8_t address)      // static
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	4603      	mov	r3, r0
 80053fc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	for(int dly = 0; dly < 10000; dly++);
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	e002      	b.n	800540a <getRaw+0x16>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	3301      	adds	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005410:	4293      	cmp	r3, r2
 8005412:	ddf7      	ble.n	8005404 <getRaw+0x10>
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800541a:	481b      	ldr	r0, [pc, #108]	; (8005488 <getRaw+0x94>)
 800541c:	f7fc f82e 	bl	800147c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&spi2, &address, 1, 1000);
 8005420:	1df9      	adds	r1, r7, #7
 8005422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005426:	2201      	movs	r2, #1
 8005428:	4818      	ldr	r0, [pc, #96]	; (800548c <getRaw+0x98>)
 800542a:	f7fc feb2 	bl	8002192 <HAL_SPI_Transmit>
	address = 0x00;
 800542e:	2300      	movs	r3, #0
 8005430:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 8005432:	f107 020f 	add.w	r2, r7, #15
 8005436:	1df9      	adds	r1, r7, #7
 8005438:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	2301      	movs	r3, #1
 8005440:	4812      	ldr	r0, [pc, #72]	; (800548c <getRaw+0x98>)
 8005442:	f7fd f8f3 	bl	800262c <HAL_SPI_TransmitReceive>
	MSB = data;   
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	827b      	strh	r3, [r7, #18]
	address = 0x00;
 800544a:	2300      	movs	r3, #0
 800544c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 800544e:	f107 020f 	add.w	r2, r7, #15
 8005452:	1df9      	adds	r1, r7, #7
 8005454:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	2301      	movs	r3, #1
 800545c:	480b      	ldr	r0, [pc, #44]	; (800548c <getRaw+0x98>)
 800545e:	f7fd f8e5 	bl	800262c <HAL_SPI_TransmitReceive>
	LSB = data;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	823b      	strh	r3, [r7, #16]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);      // if (XPT2046_NSS_SOFT)	
 8005466:	2201      	movs	r2, #1
 8005468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800546c:	4806      	ldr	r0, [pc, #24]	; (8005488 <getRaw+0x94>)
 800546e:	f7fc f805 	bl	800147c <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8005472:	8a7b      	ldrh	r3, [r7, #18]
 8005474:	021a      	lsls	r2, r3, #8
 8005476:	8a3b      	ldrh	r3, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	10db      	asrs	r3, r3, #3
 800547c:	b29b      	uxth	r3, r3
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40020400 	.word	0x40020400
 800548c:	2000012c 	.word	0x2000012c

08005490 <getX>:

uint16_t getX(void)
{ 
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_X)
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MAX_X, OUT_MIN_X);
	else
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8005496:	20d0      	movs	r0, #208	; 0xd0
 8005498:	f7ff ffac 	bl	80053f4 <getRaw>
 800549c:	4603      	mov	r3, r0
 800549e:	4618      	mov	r0, r3
 80054a0:	f240 331f 	movw	r3, #799	; 0x31f
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	2300      	movs	r3, #0
 80054a8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80054ac:	21c8      	movs	r1, #200	; 0xc8
 80054ae:	f7ff ff7b 	bl	80053a8 <map>
 80054b2:	4603      	mov	r3, r0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <getY>:

uint16_t getY(void)
{ 
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b082      	sub	sp, #8
 80054be:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_Y)
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MAX_Y, OUT_MIN_Y);
 80054c0:	2090      	movs	r0, #144	; 0x90
 80054c2:	f7ff ff97 	bl	80053f4 <getRaw>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4618      	mov	r0, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	f240 13df 	movw	r3, #479	; 0x1df
 80054d2:	f640 62d8 	movw	r2, #3800	; 0xed8
 80054d6:	21c8      	movs	r1, #200	; 0xc8
 80054d8:	f7ff ff66 	bl	80053a8 <map>
 80054dc:	4603      	mov	r3, r0
	else
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
}
 80054de:	4618      	mov	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <__libc_init_array>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4d0d      	ldr	r5, [pc, #52]	; (800551c <__libc_init_array+0x38>)
 80054e8:	4c0d      	ldr	r4, [pc, #52]	; (8005520 <__libc_init_array+0x3c>)
 80054ea:	1b64      	subs	r4, r4, r5
 80054ec:	10a4      	asrs	r4, r4, #2
 80054ee:	2600      	movs	r6, #0
 80054f0:	42a6      	cmp	r6, r4
 80054f2:	d109      	bne.n	8005508 <__libc_init_array+0x24>
 80054f4:	4d0b      	ldr	r5, [pc, #44]	; (8005524 <__libc_init_array+0x40>)
 80054f6:	4c0c      	ldr	r4, [pc, #48]	; (8005528 <__libc_init_array+0x44>)
 80054f8:	f001 f82e 	bl	8006558 <_init>
 80054fc:	1b64      	subs	r4, r4, r5
 80054fe:	10a4      	asrs	r4, r4, #2
 8005500:	2600      	movs	r6, #0
 8005502:	42a6      	cmp	r6, r4
 8005504:	d105      	bne.n	8005512 <__libc_init_array+0x2e>
 8005506:	bd70      	pop	{r4, r5, r6, pc}
 8005508:	f855 3b04 	ldr.w	r3, [r5], #4
 800550c:	4798      	blx	r3
 800550e:	3601      	adds	r6, #1
 8005510:	e7ee      	b.n	80054f0 <__libc_init_array+0xc>
 8005512:	f855 3b04 	ldr.w	r3, [r5], #4
 8005516:	4798      	blx	r3
 8005518:	3601      	adds	r6, #1
 800551a:	e7f2      	b.n	8005502 <__libc_init_array+0x1e>
 800551c:	08006734 	.word	0x08006734
 8005520:	08006734 	.word	0x08006734
 8005524:	08006734 	.word	0x08006734
 8005528:	08006738 	.word	0x08006738

0800552c <memcpy>:
 800552c:	440a      	add	r2, r1
 800552e:	4291      	cmp	r1, r2
 8005530:	f100 33ff 	add.w	r3, r0, #4294967295
 8005534:	d100      	bne.n	8005538 <memcpy+0xc>
 8005536:	4770      	bx	lr
 8005538:	b510      	push	{r4, lr}
 800553a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800553e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005542:	4291      	cmp	r1, r2
 8005544:	d1f9      	bne.n	800553a <memcpy+0xe>
 8005546:	bd10      	pop	{r4, pc}

08005548 <memset>:
 8005548:	4402      	add	r2, r0
 800554a:	4603      	mov	r3, r0
 800554c:	4293      	cmp	r3, r2
 800554e:	d100      	bne.n	8005552 <memset+0xa>
 8005550:	4770      	bx	lr
 8005552:	f803 1b01 	strb.w	r1, [r3], #1
 8005556:	e7f9      	b.n	800554c <memset+0x4>

08005558 <iprintf>:
 8005558:	b40f      	push	{r0, r1, r2, r3}
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <iprintf+0x2c>)
 800555c:	b513      	push	{r0, r1, r4, lr}
 800555e:	681c      	ldr	r4, [r3, #0]
 8005560:	b124      	cbz	r4, 800556c <iprintf+0x14>
 8005562:	69a3      	ldr	r3, [r4, #24]
 8005564:	b913      	cbnz	r3, 800556c <iprintf+0x14>
 8005566:	4620      	mov	r0, r4
 8005568:	f000 fa5e 	bl	8005a28 <__sinit>
 800556c:	ab05      	add	r3, sp, #20
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	68a1      	ldr	r1, [r4, #8]
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fc67 	bl	8005e48 <_vfiprintf_r>
 800557a:	b002      	add	sp, #8
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	b004      	add	sp, #16
 8005582:	4770      	bx	lr
 8005584:	20000010 	.word	0x20000010

08005588 <_puts_r>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	460e      	mov	r6, r1
 800558c:	4605      	mov	r5, r0
 800558e:	b118      	cbz	r0, 8005598 <_puts_r+0x10>
 8005590:	6983      	ldr	r3, [r0, #24]
 8005592:	b90b      	cbnz	r3, 8005598 <_puts_r+0x10>
 8005594:	f000 fa48 	bl	8005a28 <__sinit>
 8005598:	69ab      	ldr	r3, [r5, #24]
 800559a:	68ac      	ldr	r4, [r5, #8]
 800559c:	b913      	cbnz	r3, 80055a4 <_puts_r+0x1c>
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 fa42 	bl	8005a28 <__sinit>
 80055a4:	4b2c      	ldr	r3, [pc, #176]	; (8005658 <_puts_r+0xd0>)
 80055a6:	429c      	cmp	r4, r3
 80055a8:	d120      	bne.n	80055ec <_puts_r+0x64>
 80055aa:	686c      	ldr	r4, [r5, #4]
 80055ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055ae:	07db      	lsls	r3, r3, #31
 80055b0:	d405      	bmi.n	80055be <_puts_r+0x36>
 80055b2:	89a3      	ldrh	r3, [r4, #12]
 80055b4:	0598      	lsls	r0, r3, #22
 80055b6:	d402      	bmi.n	80055be <_puts_r+0x36>
 80055b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ba:	f000 fad3 	bl	8005b64 <__retarget_lock_acquire_recursive>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	0719      	lsls	r1, r3, #28
 80055c2:	d51d      	bpl.n	8005600 <_puts_r+0x78>
 80055c4:	6923      	ldr	r3, [r4, #16]
 80055c6:	b1db      	cbz	r3, 8005600 <_puts_r+0x78>
 80055c8:	3e01      	subs	r6, #1
 80055ca:	68a3      	ldr	r3, [r4, #8]
 80055cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055d0:	3b01      	subs	r3, #1
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	bb39      	cbnz	r1, 8005626 <_puts_r+0x9e>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da38      	bge.n	800564c <_puts_r+0xc4>
 80055da:	4622      	mov	r2, r4
 80055dc:	210a      	movs	r1, #10
 80055de:	4628      	mov	r0, r5
 80055e0:	f000 f848 	bl	8005674 <__swbuf_r>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d011      	beq.n	800560c <_puts_r+0x84>
 80055e8:	250a      	movs	r5, #10
 80055ea:	e011      	b.n	8005610 <_puts_r+0x88>
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <_puts_r+0xd4>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d101      	bne.n	80055f6 <_puts_r+0x6e>
 80055f2:	68ac      	ldr	r4, [r5, #8]
 80055f4:	e7da      	b.n	80055ac <_puts_r+0x24>
 80055f6:	4b1a      	ldr	r3, [pc, #104]	; (8005660 <_puts_r+0xd8>)
 80055f8:	429c      	cmp	r4, r3
 80055fa:	bf08      	it	eq
 80055fc:	68ec      	ldreq	r4, [r5, #12]
 80055fe:	e7d5      	b.n	80055ac <_puts_r+0x24>
 8005600:	4621      	mov	r1, r4
 8005602:	4628      	mov	r0, r5
 8005604:	f000 f888 	bl	8005718 <__swsetup_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	d0dd      	beq.n	80055c8 <_puts_r+0x40>
 800560c:	f04f 35ff 	mov.w	r5, #4294967295
 8005610:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005612:	07da      	lsls	r2, r3, #31
 8005614:	d405      	bmi.n	8005622 <_puts_r+0x9a>
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	059b      	lsls	r3, r3, #22
 800561a:	d402      	bmi.n	8005622 <_puts_r+0x9a>
 800561c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561e:	f000 faa2 	bl	8005b66 <__retarget_lock_release_recursive>
 8005622:	4628      	mov	r0, r5
 8005624:	bd70      	pop	{r4, r5, r6, pc}
 8005626:	2b00      	cmp	r3, #0
 8005628:	da04      	bge.n	8005634 <_puts_r+0xac>
 800562a:	69a2      	ldr	r2, [r4, #24]
 800562c:	429a      	cmp	r2, r3
 800562e:	dc06      	bgt.n	800563e <_puts_r+0xb6>
 8005630:	290a      	cmp	r1, #10
 8005632:	d004      	beq.n	800563e <_puts_r+0xb6>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	6022      	str	r2, [r4, #0]
 800563a:	7019      	strb	r1, [r3, #0]
 800563c:	e7c5      	b.n	80055ca <_puts_r+0x42>
 800563e:	4622      	mov	r2, r4
 8005640:	4628      	mov	r0, r5
 8005642:	f000 f817 	bl	8005674 <__swbuf_r>
 8005646:	3001      	adds	r0, #1
 8005648:	d1bf      	bne.n	80055ca <_puts_r+0x42>
 800564a:	e7df      	b.n	800560c <_puts_r+0x84>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	250a      	movs	r5, #10
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	6022      	str	r2, [r4, #0]
 8005654:	701d      	strb	r5, [r3, #0]
 8005656:	e7db      	b.n	8005610 <_puts_r+0x88>
 8005658:	080066b8 	.word	0x080066b8
 800565c:	080066d8 	.word	0x080066d8
 8005660:	08006698 	.word	0x08006698

08005664 <puts>:
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <puts+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f7ff bf8d 	b.w	8005588 <_puts_r>
 800566e:	bf00      	nop
 8005670:	20000010 	.word	0x20000010

08005674 <__swbuf_r>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	460e      	mov	r6, r1
 8005678:	4614      	mov	r4, r2
 800567a:	4605      	mov	r5, r0
 800567c:	b118      	cbz	r0, 8005686 <__swbuf_r+0x12>
 800567e:	6983      	ldr	r3, [r0, #24]
 8005680:	b90b      	cbnz	r3, 8005686 <__swbuf_r+0x12>
 8005682:	f000 f9d1 	bl	8005a28 <__sinit>
 8005686:	4b21      	ldr	r3, [pc, #132]	; (800570c <__swbuf_r+0x98>)
 8005688:	429c      	cmp	r4, r3
 800568a:	d12b      	bne.n	80056e4 <__swbuf_r+0x70>
 800568c:	686c      	ldr	r4, [r5, #4]
 800568e:	69a3      	ldr	r3, [r4, #24]
 8005690:	60a3      	str	r3, [r4, #8]
 8005692:	89a3      	ldrh	r3, [r4, #12]
 8005694:	071a      	lsls	r2, r3, #28
 8005696:	d52f      	bpl.n	80056f8 <__swbuf_r+0x84>
 8005698:	6923      	ldr	r3, [r4, #16]
 800569a:	b36b      	cbz	r3, 80056f8 <__swbuf_r+0x84>
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	6820      	ldr	r0, [r4, #0]
 80056a0:	1ac0      	subs	r0, r0, r3
 80056a2:	6963      	ldr	r3, [r4, #20]
 80056a4:	b2f6      	uxtb	r6, r6
 80056a6:	4283      	cmp	r3, r0
 80056a8:	4637      	mov	r7, r6
 80056aa:	dc04      	bgt.n	80056b6 <__swbuf_r+0x42>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 f926 	bl	8005900 <_fflush_r>
 80056b4:	bb30      	cbnz	r0, 8005704 <__swbuf_r+0x90>
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	60a3      	str	r3, [r4, #8]
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	6022      	str	r2, [r4, #0]
 80056c2:	701e      	strb	r6, [r3, #0]
 80056c4:	6963      	ldr	r3, [r4, #20]
 80056c6:	3001      	adds	r0, #1
 80056c8:	4283      	cmp	r3, r0
 80056ca:	d004      	beq.n	80056d6 <__swbuf_r+0x62>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	07db      	lsls	r3, r3, #31
 80056d0:	d506      	bpl.n	80056e0 <__swbuf_r+0x6c>
 80056d2:	2e0a      	cmp	r6, #10
 80056d4:	d104      	bne.n	80056e0 <__swbuf_r+0x6c>
 80056d6:	4621      	mov	r1, r4
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 f911 	bl	8005900 <_fflush_r>
 80056de:	b988      	cbnz	r0, 8005704 <__swbuf_r+0x90>
 80056e0:	4638      	mov	r0, r7
 80056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <__swbuf_r+0x9c>)
 80056e6:	429c      	cmp	r4, r3
 80056e8:	d101      	bne.n	80056ee <__swbuf_r+0x7a>
 80056ea:	68ac      	ldr	r4, [r5, #8]
 80056ec:	e7cf      	b.n	800568e <__swbuf_r+0x1a>
 80056ee:	4b09      	ldr	r3, [pc, #36]	; (8005714 <__swbuf_r+0xa0>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	bf08      	it	eq
 80056f4:	68ec      	ldreq	r4, [r5, #12]
 80056f6:	e7ca      	b.n	800568e <__swbuf_r+0x1a>
 80056f8:	4621      	mov	r1, r4
 80056fa:	4628      	mov	r0, r5
 80056fc:	f000 f80c 	bl	8005718 <__swsetup_r>
 8005700:	2800      	cmp	r0, #0
 8005702:	d0cb      	beq.n	800569c <__swbuf_r+0x28>
 8005704:	f04f 37ff 	mov.w	r7, #4294967295
 8005708:	e7ea      	b.n	80056e0 <__swbuf_r+0x6c>
 800570a:	bf00      	nop
 800570c:	080066b8 	.word	0x080066b8
 8005710:	080066d8 	.word	0x080066d8
 8005714:	08006698 	.word	0x08006698

08005718 <__swsetup_r>:
 8005718:	4b32      	ldr	r3, [pc, #200]	; (80057e4 <__swsetup_r+0xcc>)
 800571a:	b570      	push	{r4, r5, r6, lr}
 800571c:	681d      	ldr	r5, [r3, #0]
 800571e:	4606      	mov	r6, r0
 8005720:	460c      	mov	r4, r1
 8005722:	b125      	cbz	r5, 800572e <__swsetup_r+0x16>
 8005724:	69ab      	ldr	r3, [r5, #24]
 8005726:	b913      	cbnz	r3, 800572e <__swsetup_r+0x16>
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f97d 	bl	8005a28 <__sinit>
 800572e:	4b2e      	ldr	r3, [pc, #184]	; (80057e8 <__swsetup_r+0xd0>)
 8005730:	429c      	cmp	r4, r3
 8005732:	d10f      	bne.n	8005754 <__swsetup_r+0x3c>
 8005734:	686c      	ldr	r4, [r5, #4]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800573c:	0719      	lsls	r1, r3, #28
 800573e:	d42c      	bmi.n	800579a <__swsetup_r+0x82>
 8005740:	06dd      	lsls	r5, r3, #27
 8005742:	d411      	bmi.n	8005768 <__swsetup_r+0x50>
 8005744:	2309      	movs	r3, #9
 8005746:	6033      	str	r3, [r6, #0]
 8005748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800574c:	81a3      	strh	r3, [r4, #12]
 800574e:	f04f 30ff 	mov.w	r0, #4294967295
 8005752:	e03e      	b.n	80057d2 <__swsetup_r+0xba>
 8005754:	4b25      	ldr	r3, [pc, #148]	; (80057ec <__swsetup_r+0xd4>)
 8005756:	429c      	cmp	r4, r3
 8005758:	d101      	bne.n	800575e <__swsetup_r+0x46>
 800575a:	68ac      	ldr	r4, [r5, #8]
 800575c:	e7eb      	b.n	8005736 <__swsetup_r+0x1e>
 800575e:	4b24      	ldr	r3, [pc, #144]	; (80057f0 <__swsetup_r+0xd8>)
 8005760:	429c      	cmp	r4, r3
 8005762:	bf08      	it	eq
 8005764:	68ec      	ldreq	r4, [r5, #12]
 8005766:	e7e6      	b.n	8005736 <__swsetup_r+0x1e>
 8005768:	0758      	lsls	r0, r3, #29
 800576a:	d512      	bpl.n	8005792 <__swsetup_r+0x7a>
 800576c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800576e:	b141      	cbz	r1, 8005782 <__swsetup_r+0x6a>
 8005770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005774:	4299      	cmp	r1, r3
 8005776:	d002      	beq.n	800577e <__swsetup_r+0x66>
 8005778:	4630      	mov	r0, r6
 800577a:	f000 fa5b 	bl	8005c34 <_free_r>
 800577e:	2300      	movs	r3, #0
 8005780:	6363      	str	r3, [r4, #52]	; 0x34
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005788:	81a3      	strh	r3, [r4, #12]
 800578a:	2300      	movs	r3, #0
 800578c:	6063      	str	r3, [r4, #4]
 800578e:	6923      	ldr	r3, [r4, #16]
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	f043 0308 	orr.w	r3, r3, #8
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	6923      	ldr	r3, [r4, #16]
 800579c:	b94b      	cbnz	r3, 80057b2 <__swsetup_r+0x9a>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a8:	d003      	beq.n	80057b2 <__swsetup_r+0x9a>
 80057aa:	4621      	mov	r1, r4
 80057ac:	4630      	mov	r0, r6
 80057ae:	f000 fa01 	bl	8005bb4 <__smakebuf_r>
 80057b2:	89a0      	ldrh	r0, [r4, #12]
 80057b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057b8:	f010 0301 	ands.w	r3, r0, #1
 80057bc:	d00a      	beq.n	80057d4 <__swsetup_r+0xbc>
 80057be:	2300      	movs	r3, #0
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	6963      	ldr	r3, [r4, #20]
 80057c4:	425b      	negs	r3, r3
 80057c6:	61a3      	str	r3, [r4, #24]
 80057c8:	6923      	ldr	r3, [r4, #16]
 80057ca:	b943      	cbnz	r3, 80057de <__swsetup_r+0xc6>
 80057cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057d0:	d1ba      	bne.n	8005748 <__swsetup_r+0x30>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	0781      	lsls	r1, r0, #30
 80057d6:	bf58      	it	pl
 80057d8:	6963      	ldrpl	r3, [r4, #20]
 80057da:	60a3      	str	r3, [r4, #8]
 80057dc:	e7f4      	b.n	80057c8 <__swsetup_r+0xb0>
 80057de:	2000      	movs	r0, #0
 80057e0:	e7f7      	b.n	80057d2 <__swsetup_r+0xba>
 80057e2:	bf00      	nop
 80057e4:	20000010 	.word	0x20000010
 80057e8:	080066b8 	.word	0x080066b8
 80057ec:	080066d8 	.word	0x080066d8
 80057f0:	08006698 	.word	0x08006698

080057f4 <__sflush_r>:
 80057f4:	898a      	ldrh	r2, [r1, #12]
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	4605      	mov	r5, r0
 80057fc:	0710      	lsls	r0, r2, #28
 80057fe:	460c      	mov	r4, r1
 8005800:	d458      	bmi.n	80058b4 <__sflush_r+0xc0>
 8005802:	684b      	ldr	r3, [r1, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	dc05      	bgt.n	8005814 <__sflush_r+0x20>
 8005808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	dc02      	bgt.n	8005814 <__sflush_r+0x20>
 800580e:	2000      	movs	r0, #0
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005816:	2e00      	cmp	r6, #0
 8005818:	d0f9      	beq.n	800580e <__sflush_r+0x1a>
 800581a:	2300      	movs	r3, #0
 800581c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005820:	682f      	ldr	r7, [r5, #0]
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	d032      	beq.n	800588c <__sflush_r+0x98>
 8005826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	075a      	lsls	r2, r3, #29
 800582c:	d505      	bpl.n	800583a <__sflush_r+0x46>
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	1ac0      	subs	r0, r0, r3
 8005832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005834:	b10b      	cbz	r3, 800583a <__sflush_r+0x46>
 8005836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005838:	1ac0      	subs	r0, r0, r3
 800583a:	2300      	movs	r3, #0
 800583c:	4602      	mov	r2, r0
 800583e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005840:	6a21      	ldr	r1, [r4, #32]
 8005842:	4628      	mov	r0, r5
 8005844:	47b0      	blx	r6
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	d106      	bne.n	800585a <__sflush_r+0x66>
 800584c:	6829      	ldr	r1, [r5, #0]
 800584e:	291d      	cmp	r1, #29
 8005850:	d82c      	bhi.n	80058ac <__sflush_r+0xb8>
 8005852:	4a2a      	ldr	r2, [pc, #168]	; (80058fc <__sflush_r+0x108>)
 8005854:	40ca      	lsrs	r2, r1
 8005856:	07d6      	lsls	r6, r2, #31
 8005858:	d528      	bpl.n	80058ac <__sflush_r+0xb8>
 800585a:	2200      	movs	r2, #0
 800585c:	6062      	str	r2, [r4, #4]
 800585e:	04d9      	lsls	r1, r3, #19
 8005860:	6922      	ldr	r2, [r4, #16]
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	d504      	bpl.n	8005870 <__sflush_r+0x7c>
 8005866:	1c42      	adds	r2, r0, #1
 8005868:	d101      	bne.n	800586e <__sflush_r+0x7a>
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	b903      	cbnz	r3, 8005870 <__sflush_r+0x7c>
 800586e:	6560      	str	r0, [r4, #84]	; 0x54
 8005870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d0ca      	beq.n	800580e <__sflush_r+0x1a>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__sflush_r+0x92>
 8005880:	4628      	mov	r0, r5
 8005882:	f000 f9d7 	bl	8005c34 <_free_r>
 8005886:	2000      	movs	r0, #0
 8005888:	6360      	str	r0, [r4, #52]	; 0x34
 800588a:	e7c1      	b.n	8005810 <__sflush_r+0x1c>
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	2301      	movs	r3, #1
 8005890:	4628      	mov	r0, r5
 8005892:	47b0      	blx	r6
 8005894:	1c41      	adds	r1, r0, #1
 8005896:	d1c7      	bne.n	8005828 <__sflush_r+0x34>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0c4      	beq.n	8005828 <__sflush_r+0x34>
 800589e:	2b1d      	cmp	r3, #29
 80058a0:	d001      	beq.n	80058a6 <__sflush_r+0xb2>
 80058a2:	2b16      	cmp	r3, #22
 80058a4:	d101      	bne.n	80058aa <__sflush_r+0xb6>
 80058a6:	602f      	str	r7, [r5, #0]
 80058a8:	e7b1      	b.n	800580e <__sflush_r+0x1a>
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b0:	81a3      	strh	r3, [r4, #12]
 80058b2:	e7ad      	b.n	8005810 <__sflush_r+0x1c>
 80058b4:	690f      	ldr	r7, [r1, #16]
 80058b6:	2f00      	cmp	r7, #0
 80058b8:	d0a9      	beq.n	800580e <__sflush_r+0x1a>
 80058ba:	0793      	lsls	r3, r2, #30
 80058bc:	680e      	ldr	r6, [r1, #0]
 80058be:	bf08      	it	eq
 80058c0:	694b      	ldreq	r3, [r1, #20]
 80058c2:	600f      	str	r7, [r1, #0]
 80058c4:	bf18      	it	ne
 80058c6:	2300      	movne	r3, #0
 80058c8:	eba6 0807 	sub.w	r8, r6, r7
 80058cc:	608b      	str	r3, [r1, #8]
 80058ce:	f1b8 0f00 	cmp.w	r8, #0
 80058d2:	dd9c      	ble.n	800580e <__sflush_r+0x1a>
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058d8:	4643      	mov	r3, r8
 80058da:	463a      	mov	r2, r7
 80058dc:	4628      	mov	r0, r5
 80058de:	47b0      	blx	r6
 80058e0:	2800      	cmp	r0, #0
 80058e2:	dc06      	bgt.n	80058f2 <__sflush_r+0xfe>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ea:	81a3      	strh	r3, [r4, #12]
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	e78e      	b.n	8005810 <__sflush_r+0x1c>
 80058f2:	4407      	add	r7, r0
 80058f4:	eba8 0800 	sub.w	r8, r8, r0
 80058f8:	e7e9      	b.n	80058ce <__sflush_r+0xda>
 80058fa:	bf00      	nop
 80058fc:	20400001 	.word	0x20400001

08005900 <_fflush_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	690b      	ldr	r3, [r1, #16]
 8005904:	4605      	mov	r5, r0
 8005906:	460c      	mov	r4, r1
 8005908:	b913      	cbnz	r3, 8005910 <_fflush_r+0x10>
 800590a:	2500      	movs	r5, #0
 800590c:	4628      	mov	r0, r5
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	b118      	cbz	r0, 800591a <_fflush_r+0x1a>
 8005912:	6983      	ldr	r3, [r0, #24]
 8005914:	b90b      	cbnz	r3, 800591a <_fflush_r+0x1a>
 8005916:	f000 f887 	bl	8005a28 <__sinit>
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <_fflush_r+0x6c>)
 800591c:	429c      	cmp	r4, r3
 800591e:	d11b      	bne.n	8005958 <_fflush_r+0x58>
 8005920:	686c      	ldr	r4, [r5, #4]
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <_fflush_r+0xa>
 800592a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800592c:	07d0      	lsls	r0, r2, #31
 800592e:	d404      	bmi.n	800593a <_fflush_r+0x3a>
 8005930:	0599      	lsls	r1, r3, #22
 8005932:	d402      	bmi.n	800593a <_fflush_r+0x3a>
 8005934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005936:	f000 f915 	bl	8005b64 <__retarget_lock_acquire_recursive>
 800593a:	4628      	mov	r0, r5
 800593c:	4621      	mov	r1, r4
 800593e:	f7ff ff59 	bl	80057f4 <__sflush_r>
 8005942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005944:	07da      	lsls	r2, r3, #31
 8005946:	4605      	mov	r5, r0
 8005948:	d4e0      	bmi.n	800590c <_fflush_r+0xc>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	059b      	lsls	r3, r3, #22
 800594e:	d4dd      	bmi.n	800590c <_fflush_r+0xc>
 8005950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005952:	f000 f908 	bl	8005b66 <__retarget_lock_release_recursive>
 8005956:	e7d9      	b.n	800590c <_fflush_r+0xc>
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <_fflush_r+0x70>)
 800595a:	429c      	cmp	r4, r3
 800595c:	d101      	bne.n	8005962 <_fflush_r+0x62>
 800595e:	68ac      	ldr	r4, [r5, #8]
 8005960:	e7df      	b.n	8005922 <_fflush_r+0x22>
 8005962:	4b04      	ldr	r3, [pc, #16]	; (8005974 <_fflush_r+0x74>)
 8005964:	429c      	cmp	r4, r3
 8005966:	bf08      	it	eq
 8005968:	68ec      	ldreq	r4, [r5, #12]
 800596a:	e7da      	b.n	8005922 <_fflush_r+0x22>
 800596c:	080066b8 	.word	0x080066b8
 8005970:	080066d8 	.word	0x080066d8
 8005974:	08006698 	.word	0x08006698

08005978 <std>:
 8005978:	2300      	movs	r3, #0
 800597a:	b510      	push	{r4, lr}
 800597c:	4604      	mov	r4, r0
 800597e:	e9c0 3300 	strd	r3, r3, [r0]
 8005982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005986:	6083      	str	r3, [r0, #8]
 8005988:	8181      	strh	r1, [r0, #12]
 800598a:	6643      	str	r3, [r0, #100]	; 0x64
 800598c:	81c2      	strh	r2, [r0, #14]
 800598e:	6183      	str	r3, [r0, #24]
 8005990:	4619      	mov	r1, r3
 8005992:	2208      	movs	r2, #8
 8005994:	305c      	adds	r0, #92	; 0x5c
 8005996:	f7ff fdd7 	bl	8005548 <memset>
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <std+0x38>)
 800599c:	6263      	str	r3, [r4, #36]	; 0x24
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <std+0x3c>)
 80059a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80059a2:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <std+0x40>)
 80059a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80059a6:	4b05      	ldr	r3, [pc, #20]	; (80059bc <std+0x44>)
 80059a8:	6224      	str	r4, [r4, #32]
 80059aa:	6323      	str	r3, [r4, #48]	; 0x30
 80059ac:	bd10      	pop	{r4, pc}
 80059ae:	bf00      	nop
 80059b0:	080063f1 	.word	0x080063f1
 80059b4:	08006413 	.word	0x08006413
 80059b8:	0800644b 	.word	0x0800644b
 80059bc:	0800646f 	.word	0x0800646f

080059c0 <_cleanup_r>:
 80059c0:	4901      	ldr	r1, [pc, #4]	; (80059c8 <_cleanup_r+0x8>)
 80059c2:	f000 b8af 	b.w	8005b24 <_fwalk_reent>
 80059c6:	bf00      	nop
 80059c8:	08005901 	.word	0x08005901

080059cc <__sfmoreglue>:
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	2268      	movs	r2, #104	; 0x68
 80059d0:	1e4d      	subs	r5, r1, #1
 80059d2:	4355      	muls	r5, r2
 80059d4:	460e      	mov	r6, r1
 80059d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059da:	f000 f997 	bl	8005d0c <_malloc_r>
 80059de:	4604      	mov	r4, r0
 80059e0:	b140      	cbz	r0, 80059f4 <__sfmoreglue+0x28>
 80059e2:	2100      	movs	r1, #0
 80059e4:	e9c0 1600 	strd	r1, r6, [r0]
 80059e8:	300c      	adds	r0, #12
 80059ea:	60a0      	str	r0, [r4, #8]
 80059ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80059f0:	f7ff fdaa 	bl	8005548 <memset>
 80059f4:	4620      	mov	r0, r4
 80059f6:	bd70      	pop	{r4, r5, r6, pc}

080059f8 <__sfp_lock_acquire>:
 80059f8:	4801      	ldr	r0, [pc, #4]	; (8005a00 <__sfp_lock_acquire+0x8>)
 80059fa:	f000 b8b3 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	200008e4 	.word	0x200008e4

08005a04 <__sfp_lock_release>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__sfp_lock_release+0x8>)
 8005a06:	f000 b8ae 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	200008e4 	.word	0x200008e4

08005a10 <__sinit_lock_acquire>:
 8005a10:	4801      	ldr	r0, [pc, #4]	; (8005a18 <__sinit_lock_acquire+0x8>)
 8005a12:	f000 b8a7 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 8005a16:	bf00      	nop
 8005a18:	200008e5 	.word	0x200008e5

08005a1c <__sinit_lock_release>:
 8005a1c:	4801      	ldr	r0, [pc, #4]	; (8005a24 <__sinit_lock_release+0x8>)
 8005a1e:	f000 b8a2 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005a22:	bf00      	nop
 8005a24:	200008e5 	.word	0x200008e5

08005a28 <__sinit>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	f7ff fff0 	bl	8005a10 <__sinit_lock_acquire>
 8005a30:	69a3      	ldr	r3, [r4, #24]
 8005a32:	b11b      	cbz	r3, 8005a3c <__sinit+0x14>
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	f7ff bff0 	b.w	8005a1c <__sinit_lock_release>
 8005a3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005a40:	6523      	str	r3, [r4, #80]	; 0x50
 8005a42:	4b13      	ldr	r3, [pc, #76]	; (8005a90 <__sinit+0x68>)
 8005a44:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <__sinit+0x6c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	62a2      	str	r2, [r4, #40]	; 0x28
 8005a4a:	42a3      	cmp	r3, r4
 8005a4c:	bf04      	itt	eq
 8005a4e:	2301      	moveq	r3, #1
 8005a50:	61a3      	streq	r3, [r4, #24]
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 f820 	bl	8005a98 <__sfp>
 8005a58:	6060      	str	r0, [r4, #4]
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 f81c 	bl	8005a98 <__sfp>
 8005a60:	60a0      	str	r0, [r4, #8]
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f818 	bl	8005a98 <__sfp>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	60e0      	str	r0, [r4, #12]
 8005a6c:	2104      	movs	r1, #4
 8005a6e:	6860      	ldr	r0, [r4, #4]
 8005a70:	f7ff ff82 	bl	8005978 <std>
 8005a74:	68a0      	ldr	r0, [r4, #8]
 8005a76:	2201      	movs	r2, #1
 8005a78:	2109      	movs	r1, #9
 8005a7a:	f7ff ff7d 	bl	8005978 <std>
 8005a7e:	68e0      	ldr	r0, [r4, #12]
 8005a80:	2202      	movs	r2, #2
 8005a82:	2112      	movs	r1, #18
 8005a84:	f7ff ff78 	bl	8005978 <std>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	61a3      	str	r3, [r4, #24]
 8005a8c:	e7d2      	b.n	8005a34 <__sinit+0xc>
 8005a8e:	bf00      	nop
 8005a90:	08006694 	.word	0x08006694
 8005a94:	080059c1 	.word	0x080059c1

08005a98 <__sfp>:
 8005a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9a:	4607      	mov	r7, r0
 8005a9c:	f7ff ffac 	bl	80059f8 <__sfp_lock_acquire>
 8005aa0:	4b1e      	ldr	r3, [pc, #120]	; (8005b1c <__sfp+0x84>)
 8005aa2:	681e      	ldr	r6, [r3, #0]
 8005aa4:	69b3      	ldr	r3, [r6, #24]
 8005aa6:	b913      	cbnz	r3, 8005aae <__sfp+0x16>
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff ffbd 	bl	8005a28 <__sinit>
 8005aae:	3648      	adds	r6, #72	; 0x48
 8005ab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	d503      	bpl.n	8005ac0 <__sfp+0x28>
 8005ab8:	6833      	ldr	r3, [r6, #0]
 8005aba:	b30b      	cbz	r3, 8005b00 <__sfp+0x68>
 8005abc:	6836      	ldr	r6, [r6, #0]
 8005abe:	e7f7      	b.n	8005ab0 <__sfp+0x18>
 8005ac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ac4:	b9d5      	cbnz	r5, 8005afc <__sfp+0x64>
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <__sfp+0x88>)
 8005ac8:	60e3      	str	r3, [r4, #12]
 8005aca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ace:	6665      	str	r5, [r4, #100]	; 0x64
 8005ad0:	f000 f847 	bl	8005b62 <__retarget_lock_init_recursive>
 8005ad4:	f7ff ff96 	bl	8005a04 <__sfp_lock_release>
 8005ad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005adc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ae0:	6025      	str	r5, [r4, #0]
 8005ae2:	61a5      	str	r5, [r4, #24]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005aec:	f7ff fd2c 	bl	8005548 <memset>
 8005af0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005af4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005af8:	4620      	mov	r0, r4
 8005afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005afc:	3468      	adds	r4, #104	; 0x68
 8005afe:	e7d9      	b.n	8005ab4 <__sfp+0x1c>
 8005b00:	2104      	movs	r1, #4
 8005b02:	4638      	mov	r0, r7
 8005b04:	f7ff ff62 	bl	80059cc <__sfmoreglue>
 8005b08:	4604      	mov	r4, r0
 8005b0a:	6030      	str	r0, [r6, #0]
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d1d5      	bne.n	8005abc <__sfp+0x24>
 8005b10:	f7ff ff78 	bl	8005a04 <__sfp_lock_release>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	e7ee      	b.n	8005af8 <__sfp+0x60>
 8005b1a:	bf00      	nop
 8005b1c:	08006694 	.word	0x08006694
 8005b20:	ffff0001 	.word	0xffff0001

08005b24 <_fwalk_reent>:
 8005b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b28:	4606      	mov	r6, r0
 8005b2a:	4688      	mov	r8, r1
 8005b2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005b30:	2700      	movs	r7, #0
 8005b32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b36:	f1b9 0901 	subs.w	r9, r9, #1
 8005b3a:	d505      	bpl.n	8005b48 <_fwalk_reent+0x24>
 8005b3c:	6824      	ldr	r4, [r4, #0]
 8005b3e:	2c00      	cmp	r4, #0
 8005b40:	d1f7      	bne.n	8005b32 <_fwalk_reent+0xe>
 8005b42:	4638      	mov	r0, r7
 8005b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b48:	89ab      	ldrh	r3, [r5, #12]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d907      	bls.n	8005b5e <_fwalk_reent+0x3a>
 8005b4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b52:	3301      	adds	r3, #1
 8005b54:	d003      	beq.n	8005b5e <_fwalk_reent+0x3a>
 8005b56:	4629      	mov	r1, r5
 8005b58:	4630      	mov	r0, r6
 8005b5a:	47c0      	blx	r8
 8005b5c:	4307      	orrs	r7, r0
 8005b5e:	3568      	adds	r5, #104	; 0x68
 8005b60:	e7e9      	b.n	8005b36 <_fwalk_reent+0x12>

08005b62 <__retarget_lock_init_recursive>:
 8005b62:	4770      	bx	lr

08005b64 <__retarget_lock_acquire_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_release_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <__swhatbuf_r>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	460e      	mov	r6, r1
 8005b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b70:	2900      	cmp	r1, #0
 8005b72:	b096      	sub	sp, #88	; 0x58
 8005b74:	4614      	mov	r4, r2
 8005b76:	461d      	mov	r5, r3
 8005b78:	da08      	bge.n	8005b8c <__swhatbuf_r+0x24>
 8005b7a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	602a      	str	r2, [r5, #0]
 8005b82:	061a      	lsls	r2, r3, #24
 8005b84:	d410      	bmi.n	8005ba8 <__swhatbuf_r+0x40>
 8005b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b8a:	e00e      	b.n	8005baa <__swhatbuf_r+0x42>
 8005b8c:	466a      	mov	r2, sp
 8005b8e:	f000 fc83 	bl	8006498 <_fstat_r>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	dbf1      	blt.n	8005b7a <__swhatbuf_r+0x12>
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b9c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ba0:	425a      	negs	r2, r3
 8005ba2:	415a      	adcs	r2, r3
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	e7ee      	b.n	8005b86 <__swhatbuf_r+0x1e>
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	2000      	movs	r0, #0
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	b016      	add	sp, #88	; 0x58
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bb4 <__smakebuf_r>:
 8005bb4:	898b      	ldrh	r3, [r1, #12]
 8005bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bb8:	079d      	lsls	r5, r3, #30
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	d507      	bpl.n	8005bd0 <__smakebuf_r+0x1c>
 8005bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	6163      	str	r3, [r4, #20]
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	ab01      	add	r3, sp, #4
 8005bd2:	466a      	mov	r2, sp
 8005bd4:	f7ff ffc8 	bl	8005b68 <__swhatbuf_r>
 8005bd8:	9900      	ldr	r1, [sp, #0]
 8005bda:	4605      	mov	r5, r0
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f000 f895 	bl	8005d0c <_malloc_r>
 8005be2:	b948      	cbnz	r0, 8005bf8 <__smakebuf_r+0x44>
 8005be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005be8:	059a      	lsls	r2, r3, #22
 8005bea:	d4ef      	bmi.n	8005bcc <__smakebuf_r+0x18>
 8005bec:	f023 0303 	bic.w	r3, r3, #3
 8005bf0:	f043 0302 	orr.w	r3, r3, #2
 8005bf4:	81a3      	strh	r3, [r4, #12]
 8005bf6:	e7e3      	b.n	8005bc0 <__smakebuf_r+0xc>
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <__smakebuf_r+0x7c>)
 8005bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	6020      	str	r0, [r4, #0]
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	81a3      	strh	r3, [r4, #12]
 8005c06:	9b00      	ldr	r3, [sp, #0]
 8005c08:	6163      	str	r3, [r4, #20]
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	6120      	str	r0, [r4, #16]
 8005c0e:	b15b      	cbz	r3, 8005c28 <__smakebuf_r+0x74>
 8005c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c14:	4630      	mov	r0, r6
 8005c16:	f000 fc51 	bl	80064bc <_isatty_r>
 8005c1a:	b128      	cbz	r0, 8005c28 <__smakebuf_r+0x74>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	89a0      	ldrh	r0, [r4, #12]
 8005c2a:	4305      	orrs	r5, r0
 8005c2c:	81a5      	strh	r5, [r4, #12]
 8005c2e:	e7cd      	b.n	8005bcc <__smakebuf_r+0x18>
 8005c30:	080059c1 	.word	0x080059c1

08005c34 <_free_r>:
 8005c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d044      	beq.n	8005cc4 <_free_r+0x90>
 8005c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c3e:	9001      	str	r0, [sp, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f1a1 0404 	sub.w	r4, r1, #4
 8005c46:	bfb8      	it	lt
 8005c48:	18e4      	addlt	r4, r4, r3
 8005c4a:	f000 fc59 	bl	8006500 <__malloc_lock>
 8005c4e:	4a1e      	ldr	r2, [pc, #120]	; (8005cc8 <_free_r+0x94>)
 8005c50:	9801      	ldr	r0, [sp, #4]
 8005c52:	6813      	ldr	r3, [r2, #0]
 8005c54:	b933      	cbnz	r3, 8005c64 <_free_r+0x30>
 8005c56:	6063      	str	r3, [r4, #4]
 8005c58:	6014      	str	r4, [r2, #0]
 8005c5a:	b003      	add	sp, #12
 8005c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c60:	f000 bc54 	b.w	800650c <__malloc_unlock>
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	d908      	bls.n	8005c7a <_free_r+0x46>
 8005c68:	6825      	ldr	r5, [r4, #0]
 8005c6a:	1961      	adds	r1, r4, r5
 8005c6c:	428b      	cmp	r3, r1
 8005c6e:	bf01      	itttt	eq
 8005c70:	6819      	ldreq	r1, [r3, #0]
 8005c72:	685b      	ldreq	r3, [r3, #4]
 8005c74:	1949      	addeq	r1, r1, r5
 8005c76:	6021      	streq	r1, [r4, #0]
 8005c78:	e7ed      	b.n	8005c56 <_free_r+0x22>
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	b10b      	cbz	r3, 8005c84 <_free_r+0x50>
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	d9fa      	bls.n	8005c7a <_free_r+0x46>
 8005c84:	6811      	ldr	r1, [r2, #0]
 8005c86:	1855      	adds	r5, r2, r1
 8005c88:	42a5      	cmp	r5, r4
 8005c8a:	d10b      	bne.n	8005ca4 <_free_r+0x70>
 8005c8c:	6824      	ldr	r4, [r4, #0]
 8005c8e:	4421      	add	r1, r4
 8005c90:	1854      	adds	r4, r2, r1
 8005c92:	42a3      	cmp	r3, r4
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	d1e0      	bne.n	8005c5a <_free_r+0x26>
 8005c98:	681c      	ldr	r4, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	6053      	str	r3, [r2, #4]
 8005c9e:	4421      	add	r1, r4
 8005ca0:	6011      	str	r1, [r2, #0]
 8005ca2:	e7da      	b.n	8005c5a <_free_r+0x26>
 8005ca4:	d902      	bls.n	8005cac <_free_r+0x78>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	6003      	str	r3, [r0, #0]
 8005caa:	e7d6      	b.n	8005c5a <_free_r+0x26>
 8005cac:	6825      	ldr	r5, [r4, #0]
 8005cae:	1961      	adds	r1, r4, r5
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	bf04      	itt	eq
 8005cb4:	6819      	ldreq	r1, [r3, #0]
 8005cb6:	685b      	ldreq	r3, [r3, #4]
 8005cb8:	6063      	str	r3, [r4, #4]
 8005cba:	bf04      	itt	eq
 8005cbc:	1949      	addeq	r1, r1, r5
 8005cbe:	6021      	streq	r1, [r4, #0]
 8005cc0:	6054      	str	r4, [r2, #4]
 8005cc2:	e7ca      	b.n	8005c5a <_free_r+0x26>
 8005cc4:	b003      	add	sp, #12
 8005cc6:	bd30      	pop	{r4, r5, pc}
 8005cc8:	200008e8 	.word	0x200008e8

08005ccc <sbrk_aligned>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	4e0e      	ldr	r6, [pc, #56]	; (8005d08 <sbrk_aligned+0x3c>)
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	6831      	ldr	r1, [r6, #0]
 8005cd4:	4605      	mov	r5, r0
 8005cd6:	b911      	cbnz	r1, 8005cde <sbrk_aligned+0x12>
 8005cd8:	f000 fb7a 	bl	80063d0 <_sbrk_r>
 8005cdc:	6030      	str	r0, [r6, #0]
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 fb75 	bl	80063d0 <_sbrk_r>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	d00a      	beq.n	8005d00 <sbrk_aligned+0x34>
 8005cea:	1cc4      	adds	r4, r0, #3
 8005cec:	f024 0403 	bic.w	r4, r4, #3
 8005cf0:	42a0      	cmp	r0, r4
 8005cf2:	d007      	beq.n	8005d04 <sbrk_aligned+0x38>
 8005cf4:	1a21      	subs	r1, r4, r0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 fb6a 	bl	80063d0 <_sbrk_r>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d101      	bne.n	8005d04 <sbrk_aligned+0x38>
 8005d00:	f04f 34ff 	mov.w	r4, #4294967295
 8005d04:	4620      	mov	r0, r4
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	200008ec 	.word	0x200008ec

08005d0c <_malloc_r>:
 8005d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d10:	1ccd      	adds	r5, r1, #3
 8005d12:	f025 0503 	bic.w	r5, r5, #3
 8005d16:	3508      	adds	r5, #8
 8005d18:	2d0c      	cmp	r5, #12
 8005d1a:	bf38      	it	cc
 8005d1c:	250c      	movcc	r5, #12
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	4607      	mov	r7, r0
 8005d22:	db01      	blt.n	8005d28 <_malloc_r+0x1c>
 8005d24:	42a9      	cmp	r1, r5
 8005d26:	d905      	bls.n	8005d34 <_malloc_r+0x28>
 8005d28:	230c      	movs	r3, #12
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	4630      	mov	r0, r6
 8005d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d34:	4e2e      	ldr	r6, [pc, #184]	; (8005df0 <_malloc_r+0xe4>)
 8005d36:	f000 fbe3 	bl	8006500 <__malloc_lock>
 8005d3a:	6833      	ldr	r3, [r6, #0]
 8005d3c:	461c      	mov	r4, r3
 8005d3e:	bb34      	cbnz	r4, 8005d8e <_malloc_r+0x82>
 8005d40:	4629      	mov	r1, r5
 8005d42:	4638      	mov	r0, r7
 8005d44:	f7ff ffc2 	bl	8005ccc <sbrk_aligned>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	d14d      	bne.n	8005dea <_malloc_r+0xde>
 8005d4e:	6834      	ldr	r4, [r6, #0]
 8005d50:	4626      	mov	r6, r4
 8005d52:	2e00      	cmp	r6, #0
 8005d54:	d140      	bne.n	8005dd8 <_malloc_r+0xcc>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	eb04 0803 	add.w	r8, r4, r3
 8005d60:	f000 fb36 	bl	80063d0 <_sbrk_r>
 8005d64:	4580      	cmp	r8, r0
 8005d66:	d13a      	bne.n	8005dde <_malloc_r+0xd2>
 8005d68:	6821      	ldr	r1, [r4, #0]
 8005d6a:	3503      	adds	r5, #3
 8005d6c:	1a6d      	subs	r5, r5, r1
 8005d6e:	f025 0503 	bic.w	r5, r5, #3
 8005d72:	3508      	adds	r5, #8
 8005d74:	2d0c      	cmp	r5, #12
 8005d76:	bf38      	it	cc
 8005d78:	250c      	movcc	r5, #12
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f7ff ffa5 	bl	8005ccc <sbrk_aligned>
 8005d82:	3001      	adds	r0, #1
 8005d84:	d02b      	beq.n	8005dde <_malloc_r+0xd2>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	442b      	add	r3, r5
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	e00e      	b.n	8005dac <_malloc_r+0xa0>
 8005d8e:	6822      	ldr	r2, [r4, #0]
 8005d90:	1b52      	subs	r2, r2, r5
 8005d92:	d41e      	bmi.n	8005dd2 <_malloc_r+0xc6>
 8005d94:	2a0b      	cmp	r2, #11
 8005d96:	d916      	bls.n	8005dc6 <_malloc_r+0xba>
 8005d98:	1961      	adds	r1, r4, r5
 8005d9a:	42a3      	cmp	r3, r4
 8005d9c:	6025      	str	r5, [r4, #0]
 8005d9e:	bf18      	it	ne
 8005da0:	6059      	strne	r1, [r3, #4]
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	bf08      	it	eq
 8005da6:	6031      	streq	r1, [r6, #0]
 8005da8:	5162      	str	r2, [r4, r5]
 8005daa:	604b      	str	r3, [r1, #4]
 8005dac:	4638      	mov	r0, r7
 8005dae:	f104 060b 	add.w	r6, r4, #11
 8005db2:	f000 fbab 	bl	800650c <__malloc_unlock>
 8005db6:	f026 0607 	bic.w	r6, r6, #7
 8005dba:	1d23      	adds	r3, r4, #4
 8005dbc:	1af2      	subs	r2, r6, r3
 8005dbe:	d0b6      	beq.n	8005d2e <_malloc_r+0x22>
 8005dc0:	1b9b      	subs	r3, r3, r6
 8005dc2:	50a3      	str	r3, [r4, r2]
 8005dc4:	e7b3      	b.n	8005d2e <_malloc_r+0x22>
 8005dc6:	6862      	ldr	r2, [r4, #4]
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	bf0c      	ite	eq
 8005dcc:	6032      	streq	r2, [r6, #0]
 8005dce:	605a      	strne	r2, [r3, #4]
 8005dd0:	e7ec      	b.n	8005dac <_malloc_r+0xa0>
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	6864      	ldr	r4, [r4, #4]
 8005dd6:	e7b2      	b.n	8005d3e <_malloc_r+0x32>
 8005dd8:	4634      	mov	r4, r6
 8005dda:	6876      	ldr	r6, [r6, #4]
 8005ddc:	e7b9      	b.n	8005d52 <_malloc_r+0x46>
 8005dde:	230c      	movs	r3, #12
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	4638      	mov	r0, r7
 8005de4:	f000 fb92 	bl	800650c <__malloc_unlock>
 8005de8:	e7a1      	b.n	8005d2e <_malloc_r+0x22>
 8005dea:	6025      	str	r5, [r4, #0]
 8005dec:	e7de      	b.n	8005dac <_malloc_r+0xa0>
 8005dee:	bf00      	nop
 8005df0:	200008e8 	.word	0x200008e8

08005df4 <__sfputc_r>:
 8005df4:	6893      	ldr	r3, [r2, #8]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	b410      	push	{r4}
 8005dfc:	6093      	str	r3, [r2, #8]
 8005dfe:	da08      	bge.n	8005e12 <__sfputc_r+0x1e>
 8005e00:	6994      	ldr	r4, [r2, #24]
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	db01      	blt.n	8005e0a <__sfputc_r+0x16>
 8005e06:	290a      	cmp	r1, #10
 8005e08:	d103      	bne.n	8005e12 <__sfputc_r+0x1e>
 8005e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e0e:	f7ff bc31 	b.w	8005674 <__swbuf_r>
 8005e12:	6813      	ldr	r3, [r2, #0]
 8005e14:	1c58      	adds	r0, r3, #1
 8005e16:	6010      	str	r0, [r2, #0]
 8005e18:	7019      	strb	r1, [r3, #0]
 8005e1a:	4608      	mov	r0, r1
 8005e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <__sfputs_r>:
 8005e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e24:	4606      	mov	r6, r0
 8005e26:	460f      	mov	r7, r1
 8005e28:	4614      	mov	r4, r2
 8005e2a:	18d5      	adds	r5, r2, r3
 8005e2c:	42ac      	cmp	r4, r5
 8005e2e:	d101      	bne.n	8005e34 <__sfputs_r+0x12>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e007      	b.n	8005e44 <__sfputs_r+0x22>
 8005e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e38:	463a      	mov	r2, r7
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ffda 	bl	8005df4 <__sfputc_r>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d1f3      	bne.n	8005e2c <__sfputs_r+0xa>
 8005e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e48 <_vfiprintf_r>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	460d      	mov	r5, r1
 8005e4e:	b09d      	sub	sp, #116	; 0x74
 8005e50:	4614      	mov	r4, r2
 8005e52:	4698      	mov	r8, r3
 8005e54:	4606      	mov	r6, r0
 8005e56:	b118      	cbz	r0, 8005e60 <_vfiprintf_r+0x18>
 8005e58:	6983      	ldr	r3, [r0, #24]
 8005e5a:	b90b      	cbnz	r3, 8005e60 <_vfiprintf_r+0x18>
 8005e5c:	f7ff fde4 	bl	8005a28 <__sinit>
 8005e60:	4b89      	ldr	r3, [pc, #548]	; (8006088 <_vfiprintf_r+0x240>)
 8005e62:	429d      	cmp	r5, r3
 8005e64:	d11b      	bne.n	8005e9e <_vfiprintf_r+0x56>
 8005e66:	6875      	ldr	r5, [r6, #4]
 8005e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e6a:	07d9      	lsls	r1, r3, #31
 8005e6c:	d405      	bmi.n	8005e7a <_vfiprintf_r+0x32>
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	059a      	lsls	r2, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_vfiprintf_r+0x32>
 8005e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e76:	f7ff fe75 	bl	8005b64 <__retarget_lock_acquire_recursive>
 8005e7a:	89ab      	ldrh	r3, [r5, #12]
 8005e7c:	071b      	lsls	r3, r3, #28
 8005e7e:	d501      	bpl.n	8005e84 <_vfiprintf_r+0x3c>
 8005e80:	692b      	ldr	r3, [r5, #16]
 8005e82:	b9eb      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x78>
 8005e84:	4629      	mov	r1, r5
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff fc46 	bl	8005718 <__swsetup_r>
 8005e8c:	b1c0      	cbz	r0, 8005ec0 <_vfiprintf_r+0x78>
 8005e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e90:	07dc      	lsls	r4, r3, #31
 8005e92:	d50e      	bpl.n	8005eb2 <_vfiprintf_r+0x6a>
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295
 8005e98:	b01d      	add	sp, #116	; 0x74
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	4b7b      	ldr	r3, [pc, #492]	; (800608c <_vfiprintf_r+0x244>)
 8005ea0:	429d      	cmp	r5, r3
 8005ea2:	d101      	bne.n	8005ea8 <_vfiprintf_r+0x60>
 8005ea4:	68b5      	ldr	r5, [r6, #8]
 8005ea6:	e7df      	b.n	8005e68 <_vfiprintf_r+0x20>
 8005ea8:	4b79      	ldr	r3, [pc, #484]	; (8006090 <_vfiprintf_r+0x248>)
 8005eaa:	429d      	cmp	r5, r3
 8005eac:	bf08      	it	eq
 8005eae:	68f5      	ldreq	r5, [r6, #12]
 8005eb0:	e7da      	b.n	8005e68 <_vfiprintf_r+0x20>
 8005eb2:	89ab      	ldrh	r3, [r5, #12]
 8005eb4:	0598      	lsls	r0, r3, #22
 8005eb6:	d4ed      	bmi.n	8005e94 <_vfiprintf_r+0x4c>
 8005eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eba:	f7ff fe54 	bl	8005b66 <__retarget_lock_release_recursive>
 8005ebe:	e7e9      	b.n	8005e94 <_vfiprintf_r+0x4c>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ece:	2330      	movs	r3, #48	; 0x30
 8005ed0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006094 <_vfiprintf_r+0x24c>
 8005ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ed8:	f04f 0901 	mov.w	r9, #1
 8005edc:	4623      	mov	r3, r4
 8005ede:	469a      	mov	sl, r3
 8005ee0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ee4:	b10a      	cbz	r2, 8005eea <_vfiprintf_r+0xa2>
 8005ee6:	2a25      	cmp	r2, #37	; 0x25
 8005ee8:	d1f9      	bne.n	8005ede <_vfiprintf_r+0x96>
 8005eea:	ebba 0b04 	subs.w	fp, sl, r4
 8005eee:	d00b      	beq.n	8005f08 <_vfiprintf_r+0xc0>
 8005ef0:	465b      	mov	r3, fp
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ff93 	bl	8005e22 <__sfputs_r>
 8005efc:	3001      	adds	r0, #1
 8005efe:	f000 80aa 	beq.w	8006056 <_vfiprintf_r+0x20e>
 8005f02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f04:	445a      	add	r2, fp
 8005f06:	9209      	str	r2, [sp, #36]	; 0x24
 8005f08:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a2 	beq.w	8006056 <_vfiprintf_r+0x20e>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f04f 32ff 	mov.w	r2, #4294967295
 8005f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f1c:	f10a 0a01 	add.w	sl, sl, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	9307      	str	r3, [sp, #28]
 8005f24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f28:	931a      	str	r3, [sp, #104]	; 0x68
 8005f2a:	4654      	mov	r4, sl
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f32:	4858      	ldr	r0, [pc, #352]	; (8006094 <_vfiprintf_r+0x24c>)
 8005f34:	f7fa f9a4 	bl	8000280 <memchr>
 8005f38:	9a04      	ldr	r2, [sp, #16]
 8005f3a:	b9d8      	cbnz	r0, 8005f74 <_vfiprintf_r+0x12c>
 8005f3c:	06d1      	lsls	r1, r2, #27
 8005f3e:	bf44      	itt	mi
 8005f40:	2320      	movmi	r3, #32
 8005f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f46:	0713      	lsls	r3, r2, #28
 8005f48:	bf44      	itt	mi
 8005f4a:	232b      	movmi	r3, #43	; 0x2b
 8005f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f50:	f89a 3000 	ldrb.w	r3, [sl]
 8005f54:	2b2a      	cmp	r3, #42	; 0x2a
 8005f56:	d015      	beq.n	8005f84 <_vfiprintf_r+0x13c>
 8005f58:	9a07      	ldr	r2, [sp, #28]
 8005f5a:	4654      	mov	r4, sl
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f04f 0c0a 	mov.w	ip, #10
 8005f62:	4621      	mov	r1, r4
 8005f64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f68:	3b30      	subs	r3, #48	; 0x30
 8005f6a:	2b09      	cmp	r3, #9
 8005f6c:	d94e      	bls.n	800600c <_vfiprintf_r+0x1c4>
 8005f6e:	b1b0      	cbz	r0, 8005f9e <_vfiprintf_r+0x156>
 8005f70:	9207      	str	r2, [sp, #28]
 8005f72:	e014      	b.n	8005f9e <_vfiprintf_r+0x156>
 8005f74:	eba0 0308 	sub.w	r3, r0, r8
 8005f78:	fa09 f303 	lsl.w	r3, r9, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	9304      	str	r3, [sp, #16]
 8005f80:	46a2      	mov	sl, r4
 8005f82:	e7d2      	b.n	8005f2a <_vfiprintf_r+0xe2>
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	1d19      	adds	r1, r3, #4
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	9103      	str	r1, [sp, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfbb      	ittet	lt
 8005f90:	425b      	neglt	r3, r3
 8005f92:	f042 0202 	orrlt.w	r2, r2, #2
 8005f96:	9307      	strge	r3, [sp, #28]
 8005f98:	9307      	strlt	r3, [sp, #28]
 8005f9a:	bfb8      	it	lt
 8005f9c:	9204      	strlt	r2, [sp, #16]
 8005f9e:	7823      	ldrb	r3, [r4, #0]
 8005fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8005fa2:	d10c      	bne.n	8005fbe <_vfiprintf_r+0x176>
 8005fa4:	7863      	ldrb	r3, [r4, #1]
 8005fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa8:	d135      	bne.n	8006016 <_vfiprintf_r+0x1ce>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	1d1a      	adds	r2, r3, #4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	9203      	str	r2, [sp, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fba:	3402      	adds	r4, #2
 8005fbc:	9305      	str	r3, [sp, #20]
 8005fbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80060a4 <_vfiprintf_r+0x25c>
 8005fc2:	7821      	ldrb	r1, [r4, #0]
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f7fa f95a 	bl	8000280 <memchr>
 8005fcc:	b140      	cbz	r0, 8005fe0 <_vfiprintf_r+0x198>
 8005fce:	2340      	movs	r3, #64	; 0x40
 8005fd0:	eba0 000a 	sub.w	r0, r0, sl
 8005fd4:	fa03 f000 	lsl.w	r0, r3, r0
 8005fd8:	9b04      	ldr	r3, [sp, #16]
 8005fda:	4303      	orrs	r3, r0
 8005fdc:	3401      	adds	r4, #1
 8005fde:	9304      	str	r3, [sp, #16]
 8005fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fe4:	482c      	ldr	r0, [pc, #176]	; (8006098 <_vfiprintf_r+0x250>)
 8005fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fea:	2206      	movs	r2, #6
 8005fec:	f7fa f948 	bl	8000280 <memchr>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d03f      	beq.n	8006074 <_vfiprintf_r+0x22c>
 8005ff4:	4b29      	ldr	r3, [pc, #164]	; (800609c <_vfiprintf_r+0x254>)
 8005ff6:	bb1b      	cbnz	r3, 8006040 <_vfiprintf_r+0x1f8>
 8005ff8:	9b03      	ldr	r3, [sp, #12]
 8005ffa:	3307      	adds	r3, #7
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006006:	443b      	add	r3, r7
 8006008:	9309      	str	r3, [sp, #36]	; 0x24
 800600a:	e767      	b.n	8005edc <_vfiprintf_r+0x94>
 800600c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006010:	460c      	mov	r4, r1
 8006012:	2001      	movs	r0, #1
 8006014:	e7a5      	b.n	8005f62 <_vfiprintf_r+0x11a>
 8006016:	2300      	movs	r3, #0
 8006018:	3401      	adds	r4, #1
 800601a:	9305      	str	r3, [sp, #20]
 800601c:	4619      	mov	r1, r3
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4620      	mov	r0, r4
 8006024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006028:	3a30      	subs	r2, #48	; 0x30
 800602a:	2a09      	cmp	r2, #9
 800602c:	d903      	bls.n	8006036 <_vfiprintf_r+0x1ee>
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0c5      	beq.n	8005fbe <_vfiprintf_r+0x176>
 8006032:	9105      	str	r1, [sp, #20]
 8006034:	e7c3      	b.n	8005fbe <_vfiprintf_r+0x176>
 8006036:	fb0c 2101 	mla	r1, ip, r1, r2
 800603a:	4604      	mov	r4, r0
 800603c:	2301      	movs	r3, #1
 800603e:	e7f0      	b.n	8006022 <_vfiprintf_r+0x1da>
 8006040:	ab03      	add	r3, sp, #12
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	462a      	mov	r2, r5
 8006046:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <_vfiprintf_r+0x258>)
 8006048:	a904      	add	r1, sp, #16
 800604a:	4630      	mov	r0, r6
 800604c:	f3af 8000 	nop.w
 8006050:	4607      	mov	r7, r0
 8006052:	1c78      	adds	r0, r7, #1
 8006054:	d1d6      	bne.n	8006004 <_vfiprintf_r+0x1bc>
 8006056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006058:	07d9      	lsls	r1, r3, #31
 800605a:	d405      	bmi.n	8006068 <_vfiprintf_r+0x220>
 800605c:	89ab      	ldrh	r3, [r5, #12]
 800605e:	059a      	lsls	r2, r3, #22
 8006060:	d402      	bmi.n	8006068 <_vfiprintf_r+0x220>
 8006062:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006064:	f7ff fd7f 	bl	8005b66 <__retarget_lock_release_recursive>
 8006068:	89ab      	ldrh	r3, [r5, #12]
 800606a:	065b      	lsls	r3, r3, #25
 800606c:	f53f af12 	bmi.w	8005e94 <_vfiprintf_r+0x4c>
 8006070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006072:	e711      	b.n	8005e98 <_vfiprintf_r+0x50>
 8006074:	ab03      	add	r3, sp, #12
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	462a      	mov	r2, r5
 800607a:	4b09      	ldr	r3, [pc, #36]	; (80060a0 <_vfiprintf_r+0x258>)
 800607c:	a904      	add	r1, sp, #16
 800607e:	4630      	mov	r0, r6
 8006080:	f000 f880 	bl	8006184 <_printf_i>
 8006084:	e7e4      	b.n	8006050 <_vfiprintf_r+0x208>
 8006086:	bf00      	nop
 8006088:	080066b8 	.word	0x080066b8
 800608c:	080066d8 	.word	0x080066d8
 8006090:	08006698 	.word	0x08006698
 8006094:	080066f8 	.word	0x080066f8
 8006098:	08006702 	.word	0x08006702
 800609c:	00000000 	.word	0x00000000
 80060a0:	08005e23 	.word	0x08005e23
 80060a4:	080066fe 	.word	0x080066fe

080060a8 <_printf_common>:
 80060a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	4616      	mov	r6, r2
 80060ae:	4699      	mov	r9, r3
 80060b0:	688a      	ldr	r2, [r1, #8]
 80060b2:	690b      	ldr	r3, [r1, #16]
 80060b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b8:	4293      	cmp	r3, r2
 80060ba:	bfb8      	it	lt
 80060bc:	4613      	movlt	r3, r2
 80060be:	6033      	str	r3, [r6, #0]
 80060c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c4:	4607      	mov	r7, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	b10a      	cbz	r2, 80060ce <_printf_common+0x26>
 80060ca:	3301      	adds	r3, #1
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	0699      	lsls	r1, r3, #26
 80060d2:	bf42      	ittt	mi
 80060d4:	6833      	ldrmi	r3, [r6, #0]
 80060d6:	3302      	addmi	r3, #2
 80060d8:	6033      	strmi	r3, [r6, #0]
 80060da:	6825      	ldr	r5, [r4, #0]
 80060dc:	f015 0506 	ands.w	r5, r5, #6
 80060e0:	d106      	bne.n	80060f0 <_printf_common+0x48>
 80060e2:	f104 0a19 	add.w	sl, r4, #25
 80060e6:	68e3      	ldr	r3, [r4, #12]
 80060e8:	6832      	ldr	r2, [r6, #0]
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	42ab      	cmp	r3, r5
 80060ee:	dc26      	bgt.n	800613e <_printf_common+0x96>
 80060f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f4:	1e13      	subs	r3, r2, #0
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	bf18      	it	ne
 80060fa:	2301      	movne	r3, #1
 80060fc:	0692      	lsls	r2, r2, #26
 80060fe:	d42b      	bmi.n	8006158 <_printf_common+0xb0>
 8006100:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006104:	4649      	mov	r1, r9
 8006106:	4638      	mov	r0, r7
 8006108:	47c0      	blx	r8
 800610a:	3001      	adds	r0, #1
 800610c:	d01e      	beq.n	800614c <_printf_common+0xa4>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	68e5      	ldr	r5, [r4, #12]
 8006112:	6832      	ldr	r2, [r6, #0]
 8006114:	f003 0306 	and.w	r3, r3, #6
 8006118:	2b04      	cmp	r3, #4
 800611a:	bf08      	it	eq
 800611c:	1aad      	subeq	r5, r5, r2
 800611e:	68a3      	ldr	r3, [r4, #8]
 8006120:	6922      	ldr	r2, [r4, #16]
 8006122:	bf0c      	ite	eq
 8006124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006128:	2500      	movne	r5, #0
 800612a:	4293      	cmp	r3, r2
 800612c:	bfc4      	itt	gt
 800612e:	1a9b      	subgt	r3, r3, r2
 8006130:	18ed      	addgt	r5, r5, r3
 8006132:	2600      	movs	r6, #0
 8006134:	341a      	adds	r4, #26
 8006136:	42b5      	cmp	r5, r6
 8006138:	d11a      	bne.n	8006170 <_printf_common+0xc8>
 800613a:	2000      	movs	r0, #0
 800613c:	e008      	b.n	8006150 <_printf_common+0xa8>
 800613e:	2301      	movs	r3, #1
 8006140:	4652      	mov	r2, sl
 8006142:	4649      	mov	r1, r9
 8006144:	4638      	mov	r0, r7
 8006146:	47c0      	blx	r8
 8006148:	3001      	adds	r0, #1
 800614a:	d103      	bne.n	8006154 <_printf_common+0xac>
 800614c:	f04f 30ff 	mov.w	r0, #4294967295
 8006150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006154:	3501      	adds	r5, #1
 8006156:	e7c6      	b.n	80060e6 <_printf_common+0x3e>
 8006158:	18e1      	adds	r1, r4, r3
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	2030      	movs	r0, #48	; 0x30
 800615e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006162:	4422      	add	r2, r4
 8006164:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006168:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800616c:	3302      	adds	r3, #2
 800616e:	e7c7      	b.n	8006100 <_printf_common+0x58>
 8006170:	2301      	movs	r3, #1
 8006172:	4622      	mov	r2, r4
 8006174:	4649      	mov	r1, r9
 8006176:	4638      	mov	r0, r7
 8006178:	47c0      	blx	r8
 800617a:	3001      	adds	r0, #1
 800617c:	d0e6      	beq.n	800614c <_printf_common+0xa4>
 800617e:	3601      	adds	r6, #1
 8006180:	e7d9      	b.n	8006136 <_printf_common+0x8e>
	...

08006184 <_printf_i>:
 8006184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	7e0f      	ldrb	r7, [r1, #24]
 800618a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800618c:	2f78      	cmp	r7, #120	; 0x78
 800618e:	4691      	mov	r9, r2
 8006190:	4680      	mov	r8, r0
 8006192:	460c      	mov	r4, r1
 8006194:	469a      	mov	sl, r3
 8006196:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800619a:	d807      	bhi.n	80061ac <_printf_i+0x28>
 800619c:	2f62      	cmp	r7, #98	; 0x62
 800619e:	d80a      	bhi.n	80061b6 <_printf_i+0x32>
 80061a0:	2f00      	cmp	r7, #0
 80061a2:	f000 80d8 	beq.w	8006356 <_printf_i+0x1d2>
 80061a6:	2f58      	cmp	r7, #88	; 0x58
 80061a8:	f000 80a3 	beq.w	80062f2 <_printf_i+0x16e>
 80061ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b4:	e03a      	b.n	800622c <_printf_i+0xa8>
 80061b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ba:	2b15      	cmp	r3, #21
 80061bc:	d8f6      	bhi.n	80061ac <_printf_i+0x28>
 80061be:	a101      	add	r1, pc, #4	; (adr r1, 80061c4 <_printf_i+0x40>)
 80061c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c4:	0800621d 	.word	0x0800621d
 80061c8:	08006231 	.word	0x08006231
 80061cc:	080061ad 	.word	0x080061ad
 80061d0:	080061ad 	.word	0x080061ad
 80061d4:	080061ad 	.word	0x080061ad
 80061d8:	080061ad 	.word	0x080061ad
 80061dc:	08006231 	.word	0x08006231
 80061e0:	080061ad 	.word	0x080061ad
 80061e4:	080061ad 	.word	0x080061ad
 80061e8:	080061ad 	.word	0x080061ad
 80061ec:	080061ad 	.word	0x080061ad
 80061f0:	0800633d 	.word	0x0800633d
 80061f4:	08006261 	.word	0x08006261
 80061f8:	0800631f 	.word	0x0800631f
 80061fc:	080061ad 	.word	0x080061ad
 8006200:	080061ad 	.word	0x080061ad
 8006204:	0800635f 	.word	0x0800635f
 8006208:	080061ad 	.word	0x080061ad
 800620c:	08006261 	.word	0x08006261
 8006210:	080061ad 	.word	0x080061ad
 8006214:	080061ad 	.word	0x080061ad
 8006218:	08006327 	.word	0x08006327
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	602a      	str	r2, [r5, #0]
 8006224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800622c:	2301      	movs	r3, #1
 800622e:	e0a3      	b.n	8006378 <_printf_i+0x1f4>
 8006230:	6820      	ldr	r0, [r4, #0]
 8006232:	6829      	ldr	r1, [r5, #0]
 8006234:	0606      	lsls	r6, r0, #24
 8006236:	f101 0304 	add.w	r3, r1, #4
 800623a:	d50a      	bpl.n	8006252 <_printf_i+0xce>
 800623c:	680e      	ldr	r6, [r1, #0]
 800623e:	602b      	str	r3, [r5, #0]
 8006240:	2e00      	cmp	r6, #0
 8006242:	da03      	bge.n	800624c <_printf_i+0xc8>
 8006244:	232d      	movs	r3, #45	; 0x2d
 8006246:	4276      	negs	r6, r6
 8006248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624c:	485e      	ldr	r0, [pc, #376]	; (80063c8 <_printf_i+0x244>)
 800624e:	230a      	movs	r3, #10
 8006250:	e019      	b.n	8006286 <_printf_i+0x102>
 8006252:	680e      	ldr	r6, [r1, #0]
 8006254:	602b      	str	r3, [r5, #0]
 8006256:	f010 0f40 	tst.w	r0, #64	; 0x40
 800625a:	bf18      	it	ne
 800625c:	b236      	sxthne	r6, r6
 800625e:	e7ef      	b.n	8006240 <_printf_i+0xbc>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	6820      	ldr	r0, [r4, #0]
 8006264:	1d19      	adds	r1, r3, #4
 8006266:	6029      	str	r1, [r5, #0]
 8006268:	0601      	lsls	r1, r0, #24
 800626a:	d501      	bpl.n	8006270 <_printf_i+0xec>
 800626c:	681e      	ldr	r6, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0xf2>
 8006270:	0646      	lsls	r6, r0, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0xe8>
 8006274:	881e      	ldrh	r6, [r3, #0]
 8006276:	4854      	ldr	r0, [pc, #336]	; (80063c8 <_printf_i+0x244>)
 8006278:	2f6f      	cmp	r7, #111	; 0x6f
 800627a:	bf0c      	ite	eq
 800627c:	2308      	moveq	r3, #8
 800627e:	230a      	movne	r3, #10
 8006280:	2100      	movs	r1, #0
 8006282:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006286:	6865      	ldr	r5, [r4, #4]
 8006288:	60a5      	str	r5, [r4, #8]
 800628a:	2d00      	cmp	r5, #0
 800628c:	bfa2      	ittt	ge
 800628e:	6821      	ldrge	r1, [r4, #0]
 8006290:	f021 0104 	bicge.w	r1, r1, #4
 8006294:	6021      	strge	r1, [r4, #0]
 8006296:	b90e      	cbnz	r6, 800629c <_printf_i+0x118>
 8006298:	2d00      	cmp	r5, #0
 800629a:	d04d      	beq.n	8006338 <_printf_i+0x1b4>
 800629c:	4615      	mov	r5, r2
 800629e:	fbb6 f1f3 	udiv	r1, r6, r3
 80062a2:	fb03 6711 	mls	r7, r3, r1, r6
 80062a6:	5dc7      	ldrb	r7, [r0, r7]
 80062a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062ac:	4637      	mov	r7, r6
 80062ae:	42bb      	cmp	r3, r7
 80062b0:	460e      	mov	r6, r1
 80062b2:	d9f4      	bls.n	800629e <_printf_i+0x11a>
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10b      	bne.n	80062d0 <_printf_i+0x14c>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	07de      	lsls	r6, r3, #31
 80062bc:	d508      	bpl.n	80062d0 <_printf_i+0x14c>
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	6861      	ldr	r1, [r4, #4]
 80062c2:	4299      	cmp	r1, r3
 80062c4:	bfde      	ittt	le
 80062c6:	2330      	movle	r3, #48	; 0x30
 80062c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062d0:	1b52      	subs	r2, r2, r5
 80062d2:	6122      	str	r2, [r4, #16]
 80062d4:	f8cd a000 	str.w	sl, [sp]
 80062d8:	464b      	mov	r3, r9
 80062da:	aa03      	add	r2, sp, #12
 80062dc:	4621      	mov	r1, r4
 80062de:	4640      	mov	r0, r8
 80062e0:	f7ff fee2 	bl	80060a8 <_printf_common>
 80062e4:	3001      	adds	r0, #1
 80062e6:	d14c      	bne.n	8006382 <_printf_i+0x1fe>
 80062e8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ec:	b004      	add	sp, #16
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	4835      	ldr	r0, [pc, #212]	; (80063c8 <_printf_i+0x244>)
 80062f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062f8:	6829      	ldr	r1, [r5, #0]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006300:	6029      	str	r1, [r5, #0]
 8006302:	061d      	lsls	r5, r3, #24
 8006304:	d514      	bpl.n	8006330 <_printf_i+0x1ac>
 8006306:	07df      	lsls	r7, r3, #31
 8006308:	bf44      	itt	mi
 800630a:	f043 0320 	orrmi.w	r3, r3, #32
 800630e:	6023      	strmi	r3, [r4, #0]
 8006310:	b91e      	cbnz	r6, 800631a <_printf_i+0x196>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f023 0320 	bic.w	r3, r3, #32
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	2310      	movs	r3, #16
 800631c:	e7b0      	b.n	8006280 <_printf_i+0xfc>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	f043 0320 	orr.w	r3, r3, #32
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	2378      	movs	r3, #120	; 0x78
 8006328:	4828      	ldr	r0, [pc, #160]	; (80063cc <_printf_i+0x248>)
 800632a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800632e:	e7e3      	b.n	80062f8 <_printf_i+0x174>
 8006330:	0659      	lsls	r1, r3, #25
 8006332:	bf48      	it	mi
 8006334:	b2b6      	uxthmi	r6, r6
 8006336:	e7e6      	b.n	8006306 <_printf_i+0x182>
 8006338:	4615      	mov	r5, r2
 800633a:	e7bb      	b.n	80062b4 <_printf_i+0x130>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	6826      	ldr	r6, [r4, #0]
 8006340:	6961      	ldr	r1, [r4, #20]
 8006342:	1d18      	adds	r0, r3, #4
 8006344:	6028      	str	r0, [r5, #0]
 8006346:	0635      	lsls	r5, r6, #24
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	d501      	bpl.n	8006350 <_printf_i+0x1cc>
 800634c:	6019      	str	r1, [r3, #0]
 800634e:	e002      	b.n	8006356 <_printf_i+0x1d2>
 8006350:	0670      	lsls	r0, r6, #25
 8006352:	d5fb      	bpl.n	800634c <_printf_i+0x1c8>
 8006354:	8019      	strh	r1, [r3, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	6123      	str	r3, [r4, #16]
 800635a:	4615      	mov	r5, r2
 800635c:	e7ba      	b.n	80062d4 <_printf_i+0x150>
 800635e:	682b      	ldr	r3, [r5, #0]
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	602a      	str	r2, [r5, #0]
 8006364:	681d      	ldr	r5, [r3, #0]
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	2100      	movs	r1, #0
 800636a:	4628      	mov	r0, r5
 800636c:	f7f9 ff88 	bl	8000280 <memchr>
 8006370:	b108      	cbz	r0, 8006376 <_printf_i+0x1f2>
 8006372:	1b40      	subs	r0, r0, r5
 8006374:	6060      	str	r0, [r4, #4]
 8006376:	6863      	ldr	r3, [r4, #4]
 8006378:	6123      	str	r3, [r4, #16]
 800637a:	2300      	movs	r3, #0
 800637c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006380:	e7a8      	b.n	80062d4 <_printf_i+0x150>
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	462a      	mov	r2, r5
 8006386:	4649      	mov	r1, r9
 8006388:	4640      	mov	r0, r8
 800638a:	47d0      	blx	sl
 800638c:	3001      	adds	r0, #1
 800638e:	d0ab      	beq.n	80062e8 <_printf_i+0x164>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	079b      	lsls	r3, r3, #30
 8006394:	d413      	bmi.n	80063be <_printf_i+0x23a>
 8006396:	68e0      	ldr	r0, [r4, #12]
 8006398:	9b03      	ldr	r3, [sp, #12]
 800639a:	4298      	cmp	r0, r3
 800639c:	bfb8      	it	lt
 800639e:	4618      	movlt	r0, r3
 80063a0:	e7a4      	b.n	80062ec <_printf_i+0x168>
 80063a2:	2301      	movs	r3, #1
 80063a4:	4632      	mov	r2, r6
 80063a6:	4649      	mov	r1, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	47d0      	blx	sl
 80063ac:	3001      	adds	r0, #1
 80063ae:	d09b      	beq.n	80062e8 <_printf_i+0x164>
 80063b0:	3501      	adds	r5, #1
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	9903      	ldr	r1, [sp, #12]
 80063b6:	1a5b      	subs	r3, r3, r1
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dcf2      	bgt.n	80063a2 <_printf_i+0x21e>
 80063bc:	e7eb      	b.n	8006396 <_printf_i+0x212>
 80063be:	2500      	movs	r5, #0
 80063c0:	f104 0619 	add.w	r6, r4, #25
 80063c4:	e7f5      	b.n	80063b2 <_printf_i+0x22e>
 80063c6:	bf00      	nop
 80063c8:	08006709 	.word	0x08006709
 80063cc:	0800671a 	.word	0x0800671a

080063d0 <_sbrk_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4d06      	ldr	r5, [pc, #24]	; (80063ec <_sbrk_r+0x1c>)
 80063d4:	2300      	movs	r3, #0
 80063d6:	4604      	mov	r4, r0
 80063d8:	4608      	mov	r0, r1
 80063da:	602b      	str	r3, [r5, #0]
 80063dc:	f000 f8ae 	bl	800653c <_sbrk>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d102      	bne.n	80063ea <_sbrk_r+0x1a>
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	b103      	cbz	r3, 80063ea <_sbrk_r+0x1a>
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	bd38      	pop	{r3, r4, r5, pc}
 80063ec:	200008f0 	.word	0x200008f0

080063f0 <__sread>:
 80063f0:	b510      	push	{r4, lr}
 80063f2:	460c      	mov	r4, r1
 80063f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f8:	f000 f88e 	bl	8006518 <_read_r>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	bfab      	itete	ge
 8006400:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006402:	89a3      	ldrhlt	r3, [r4, #12]
 8006404:	181b      	addge	r3, r3, r0
 8006406:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800640a:	bfac      	ite	ge
 800640c:	6563      	strge	r3, [r4, #84]	; 0x54
 800640e:	81a3      	strhlt	r3, [r4, #12]
 8006410:	bd10      	pop	{r4, pc}

08006412 <__swrite>:
 8006412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	461f      	mov	r7, r3
 8006418:	898b      	ldrh	r3, [r1, #12]
 800641a:	05db      	lsls	r3, r3, #23
 800641c:	4605      	mov	r5, r0
 800641e:	460c      	mov	r4, r1
 8006420:	4616      	mov	r6, r2
 8006422:	d505      	bpl.n	8006430 <__swrite+0x1e>
 8006424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006428:	2302      	movs	r3, #2
 800642a:	2200      	movs	r2, #0
 800642c:	f000 f856 	bl	80064dc <_lseek_r>
 8006430:	89a3      	ldrh	r3, [r4, #12]
 8006432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006436:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	4628      	mov	r0, r5
 8006442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006446:	f7fe bcc3 	b.w	8004dd0 <_write_r>

0800644a <__sseek>:
 800644a:	b510      	push	{r4, lr}
 800644c:	460c      	mov	r4, r1
 800644e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006452:	f000 f843 	bl	80064dc <_lseek_r>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	89a3      	ldrh	r3, [r4, #12]
 800645a:	bf15      	itete	ne
 800645c:	6560      	strne	r0, [r4, #84]	; 0x54
 800645e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006462:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006466:	81a3      	strheq	r3, [r4, #12]
 8006468:	bf18      	it	ne
 800646a:	81a3      	strhne	r3, [r4, #12]
 800646c:	bd10      	pop	{r4, pc}

0800646e <__sclose>:
 800646e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006472:	f000 b801 	b.w	8006478 <_close_r>
	...

08006478 <_close_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d06      	ldr	r5, [pc, #24]	; (8006494 <_close_r+0x1c>)
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	602b      	str	r3, [r5, #0]
 8006484:	f7fa fcbd 	bl	8000e02 <_close>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_close_r+0x1a>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_close_r+0x1a>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	200008f0 	.word	0x200008f0

08006498 <_fstat_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d07      	ldr	r5, [pc, #28]	; (80064b8 <_fstat_r+0x20>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	f7fa fcb8 	bl	8000e1a <_fstat>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d102      	bne.n	80064b4 <_fstat_r+0x1c>
 80064ae:	682b      	ldr	r3, [r5, #0]
 80064b0:	b103      	cbz	r3, 80064b4 <_fstat_r+0x1c>
 80064b2:	6023      	str	r3, [r4, #0]
 80064b4:	bd38      	pop	{r3, r4, r5, pc}
 80064b6:	bf00      	nop
 80064b8:	200008f0 	.word	0x200008f0

080064bc <_isatty_r>:
 80064bc:	b538      	push	{r3, r4, r5, lr}
 80064be:	4d06      	ldr	r5, [pc, #24]	; (80064d8 <_isatty_r+0x1c>)
 80064c0:	2300      	movs	r3, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	4608      	mov	r0, r1
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	f7fa fcb7 	bl	8000e3a <_isatty>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d102      	bne.n	80064d6 <_isatty_r+0x1a>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	b103      	cbz	r3, 80064d6 <_isatty_r+0x1a>
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	bd38      	pop	{r3, r4, r5, pc}
 80064d8:	200008f0 	.word	0x200008f0

080064dc <_lseek_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4d07      	ldr	r5, [pc, #28]	; (80064fc <_lseek_r+0x20>)
 80064e0:	4604      	mov	r4, r0
 80064e2:	4608      	mov	r0, r1
 80064e4:	4611      	mov	r1, r2
 80064e6:	2200      	movs	r2, #0
 80064e8:	602a      	str	r2, [r5, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f7fa fcb0 	bl	8000e50 <_lseek>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_lseek_r+0x1e>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_lseek_r+0x1e>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	200008f0 	.word	0x200008f0

08006500 <__malloc_lock>:
 8006500:	4801      	ldr	r0, [pc, #4]	; (8006508 <__malloc_lock+0x8>)
 8006502:	f7ff bb2f 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 8006506:	bf00      	nop
 8006508:	200008e3 	.word	0x200008e3

0800650c <__malloc_unlock>:
 800650c:	4801      	ldr	r0, [pc, #4]	; (8006514 <__malloc_unlock+0x8>)
 800650e:	f7ff bb2a 	b.w	8005b66 <__retarget_lock_release_recursive>
 8006512:	bf00      	nop
 8006514:	200008e3 	.word	0x200008e3

08006518 <_read_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d07      	ldr	r5, [pc, #28]	; (8006538 <_read_r+0x20>)
 800651c:	4604      	mov	r4, r0
 800651e:	4608      	mov	r0, r1
 8006520:	4611      	mov	r1, r2
 8006522:	2200      	movs	r2, #0
 8006524:	602a      	str	r2, [r5, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	f7fa fc4e 	bl	8000dc8 <_read>
 800652c:	1c43      	adds	r3, r0, #1
 800652e:	d102      	bne.n	8006536 <_read_r+0x1e>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	b103      	cbz	r3, 8006536 <_read_r+0x1e>
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	bd38      	pop	{r3, r4, r5, pc}
 8006538:	200008f0 	.word	0x200008f0

0800653c <_sbrk>:
 800653c:	4a04      	ldr	r2, [pc, #16]	; (8006550 <_sbrk+0x14>)
 800653e:	6811      	ldr	r1, [r2, #0]
 8006540:	4603      	mov	r3, r0
 8006542:	b909      	cbnz	r1, 8006548 <_sbrk+0xc>
 8006544:	4903      	ldr	r1, [pc, #12]	; (8006554 <_sbrk+0x18>)
 8006546:	6011      	str	r1, [r2, #0]
 8006548:	6810      	ldr	r0, [r2, #0]
 800654a:	4403      	add	r3, r0
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	4770      	bx	lr
 8006550:	200008f4 	.word	0x200008f4
 8006554:	200008f8 	.word	0x200008f8

08006558 <_init>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	bf00      	nop
 800655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655e:	bc08      	pop	{r3}
 8006560:	469e      	mov	lr, r3
 8006562:	4770      	bx	lr

08006564 <_fini>:
 8006564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006566:	bf00      	nop
 8006568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656a:	bc08      	pop	{r3}
 800656c:	469e      	mov	lr, r3
 800656e:	4770      	bx	lr
