
AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dbc  08003dbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dc4  08003dc4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08003e3c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003e3c  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8f3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f32  00000000  00000000  0002e993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  000308c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00031778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172b5  00000000  00000000  00032548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010abc  00000000  00000000  000497fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009310d  00000000  00000000  0005a2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed3c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c4  00000000  00000000  000ed418  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c54 	.word	0x08003c54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003c54 	.word	0x08003c54

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <SysTick_Handler>:


extern TIM_HandleTypeDef tim5;

void SysTick_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000588:	f000 fb90 	bl	8000cac <HAL_IncTick>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <TIM5_IRQHandler>:


void TIM5_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//HAL_NVIC_ClearPendingIRQ(TIM5_IRQn);
	//user_handler();
	HAL_TIM_IRQHandler(&tim5);
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <TIM5_IRQHandler+0x10>)
 8000596:	f002 f8c5 	bl	8002724 <HAL_TIM_IRQHandler>

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2000013c 	.word	0x2000013c

080005a4 <read_touch>:
 * @ret:	None
 * @arg: 	None
 */

static void read_touch(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	g_pos_x = getX()+12;	// calibration
 80005a8:	f002 faf4 	bl	8002b94 <getX>
 80005ac:	4603      	mov	r3, r0
 80005ae:	330c      	adds	r3, #12
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <read_touch+0x3c>)
 80005b4:	801a      	strh	r2, [r3, #0]
	g_pos_y = 470-getY();
 80005b6:	f002 fb02 	bl	8002bbe <getY>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f5c3 73eb 	rsb	r3, r3, #470	; 0x1d6
 80005c0:	b29a      	uxth	r2, r3
 80005c2:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <read_touch+0x40>)
 80005c4:	801a      	strh	r2, [r3, #0]

	while(!(TIM5->SR & TIM_SR_UIF)){}; 		// delay from time base
 80005c6:	bf00      	nop
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <read_touch+0x44>)
 80005ca:	691b      	ldr	r3, [r3, #16]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f9      	beq.n	80005c8 <read_touch+0x24>
	TIM5->SR = 0;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <read_touch+0x44>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	2000008c 	.word	0x2000008c
 80005e4:	2000008e 	.word	0x2000008e
 80005e8:	40000c00 	.word	0x40000c00

080005ec <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
#if (DEBUG_LED)
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
#endif

}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <main>:

int main()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_Init();
 8000604:	f000 fb00 	bl	8000c08 <HAL_Init>
	sysclock_config();
 8000608:	f000 f810 	bl	800062c <sysclock_config>
	gpio_init();
 800060c:	f000 f848 	bl	80006a0 <gpio_init>
	spi2_init();
 8000610:	f000 f8d8 	bl	80007c4 <spi2_init>
	i2c2_init();
 8000614:	f000 f90a 	bl	800082c <i2c2_init>
	tim5_init();
 8000618:	f000 f8b2 	bl	8000780 <tim5_init>
	ssd1963_setup();
	XPT2046_Init();
#endif

	/* Timebase start 100ms */
	HAL_TIM_Base_Start_IT(&tim5);
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <main+0x28>)
 800061e:	f002 f81f 	bl	8002660 <HAL_TIM_Base_Start_IT>

	while(1)
	{
		read_touch();
 8000622:	f7ff ffbf 	bl	80005a4 <read_touch>
 8000626:	e7fc      	b.n	8000622 <main+0x22>
 8000628:	2000013c 	.word	0x2000013c

0800062c <sysclock_config>:

	return 0;
}

void sysclock_config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b092      	sub	sp, #72	; 0x48
 8000630:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef osc;

	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000632:	2301      	movs	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
	osc.HSEState = RCC_HSE_ON;
 8000636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063a:	61bb      	str	r3, [r7, #24]

	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f000 ff47 	bl	80014d4 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <sysclock_config+0x26>
	{
		printf("HSE Init failed\n\r");
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <sysclock_config+0x68>)
 800064e:	f002 fafd 	bl	8002c4c <iprintf>
	}

	RCC_ClkInitTypeDef clock;

	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000652:	2301      	movs	r3, #1
 8000654:	603b      	str	r3, [r7, #0]
	clock.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000656:	2301      	movs	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
	clock.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
	clock.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]

	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_0)!=HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f9aa 	bl	80019c4 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <sysclock_config+0x50>
	{
		printf("clock config failed\n\r");
 8000676:	4808      	ldr	r0, [pc, #32]	; (8000698 <sysclock_config+0x6c>)
 8000678:	f002 fae8 	bl	8002c4c <iprintf>
	}

	uint32_t freq=HAL_RCC_GetSysClockFreq();
 800067c:	f001 fa88 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8000680:	6478      	str	r0, [r7, #68]	; 0x44
	printf("Sysclock frequency : %lu \r\n",freq);
 8000682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <sysclock_config+0x70>)
 8000686:	f002 fae1 	bl	8002c4c <iprintf>
}
 800068a:	bf00      	nop
 800068c:	3748      	adds	r7, #72	; 0x48
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	08003c6c 	.word	0x08003c6c
 8000698:	08003c80 	.word	0x08003c80
 800069c:	08003c98 	.word	0x08003c98

080006a0 <gpio_init>:


void gpio_init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <gpio_init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <gpio_init+0xd0>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <gpio_init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b2a      	ldr	r3, [pc, #168]	; (8000770 <gpio_init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a29      	ldr	r2, [pc, #164]	; (8000770 <gpio_init+0xd0>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b27      	ldr	r3, [pc, #156]	; (8000770 <gpio_init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <gpio_init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a22      	ldr	r2, [pc, #136]	; (8000770 <gpio_init+0xd0>)
 80006e8:	f043 0304 	orr.w	r3, r3, #4
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <gpio_init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0304 	and.w	r3, r3, #4
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

	GPIO_InitTypeDef SSD_DATA_PINS ={0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

	SSD_DATA_PINS.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 \
 800070a:	23ff      	movs	r3, #255	; 0xff
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
						| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;

	SSD_DATA_PINS.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
	SSD_DATA_PINS.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
	SSD_DATA_PINS.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4619      	mov	r1, r3
 8000720:	4814      	ldr	r0, [pc, #80]	; (8000774 <gpio_init+0xd4>)
 8000722:	f000 fbf5 	bl	8000f10 <HAL_GPIO_Init>

	GPIO_InitTypeDef SSD_CTRL_PINS ={0};
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 8000736:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800073a:	613b      	str	r3, [r7, #16]

	SSD_CTRL_PINS.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	617b      	str	r3, [r7, #20]
	SSD_CTRL_PINS.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
	SSD_CTRL_PINS.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 8000748:	f107 0310 	add.w	r3, r7, #16
 800074c:	4619      	mov	r1, r3
 800074e:	480a      	ldr	r0, [pc, #40]	; (8000778 <gpio_init+0xd8>)
 8000750:	f000 fbde 	bl	8000f10 <HAL_GPIO_Init>

	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 ;
 8000754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000758:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	4806      	ldr	r0, [pc, #24]	; (800077c <gpio_init+0xdc>)
 8000762:	f000 fbd5 	bl	8000f10 <HAL_GPIO_Init>
	LED.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOC, &LED);
#endif

}
 8000766:	bf00      	nop
 8000768:	3738      	adds	r7, #56	; 0x38
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020800 	.word	0x40020800
 800077c:	40020400 	.word	0x40020400

08000780 <tim5_init>:

void tim5_init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	tim5.Instance = TIM5;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <tim5_init+0x38>)
 8000786:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <tim5_init+0x3c>)
 8000788:	601a      	str	r2, [r3, #0]

	tim5.Init.Prescaler = 2499;		// for 25 MHz - 1tick : 100us
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <tim5_init+0x38>)
 800078c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000790:	605a      	str	r2, [r3, #4]
	tim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <tim5_init+0x38>)
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	619a      	str	r2, [r3, #24]
	tim5.Init.Period = 1000;		// period : 100ms
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <tim5_init+0x38>)
 800079a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800079e:	60da      	str	r2, [r3, #12]

	if(HAL_TIM_Base_Init(&tim5) != HAL_OK)
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <tim5_init+0x38>)
 80007a2:	f001 ff0d 	bl	80025c0 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <tim5_init+0x32>
	{
		printf("Timer 5 base Init Failed\r\n");
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <tim5_init+0x40>)
 80007ae:	f002 fad3 	bl	8002d58 <puts>
	}
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000013c 	.word	0x2000013c
 80007bc:	40000c00 	.word	0x40000c00
 80007c0:	08003cb4 	.word	0x08003cb4

080007c4 <spi2_init>:


void spi2_init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

	spi2.Instance = SPI2;
 80007c8:	4b15      	ldr	r3, [pc, #84]	; (8000820 <spi2_init+0x5c>)
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <spi2_init+0x60>)
 80007cc:	601a      	str	r2, [r3, #0]
	spi2.Init.Mode = SPI_MODE_MASTER;
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <spi2_init+0x5c>)
 80007d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d4:	605a      	str	r2, [r3, #4]
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <spi2_init+0x5c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <spi2_init+0x5c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
	spi2.Init.DataSize = SPI_DATASIZE_8BIT ;
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <spi2_init+0x5c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <spi2_init+0x5c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
	spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <spi2_init+0x5c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
	spi2.Init.NSS = SPI_NSS_HARD_OUTPUT ;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <spi2_init+0x5c>)
 80007f6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007fa:	619a      	str	r2, [r3, #24]
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <spi2_init+0x5c>)
 80007fe:	2210      	movs	r2, #16
 8000800:	61da      	str	r2, [r3, #28]
	spi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <spi2_init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_SPI_Init(&spi2) != HAL_OK)
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <spi2_init+0x5c>)
 800080a:	f001 faa7 	bl	8001d5c <HAL_SPI_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d002      	beq.n	800081a <spi2_init+0x56>
	{
		printf("SPI2 Init Failed\r\n");
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <spi2_init+0x64>)
 8000816:	f002 fa9f 	bl	8002d58 <puts>
	}

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000090 	.word	0x20000090
 8000824:	40003800 	.word	0x40003800
 8000828:	08003cd0 	.word	0x08003cd0

0800082c <i2c2_init>:

void i2c2_init()  //incomplete !!  please verify once before using it
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	i2c2.Instance = I2C2;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <i2c2_init+0x3c>)
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <i2c2_init+0x40>)
 8000834:	601a      	str	r2, [r3, #0]
	i2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <i2c2_init+0x3c>)
 8000838:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083c:	611a      	str	r2, [r3, #16]
	i2c2.Init.ClockSpeed = 4000000;
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <i2c2_init+0x3c>)
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <i2c2_init+0x44>)
 8000842:	605a      	str	r2, [r3, #4]
	i2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <i2c2_init+0x3c>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
	i2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <i2c2_init+0x3c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]

	if(HAL_I2C_Init(&i2c2) != HAL_OK)
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <i2c2_init+0x3c>)
 8000852:	f000 fcfb 	bl	800124c <HAL_I2C_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <i2c2_init+0x36>
	{
		printf("I2C2 Init Failed\r\n");
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <i2c2_init+0x48>)
 800085e:	f002 fa7b 	bl	8002d58 <puts>
	}


}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000e8 	.word	0x200000e8
 800086c:	40005800 	.word	0x40005800
 8000870:	003d0900 	.word	0x003d0900
 8000874:	08003ce4 	.word	0x08003ce4

08000878 <HAL_MspInit>:

extern SPI_HandleTypeDef spi2;
extern TIM_HandleTypeDef tim5;

void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0

	__HAL_RCC_SYSCFG_CLK_ENABLE();		// exti line controller clock
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();			// pwr  controller clcok
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	__HAL_RCC_SPI2_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <HAL_SPI_MspInit+0x68>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <HAL_SPI_MspInit+0x68>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <HAL_SPI_MspInit+0x68>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_SPI_MspInit+0x68>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <HAL_SPI_MspInit+0x68>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_SPI_MspInit+0x68>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef spi_pins;
	spi_pins.Pin = (GPIO_PIN_12 | GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8000908:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800090c:	617b      	str	r3, [r7, #20]
	spi_pins.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	61bb      	str	r3, [r7, #24]
	spi_pins.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
	spi_pins.Alternate = GPIO_AF5_SPI2;
 8000916:	2305      	movs	r3, #5
 8000918:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOB, &spi_pins);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <HAL_SPI_MspInit+0x6c>)
 8000922:	f000 faf5 	bl	8000f10 <HAL_GPIO_Init>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020400 	.word	0x40020400

08000938 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_TIM_Base_MspInit+0x48>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d115      	bne.n	8000976 <HAL_TIM_Base_MspInit+0x3e>
	{
		__HAL_RCC_TIM5_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_TIM_Base_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_TIM_Base_MspInit+0x4c>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2105      	movs	r1, #5
 800096a:	2032      	movs	r0, #50	; 0x32
 800096c:	f000 fa99 	bl	8000ea2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000970:	2032      	movs	r0, #50	; 0x32
 8000972:	f000 fab2 	bl	8000eda <HAL_NVIC_EnableIRQ>

	}

}
 8000976:	bf00      	nop
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40000c00 	.word	0x40000c00
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	__HAL_RCC_I2C2_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HAL_I2C_MspInit+0x68>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a15      	ldr	r2, [pc, #84]	; (80009f0 <HAL_I2C_MspInit+0x68>)
 800099a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_I2C_MspInit+0x68>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_I2C_MspInit+0x68>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_I2C_MspInit+0x68>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_I2C_MspInit+0x68>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 0302 	and.w	r3, r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]

	GPIO_InitTypeDef i2c2_pins;

	i2c2_pins.Pin = (GPIO_PIN_10 | GPIO_PIN_11);
 80009c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009cc:	617b      	str	r3, [r7, #20]
	i2c2_pins.Mode = GPIO_MODE_AF_OD;
 80009ce:	2312      	movs	r3, #18
 80009d0:	61bb      	str	r3, [r7, #24]
	i2c2_pins.Pull = GPIO_PULLUP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
	i2c2_pins.Alternate = GPIO_AF4_I2C2;
 80009d6:	2304      	movs	r3, #4
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(GPIOB, &i2c2_pins);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <HAL_I2C_MspInit+0x6c>)
 80009e2:	f000 fa95 	bl	8000f10 <HAL_GPIO_Init>
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020400 	.word	0x40020400

080009f8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <ITM_SendChar+0x48>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <ITM_SendChar+0x48>)
 8000a08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a0c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <ITM_SendChar+0x4c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a0c      	ldr	r2, [pc, #48]	; (8000a44 <ITM_SendChar+0x4c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a1a:	bf00      	nop
 8000a1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f8      	beq.n	8000a1c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000edfc 	.word	0xe000edfc
 8000a44:	e0000e00 	.word	0xe0000e00

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ffab 	bl	80009f8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	; (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f002 f848 	bl	8002be8 <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20010000 	.word	0x20010000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	20000184 	.word	0x20000184
 8000b8c:	200001a0 	.word	0x200001a0

08000b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <SystemInit+0x20>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9a:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <SystemInit+0x20>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bba:	490e      	ldr	r1, [pc, #56]	; (8000bf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd0:	4c0b      	ldr	r4, [pc, #44]	; (8000c00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bde:	f7ff ffd7 	bl	8000b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000be2:	f002 f807 	bl	8002bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be6:	f7ff fd0b 	bl	8000600 <main>
  bx  lr    
 8000bea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bf8:	08003dcc 	.word	0x08003dcc
  ldr r2, =_sbss
 8000bfc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c00:	2000019c 	.word	0x2000019c

08000c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC_IRQHandler>
	...

08000c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <HAL_Init+0x40>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_Init+0x40>)
 8000c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <HAL_Init+0x40>)
 8000c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c30:	2003      	movs	r0, #3
 8000c32:	f000 f92b 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	200f      	movs	r0, #15
 8000c38:	f000 f808 	bl	8000c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c3c:	f7ff fe1c 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023c00 	.word	0x40023c00

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_InitTick+0x54>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <HAL_InitTick+0x58>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f943 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00e      	b.n	8000c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d80a      	bhi.n	8000c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f90b 	bl	8000ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c8c:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <HAL_InitTick+0x5c>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	e000      	b.n	8000c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000004 	.word	0x20000004

08000cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_IncTick+0x20>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_IncTick+0x24>)
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000188 	.word	0x20000188

08000cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd8:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <HAL_GetTick+0x14>)
 8000cda:	681b      	ldr	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000188 	.word	0x20000188

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db0b      	blt.n	8000d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	f003 021f 	and.w	r2, r3, #31
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <__NVIC_EnableIRQ+0x38>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	095b      	lsrs	r3, r3, #5
 8000d70:	2001      	movs	r0, #1
 8000d72:	fa00 f202 	lsl.w	r2, r0, r2
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100

08000d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db0a      	blt.n	8000db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	490c      	ldr	r1, [pc, #48]	; (8000dd8 <__NVIC_SetPriority+0x4c>)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	0112      	lsls	r2, r2, #4
 8000dac:	b2d2      	uxtb	r2, r2
 8000dae:	440b      	add	r3, r1
 8000db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db4:	e00a      	b.n	8000dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4908      	ldr	r1, [pc, #32]	; (8000ddc <__NVIC_SetPriority+0x50>)
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	f003 030f 	and.w	r3, r3, #15
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	440b      	add	r3, r1
 8000dca:	761a      	strb	r2, [r3, #24]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000e100 	.word	0xe000e100
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	; 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	bf28      	it	cs
 8000dfe:	2304      	movcs	r3, #4
 8000e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3304      	adds	r3, #4
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d902      	bls.n	8000e10 <NVIC_EncodePriority+0x30>
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3b03      	subs	r3, #3
 8000e0e:	e000      	b.n	8000e12 <NVIC_EncodePriority+0x32>
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43da      	mvns	r2, r3
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e28:	f04f 31ff 	mov.w	r1, #4294967295
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43d9      	mvns	r1, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	4313      	orrs	r3, r2
         );
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3724      	adds	r7, #36	; 0x24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e58:	d301      	bcc.n	8000e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00f      	b.n	8000e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <SysTick_Config+0x40>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e66:	210f      	movs	r1, #15
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f7ff ff8e 	bl	8000d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <SysTick_Config+0x40>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <SysTick_Config+0x40>)
 8000e78:	2207      	movs	r2, #7
 8000e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	e000e010 	.word	0xe000e010

08000e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff ff29 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff3e 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff8e 	bl	8000de0 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5d 	bl	8000d8c <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff31 	bl	8000d50 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa2 	bl	8000e48 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e159      	b.n	80011e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8148 	bne.w	80011da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80a2 	beq.w	80011da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b57      	ldr	r3, [pc, #348]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a56      	ldr	r2, [pc, #344]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b54      	ldr	r3, [pc, #336]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_GPIO_Init+0x2ec>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a49      	ldr	r2, [pc, #292]	; (8001200 <HAL_GPIO_Init+0x2f0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x202>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <HAL_GPIO_Init+0x2f4>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x1fe>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a47      	ldr	r2, [pc, #284]	; (8001208 <HAL_GPIO_Init+0x2f8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x1fa>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a46      	ldr	r2, [pc, #280]	; (800120c <HAL_GPIO_Init+0x2fc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x1f6>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a45      	ldr	r2, [pc, #276]	; (8001210 <HAL_GPIO_Init+0x300>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x1f2>
 80010fe:	2304      	movs	r3, #4
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x204>
 8001102:	2307      	movs	r3, #7
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x204>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x204>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x204>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x204>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	; (80011fc <HAL_GPIO_Init+0x2ec>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b38      	ldr	r3, [pc, #224]	; (8001214 <HAL_GPIO_Init+0x304>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <HAL_GPIO_Init+0x304>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_GPIO_Init+0x304>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a24      	ldr	r2, [pc, #144]	; (8001214 <HAL_GPIO_Init+0x304>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b23      	ldr	r3, [pc, #140]	; (8001214 <HAL_GPIO_Init+0x304>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1a      	ldr	r2, [pc, #104]	; (8001214 <HAL_GPIO_Init+0x304>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_GPIO_Init+0x304>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_GPIO_Init+0x304>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f aea2 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e12b      	b.n	80014b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fb88 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2224      	movs	r2, #36	; 0x24
 800127c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 0201 	bic.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800129e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012b0:	f000 fd40 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 80012b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4a81      	ldr	r2, [pc, #516]	; (80014c0 <HAL_I2C_Init+0x274>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d807      	bhi.n	80012d0 <HAL_I2C_Init+0x84>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4a80      	ldr	r2, [pc, #512]	; (80014c4 <HAL_I2C_Init+0x278>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	bf94      	ite	ls
 80012c8:	2301      	movls	r3, #1
 80012ca:	2300      	movhi	r3, #0
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	e006      	b.n	80012de <HAL_I2C_Init+0x92>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4a7d      	ldr	r2, [pc, #500]	; (80014c8 <HAL_I2C_Init+0x27c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	bf94      	ite	ls
 80012d8:	2301      	movls	r3, #1
 80012da:	2300      	movhi	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0e7      	b.n	80014b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4a78      	ldr	r2, [pc, #480]	; (80014cc <HAL_I2C_Init+0x280>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0c9b      	lsrs	r3, r3, #18
 80012f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	430a      	orrs	r2, r1
 8001304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	4a6a      	ldr	r2, [pc, #424]	; (80014c0 <HAL_I2C_Init+0x274>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d802      	bhi.n	8001320 <HAL_I2C_Init+0xd4>
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3301      	adds	r3, #1
 800131e:	e009      	b.n	8001334 <HAL_I2C_Init+0xe8>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a69      	ldr	r2, [pc, #420]	; (80014d0 <HAL_I2C_Init+0x284>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	099b      	lsrs	r3, r3, #6
 8001332:	3301      	adds	r3, #1
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	430b      	orrs	r3, r1
 800133a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	495c      	ldr	r1, [pc, #368]	; (80014c0 <HAL_I2C_Init+0x274>)
 8001350:	428b      	cmp	r3, r1
 8001352:	d819      	bhi.n	8001388 <HAL_I2C_Init+0x13c>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	1e59      	subs	r1, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001362:	1c59      	adds	r1, r3, #1
 8001364:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001368:	400b      	ands	r3, r1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <HAL_I2C_Init+0x138>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1e59      	subs	r1, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fbb1 f3f3 	udiv	r3, r1, r3
 800137c:	3301      	adds	r3, #1
 800137e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001382:	e051      	b.n	8001428 <HAL_I2C_Init+0x1dc>
 8001384:	2304      	movs	r3, #4
 8001386:	e04f      	b.n	8001428 <HAL_I2C_Init+0x1dc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d111      	bne.n	80013b4 <HAL_I2C_Init+0x168>
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	1e58      	subs	r0, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6859      	ldr	r1, [r3, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	440b      	add	r3, r1
 800139e:	fbb0 f3f3 	udiv	r3, r0, r3
 80013a2:	3301      	adds	r3, #1
 80013a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf0c      	ite	eq
 80013ac:	2301      	moveq	r3, #1
 80013ae:	2300      	movne	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	e012      	b.n	80013da <HAL_I2C_Init+0x18e>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1e58      	subs	r0, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6859      	ldr	r1, [r3, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	0099      	lsls	r1, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ca:	3301      	adds	r3, #1
 80013cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_Init+0x196>
 80013de:	2301      	movs	r3, #1
 80013e0:	e022      	b.n	8001428 <HAL_I2C_Init+0x1dc>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10e      	bne.n	8001408 <HAL_I2C_Init+0x1bc>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1e58      	subs	r0, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6859      	ldr	r1, [r3, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013fc:	3301      	adds	r3, #1
 80013fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001406:	e00f      	b.n	8001428 <HAL_I2C_Init+0x1dc>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1e58      	subs	r0, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	0099      	lsls	r1, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	fbb0 f3f3 	udiv	r3, r0, r3
 800141e:	3301      	adds	r3, #1
 8001420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	6809      	ldr	r1, [r1, #0]
 800142c:	4313      	orrs	r3, r2
 800142e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69da      	ldr	r2, [r3, #28]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6911      	ldr	r1, [r2, #16]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68d2      	ldr	r2, [r2, #12]
 8001462:	4311      	orrs	r1, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	430b      	orrs	r3, r1
 800146a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 0201 	orr.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2220      	movs	r2, #32
 80014a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	000186a0 	.word	0x000186a0
 80014c4:	001e847f 	.word	0x001e847f
 80014c8:	003d08ff 	.word	0x003d08ff
 80014cc:	431bde83 	.word	0x431bde83
 80014d0:	10624dd3 	.word	0x10624dd3

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e267      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d075      	beq.n	80015de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d00c      	beq.n	8001518 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b85      	ldr	r3, [pc, #532]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001506:	2b08      	cmp	r3, #8
 8001508:	d112      	bne.n	8001530 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150a:	4b82      	ldr	r3, [pc, #520]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001516:	d10b      	bne.n	8001530 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001518:	4b7e      	ldr	r3, [pc, #504]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d05b      	beq.n	80015dc <HAL_RCC_OscConfig+0x108>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d157      	bne.n	80015dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e242      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d106      	bne.n	8001548 <HAL_RCC_OscConfig+0x74>
 800153a:	4b76      	ldr	r3, [pc, #472]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a75      	ldr	r2, [pc, #468]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xb0>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x98>
 8001552:	4b70      	ldr	r3, [pc, #448]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6f      	ldr	r2, [pc, #444]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b6d      	ldr	r3, [pc, #436]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6c      	ldr	r2, [pc, #432]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xb0>
 800156c:	4b69      	ldr	r3, [pc, #420]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a68      	ldr	r2, [pc, #416]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b66      	ldr	r3, [pc, #408]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a65      	ldr	r2, [pc, #404]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fba2 	bl	8000cd4 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fb9e 	bl	8000cd4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e207      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xc0>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fb8e 	bl	8000cd4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb8a 	bl	8000cd4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e1f3      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ce:	4b51      	ldr	r3, [pc, #324]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0xe8>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d063      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001602:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d116      	bne.n	800163c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x152>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e1c7      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	4b3b      	ldr	r3, [pc, #236]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	4937      	ldr	r1, [pc, #220]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001636:	4313      	orrs	r3, r2
 8001638:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	e03a      	b.n	80016b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d020      	beq.n	8001686 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <HAL_RCC_OscConfig+0x244>)
 8001646:	2201      	movs	r2, #1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fb43 	bl	8000cd4 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fb3f 	bl	8000cd4 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1a8      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	4925      	ldr	r1, [pc, #148]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
 8001684:	e015      	b.n	80016b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_RCC_OscConfig+0x244>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fb22 	bl	8000cd4 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fb1e 	bl	8000cd4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e187      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d036      	beq.n	800172c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d016      	beq.n	80016f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_RCC_OscConfig+0x248>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff fb02 	bl	8000cd4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d4:	f7ff fafe 	bl	8000cd4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e167      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_OscConfig+0x240>)
 80016e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x200>
 80016f2:	e01b      	b.n	800172c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_OscConfig+0x248>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fa:	f7ff faeb 	bl	8000cd4 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001700:	e00e      	b.n	8001720 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001702:	f7ff fae7 	bl	8000cd4 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d907      	bls.n	8001720 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e150      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
 8001714:	40023800 	.word	0x40023800
 8001718:	42470000 	.word	0x42470000
 800171c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	4b88      	ldr	r3, [pc, #544]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 8001722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ea      	bne.n	8001702 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8097 	beq.w	8001868 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b81      	ldr	r3, [pc, #516]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10f      	bne.n	800176a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	4b7d      	ldr	r3, [pc, #500]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a7c      	ldr	r2, [pc, #496]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b77      	ldr	r3, [pc, #476]	; (8001948 <HAL_RCC_OscConfig+0x474>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b74      	ldr	r3, [pc, #464]	; (8001948 <HAL_RCC_OscConfig+0x474>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a73      	ldr	r2, [pc, #460]	; (8001948 <HAL_RCC_OscConfig+0x474>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff faa7 	bl	8000cd4 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff faa3 	bl	8000cd4 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e10c      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_RCC_OscConfig+0x474>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x2ea>
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b4:	4a63      	ldr	r2, [pc, #396]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6713      	str	r3, [r2, #112]	; 0x70
 80017bc:	e01c      	b.n	80017f8 <HAL_RCC_OscConfig+0x324>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x30c>
 80017c6:	4b5f      	ldr	r3, [pc, #380]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a5e      	ldr	r2, [pc, #376]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
 80017d2:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d6:	4a5b      	ldr	r2, [pc, #364]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6713      	str	r3, [r2, #112]	; 0x70
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0x324>
 80017e0:	4b58      	ldr	r3, [pc, #352]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a57      	ldr	r2, [pc, #348]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
 80017ec:	4b55      	ldr	r3, [pc, #340]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a54      	ldr	r2, [pc, #336]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d015      	beq.n	800182c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001800:	f7ff fa68 	bl	8000cd4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	e00a      	b.n	800181e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001808:	f7ff fa64 	bl	8000cd4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e0cb      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0ee      	beq.n	8001808 <HAL_RCC_OscConfig+0x334>
 800182a:	e014      	b.n	8001856 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fa52 	bl	8000cd4 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff fa4e 	bl	8000cd4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0b5      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184a:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1ee      	bne.n	8001834 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800185c:	4b39      	ldr	r3, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a38      	ldr	r2, [pc, #224]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 8001862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80a1 	beq.w	80019b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001872:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b08      	cmp	r3, #8
 800187c:	d05c      	beq.n	8001938 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d141      	bne.n	800190a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <HAL_RCC_OscConfig+0x478>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fa22 	bl	8000cd4 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fa1e 	bl	8000cd4 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e087      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69da      	ldr	r2, [r3, #28]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	019b      	lsls	r3, r3, #6
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	085b      	lsrs	r3, r3, #1
 80018ca:	3b01      	subs	r3, #1
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	061b      	lsls	r3, r3, #24
 80018d6:	491b      	ldr	r1, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x478>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff f9f7 	bl	8000cd4 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f9f3 	bl	8000cd4 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e05c      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x416>
 8001908:	e054      	b.n	80019b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_OscConfig+0x478>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff f9e0 	bl	8000cd4 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f9dc 	bl	8000cd4 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e045      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x470>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x444>
 8001936:	e03d      	b.n	80019b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e038      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000
 800194c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_RCC_OscConfig+0x4ec>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d028      	beq.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d121      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d11a      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001988:	4293      	cmp	r3, r2
 800198a:	d111      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d107      	bne.n	80019b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3718      	adds	r7, #24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0cc      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d90c      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b63      	ldr	r3, [pc, #396]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0b8      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d020      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a18:	4b59      	ldr	r3, [pc, #356]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4b50      	ldr	r3, [pc, #320]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	494d      	ldr	r1, [pc, #308]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d044      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d107      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d119      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e07f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d109      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e06f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a92:	4b3b      	ldr	r3, [pc, #236]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e067      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f023 0203 	bic.w	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4934      	ldr	r1, [pc, #208]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab4:	f7ff f90e 	bl	8000cd4 <HAL_GetTick>
 8001ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abc:	f7ff f90a 	bl	8000cd4 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e04f      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 020c 	and.w	r2, r3, #12
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d1eb      	bne.n	8001abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d20c      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e032      	b.n	8001b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d008      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4916      	ldr	r1, [pc, #88]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d009      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b4a:	f000 f821 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	490a      	ldr	r1, [pc, #40]	; (8001b84 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	5ccb      	ldrb	r3, [r1, r3]
 8001b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_ClockConfig+0x1c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f86e 	bl	8000c4c <HAL_InitTick>

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023c00 	.word	0x40023c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	08003d0c 	.word	0x08003d0c
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	b090      	sub	sp, #64	; 0x40
 8001b96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 030c 	and.w	r3, r3, #12
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	f200 80a1 	bhi.w	8001cfc <HAL_RCC_GetSysClockFreq+0x16c>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d003      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x3a>
 8001bc2:	e09b      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bc6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001bc8:	e09b      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bca:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bce:	e098      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bd0:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bda:	4b4d      	ldr	r3, [pc, #308]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d028      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	099b      	lsrs	r3, r3, #6
 8001bec:	2200      	movs	r2, #0
 8001bee:	623b      	str	r3, [r7, #32]
 8001bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4b47      	ldr	r3, [pc, #284]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfc:	fb03 f201 	mul.w	r2, r3, r1
 8001c00:	2300      	movs	r3, #0
 8001c02:	fb00 f303 	mul.w	r3, r0, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	4a43      	ldr	r2, [pc, #268]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c0a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c10:	460a      	mov	r2, r1
 8001c12:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c16:	4413      	add	r3, r2
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	61fa      	str	r2, [r7, #28]
 8001c22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c2a:	f7fe fb29 	bl	8000280 <__aeabi_uldivmod>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4613      	mov	r3, r2
 8001c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c36:	e053      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c38:	4b35      	ldr	r3, [pc, #212]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	2200      	movs	r2, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	617a      	str	r2, [r7, #20]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c4a:	f04f 0b00 	mov.w	fp, #0
 8001c4e:	4652      	mov	r2, sl
 8001c50:	465b      	mov	r3, fp
 8001c52:	f04f 0000 	mov.w	r0, #0
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	0159      	lsls	r1, r3, #5
 8001c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c60:	0150      	lsls	r0, r2, #5
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	ebb2 080a 	subs.w	r8, r2, sl
 8001c6a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c82:	ebb2 0408 	subs.w	r4, r2, r8
 8001c86:	eb63 0509 	sbc.w	r5, r3, r9
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	00eb      	lsls	r3, r5, #3
 8001c94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c98:	00e2      	lsls	r2, r4, #3
 8001c9a:	4614      	mov	r4, r2
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	eb14 030a 	adds.w	r3, r4, sl
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	eb45 030b 	adc.w	r3, r5, fp
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	028b      	lsls	r3, r1, #10
 8001cba:	4621      	mov	r1, r4
 8001cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	028a      	lsls	r2, r1, #10
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	60fa      	str	r2, [r7, #12]
 8001cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cd4:	f7fe fad4 	bl	8000280 <__aeabi_uldivmod>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4613      	mov	r3, r2
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	0c1b      	lsrs	r3, r3, #16
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	3301      	adds	r3, #1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cfa:	e002      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3740      	adds	r7, #64	; 0x40
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	017d7840 	.word	0x017d7840

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	08003d1c 	.word	0x08003d1c

08001d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e07b      	b.n	8001e66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d7e:	d009      	beq.n	8001d94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
 8001d86:	e005      	b.n	8001d94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d106      	bne.n	8001db4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7fe fd8a 	bl	80008c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e18:	ea42 0103 	orr.w	r1, r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	0c1b      	lsrs	r3, r3, #16
 8001e32:	f003 0104 	and.w	r1, r3, #4
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f003 0210 	and.w	r2, r3, #16
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b088      	sub	sp, #32
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_SPI_Transmit+0x22>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e126      	b.n	80020de <HAL_SPI_Transmit+0x270>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e98:	f7fe ff1c 	bl	8000cd4 <HAL_GetTick>
 8001e9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d002      	beq.n	8001eb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eb2:	e10b      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_SPI_Transmit+0x52>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ec4:	e102      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	88fa      	ldrh	r2, [r7, #6]
 8001ede:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0c:	d10f      	bne.n	8001f2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f38:	2b40      	cmp	r3, #64	; 0x40
 8001f3a:	d007      	beq.n	8001f4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f54:	d14b      	bne.n	8001fee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_Transmit+0xf6>
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d13e      	bne.n	8001fe2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	881a      	ldrh	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	1c9a      	adds	r2, r3, #2
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f88:	e02b      	b.n	8001fe2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d112      	bne.n	8001fbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	1c9a      	adds	r2, r3, #2
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fbc:	e011      	b.n	8001fe2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fbe:	f7fe fe89 	bl	8000cd4 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d803      	bhi.n	8001fd6 <HAL_SPI_Transmit+0x168>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d102      	bne.n	8001fdc <HAL_SPI_Transmit+0x16e>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d102      	bne.n	8001fe2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fe0:	e074      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ce      	bne.n	8001f8a <HAL_SPI_Transmit+0x11c>
 8001fec:	e04c      	b.n	8002088 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_SPI_Transmit+0x18e>
 8001ff6:	8afb      	ldrh	r3, [r7, #22]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d140      	bne.n	800207e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	330c      	adds	r3, #12
 8002006:	7812      	ldrb	r2, [r2, #0]
 8002008:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002022:	e02c      	b.n	800207e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b02      	cmp	r3, #2
 8002030:	d113      	bne.n	800205a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	330c      	adds	r3, #12
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	86da      	strh	r2, [r3, #54]	; 0x36
 8002058:	e011      	b.n	800207e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800205a:	f7fe fe3b 	bl	8000cd4 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d803      	bhi.n	8002072 <HAL_SPI_Transmit+0x204>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d102      	bne.n	8002078 <HAL_SPI_Transmit+0x20a>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d102      	bne.n	800207e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800207c:	e026      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1cd      	bne.n	8002024 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fa55 	bl	800253c <SPI_EndRxTxTransaction>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2220      	movs	r2, #32
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10a      	bne.n	80020bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	77fb      	strb	r3, [r7, #31]
 80020c8:	e000      	b.n	80020cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80020ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3720      	adds	r7, #32
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b08c      	sub	sp, #48	; 0x30
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_SPI_TransmitReceive+0x26>
 8002108:	2302      	movs	r3, #2
 800210a:	e18a      	b.n	8002422 <HAL_SPI_TransmitReceive+0x33c>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002114:	f7fe fdde 	bl	8000cd4 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800212e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00f      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x70>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800213c:	d107      	bne.n	800214e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_SPI_TransmitReceive+0x68>
 8002146:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800214a:	2b04      	cmp	r3, #4
 800214c:	d003      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800214e:	2302      	movs	r3, #2
 8002150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002154:	e15b      	b.n	800240e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_SPI_TransmitReceive+0x82>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_SPI_TransmitReceive+0x82>
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d103      	bne.n	8002170 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800216e:	e14e      	b.n	800240e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b04      	cmp	r3, #4
 800217a:	d003      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2205      	movs	r2, #5
 8002180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	887a      	ldrh	r2, [r7, #2]
 80021a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d007      	beq.n	80021d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e0:	d178      	bne.n	80022d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_TransmitReceive+0x10a>
 80021ea:	8b7b      	ldrh	r3, [r7, #26]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d166      	bne.n	80022be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	1c9a      	adds	r2, r3, #2
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002214:	e053      	b.n	80022be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d11b      	bne.n	800225c <HAL_SPI_TransmitReceive+0x176>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d016      	beq.n	800225c <HAL_SPI_TransmitReceive+0x176>
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	2b01      	cmp	r3, #1
 8002232:	d113      	bne.n	800225c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	881a      	ldrh	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	1c9a      	adds	r2, r3, #2
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d119      	bne.n	800229e <HAL_SPI_TransmitReceive+0x1b8>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d014      	beq.n	800229e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	b292      	uxth	r2, r2
 8002280:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002286:	1c9a      	adds	r2, r3, #2
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800229a:	2301      	movs	r3, #1
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800229e:	f7fe fd19 	bl	8000cd4 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d807      	bhi.n	80022be <HAL_SPI_TransmitReceive+0x1d8>
 80022ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d003      	beq.n	80022be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022bc:	e0a7      	b.n	800240e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1a6      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x130>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1a1      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x130>
 80022d2:	e07c      	b.n	80023ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_SPI_TransmitReceive+0x1fc>
 80022dc:	8b7b      	ldrh	r3, [r7, #26]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d16b      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	330c      	adds	r3, #12
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b01      	subs	r3, #1
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002308:	e057      	b.n	80023ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d11c      	bne.n	8002352 <HAL_SPI_TransmitReceive+0x26c>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d017      	beq.n	8002352 <HAL_SPI_TransmitReceive+0x26c>
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b01      	cmp	r3, #1
 8002326:	d114      	bne.n	8002352 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	330c      	adds	r3, #12
 8002332:	7812      	ldrb	r2, [r2, #0]
 8002334:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d119      	bne.n	8002394 <HAL_SPI_TransmitReceive+0x2ae>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d014      	beq.n	8002394 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002390:	2301      	movs	r3, #1
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002394:	f7fe fc9e 	bl	8000cd4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d803      	bhi.n	80023ac <HAL_SPI_TransmitReceive+0x2c6>
 80023a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023aa:	d102      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x2cc>
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d103      	bne.n	80023ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023b8:	e029      	b.n	800240e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1a2      	bne.n	800230a <HAL_SPI_TransmitReceive+0x224>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d19d      	bne.n	800230a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f8b2 	bl	800253c <SPI_EndRxTxTransaction>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d006      	beq.n	80023ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2220      	movs	r2, #32
 80023e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80023ea:	e010      	b.n	800240e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	e000      	b.n	800240e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800240c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800241e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002422:	4618      	mov	r0, r3
 8002424:	3730      	adds	r7, #48	; 0x30
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800243c:	f7fe fc4a 	bl	8000cd4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800244c:	f7fe fc42 	bl	8000cd4 <HAL_GetTick>
 8002450:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002452:	4b39      	ldr	r3, [pc, #228]	; (8002538 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	015b      	lsls	r3, r3, #5
 8002458:	0d1b      	lsrs	r3, r3, #20
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002462:	e054      	b.n	800250e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246a:	d050      	beq.n	800250e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800246c:	f7fe fc32 	bl	8000cd4 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	429a      	cmp	r2, r3
 800247a:	d902      	bls.n	8002482 <SPI_WaitFlagStateUntilTimeout+0x56>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d13d      	bne.n	80024fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002490:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800249a:	d111      	bne.n	80024c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024a4:	d004      	beq.n	80024b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	d107      	bne.n	80024c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c8:	d10f      	bne.n	80024ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e017      	b.n	800252e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3b01      	subs	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4013      	ands	r3, r2
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	429a      	cmp	r2, r3
 800251c:	bf0c      	ite	eq
 800251e:	2301      	moveq	r3, #1
 8002520:	2300      	movne	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	429a      	cmp	r2, r3
 800252a:	d19b      	bne.n	8002464 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3720      	adds	r7, #32
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000

0800253c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <SPI_EndRxTxTransaction+0x7c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <SPI_EndRxTxTransaction+0x80>)
 800254e:	fba2 2303 	umull	r2, r3, r2, r3
 8002552:	0d5b      	lsrs	r3, r3, #21
 8002554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002558:	fb02 f303 	mul.w	r3, r2, r3
 800255c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002566:	d112      	bne.n	800258e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	2180      	movs	r1, #128	; 0x80
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ff5a 	bl	800242c <SPI_WaitFlagStateUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e00f      	b.n	80025ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3b01      	subs	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d0f2      	beq.n	800258e <SPI_EndRxTxTransaction+0x52>
 80025a8:	e000      	b.n	80025ac <SPI_EndRxTxTransaction+0x70>
        break;
 80025aa:	bf00      	nop
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000000 	.word	0x20000000
 80025bc:	165e9f81 	.word	0x165e9f81

080025c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e041      	b.n	8002656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe f9a6 	bl	8000938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f000 f9c0 	bl	8002984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d001      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e044      	b.n	8002702 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_TIM_Base_Start_IT+0xb0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d018      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x6c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a2:	d013      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x6c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a1a      	ldr	r2, [pc, #104]	; (8002714 <HAL_TIM_Base_Start_IT+0xb4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00e      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x6c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_TIM_Base_Start_IT+0xb8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d009      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x6c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_TIM_Base_Start_IT+0xbc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d004      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x6c>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_TIM_Base_Start_IT+0xc0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d111      	bne.n	80026f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d010      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	e007      	b.n	8002700 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40010000 	.word	0x40010000
 8002714:	40000400 	.word	0x40000400
 8002718:	40000800 	.word	0x40000800
 800271c:	40000c00 	.word	0x40000c00
 8002720:	40014000 	.word	0x40014000

08002724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d122      	bne.n	8002780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b02      	cmp	r3, #2
 8002746:	d11b      	bne.n	8002780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0202 	mvn.w	r2, #2
 8002750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8ee 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 800276c:	e005      	b.n	800277a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8e0 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8f1 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b04      	cmp	r3, #4
 800278c:	d122      	bne.n	80027d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0204 	mvn.w	r2, #4
 80027a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f8c4 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8b6 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f8c7 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d122      	bne.n	8002828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d11b      	bne.n	8002828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0208 	mvn.w	r2, #8
 80027f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2204      	movs	r2, #4
 80027fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f89a 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 8002814:	e005      	b.n	8002822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f88c 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f89d 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	d122      	bne.n	800287c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b10      	cmp	r3, #16
 8002842:	d11b      	bne.n	800287c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0210 	mvn.w	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2208      	movs	r2, #8
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f870 	bl	8002948 <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f862 	bl	8002934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f873 	bl	800295c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d10e      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0201 	mvn.w	r2, #1
 80028a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fd fea2 	bl	80005ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b2:	2b80      	cmp	r3, #128	; 0x80
 80028b4:	d10e      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c0:	2b80      	cmp	r3, #128	; 0x80
 80028c2:	d107      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8e2 	bl	8002a98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d10e      	bne.n	8002900 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ec:	2b40      	cmp	r3, #64	; 0x40
 80028ee:	d107      	bne.n	8002900 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f838 	bl	8002970 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b20      	cmp	r3, #32
 800290c:	d10e      	bne.n	800292c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b20      	cmp	r3, #32
 800291a:	d107      	bne.n	800292c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0220 	mvn.w	r2, #32
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8ac 	bl	8002a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <TIM_Base_SetConfig+0xe4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00f      	beq.n	80029bc <TIM_Base_SetConfig+0x38>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d00b      	beq.n	80029bc <TIM_Base_SetConfig+0x38>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a31      	ldr	r2, [pc, #196]	; (8002a6c <TIM_Base_SetConfig+0xe8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <TIM_Base_SetConfig+0x38>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <TIM_Base_SetConfig+0xec>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <TIM_Base_SetConfig+0x38>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <TIM_Base_SetConfig+0xf0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d108      	bne.n	80029ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a25      	ldr	r2, [pc, #148]	; (8002a68 <TIM_Base_SetConfig+0xe4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01b      	beq.n	8002a0e <TIM_Base_SetConfig+0x8a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d017      	beq.n	8002a0e <TIM_Base_SetConfig+0x8a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <TIM_Base_SetConfig+0xe8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <TIM_Base_SetConfig+0x8a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a21      	ldr	r2, [pc, #132]	; (8002a70 <TIM_Base_SetConfig+0xec>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00f      	beq.n	8002a0e <TIM_Base_SetConfig+0x8a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <TIM_Base_SetConfig+0xf0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00b      	beq.n	8002a0e <TIM_Base_SetConfig+0x8a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1f      	ldr	r2, [pc, #124]	; (8002a78 <TIM_Base_SetConfig+0xf4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d007      	beq.n	8002a0e <TIM_Base_SetConfig+0x8a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a1e      	ldr	r2, [pc, #120]	; (8002a7c <TIM_Base_SetConfig+0xf8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d003      	beq.n	8002a0e <TIM_Base_SetConfig+0x8a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a1d      	ldr	r2, [pc, #116]	; (8002a80 <TIM_Base_SetConfig+0xfc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <TIM_Base_SetConfig+0xe4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	615a      	str	r2, [r3, #20]
}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00
 8002a78:	40014000 	.word	0x40014000
 8002a7c:	40014400 	.word	0x40014400
 8002a80:	40014800 	.word	0x40014800

08002a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <map>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

static inline uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8002aac:	b490      	push	{r4, r7}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	4608      	mov	r0, r1
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4623      	mov	r3, r4
 8002abc:	80fb      	strh	r3, [r7, #6]
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80bb      	strh	r3, [r7, #4]
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	807b      	strh	r3, [r7, #2]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	88bb      	ldrh	r3, [r7, #4]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	8a39      	ldrh	r1, [r7, #16]
 8002ad2:	883a      	ldrh	r2, [r7, #0]
 8002ad4:	1a8a      	subs	r2, r1, r2
 8002ad6:	fb03 f202 	mul.w	r2, r3, r2
 8002ada:	8879      	ldrh	r1, [r7, #2]
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	1acb      	subs	r3, r1, r3
 8002ae0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	883b      	ldrh	r3, [r7, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	b29b      	uxth	r3, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc90      	pop	{r4, r7}
 8002af4:	4770      	bx	lr
	...

08002af8 <getRaw>:

uint16_t getRaw(uint8_t address)      // static
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	for(int dly = 0; dly < 10000; dly++);
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	e002      	b.n	8002b0e <getRaw+0x16>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f242 720f 	movw	r2, #9999	; 0x270f
 8002b14:	4293      	cmp	r3, r2
 8002b16:	ddf7      	ble.n	8002b08 <getRaw+0x10>
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);    // if (XPT2046_NSS_SOFT)	
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b1e:	481b      	ldr	r0, [pc, #108]	; (8002b8c <getRaw+0x94>)
 8002b20:	f7fe fb7a 	bl	8001218 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&spi2, &address, 1, 1000);
 8002b24:	1df9      	adds	r1, r7, #7
 8002b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4818      	ldr	r0, [pc, #96]	; (8002b90 <getRaw+0x98>)
 8002b2e:	f7ff f99e 	bl	8001e6e <HAL_SPI_Transmit>
	address = 0x00;
 8002b32:	2300      	movs	r3, #0
 8002b34:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 8002b36:	f107 020f 	add.w	r2, r7, #15
 8002b3a:	1df9      	adds	r1, r7, #7
 8002b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	2301      	movs	r3, #1
 8002b44:	4812      	ldr	r0, [pc, #72]	; (8002b90 <getRaw+0x98>)
 8002b46:	f7ff face 	bl	80020e6 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	827b      	strh	r3, [r7, #18]
	address = 0x00;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&spi2, &address, &data, sizeof(data), 1000);
 8002b52:	f107 020f 	add.w	r2, r7, #15
 8002b56:	1df9      	adds	r1, r7, #7
 8002b58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	480b      	ldr	r0, [pc, #44]	; (8002b90 <getRaw+0x98>)
 8002b62:	f7ff fac0 	bl	80020e6 <HAL_SPI_TransmitReceive>
	LSB = data;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	823b      	strh	r3, [r7, #16]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);      // if (XPT2046_NSS_SOFT)	
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b70:	4806      	ldr	r0, [pc, #24]	; (8002b8c <getRaw+0x94>)
 8002b72:	f7fe fb51 	bl	8001218 <HAL_GPIO_WritePin>
	return ((MSB << 8) | (LSB)) >> 3;
 8002b76:	8a7b      	ldrh	r3, [r7, #18]
 8002b78:	021a      	lsls	r2, r3, #8
 8002b7a:	8a3b      	ldrh	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	10db      	asrs	r3, r3, #3
 8002b80:	b29b      	uxth	r3, r3
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	20000090 	.word	0x20000090

08002b94 <getX>:

uint16_t getX(void)
{ 
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_X)
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MAX_X, OUT_MIN_X);
	else
	return map(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8002b9a:	20d0      	movs	r0, #208	; 0xd0
 8002b9c:	f7ff ffac 	bl	8002af8 <getRaw>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f240 331f 	movw	r3, #799	; 0x31f
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2300      	movs	r3, #0
 8002bac:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002bb0:	21c8      	movs	r1, #200	; 0xc8
 8002bb2:	f7ff ff7b 	bl	8002aac <map>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <getY>:

uint16_t getY(void)
{ 
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af02      	add	r7, sp, #8
	if (XPT2046_MIRROR_Y)
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MAX_Y, OUT_MIN_Y);
 8002bc4:	2090      	movs	r0, #144	; 0x90
 8002bc6:	f7ff ff97 	bl	8002af8 <getRaw>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f240 13df 	movw	r3, #479	; 0x1df
 8002bd6:	f640 62d8 	movw	r2, #3800	; 0xed8
 8002bda:	21c8      	movs	r1, #200	; 0xc8
 8002bdc:	f7ff ff66 	bl	8002aac <map>
 8002be0:	4603      	mov	r3, r0
	else
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <__errno>:
 8002be8:	4b01      	ldr	r3, [pc, #4]	; (8002bf0 <__errno+0x8>)
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <__libc_init_array>:
 8002bf4:	b570      	push	{r4, r5, r6, lr}
 8002bf6:	4d0d      	ldr	r5, [pc, #52]	; (8002c2c <__libc_init_array+0x38>)
 8002bf8:	4c0d      	ldr	r4, [pc, #52]	; (8002c30 <__libc_init_array+0x3c>)
 8002bfa:	1b64      	subs	r4, r4, r5
 8002bfc:	10a4      	asrs	r4, r4, #2
 8002bfe:	2600      	movs	r6, #0
 8002c00:	42a6      	cmp	r6, r4
 8002c02:	d109      	bne.n	8002c18 <__libc_init_array+0x24>
 8002c04:	4d0b      	ldr	r5, [pc, #44]	; (8002c34 <__libc_init_array+0x40>)
 8002c06:	4c0c      	ldr	r4, [pc, #48]	; (8002c38 <__libc_init_array+0x44>)
 8002c08:	f001 f824 	bl	8003c54 <_init>
 8002c0c:	1b64      	subs	r4, r4, r5
 8002c0e:	10a4      	asrs	r4, r4, #2
 8002c10:	2600      	movs	r6, #0
 8002c12:	42a6      	cmp	r6, r4
 8002c14:	d105      	bne.n	8002c22 <__libc_init_array+0x2e>
 8002c16:	bd70      	pop	{r4, r5, r6, pc}
 8002c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c1c:	4798      	blx	r3
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7ee      	b.n	8002c00 <__libc_init_array+0xc>
 8002c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c26:	4798      	blx	r3
 8002c28:	3601      	adds	r6, #1
 8002c2a:	e7f2      	b.n	8002c12 <__libc_init_array+0x1e>
 8002c2c:	08003dc4 	.word	0x08003dc4
 8002c30:	08003dc4 	.word	0x08003dc4
 8002c34:	08003dc4 	.word	0x08003dc4
 8002c38:	08003dc8 	.word	0x08003dc8

08002c3c <memset>:
 8002c3c:	4402      	add	r2, r0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d100      	bne.n	8002c46 <memset+0xa>
 8002c44:	4770      	bx	lr
 8002c46:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4a:	e7f9      	b.n	8002c40 <memset+0x4>

08002c4c <iprintf>:
 8002c4c:	b40f      	push	{r0, r1, r2, r3}
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <iprintf+0x2c>)
 8002c50:	b513      	push	{r0, r1, r4, lr}
 8002c52:	681c      	ldr	r4, [r3, #0]
 8002c54:	b124      	cbz	r4, 8002c60 <iprintf+0x14>
 8002c56:	69a3      	ldr	r3, [r4, #24]
 8002c58:	b913      	cbnz	r3, 8002c60 <iprintf+0x14>
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f000 fa5e 	bl	800311c <__sinit>
 8002c60:	ab05      	add	r3, sp, #20
 8002c62:	9a04      	ldr	r2, [sp, #16]
 8002c64:	68a1      	ldr	r1, [r4, #8]
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	4620      	mov	r0, r4
 8002c6a:	f000 fc67 	bl	800353c <_vfiprintf_r>
 8002c6e:	b002      	add	sp, #8
 8002c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c74:	b004      	add	sp, #16
 8002c76:	4770      	bx	lr
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <_puts_r>:
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	460e      	mov	r6, r1
 8002c80:	4605      	mov	r5, r0
 8002c82:	b118      	cbz	r0, 8002c8c <_puts_r+0x10>
 8002c84:	6983      	ldr	r3, [r0, #24]
 8002c86:	b90b      	cbnz	r3, 8002c8c <_puts_r+0x10>
 8002c88:	f000 fa48 	bl	800311c <__sinit>
 8002c8c:	69ab      	ldr	r3, [r5, #24]
 8002c8e:	68ac      	ldr	r4, [r5, #8]
 8002c90:	b913      	cbnz	r3, 8002c98 <_puts_r+0x1c>
 8002c92:	4628      	mov	r0, r5
 8002c94:	f000 fa42 	bl	800311c <__sinit>
 8002c98:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <_puts_r+0xd0>)
 8002c9a:	429c      	cmp	r4, r3
 8002c9c:	d120      	bne.n	8002ce0 <_puts_r+0x64>
 8002c9e:	686c      	ldr	r4, [r5, #4]
 8002ca0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ca2:	07db      	lsls	r3, r3, #31
 8002ca4:	d405      	bmi.n	8002cb2 <_puts_r+0x36>
 8002ca6:	89a3      	ldrh	r3, [r4, #12]
 8002ca8:	0598      	lsls	r0, r3, #22
 8002caa:	d402      	bmi.n	8002cb2 <_puts_r+0x36>
 8002cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cae:	f000 fad3 	bl	8003258 <__retarget_lock_acquire_recursive>
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	0719      	lsls	r1, r3, #28
 8002cb6:	d51d      	bpl.n	8002cf4 <_puts_r+0x78>
 8002cb8:	6923      	ldr	r3, [r4, #16]
 8002cba:	b1db      	cbz	r3, 8002cf4 <_puts_r+0x78>
 8002cbc:	3e01      	subs	r6, #1
 8002cbe:	68a3      	ldr	r3, [r4, #8]
 8002cc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	60a3      	str	r3, [r4, #8]
 8002cc8:	bb39      	cbnz	r1, 8002d1a <_puts_r+0x9e>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	da38      	bge.n	8002d40 <_puts_r+0xc4>
 8002cce:	4622      	mov	r2, r4
 8002cd0:	210a      	movs	r1, #10
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f000 f848 	bl	8002d68 <__swbuf_r>
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d011      	beq.n	8002d00 <_puts_r+0x84>
 8002cdc:	250a      	movs	r5, #10
 8002cde:	e011      	b.n	8002d04 <_puts_r+0x88>
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <_puts_r+0xd4>)
 8002ce2:	429c      	cmp	r4, r3
 8002ce4:	d101      	bne.n	8002cea <_puts_r+0x6e>
 8002ce6:	68ac      	ldr	r4, [r5, #8]
 8002ce8:	e7da      	b.n	8002ca0 <_puts_r+0x24>
 8002cea:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <_puts_r+0xd8>)
 8002cec:	429c      	cmp	r4, r3
 8002cee:	bf08      	it	eq
 8002cf0:	68ec      	ldreq	r4, [r5, #12]
 8002cf2:	e7d5      	b.n	8002ca0 <_puts_r+0x24>
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f000 f888 	bl	8002e0c <__swsetup_r>
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0dd      	beq.n	8002cbc <_puts_r+0x40>
 8002d00:	f04f 35ff 	mov.w	r5, #4294967295
 8002d04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d06:	07da      	lsls	r2, r3, #31
 8002d08:	d405      	bmi.n	8002d16 <_puts_r+0x9a>
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	059b      	lsls	r3, r3, #22
 8002d0e:	d402      	bmi.n	8002d16 <_puts_r+0x9a>
 8002d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d12:	f000 faa2 	bl	800325a <__retarget_lock_release_recursive>
 8002d16:	4628      	mov	r0, r5
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da04      	bge.n	8002d28 <_puts_r+0xac>
 8002d1e:	69a2      	ldr	r2, [r4, #24]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dc06      	bgt.n	8002d32 <_puts_r+0xb6>
 8002d24:	290a      	cmp	r1, #10
 8002d26:	d004      	beq.n	8002d32 <_puts_r+0xb6>
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	6022      	str	r2, [r4, #0]
 8002d2e:	7019      	strb	r1, [r3, #0]
 8002d30:	e7c5      	b.n	8002cbe <_puts_r+0x42>
 8002d32:	4622      	mov	r2, r4
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 f817 	bl	8002d68 <__swbuf_r>
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	d1bf      	bne.n	8002cbe <_puts_r+0x42>
 8002d3e:	e7df      	b.n	8002d00 <_puts_r+0x84>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	250a      	movs	r5, #10
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	6022      	str	r2, [r4, #0]
 8002d48:	701d      	strb	r5, [r3, #0]
 8002d4a:	e7db      	b.n	8002d04 <_puts_r+0x88>
 8002d4c:	08003d48 	.word	0x08003d48
 8002d50:	08003d68 	.word	0x08003d68
 8002d54:	08003d28 	.word	0x08003d28

08002d58 <puts>:
 8002d58:	4b02      	ldr	r3, [pc, #8]	; (8002d64 <puts+0xc>)
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	f7ff bf8d 	b.w	8002c7c <_puts_r>
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c

08002d68 <__swbuf_r>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	460e      	mov	r6, r1
 8002d6c:	4614      	mov	r4, r2
 8002d6e:	4605      	mov	r5, r0
 8002d70:	b118      	cbz	r0, 8002d7a <__swbuf_r+0x12>
 8002d72:	6983      	ldr	r3, [r0, #24]
 8002d74:	b90b      	cbnz	r3, 8002d7a <__swbuf_r+0x12>
 8002d76:	f000 f9d1 	bl	800311c <__sinit>
 8002d7a:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <__swbuf_r+0x98>)
 8002d7c:	429c      	cmp	r4, r3
 8002d7e:	d12b      	bne.n	8002dd8 <__swbuf_r+0x70>
 8002d80:	686c      	ldr	r4, [r5, #4]
 8002d82:	69a3      	ldr	r3, [r4, #24]
 8002d84:	60a3      	str	r3, [r4, #8]
 8002d86:	89a3      	ldrh	r3, [r4, #12]
 8002d88:	071a      	lsls	r2, r3, #28
 8002d8a:	d52f      	bpl.n	8002dec <__swbuf_r+0x84>
 8002d8c:	6923      	ldr	r3, [r4, #16]
 8002d8e:	b36b      	cbz	r3, 8002dec <__swbuf_r+0x84>
 8002d90:	6923      	ldr	r3, [r4, #16]
 8002d92:	6820      	ldr	r0, [r4, #0]
 8002d94:	1ac0      	subs	r0, r0, r3
 8002d96:	6963      	ldr	r3, [r4, #20]
 8002d98:	b2f6      	uxtb	r6, r6
 8002d9a:	4283      	cmp	r3, r0
 8002d9c:	4637      	mov	r7, r6
 8002d9e:	dc04      	bgt.n	8002daa <__swbuf_r+0x42>
 8002da0:	4621      	mov	r1, r4
 8002da2:	4628      	mov	r0, r5
 8002da4:	f000 f926 	bl	8002ff4 <_fflush_r>
 8002da8:	bb30      	cbnz	r0, 8002df8 <__swbuf_r+0x90>
 8002daa:	68a3      	ldr	r3, [r4, #8]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	60a3      	str	r3, [r4, #8]
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	6022      	str	r2, [r4, #0]
 8002db6:	701e      	strb	r6, [r3, #0]
 8002db8:	6963      	ldr	r3, [r4, #20]
 8002dba:	3001      	adds	r0, #1
 8002dbc:	4283      	cmp	r3, r0
 8002dbe:	d004      	beq.n	8002dca <__swbuf_r+0x62>
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	07db      	lsls	r3, r3, #31
 8002dc4:	d506      	bpl.n	8002dd4 <__swbuf_r+0x6c>
 8002dc6:	2e0a      	cmp	r6, #10
 8002dc8:	d104      	bne.n	8002dd4 <__swbuf_r+0x6c>
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f000 f911 	bl	8002ff4 <_fflush_r>
 8002dd2:	b988      	cbnz	r0, 8002df8 <__swbuf_r+0x90>
 8002dd4:	4638      	mov	r0, r7
 8002dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <__swbuf_r+0x9c>)
 8002dda:	429c      	cmp	r4, r3
 8002ddc:	d101      	bne.n	8002de2 <__swbuf_r+0x7a>
 8002dde:	68ac      	ldr	r4, [r5, #8]
 8002de0:	e7cf      	b.n	8002d82 <__swbuf_r+0x1a>
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <__swbuf_r+0xa0>)
 8002de4:	429c      	cmp	r4, r3
 8002de6:	bf08      	it	eq
 8002de8:	68ec      	ldreq	r4, [r5, #12]
 8002dea:	e7ca      	b.n	8002d82 <__swbuf_r+0x1a>
 8002dec:	4621      	mov	r1, r4
 8002dee:	4628      	mov	r0, r5
 8002df0:	f000 f80c 	bl	8002e0c <__swsetup_r>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d0cb      	beq.n	8002d90 <__swbuf_r+0x28>
 8002df8:	f04f 37ff 	mov.w	r7, #4294967295
 8002dfc:	e7ea      	b.n	8002dd4 <__swbuf_r+0x6c>
 8002dfe:	bf00      	nop
 8002e00:	08003d48 	.word	0x08003d48
 8002e04:	08003d68 	.word	0x08003d68
 8002e08:	08003d28 	.word	0x08003d28

08002e0c <__swsetup_r>:
 8002e0c:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <__swsetup_r+0xcc>)
 8002e0e:	b570      	push	{r4, r5, r6, lr}
 8002e10:	681d      	ldr	r5, [r3, #0]
 8002e12:	4606      	mov	r6, r0
 8002e14:	460c      	mov	r4, r1
 8002e16:	b125      	cbz	r5, 8002e22 <__swsetup_r+0x16>
 8002e18:	69ab      	ldr	r3, [r5, #24]
 8002e1a:	b913      	cbnz	r3, 8002e22 <__swsetup_r+0x16>
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f97d 	bl	800311c <__sinit>
 8002e22:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <__swsetup_r+0xd0>)
 8002e24:	429c      	cmp	r4, r3
 8002e26:	d10f      	bne.n	8002e48 <__swsetup_r+0x3c>
 8002e28:	686c      	ldr	r4, [r5, #4]
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e30:	0719      	lsls	r1, r3, #28
 8002e32:	d42c      	bmi.n	8002e8e <__swsetup_r+0x82>
 8002e34:	06dd      	lsls	r5, r3, #27
 8002e36:	d411      	bmi.n	8002e5c <__swsetup_r+0x50>
 8002e38:	2309      	movs	r3, #9
 8002e3a:	6033      	str	r3, [r6, #0]
 8002e3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e40:	81a3      	strh	r3, [r4, #12]
 8002e42:	f04f 30ff 	mov.w	r0, #4294967295
 8002e46:	e03e      	b.n	8002ec6 <__swsetup_r+0xba>
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <__swsetup_r+0xd4>)
 8002e4a:	429c      	cmp	r4, r3
 8002e4c:	d101      	bne.n	8002e52 <__swsetup_r+0x46>
 8002e4e:	68ac      	ldr	r4, [r5, #8]
 8002e50:	e7eb      	b.n	8002e2a <__swsetup_r+0x1e>
 8002e52:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <__swsetup_r+0xd8>)
 8002e54:	429c      	cmp	r4, r3
 8002e56:	bf08      	it	eq
 8002e58:	68ec      	ldreq	r4, [r5, #12]
 8002e5a:	e7e6      	b.n	8002e2a <__swsetup_r+0x1e>
 8002e5c:	0758      	lsls	r0, r3, #29
 8002e5e:	d512      	bpl.n	8002e86 <__swsetup_r+0x7a>
 8002e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e62:	b141      	cbz	r1, 8002e76 <__swsetup_r+0x6a>
 8002e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e68:	4299      	cmp	r1, r3
 8002e6a:	d002      	beq.n	8002e72 <__swsetup_r+0x66>
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	f000 fa5b 	bl	8003328 <_free_r>
 8002e72:	2300      	movs	r3, #0
 8002e74:	6363      	str	r3, [r4, #52]	; 0x34
 8002e76:	89a3      	ldrh	r3, [r4, #12]
 8002e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e7c:	81a3      	strh	r3, [r4, #12]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6063      	str	r3, [r4, #4]
 8002e82:	6923      	ldr	r3, [r4, #16]
 8002e84:	6023      	str	r3, [r4, #0]
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	81a3      	strh	r3, [r4, #12]
 8002e8e:	6923      	ldr	r3, [r4, #16]
 8002e90:	b94b      	cbnz	r3, 8002ea6 <__swsetup_r+0x9a>
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9c:	d003      	beq.n	8002ea6 <__swsetup_r+0x9a>
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	f000 fa01 	bl	80032a8 <__smakebuf_r>
 8002ea6:	89a0      	ldrh	r0, [r4, #12]
 8002ea8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002eac:	f010 0301 	ands.w	r3, r0, #1
 8002eb0:	d00a      	beq.n	8002ec8 <__swsetup_r+0xbc>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60a3      	str	r3, [r4, #8]
 8002eb6:	6963      	ldr	r3, [r4, #20]
 8002eb8:	425b      	negs	r3, r3
 8002eba:	61a3      	str	r3, [r4, #24]
 8002ebc:	6923      	ldr	r3, [r4, #16]
 8002ebe:	b943      	cbnz	r3, 8002ed2 <__swsetup_r+0xc6>
 8002ec0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ec4:	d1ba      	bne.n	8002e3c <__swsetup_r+0x30>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	0781      	lsls	r1, r0, #30
 8002eca:	bf58      	it	pl
 8002ecc:	6963      	ldrpl	r3, [r4, #20]
 8002ece:	60a3      	str	r3, [r4, #8]
 8002ed0:	e7f4      	b.n	8002ebc <__swsetup_r+0xb0>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e7f7      	b.n	8002ec6 <__swsetup_r+0xba>
 8002ed6:	bf00      	nop
 8002ed8:	2000000c 	.word	0x2000000c
 8002edc:	08003d48 	.word	0x08003d48
 8002ee0:	08003d68 	.word	0x08003d68
 8002ee4:	08003d28 	.word	0x08003d28

08002ee8 <__sflush_r>:
 8002ee8:	898a      	ldrh	r2, [r1, #12]
 8002eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eee:	4605      	mov	r5, r0
 8002ef0:	0710      	lsls	r0, r2, #28
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	d458      	bmi.n	8002fa8 <__sflush_r+0xc0>
 8002ef6:	684b      	ldr	r3, [r1, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	dc05      	bgt.n	8002f08 <__sflush_r+0x20>
 8002efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	dc02      	bgt.n	8002f08 <__sflush_r+0x20>
 8002f02:	2000      	movs	r0, #0
 8002f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f0a:	2e00      	cmp	r6, #0
 8002f0c:	d0f9      	beq.n	8002f02 <__sflush_r+0x1a>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f14:	682f      	ldr	r7, [r5, #0]
 8002f16:	602b      	str	r3, [r5, #0]
 8002f18:	d032      	beq.n	8002f80 <__sflush_r+0x98>
 8002f1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	075a      	lsls	r2, r3, #29
 8002f20:	d505      	bpl.n	8002f2e <__sflush_r+0x46>
 8002f22:	6863      	ldr	r3, [r4, #4]
 8002f24:	1ac0      	subs	r0, r0, r3
 8002f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f28:	b10b      	cbz	r3, 8002f2e <__sflush_r+0x46>
 8002f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f2c:	1ac0      	subs	r0, r0, r3
 8002f2e:	2300      	movs	r3, #0
 8002f30:	4602      	mov	r2, r0
 8002f32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f34:	6a21      	ldr	r1, [r4, #32]
 8002f36:	4628      	mov	r0, r5
 8002f38:	47b0      	blx	r6
 8002f3a:	1c43      	adds	r3, r0, #1
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	d106      	bne.n	8002f4e <__sflush_r+0x66>
 8002f40:	6829      	ldr	r1, [r5, #0]
 8002f42:	291d      	cmp	r1, #29
 8002f44:	d82c      	bhi.n	8002fa0 <__sflush_r+0xb8>
 8002f46:	4a2a      	ldr	r2, [pc, #168]	; (8002ff0 <__sflush_r+0x108>)
 8002f48:	40ca      	lsrs	r2, r1
 8002f4a:	07d6      	lsls	r6, r2, #31
 8002f4c:	d528      	bpl.n	8002fa0 <__sflush_r+0xb8>
 8002f4e:	2200      	movs	r2, #0
 8002f50:	6062      	str	r2, [r4, #4]
 8002f52:	04d9      	lsls	r1, r3, #19
 8002f54:	6922      	ldr	r2, [r4, #16]
 8002f56:	6022      	str	r2, [r4, #0]
 8002f58:	d504      	bpl.n	8002f64 <__sflush_r+0x7c>
 8002f5a:	1c42      	adds	r2, r0, #1
 8002f5c:	d101      	bne.n	8002f62 <__sflush_r+0x7a>
 8002f5e:	682b      	ldr	r3, [r5, #0]
 8002f60:	b903      	cbnz	r3, 8002f64 <__sflush_r+0x7c>
 8002f62:	6560      	str	r0, [r4, #84]	; 0x54
 8002f64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f66:	602f      	str	r7, [r5, #0]
 8002f68:	2900      	cmp	r1, #0
 8002f6a:	d0ca      	beq.n	8002f02 <__sflush_r+0x1a>
 8002f6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f70:	4299      	cmp	r1, r3
 8002f72:	d002      	beq.n	8002f7a <__sflush_r+0x92>
 8002f74:	4628      	mov	r0, r5
 8002f76:	f000 f9d7 	bl	8003328 <_free_r>
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	6360      	str	r0, [r4, #52]	; 0x34
 8002f7e:	e7c1      	b.n	8002f04 <__sflush_r+0x1c>
 8002f80:	6a21      	ldr	r1, [r4, #32]
 8002f82:	2301      	movs	r3, #1
 8002f84:	4628      	mov	r0, r5
 8002f86:	47b0      	blx	r6
 8002f88:	1c41      	adds	r1, r0, #1
 8002f8a:	d1c7      	bne.n	8002f1c <__sflush_r+0x34>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0c4      	beq.n	8002f1c <__sflush_r+0x34>
 8002f92:	2b1d      	cmp	r3, #29
 8002f94:	d001      	beq.n	8002f9a <__sflush_r+0xb2>
 8002f96:	2b16      	cmp	r3, #22
 8002f98:	d101      	bne.n	8002f9e <__sflush_r+0xb6>
 8002f9a:	602f      	str	r7, [r5, #0]
 8002f9c:	e7b1      	b.n	8002f02 <__sflush_r+0x1a>
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa4:	81a3      	strh	r3, [r4, #12]
 8002fa6:	e7ad      	b.n	8002f04 <__sflush_r+0x1c>
 8002fa8:	690f      	ldr	r7, [r1, #16]
 8002faa:	2f00      	cmp	r7, #0
 8002fac:	d0a9      	beq.n	8002f02 <__sflush_r+0x1a>
 8002fae:	0793      	lsls	r3, r2, #30
 8002fb0:	680e      	ldr	r6, [r1, #0]
 8002fb2:	bf08      	it	eq
 8002fb4:	694b      	ldreq	r3, [r1, #20]
 8002fb6:	600f      	str	r7, [r1, #0]
 8002fb8:	bf18      	it	ne
 8002fba:	2300      	movne	r3, #0
 8002fbc:	eba6 0807 	sub.w	r8, r6, r7
 8002fc0:	608b      	str	r3, [r1, #8]
 8002fc2:	f1b8 0f00 	cmp.w	r8, #0
 8002fc6:	dd9c      	ble.n	8002f02 <__sflush_r+0x1a>
 8002fc8:	6a21      	ldr	r1, [r4, #32]
 8002fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fcc:	4643      	mov	r3, r8
 8002fce:	463a      	mov	r2, r7
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	47b0      	blx	r6
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	dc06      	bgt.n	8002fe6 <__sflush_r+0xfe>
 8002fd8:	89a3      	ldrh	r3, [r4, #12]
 8002fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fde:	81a3      	strh	r3, [r4, #12]
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	e78e      	b.n	8002f04 <__sflush_r+0x1c>
 8002fe6:	4407      	add	r7, r0
 8002fe8:	eba8 0800 	sub.w	r8, r8, r0
 8002fec:	e7e9      	b.n	8002fc2 <__sflush_r+0xda>
 8002fee:	bf00      	nop
 8002ff0:	20400001 	.word	0x20400001

08002ff4 <_fflush_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	690b      	ldr	r3, [r1, #16]
 8002ff8:	4605      	mov	r5, r0
 8002ffa:	460c      	mov	r4, r1
 8002ffc:	b913      	cbnz	r3, 8003004 <_fflush_r+0x10>
 8002ffe:	2500      	movs	r5, #0
 8003000:	4628      	mov	r0, r5
 8003002:	bd38      	pop	{r3, r4, r5, pc}
 8003004:	b118      	cbz	r0, 800300e <_fflush_r+0x1a>
 8003006:	6983      	ldr	r3, [r0, #24]
 8003008:	b90b      	cbnz	r3, 800300e <_fflush_r+0x1a>
 800300a:	f000 f887 	bl	800311c <__sinit>
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <_fflush_r+0x6c>)
 8003010:	429c      	cmp	r4, r3
 8003012:	d11b      	bne.n	800304c <_fflush_r+0x58>
 8003014:	686c      	ldr	r4, [r5, #4]
 8003016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ef      	beq.n	8002ffe <_fflush_r+0xa>
 800301e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003020:	07d0      	lsls	r0, r2, #31
 8003022:	d404      	bmi.n	800302e <_fflush_r+0x3a>
 8003024:	0599      	lsls	r1, r3, #22
 8003026:	d402      	bmi.n	800302e <_fflush_r+0x3a>
 8003028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800302a:	f000 f915 	bl	8003258 <__retarget_lock_acquire_recursive>
 800302e:	4628      	mov	r0, r5
 8003030:	4621      	mov	r1, r4
 8003032:	f7ff ff59 	bl	8002ee8 <__sflush_r>
 8003036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003038:	07da      	lsls	r2, r3, #31
 800303a:	4605      	mov	r5, r0
 800303c:	d4e0      	bmi.n	8003000 <_fflush_r+0xc>
 800303e:	89a3      	ldrh	r3, [r4, #12]
 8003040:	059b      	lsls	r3, r3, #22
 8003042:	d4dd      	bmi.n	8003000 <_fflush_r+0xc>
 8003044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003046:	f000 f908 	bl	800325a <__retarget_lock_release_recursive>
 800304a:	e7d9      	b.n	8003000 <_fflush_r+0xc>
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <_fflush_r+0x70>)
 800304e:	429c      	cmp	r4, r3
 8003050:	d101      	bne.n	8003056 <_fflush_r+0x62>
 8003052:	68ac      	ldr	r4, [r5, #8]
 8003054:	e7df      	b.n	8003016 <_fflush_r+0x22>
 8003056:	4b04      	ldr	r3, [pc, #16]	; (8003068 <_fflush_r+0x74>)
 8003058:	429c      	cmp	r4, r3
 800305a:	bf08      	it	eq
 800305c:	68ec      	ldreq	r4, [r5, #12]
 800305e:	e7da      	b.n	8003016 <_fflush_r+0x22>
 8003060:	08003d48 	.word	0x08003d48
 8003064:	08003d68 	.word	0x08003d68
 8003068:	08003d28 	.word	0x08003d28

0800306c <std>:
 800306c:	2300      	movs	r3, #0
 800306e:	b510      	push	{r4, lr}
 8003070:	4604      	mov	r4, r0
 8003072:	e9c0 3300 	strd	r3, r3, [r0]
 8003076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800307a:	6083      	str	r3, [r0, #8]
 800307c:	8181      	strh	r1, [r0, #12]
 800307e:	6643      	str	r3, [r0, #100]	; 0x64
 8003080:	81c2      	strh	r2, [r0, #14]
 8003082:	6183      	str	r3, [r0, #24]
 8003084:	4619      	mov	r1, r3
 8003086:	2208      	movs	r2, #8
 8003088:	305c      	adds	r0, #92	; 0x5c
 800308a:	f7ff fdd7 	bl	8002c3c <memset>
 800308e:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <std+0x38>)
 8003090:	6263      	str	r3, [r4, #36]	; 0x24
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <std+0x3c>)
 8003094:	62a3      	str	r3, [r4, #40]	; 0x28
 8003096:	4b05      	ldr	r3, [pc, #20]	; (80030ac <std+0x40>)
 8003098:	62e3      	str	r3, [r4, #44]	; 0x2c
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <std+0x44>)
 800309c:	6224      	str	r4, [r4, #32]
 800309e:	6323      	str	r3, [r4, #48]	; 0x30
 80030a0:	bd10      	pop	{r4, pc}
 80030a2:	bf00      	nop
 80030a4:	08003ae5 	.word	0x08003ae5
 80030a8:	08003b07 	.word	0x08003b07
 80030ac:	08003b3f 	.word	0x08003b3f
 80030b0:	08003b63 	.word	0x08003b63

080030b4 <_cleanup_r>:
 80030b4:	4901      	ldr	r1, [pc, #4]	; (80030bc <_cleanup_r+0x8>)
 80030b6:	f000 b8af 	b.w	8003218 <_fwalk_reent>
 80030ba:	bf00      	nop
 80030bc:	08002ff5 	.word	0x08002ff5

080030c0 <__sfmoreglue>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	2268      	movs	r2, #104	; 0x68
 80030c4:	1e4d      	subs	r5, r1, #1
 80030c6:	4355      	muls	r5, r2
 80030c8:	460e      	mov	r6, r1
 80030ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030ce:	f000 f997 	bl	8003400 <_malloc_r>
 80030d2:	4604      	mov	r4, r0
 80030d4:	b140      	cbz	r0, 80030e8 <__sfmoreglue+0x28>
 80030d6:	2100      	movs	r1, #0
 80030d8:	e9c0 1600 	strd	r1, r6, [r0]
 80030dc:	300c      	adds	r0, #12
 80030de:	60a0      	str	r0, [r4, #8]
 80030e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030e4:	f7ff fdaa 	bl	8002c3c <memset>
 80030e8:	4620      	mov	r0, r4
 80030ea:	bd70      	pop	{r4, r5, r6, pc}

080030ec <__sfp_lock_acquire>:
 80030ec:	4801      	ldr	r0, [pc, #4]	; (80030f4 <__sfp_lock_acquire+0x8>)
 80030ee:	f000 b8b3 	b.w	8003258 <__retarget_lock_acquire_recursive>
 80030f2:	bf00      	nop
 80030f4:	2000018d 	.word	0x2000018d

080030f8 <__sfp_lock_release>:
 80030f8:	4801      	ldr	r0, [pc, #4]	; (8003100 <__sfp_lock_release+0x8>)
 80030fa:	f000 b8ae 	b.w	800325a <__retarget_lock_release_recursive>
 80030fe:	bf00      	nop
 8003100:	2000018d 	.word	0x2000018d

08003104 <__sinit_lock_acquire>:
 8003104:	4801      	ldr	r0, [pc, #4]	; (800310c <__sinit_lock_acquire+0x8>)
 8003106:	f000 b8a7 	b.w	8003258 <__retarget_lock_acquire_recursive>
 800310a:	bf00      	nop
 800310c:	2000018e 	.word	0x2000018e

08003110 <__sinit_lock_release>:
 8003110:	4801      	ldr	r0, [pc, #4]	; (8003118 <__sinit_lock_release+0x8>)
 8003112:	f000 b8a2 	b.w	800325a <__retarget_lock_release_recursive>
 8003116:	bf00      	nop
 8003118:	2000018e 	.word	0x2000018e

0800311c <__sinit>:
 800311c:	b510      	push	{r4, lr}
 800311e:	4604      	mov	r4, r0
 8003120:	f7ff fff0 	bl	8003104 <__sinit_lock_acquire>
 8003124:	69a3      	ldr	r3, [r4, #24]
 8003126:	b11b      	cbz	r3, 8003130 <__sinit+0x14>
 8003128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800312c:	f7ff bff0 	b.w	8003110 <__sinit_lock_release>
 8003130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003134:	6523      	str	r3, [r4, #80]	; 0x50
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <__sinit+0x68>)
 8003138:	4a13      	ldr	r2, [pc, #76]	; (8003188 <__sinit+0x6c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	62a2      	str	r2, [r4, #40]	; 0x28
 800313e:	42a3      	cmp	r3, r4
 8003140:	bf04      	itt	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	61a3      	streq	r3, [r4, #24]
 8003146:	4620      	mov	r0, r4
 8003148:	f000 f820 	bl	800318c <__sfp>
 800314c:	6060      	str	r0, [r4, #4]
 800314e:	4620      	mov	r0, r4
 8003150:	f000 f81c 	bl	800318c <__sfp>
 8003154:	60a0      	str	r0, [r4, #8]
 8003156:	4620      	mov	r0, r4
 8003158:	f000 f818 	bl	800318c <__sfp>
 800315c:	2200      	movs	r2, #0
 800315e:	60e0      	str	r0, [r4, #12]
 8003160:	2104      	movs	r1, #4
 8003162:	6860      	ldr	r0, [r4, #4]
 8003164:	f7ff ff82 	bl	800306c <std>
 8003168:	68a0      	ldr	r0, [r4, #8]
 800316a:	2201      	movs	r2, #1
 800316c:	2109      	movs	r1, #9
 800316e:	f7ff ff7d 	bl	800306c <std>
 8003172:	68e0      	ldr	r0, [r4, #12]
 8003174:	2202      	movs	r2, #2
 8003176:	2112      	movs	r1, #18
 8003178:	f7ff ff78 	bl	800306c <std>
 800317c:	2301      	movs	r3, #1
 800317e:	61a3      	str	r3, [r4, #24]
 8003180:	e7d2      	b.n	8003128 <__sinit+0xc>
 8003182:	bf00      	nop
 8003184:	08003d24 	.word	0x08003d24
 8003188:	080030b5 	.word	0x080030b5

0800318c <__sfp>:
 800318c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318e:	4607      	mov	r7, r0
 8003190:	f7ff ffac 	bl	80030ec <__sfp_lock_acquire>
 8003194:	4b1e      	ldr	r3, [pc, #120]	; (8003210 <__sfp+0x84>)
 8003196:	681e      	ldr	r6, [r3, #0]
 8003198:	69b3      	ldr	r3, [r6, #24]
 800319a:	b913      	cbnz	r3, 80031a2 <__sfp+0x16>
 800319c:	4630      	mov	r0, r6
 800319e:	f7ff ffbd 	bl	800311c <__sinit>
 80031a2:	3648      	adds	r6, #72	; 0x48
 80031a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	d503      	bpl.n	80031b4 <__sfp+0x28>
 80031ac:	6833      	ldr	r3, [r6, #0]
 80031ae:	b30b      	cbz	r3, 80031f4 <__sfp+0x68>
 80031b0:	6836      	ldr	r6, [r6, #0]
 80031b2:	e7f7      	b.n	80031a4 <__sfp+0x18>
 80031b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031b8:	b9d5      	cbnz	r5, 80031f0 <__sfp+0x64>
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <__sfp+0x88>)
 80031bc:	60e3      	str	r3, [r4, #12]
 80031be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031c2:	6665      	str	r5, [r4, #100]	; 0x64
 80031c4:	f000 f847 	bl	8003256 <__retarget_lock_init_recursive>
 80031c8:	f7ff ff96 	bl	80030f8 <__sfp_lock_release>
 80031cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031d4:	6025      	str	r5, [r4, #0]
 80031d6:	61a5      	str	r5, [r4, #24]
 80031d8:	2208      	movs	r2, #8
 80031da:	4629      	mov	r1, r5
 80031dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031e0:	f7ff fd2c 	bl	8002c3c <memset>
 80031e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031ec:	4620      	mov	r0, r4
 80031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031f0:	3468      	adds	r4, #104	; 0x68
 80031f2:	e7d9      	b.n	80031a8 <__sfp+0x1c>
 80031f4:	2104      	movs	r1, #4
 80031f6:	4638      	mov	r0, r7
 80031f8:	f7ff ff62 	bl	80030c0 <__sfmoreglue>
 80031fc:	4604      	mov	r4, r0
 80031fe:	6030      	str	r0, [r6, #0]
 8003200:	2800      	cmp	r0, #0
 8003202:	d1d5      	bne.n	80031b0 <__sfp+0x24>
 8003204:	f7ff ff78 	bl	80030f8 <__sfp_lock_release>
 8003208:	230c      	movs	r3, #12
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	e7ee      	b.n	80031ec <__sfp+0x60>
 800320e:	bf00      	nop
 8003210:	08003d24 	.word	0x08003d24
 8003214:	ffff0001 	.word	0xffff0001

08003218 <_fwalk_reent>:
 8003218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800321c:	4606      	mov	r6, r0
 800321e:	4688      	mov	r8, r1
 8003220:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003224:	2700      	movs	r7, #0
 8003226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800322a:	f1b9 0901 	subs.w	r9, r9, #1
 800322e:	d505      	bpl.n	800323c <_fwalk_reent+0x24>
 8003230:	6824      	ldr	r4, [r4, #0]
 8003232:	2c00      	cmp	r4, #0
 8003234:	d1f7      	bne.n	8003226 <_fwalk_reent+0xe>
 8003236:	4638      	mov	r0, r7
 8003238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800323c:	89ab      	ldrh	r3, [r5, #12]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d907      	bls.n	8003252 <_fwalk_reent+0x3a>
 8003242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003246:	3301      	adds	r3, #1
 8003248:	d003      	beq.n	8003252 <_fwalk_reent+0x3a>
 800324a:	4629      	mov	r1, r5
 800324c:	4630      	mov	r0, r6
 800324e:	47c0      	blx	r8
 8003250:	4307      	orrs	r7, r0
 8003252:	3568      	adds	r5, #104	; 0x68
 8003254:	e7e9      	b.n	800322a <_fwalk_reent+0x12>

08003256 <__retarget_lock_init_recursive>:
 8003256:	4770      	bx	lr

08003258 <__retarget_lock_acquire_recursive>:
 8003258:	4770      	bx	lr

0800325a <__retarget_lock_release_recursive>:
 800325a:	4770      	bx	lr

0800325c <__swhatbuf_r>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	460e      	mov	r6, r1
 8003260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003264:	2900      	cmp	r1, #0
 8003266:	b096      	sub	sp, #88	; 0x58
 8003268:	4614      	mov	r4, r2
 800326a:	461d      	mov	r5, r3
 800326c:	da08      	bge.n	8003280 <__swhatbuf_r+0x24>
 800326e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	602a      	str	r2, [r5, #0]
 8003276:	061a      	lsls	r2, r3, #24
 8003278:	d410      	bmi.n	800329c <__swhatbuf_r+0x40>
 800327a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800327e:	e00e      	b.n	800329e <__swhatbuf_r+0x42>
 8003280:	466a      	mov	r2, sp
 8003282:	f000 fc95 	bl	8003bb0 <_fstat_r>
 8003286:	2800      	cmp	r0, #0
 8003288:	dbf1      	blt.n	800326e <__swhatbuf_r+0x12>
 800328a:	9a01      	ldr	r2, [sp, #4]
 800328c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003294:	425a      	negs	r2, r3
 8003296:	415a      	adcs	r2, r3
 8003298:	602a      	str	r2, [r5, #0]
 800329a:	e7ee      	b.n	800327a <__swhatbuf_r+0x1e>
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	2000      	movs	r0, #0
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	b016      	add	sp, #88	; 0x58
 80032a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080032a8 <__smakebuf_r>:
 80032a8:	898b      	ldrh	r3, [r1, #12]
 80032aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032ac:	079d      	lsls	r5, r3, #30
 80032ae:	4606      	mov	r6, r0
 80032b0:	460c      	mov	r4, r1
 80032b2:	d507      	bpl.n	80032c4 <__smakebuf_r+0x1c>
 80032b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	6123      	str	r3, [r4, #16]
 80032bc:	2301      	movs	r3, #1
 80032be:	6163      	str	r3, [r4, #20]
 80032c0:	b002      	add	sp, #8
 80032c2:	bd70      	pop	{r4, r5, r6, pc}
 80032c4:	ab01      	add	r3, sp, #4
 80032c6:	466a      	mov	r2, sp
 80032c8:	f7ff ffc8 	bl	800325c <__swhatbuf_r>
 80032cc:	9900      	ldr	r1, [sp, #0]
 80032ce:	4605      	mov	r5, r0
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f895 	bl	8003400 <_malloc_r>
 80032d6:	b948      	cbnz	r0, 80032ec <__smakebuf_r+0x44>
 80032d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032dc:	059a      	lsls	r2, r3, #22
 80032de:	d4ef      	bmi.n	80032c0 <__smakebuf_r+0x18>
 80032e0:	f023 0303 	bic.w	r3, r3, #3
 80032e4:	f043 0302 	orr.w	r3, r3, #2
 80032e8:	81a3      	strh	r3, [r4, #12]
 80032ea:	e7e3      	b.n	80032b4 <__smakebuf_r+0xc>
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <__smakebuf_r+0x7c>)
 80032ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	6020      	str	r0, [r4, #0]
 80032f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f8:	81a3      	strh	r3, [r4, #12]
 80032fa:	9b00      	ldr	r3, [sp, #0]
 80032fc:	6163      	str	r3, [r4, #20]
 80032fe:	9b01      	ldr	r3, [sp, #4]
 8003300:	6120      	str	r0, [r4, #16]
 8003302:	b15b      	cbz	r3, 800331c <__smakebuf_r+0x74>
 8003304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003308:	4630      	mov	r0, r6
 800330a:	f000 fc63 	bl	8003bd4 <_isatty_r>
 800330e:	b128      	cbz	r0, 800331c <__smakebuf_r+0x74>
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	89a0      	ldrh	r0, [r4, #12]
 800331e:	4305      	orrs	r5, r0
 8003320:	81a5      	strh	r5, [r4, #12]
 8003322:	e7cd      	b.n	80032c0 <__smakebuf_r+0x18>
 8003324:	080030b5 	.word	0x080030b5

08003328 <_free_r>:
 8003328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800332a:	2900      	cmp	r1, #0
 800332c:	d044      	beq.n	80033b8 <_free_r+0x90>
 800332e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003332:	9001      	str	r0, [sp, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f1a1 0404 	sub.w	r4, r1, #4
 800333a:	bfb8      	it	lt
 800333c:	18e4      	addlt	r4, r4, r3
 800333e:	f000 fc6b 	bl	8003c18 <__malloc_lock>
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <_free_r+0x94>)
 8003344:	9801      	ldr	r0, [sp, #4]
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	b933      	cbnz	r3, 8003358 <_free_r+0x30>
 800334a:	6063      	str	r3, [r4, #4]
 800334c:	6014      	str	r4, [r2, #0]
 800334e:	b003      	add	sp, #12
 8003350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003354:	f000 bc66 	b.w	8003c24 <__malloc_unlock>
 8003358:	42a3      	cmp	r3, r4
 800335a:	d908      	bls.n	800336e <_free_r+0x46>
 800335c:	6825      	ldr	r5, [r4, #0]
 800335e:	1961      	adds	r1, r4, r5
 8003360:	428b      	cmp	r3, r1
 8003362:	bf01      	itttt	eq
 8003364:	6819      	ldreq	r1, [r3, #0]
 8003366:	685b      	ldreq	r3, [r3, #4]
 8003368:	1949      	addeq	r1, r1, r5
 800336a:	6021      	streq	r1, [r4, #0]
 800336c:	e7ed      	b.n	800334a <_free_r+0x22>
 800336e:	461a      	mov	r2, r3
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	b10b      	cbz	r3, 8003378 <_free_r+0x50>
 8003374:	42a3      	cmp	r3, r4
 8003376:	d9fa      	bls.n	800336e <_free_r+0x46>
 8003378:	6811      	ldr	r1, [r2, #0]
 800337a:	1855      	adds	r5, r2, r1
 800337c:	42a5      	cmp	r5, r4
 800337e:	d10b      	bne.n	8003398 <_free_r+0x70>
 8003380:	6824      	ldr	r4, [r4, #0]
 8003382:	4421      	add	r1, r4
 8003384:	1854      	adds	r4, r2, r1
 8003386:	42a3      	cmp	r3, r4
 8003388:	6011      	str	r1, [r2, #0]
 800338a:	d1e0      	bne.n	800334e <_free_r+0x26>
 800338c:	681c      	ldr	r4, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	6053      	str	r3, [r2, #4]
 8003392:	4421      	add	r1, r4
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	e7da      	b.n	800334e <_free_r+0x26>
 8003398:	d902      	bls.n	80033a0 <_free_r+0x78>
 800339a:	230c      	movs	r3, #12
 800339c:	6003      	str	r3, [r0, #0]
 800339e:	e7d6      	b.n	800334e <_free_r+0x26>
 80033a0:	6825      	ldr	r5, [r4, #0]
 80033a2:	1961      	adds	r1, r4, r5
 80033a4:	428b      	cmp	r3, r1
 80033a6:	bf04      	itt	eq
 80033a8:	6819      	ldreq	r1, [r3, #0]
 80033aa:	685b      	ldreq	r3, [r3, #4]
 80033ac:	6063      	str	r3, [r4, #4]
 80033ae:	bf04      	itt	eq
 80033b0:	1949      	addeq	r1, r1, r5
 80033b2:	6021      	streq	r1, [r4, #0]
 80033b4:	6054      	str	r4, [r2, #4]
 80033b6:	e7ca      	b.n	800334e <_free_r+0x26>
 80033b8:	b003      	add	sp, #12
 80033ba:	bd30      	pop	{r4, r5, pc}
 80033bc:	20000190 	.word	0x20000190

080033c0 <sbrk_aligned>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4e0e      	ldr	r6, [pc, #56]	; (80033fc <sbrk_aligned+0x3c>)
 80033c4:	460c      	mov	r4, r1
 80033c6:	6831      	ldr	r1, [r6, #0]
 80033c8:	4605      	mov	r5, r0
 80033ca:	b911      	cbnz	r1, 80033d2 <sbrk_aligned+0x12>
 80033cc:	f000 fb7a 	bl	8003ac4 <_sbrk_r>
 80033d0:	6030      	str	r0, [r6, #0]
 80033d2:	4621      	mov	r1, r4
 80033d4:	4628      	mov	r0, r5
 80033d6:	f000 fb75 	bl	8003ac4 <_sbrk_r>
 80033da:	1c43      	adds	r3, r0, #1
 80033dc:	d00a      	beq.n	80033f4 <sbrk_aligned+0x34>
 80033de:	1cc4      	adds	r4, r0, #3
 80033e0:	f024 0403 	bic.w	r4, r4, #3
 80033e4:	42a0      	cmp	r0, r4
 80033e6:	d007      	beq.n	80033f8 <sbrk_aligned+0x38>
 80033e8:	1a21      	subs	r1, r4, r0
 80033ea:	4628      	mov	r0, r5
 80033ec:	f000 fb6a 	bl	8003ac4 <_sbrk_r>
 80033f0:	3001      	adds	r0, #1
 80033f2:	d101      	bne.n	80033f8 <sbrk_aligned+0x38>
 80033f4:	f04f 34ff 	mov.w	r4, #4294967295
 80033f8:	4620      	mov	r0, r4
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	20000194 	.word	0x20000194

08003400 <_malloc_r>:
 8003400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003404:	1ccd      	adds	r5, r1, #3
 8003406:	f025 0503 	bic.w	r5, r5, #3
 800340a:	3508      	adds	r5, #8
 800340c:	2d0c      	cmp	r5, #12
 800340e:	bf38      	it	cc
 8003410:	250c      	movcc	r5, #12
 8003412:	2d00      	cmp	r5, #0
 8003414:	4607      	mov	r7, r0
 8003416:	db01      	blt.n	800341c <_malloc_r+0x1c>
 8003418:	42a9      	cmp	r1, r5
 800341a:	d905      	bls.n	8003428 <_malloc_r+0x28>
 800341c:	230c      	movs	r3, #12
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	2600      	movs	r6, #0
 8003422:	4630      	mov	r0, r6
 8003424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003428:	4e2e      	ldr	r6, [pc, #184]	; (80034e4 <_malloc_r+0xe4>)
 800342a:	f000 fbf5 	bl	8003c18 <__malloc_lock>
 800342e:	6833      	ldr	r3, [r6, #0]
 8003430:	461c      	mov	r4, r3
 8003432:	bb34      	cbnz	r4, 8003482 <_malloc_r+0x82>
 8003434:	4629      	mov	r1, r5
 8003436:	4638      	mov	r0, r7
 8003438:	f7ff ffc2 	bl	80033c0 <sbrk_aligned>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	4604      	mov	r4, r0
 8003440:	d14d      	bne.n	80034de <_malloc_r+0xde>
 8003442:	6834      	ldr	r4, [r6, #0]
 8003444:	4626      	mov	r6, r4
 8003446:	2e00      	cmp	r6, #0
 8003448:	d140      	bne.n	80034cc <_malloc_r+0xcc>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	4631      	mov	r1, r6
 800344e:	4638      	mov	r0, r7
 8003450:	eb04 0803 	add.w	r8, r4, r3
 8003454:	f000 fb36 	bl	8003ac4 <_sbrk_r>
 8003458:	4580      	cmp	r8, r0
 800345a:	d13a      	bne.n	80034d2 <_malloc_r+0xd2>
 800345c:	6821      	ldr	r1, [r4, #0]
 800345e:	3503      	adds	r5, #3
 8003460:	1a6d      	subs	r5, r5, r1
 8003462:	f025 0503 	bic.w	r5, r5, #3
 8003466:	3508      	adds	r5, #8
 8003468:	2d0c      	cmp	r5, #12
 800346a:	bf38      	it	cc
 800346c:	250c      	movcc	r5, #12
 800346e:	4629      	mov	r1, r5
 8003470:	4638      	mov	r0, r7
 8003472:	f7ff ffa5 	bl	80033c0 <sbrk_aligned>
 8003476:	3001      	adds	r0, #1
 8003478:	d02b      	beq.n	80034d2 <_malloc_r+0xd2>
 800347a:	6823      	ldr	r3, [r4, #0]
 800347c:	442b      	add	r3, r5
 800347e:	6023      	str	r3, [r4, #0]
 8003480:	e00e      	b.n	80034a0 <_malloc_r+0xa0>
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	1b52      	subs	r2, r2, r5
 8003486:	d41e      	bmi.n	80034c6 <_malloc_r+0xc6>
 8003488:	2a0b      	cmp	r2, #11
 800348a:	d916      	bls.n	80034ba <_malloc_r+0xba>
 800348c:	1961      	adds	r1, r4, r5
 800348e:	42a3      	cmp	r3, r4
 8003490:	6025      	str	r5, [r4, #0]
 8003492:	bf18      	it	ne
 8003494:	6059      	strne	r1, [r3, #4]
 8003496:	6863      	ldr	r3, [r4, #4]
 8003498:	bf08      	it	eq
 800349a:	6031      	streq	r1, [r6, #0]
 800349c:	5162      	str	r2, [r4, r5]
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	4638      	mov	r0, r7
 80034a2:	f104 060b 	add.w	r6, r4, #11
 80034a6:	f000 fbbd 	bl	8003c24 <__malloc_unlock>
 80034aa:	f026 0607 	bic.w	r6, r6, #7
 80034ae:	1d23      	adds	r3, r4, #4
 80034b0:	1af2      	subs	r2, r6, r3
 80034b2:	d0b6      	beq.n	8003422 <_malloc_r+0x22>
 80034b4:	1b9b      	subs	r3, r3, r6
 80034b6:	50a3      	str	r3, [r4, r2]
 80034b8:	e7b3      	b.n	8003422 <_malloc_r+0x22>
 80034ba:	6862      	ldr	r2, [r4, #4]
 80034bc:	42a3      	cmp	r3, r4
 80034be:	bf0c      	ite	eq
 80034c0:	6032      	streq	r2, [r6, #0]
 80034c2:	605a      	strne	r2, [r3, #4]
 80034c4:	e7ec      	b.n	80034a0 <_malloc_r+0xa0>
 80034c6:	4623      	mov	r3, r4
 80034c8:	6864      	ldr	r4, [r4, #4]
 80034ca:	e7b2      	b.n	8003432 <_malloc_r+0x32>
 80034cc:	4634      	mov	r4, r6
 80034ce:	6876      	ldr	r6, [r6, #4]
 80034d0:	e7b9      	b.n	8003446 <_malloc_r+0x46>
 80034d2:	230c      	movs	r3, #12
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	4638      	mov	r0, r7
 80034d8:	f000 fba4 	bl	8003c24 <__malloc_unlock>
 80034dc:	e7a1      	b.n	8003422 <_malloc_r+0x22>
 80034de:	6025      	str	r5, [r4, #0]
 80034e0:	e7de      	b.n	80034a0 <_malloc_r+0xa0>
 80034e2:	bf00      	nop
 80034e4:	20000190 	.word	0x20000190

080034e8 <__sfputc_r>:
 80034e8:	6893      	ldr	r3, [r2, #8]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	b410      	push	{r4}
 80034f0:	6093      	str	r3, [r2, #8]
 80034f2:	da08      	bge.n	8003506 <__sfputc_r+0x1e>
 80034f4:	6994      	ldr	r4, [r2, #24]
 80034f6:	42a3      	cmp	r3, r4
 80034f8:	db01      	blt.n	80034fe <__sfputc_r+0x16>
 80034fa:	290a      	cmp	r1, #10
 80034fc:	d103      	bne.n	8003506 <__sfputc_r+0x1e>
 80034fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003502:	f7ff bc31 	b.w	8002d68 <__swbuf_r>
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	1c58      	adds	r0, r3, #1
 800350a:	6010      	str	r0, [r2, #0]
 800350c:	7019      	strb	r1, [r3, #0]
 800350e:	4608      	mov	r0, r1
 8003510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003514:	4770      	bx	lr

08003516 <__sfputs_r>:
 8003516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003518:	4606      	mov	r6, r0
 800351a:	460f      	mov	r7, r1
 800351c:	4614      	mov	r4, r2
 800351e:	18d5      	adds	r5, r2, r3
 8003520:	42ac      	cmp	r4, r5
 8003522:	d101      	bne.n	8003528 <__sfputs_r+0x12>
 8003524:	2000      	movs	r0, #0
 8003526:	e007      	b.n	8003538 <__sfputs_r+0x22>
 8003528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800352c:	463a      	mov	r2, r7
 800352e:	4630      	mov	r0, r6
 8003530:	f7ff ffda 	bl	80034e8 <__sfputc_r>
 8003534:	1c43      	adds	r3, r0, #1
 8003536:	d1f3      	bne.n	8003520 <__sfputs_r+0xa>
 8003538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800353c <_vfiprintf_r>:
 800353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003540:	460d      	mov	r5, r1
 8003542:	b09d      	sub	sp, #116	; 0x74
 8003544:	4614      	mov	r4, r2
 8003546:	4698      	mov	r8, r3
 8003548:	4606      	mov	r6, r0
 800354a:	b118      	cbz	r0, 8003554 <_vfiprintf_r+0x18>
 800354c:	6983      	ldr	r3, [r0, #24]
 800354e:	b90b      	cbnz	r3, 8003554 <_vfiprintf_r+0x18>
 8003550:	f7ff fde4 	bl	800311c <__sinit>
 8003554:	4b89      	ldr	r3, [pc, #548]	; (800377c <_vfiprintf_r+0x240>)
 8003556:	429d      	cmp	r5, r3
 8003558:	d11b      	bne.n	8003592 <_vfiprintf_r+0x56>
 800355a:	6875      	ldr	r5, [r6, #4]
 800355c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800355e:	07d9      	lsls	r1, r3, #31
 8003560:	d405      	bmi.n	800356e <_vfiprintf_r+0x32>
 8003562:	89ab      	ldrh	r3, [r5, #12]
 8003564:	059a      	lsls	r2, r3, #22
 8003566:	d402      	bmi.n	800356e <_vfiprintf_r+0x32>
 8003568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800356a:	f7ff fe75 	bl	8003258 <__retarget_lock_acquire_recursive>
 800356e:	89ab      	ldrh	r3, [r5, #12]
 8003570:	071b      	lsls	r3, r3, #28
 8003572:	d501      	bpl.n	8003578 <_vfiprintf_r+0x3c>
 8003574:	692b      	ldr	r3, [r5, #16]
 8003576:	b9eb      	cbnz	r3, 80035b4 <_vfiprintf_r+0x78>
 8003578:	4629      	mov	r1, r5
 800357a:	4630      	mov	r0, r6
 800357c:	f7ff fc46 	bl	8002e0c <__swsetup_r>
 8003580:	b1c0      	cbz	r0, 80035b4 <_vfiprintf_r+0x78>
 8003582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003584:	07dc      	lsls	r4, r3, #31
 8003586:	d50e      	bpl.n	80035a6 <_vfiprintf_r+0x6a>
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	b01d      	add	sp, #116	; 0x74
 800358e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003592:	4b7b      	ldr	r3, [pc, #492]	; (8003780 <_vfiprintf_r+0x244>)
 8003594:	429d      	cmp	r5, r3
 8003596:	d101      	bne.n	800359c <_vfiprintf_r+0x60>
 8003598:	68b5      	ldr	r5, [r6, #8]
 800359a:	e7df      	b.n	800355c <_vfiprintf_r+0x20>
 800359c:	4b79      	ldr	r3, [pc, #484]	; (8003784 <_vfiprintf_r+0x248>)
 800359e:	429d      	cmp	r5, r3
 80035a0:	bf08      	it	eq
 80035a2:	68f5      	ldreq	r5, [r6, #12]
 80035a4:	e7da      	b.n	800355c <_vfiprintf_r+0x20>
 80035a6:	89ab      	ldrh	r3, [r5, #12]
 80035a8:	0598      	lsls	r0, r3, #22
 80035aa:	d4ed      	bmi.n	8003588 <_vfiprintf_r+0x4c>
 80035ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035ae:	f7ff fe54 	bl	800325a <__retarget_lock_release_recursive>
 80035b2:	e7e9      	b.n	8003588 <_vfiprintf_r+0x4c>
 80035b4:	2300      	movs	r3, #0
 80035b6:	9309      	str	r3, [sp, #36]	; 0x24
 80035b8:	2320      	movs	r3, #32
 80035ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035be:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c2:	2330      	movs	r3, #48	; 0x30
 80035c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003788 <_vfiprintf_r+0x24c>
 80035c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035cc:	f04f 0901 	mov.w	r9, #1
 80035d0:	4623      	mov	r3, r4
 80035d2:	469a      	mov	sl, r3
 80035d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d8:	b10a      	cbz	r2, 80035de <_vfiprintf_r+0xa2>
 80035da:	2a25      	cmp	r2, #37	; 0x25
 80035dc:	d1f9      	bne.n	80035d2 <_vfiprintf_r+0x96>
 80035de:	ebba 0b04 	subs.w	fp, sl, r4
 80035e2:	d00b      	beq.n	80035fc <_vfiprintf_r+0xc0>
 80035e4:	465b      	mov	r3, fp
 80035e6:	4622      	mov	r2, r4
 80035e8:	4629      	mov	r1, r5
 80035ea:	4630      	mov	r0, r6
 80035ec:	f7ff ff93 	bl	8003516 <__sfputs_r>
 80035f0:	3001      	adds	r0, #1
 80035f2:	f000 80aa 	beq.w	800374a <_vfiprintf_r+0x20e>
 80035f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035f8:	445a      	add	r2, fp
 80035fa:	9209      	str	r2, [sp, #36]	; 0x24
 80035fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 80a2 	beq.w	800374a <_vfiprintf_r+0x20e>
 8003606:	2300      	movs	r3, #0
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003610:	f10a 0a01 	add.w	sl, sl, #1
 8003614:	9304      	str	r3, [sp, #16]
 8003616:	9307      	str	r3, [sp, #28]
 8003618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800361c:	931a      	str	r3, [sp, #104]	; 0x68
 800361e:	4654      	mov	r4, sl
 8003620:	2205      	movs	r2, #5
 8003622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003626:	4858      	ldr	r0, [pc, #352]	; (8003788 <_vfiprintf_r+0x24c>)
 8003628:	f7fc fdda 	bl	80001e0 <memchr>
 800362c:	9a04      	ldr	r2, [sp, #16]
 800362e:	b9d8      	cbnz	r0, 8003668 <_vfiprintf_r+0x12c>
 8003630:	06d1      	lsls	r1, r2, #27
 8003632:	bf44      	itt	mi
 8003634:	2320      	movmi	r3, #32
 8003636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800363a:	0713      	lsls	r3, r2, #28
 800363c:	bf44      	itt	mi
 800363e:	232b      	movmi	r3, #43	; 0x2b
 8003640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003644:	f89a 3000 	ldrb.w	r3, [sl]
 8003648:	2b2a      	cmp	r3, #42	; 0x2a
 800364a:	d015      	beq.n	8003678 <_vfiprintf_r+0x13c>
 800364c:	9a07      	ldr	r2, [sp, #28]
 800364e:	4654      	mov	r4, sl
 8003650:	2000      	movs	r0, #0
 8003652:	f04f 0c0a 	mov.w	ip, #10
 8003656:	4621      	mov	r1, r4
 8003658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800365c:	3b30      	subs	r3, #48	; 0x30
 800365e:	2b09      	cmp	r3, #9
 8003660:	d94e      	bls.n	8003700 <_vfiprintf_r+0x1c4>
 8003662:	b1b0      	cbz	r0, 8003692 <_vfiprintf_r+0x156>
 8003664:	9207      	str	r2, [sp, #28]
 8003666:	e014      	b.n	8003692 <_vfiprintf_r+0x156>
 8003668:	eba0 0308 	sub.w	r3, r0, r8
 800366c:	fa09 f303 	lsl.w	r3, r9, r3
 8003670:	4313      	orrs	r3, r2
 8003672:	9304      	str	r3, [sp, #16]
 8003674:	46a2      	mov	sl, r4
 8003676:	e7d2      	b.n	800361e <_vfiprintf_r+0xe2>
 8003678:	9b03      	ldr	r3, [sp, #12]
 800367a:	1d19      	adds	r1, r3, #4
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	9103      	str	r1, [sp, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	bfbb      	ittet	lt
 8003684:	425b      	neglt	r3, r3
 8003686:	f042 0202 	orrlt.w	r2, r2, #2
 800368a:	9307      	strge	r3, [sp, #28]
 800368c:	9307      	strlt	r3, [sp, #28]
 800368e:	bfb8      	it	lt
 8003690:	9204      	strlt	r2, [sp, #16]
 8003692:	7823      	ldrb	r3, [r4, #0]
 8003694:	2b2e      	cmp	r3, #46	; 0x2e
 8003696:	d10c      	bne.n	80036b2 <_vfiprintf_r+0x176>
 8003698:	7863      	ldrb	r3, [r4, #1]
 800369a:	2b2a      	cmp	r3, #42	; 0x2a
 800369c:	d135      	bne.n	800370a <_vfiprintf_r+0x1ce>
 800369e:	9b03      	ldr	r3, [sp, #12]
 80036a0:	1d1a      	adds	r2, r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	9203      	str	r2, [sp, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bfb8      	it	lt
 80036aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80036ae:	3402      	adds	r4, #2
 80036b0:	9305      	str	r3, [sp, #20]
 80036b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003798 <_vfiprintf_r+0x25c>
 80036b6:	7821      	ldrb	r1, [r4, #0]
 80036b8:	2203      	movs	r2, #3
 80036ba:	4650      	mov	r0, sl
 80036bc:	f7fc fd90 	bl	80001e0 <memchr>
 80036c0:	b140      	cbz	r0, 80036d4 <_vfiprintf_r+0x198>
 80036c2:	2340      	movs	r3, #64	; 0x40
 80036c4:	eba0 000a 	sub.w	r0, r0, sl
 80036c8:	fa03 f000 	lsl.w	r0, r3, r0
 80036cc:	9b04      	ldr	r3, [sp, #16]
 80036ce:	4303      	orrs	r3, r0
 80036d0:	3401      	adds	r4, #1
 80036d2:	9304      	str	r3, [sp, #16]
 80036d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d8:	482c      	ldr	r0, [pc, #176]	; (800378c <_vfiprintf_r+0x250>)
 80036da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036de:	2206      	movs	r2, #6
 80036e0:	f7fc fd7e 	bl	80001e0 <memchr>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d03f      	beq.n	8003768 <_vfiprintf_r+0x22c>
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <_vfiprintf_r+0x254>)
 80036ea:	bb1b      	cbnz	r3, 8003734 <_vfiprintf_r+0x1f8>
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	3307      	adds	r3, #7
 80036f0:	f023 0307 	bic.w	r3, r3, #7
 80036f4:	3308      	adds	r3, #8
 80036f6:	9303      	str	r3, [sp, #12]
 80036f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036fa:	443b      	add	r3, r7
 80036fc:	9309      	str	r3, [sp, #36]	; 0x24
 80036fe:	e767      	b.n	80035d0 <_vfiprintf_r+0x94>
 8003700:	fb0c 3202 	mla	r2, ip, r2, r3
 8003704:	460c      	mov	r4, r1
 8003706:	2001      	movs	r0, #1
 8003708:	e7a5      	b.n	8003656 <_vfiprintf_r+0x11a>
 800370a:	2300      	movs	r3, #0
 800370c:	3401      	adds	r4, #1
 800370e:	9305      	str	r3, [sp, #20]
 8003710:	4619      	mov	r1, r3
 8003712:	f04f 0c0a 	mov.w	ip, #10
 8003716:	4620      	mov	r0, r4
 8003718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800371c:	3a30      	subs	r2, #48	; 0x30
 800371e:	2a09      	cmp	r2, #9
 8003720:	d903      	bls.n	800372a <_vfiprintf_r+0x1ee>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0c5      	beq.n	80036b2 <_vfiprintf_r+0x176>
 8003726:	9105      	str	r1, [sp, #20]
 8003728:	e7c3      	b.n	80036b2 <_vfiprintf_r+0x176>
 800372a:	fb0c 2101 	mla	r1, ip, r1, r2
 800372e:	4604      	mov	r4, r0
 8003730:	2301      	movs	r3, #1
 8003732:	e7f0      	b.n	8003716 <_vfiprintf_r+0x1da>
 8003734:	ab03      	add	r3, sp, #12
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	462a      	mov	r2, r5
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <_vfiprintf_r+0x258>)
 800373c:	a904      	add	r1, sp, #16
 800373e:	4630      	mov	r0, r6
 8003740:	f3af 8000 	nop.w
 8003744:	4607      	mov	r7, r0
 8003746:	1c78      	adds	r0, r7, #1
 8003748:	d1d6      	bne.n	80036f8 <_vfiprintf_r+0x1bc>
 800374a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800374c:	07d9      	lsls	r1, r3, #31
 800374e:	d405      	bmi.n	800375c <_vfiprintf_r+0x220>
 8003750:	89ab      	ldrh	r3, [r5, #12]
 8003752:	059a      	lsls	r2, r3, #22
 8003754:	d402      	bmi.n	800375c <_vfiprintf_r+0x220>
 8003756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003758:	f7ff fd7f 	bl	800325a <__retarget_lock_release_recursive>
 800375c:	89ab      	ldrh	r3, [r5, #12]
 800375e:	065b      	lsls	r3, r3, #25
 8003760:	f53f af12 	bmi.w	8003588 <_vfiprintf_r+0x4c>
 8003764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003766:	e711      	b.n	800358c <_vfiprintf_r+0x50>
 8003768:	ab03      	add	r3, sp, #12
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	462a      	mov	r2, r5
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <_vfiprintf_r+0x258>)
 8003770:	a904      	add	r1, sp, #16
 8003772:	4630      	mov	r0, r6
 8003774:	f000 f880 	bl	8003878 <_printf_i>
 8003778:	e7e4      	b.n	8003744 <_vfiprintf_r+0x208>
 800377a:	bf00      	nop
 800377c:	08003d48 	.word	0x08003d48
 8003780:	08003d68 	.word	0x08003d68
 8003784:	08003d28 	.word	0x08003d28
 8003788:	08003d88 	.word	0x08003d88
 800378c:	08003d92 	.word	0x08003d92
 8003790:	00000000 	.word	0x00000000
 8003794:	08003517 	.word	0x08003517
 8003798:	08003d8e 	.word	0x08003d8e

0800379c <_printf_common>:
 800379c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a0:	4616      	mov	r6, r2
 80037a2:	4699      	mov	r9, r3
 80037a4:	688a      	ldr	r2, [r1, #8]
 80037a6:	690b      	ldr	r3, [r1, #16]
 80037a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	bfb8      	it	lt
 80037b0:	4613      	movlt	r3, r2
 80037b2:	6033      	str	r3, [r6, #0]
 80037b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037b8:	4607      	mov	r7, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	b10a      	cbz	r2, 80037c2 <_printf_common+0x26>
 80037be:	3301      	adds	r3, #1
 80037c0:	6033      	str	r3, [r6, #0]
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	0699      	lsls	r1, r3, #26
 80037c6:	bf42      	ittt	mi
 80037c8:	6833      	ldrmi	r3, [r6, #0]
 80037ca:	3302      	addmi	r3, #2
 80037cc:	6033      	strmi	r3, [r6, #0]
 80037ce:	6825      	ldr	r5, [r4, #0]
 80037d0:	f015 0506 	ands.w	r5, r5, #6
 80037d4:	d106      	bne.n	80037e4 <_printf_common+0x48>
 80037d6:	f104 0a19 	add.w	sl, r4, #25
 80037da:	68e3      	ldr	r3, [r4, #12]
 80037dc:	6832      	ldr	r2, [r6, #0]
 80037de:	1a9b      	subs	r3, r3, r2
 80037e0:	42ab      	cmp	r3, r5
 80037e2:	dc26      	bgt.n	8003832 <_printf_common+0x96>
 80037e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037e8:	1e13      	subs	r3, r2, #0
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	bf18      	it	ne
 80037ee:	2301      	movne	r3, #1
 80037f0:	0692      	lsls	r2, r2, #26
 80037f2:	d42b      	bmi.n	800384c <_printf_common+0xb0>
 80037f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037f8:	4649      	mov	r1, r9
 80037fa:	4638      	mov	r0, r7
 80037fc:	47c0      	blx	r8
 80037fe:	3001      	adds	r0, #1
 8003800:	d01e      	beq.n	8003840 <_printf_common+0xa4>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	68e5      	ldr	r5, [r4, #12]
 8003806:	6832      	ldr	r2, [r6, #0]
 8003808:	f003 0306 	and.w	r3, r3, #6
 800380c:	2b04      	cmp	r3, #4
 800380e:	bf08      	it	eq
 8003810:	1aad      	subeq	r5, r5, r2
 8003812:	68a3      	ldr	r3, [r4, #8]
 8003814:	6922      	ldr	r2, [r4, #16]
 8003816:	bf0c      	ite	eq
 8003818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800381c:	2500      	movne	r5, #0
 800381e:	4293      	cmp	r3, r2
 8003820:	bfc4      	itt	gt
 8003822:	1a9b      	subgt	r3, r3, r2
 8003824:	18ed      	addgt	r5, r5, r3
 8003826:	2600      	movs	r6, #0
 8003828:	341a      	adds	r4, #26
 800382a:	42b5      	cmp	r5, r6
 800382c:	d11a      	bne.n	8003864 <_printf_common+0xc8>
 800382e:	2000      	movs	r0, #0
 8003830:	e008      	b.n	8003844 <_printf_common+0xa8>
 8003832:	2301      	movs	r3, #1
 8003834:	4652      	mov	r2, sl
 8003836:	4649      	mov	r1, r9
 8003838:	4638      	mov	r0, r7
 800383a:	47c0      	blx	r8
 800383c:	3001      	adds	r0, #1
 800383e:	d103      	bne.n	8003848 <_printf_common+0xac>
 8003840:	f04f 30ff 	mov.w	r0, #4294967295
 8003844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003848:	3501      	adds	r5, #1
 800384a:	e7c6      	b.n	80037da <_printf_common+0x3e>
 800384c:	18e1      	adds	r1, r4, r3
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	2030      	movs	r0, #48	; 0x30
 8003852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003856:	4422      	add	r2, r4
 8003858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800385c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003860:	3302      	adds	r3, #2
 8003862:	e7c7      	b.n	80037f4 <_printf_common+0x58>
 8003864:	2301      	movs	r3, #1
 8003866:	4622      	mov	r2, r4
 8003868:	4649      	mov	r1, r9
 800386a:	4638      	mov	r0, r7
 800386c:	47c0      	blx	r8
 800386e:	3001      	adds	r0, #1
 8003870:	d0e6      	beq.n	8003840 <_printf_common+0xa4>
 8003872:	3601      	adds	r6, #1
 8003874:	e7d9      	b.n	800382a <_printf_common+0x8e>
	...

08003878 <_printf_i>:
 8003878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800387c:	7e0f      	ldrb	r7, [r1, #24]
 800387e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003880:	2f78      	cmp	r7, #120	; 0x78
 8003882:	4691      	mov	r9, r2
 8003884:	4680      	mov	r8, r0
 8003886:	460c      	mov	r4, r1
 8003888:	469a      	mov	sl, r3
 800388a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800388e:	d807      	bhi.n	80038a0 <_printf_i+0x28>
 8003890:	2f62      	cmp	r7, #98	; 0x62
 8003892:	d80a      	bhi.n	80038aa <_printf_i+0x32>
 8003894:	2f00      	cmp	r7, #0
 8003896:	f000 80d8 	beq.w	8003a4a <_printf_i+0x1d2>
 800389a:	2f58      	cmp	r7, #88	; 0x58
 800389c:	f000 80a3 	beq.w	80039e6 <_printf_i+0x16e>
 80038a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80038a8:	e03a      	b.n	8003920 <_printf_i+0xa8>
 80038aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80038ae:	2b15      	cmp	r3, #21
 80038b0:	d8f6      	bhi.n	80038a0 <_printf_i+0x28>
 80038b2:	a101      	add	r1, pc, #4	; (adr r1, 80038b8 <_printf_i+0x40>)
 80038b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038b8:	08003911 	.word	0x08003911
 80038bc:	08003925 	.word	0x08003925
 80038c0:	080038a1 	.word	0x080038a1
 80038c4:	080038a1 	.word	0x080038a1
 80038c8:	080038a1 	.word	0x080038a1
 80038cc:	080038a1 	.word	0x080038a1
 80038d0:	08003925 	.word	0x08003925
 80038d4:	080038a1 	.word	0x080038a1
 80038d8:	080038a1 	.word	0x080038a1
 80038dc:	080038a1 	.word	0x080038a1
 80038e0:	080038a1 	.word	0x080038a1
 80038e4:	08003a31 	.word	0x08003a31
 80038e8:	08003955 	.word	0x08003955
 80038ec:	08003a13 	.word	0x08003a13
 80038f0:	080038a1 	.word	0x080038a1
 80038f4:	080038a1 	.word	0x080038a1
 80038f8:	08003a53 	.word	0x08003a53
 80038fc:	080038a1 	.word	0x080038a1
 8003900:	08003955 	.word	0x08003955
 8003904:	080038a1 	.word	0x080038a1
 8003908:	080038a1 	.word	0x080038a1
 800390c:	08003a1b 	.word	0x08003a1b
 8003910:	682b      	ldr	r3, [r5, #0]
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	602a      	str	r2, [r5, #0]
 8003918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800391c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003920:	2301      	movs	r3, #1
 8003922:	e0a3      	b.n	8003a6c <_printf_i+0x1f4>
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	6829      	ldr	r1, [r5, #0]
 8003928:	0606      	lsls	r6, r0, #24
 800392a:	f101 0304 	add.w	r3, r1, #4
 800392e:	d50a      	bpl.n	8003946 <_printf_i+0xce>
 8003930:	680e      	ldr	r6, [r1, #0]
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	2e00      	cmp	r6, #0
 8003936:	da03      	bge.n	8003940 <_printf_i+0xc8>
 8003938:	232d      	movs	r3, #45	; 0x2d
 800393a:	4276      	negs	r6, r6
 800393c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003940:	485e      	ldr	r0, [pc, #376]	; (8003abc <_printf_i+0x244>)
 8003942:	230a      	movs	r3, #10
 8003944:	e019      	b.n	800397a <_printf_i+0x102>
 8003946:	680e      	ldr	r6, [r1, #0]
 8003948:	602b      	str	r3, [r5, #0]
 800394a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800394e:	bf18      	it	ne
 8003950:	b236      	sxthne	r6, r6
 8003952:	e7ef      	b.n	8003934 <_printf_i+0xbc>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	1d19      	adds	r1, r3, #4
 800395a:	6029      	str	r1, [r5, #0]
 800395c:	0601      	lsls	r1, r0, #24
 800395e:	d501      	bpl.n	8003964 <_printf_i+0xec>
 8003960:	681e      	ldr	r6, [r3, #0]
 8003962:	e002      	b.n	800396a <_printf_i+0xf2>
 8003964:	0646      	lsls	r6, r0, #25
 8003966:	d5fb      	bpl.n	8003960 <_printf_i+0xe8>
 8003968:	881e      	ldrh	r6, [r3, #0]
 800396a:	4854      	ldr	r0, [pc, #336]	; (8003abc <_printf_i+0x244>)
 800396c:	2f6f      	cmp	r7, #111	; 0x6f
 800396e:	bf0c      	ite	eq
 8003970:	2308      	moveq	r3, #8
 8003972:	230a      	movne	r3, #10
 8003974:	2100      	movs	r1, #0
 8003976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800397a:	6865      	ldr	r5, [r4, #4]
 800397c:	60a5      	str	r5, [r4, #8]
 800397e:	2d00      	cmp	r5, #0
 8003980:	bfa2      	ittt	ge
 8003982:	6821      	ldrge	r1, [r4, #0]
 8003984:	f021 0104 	bicge.w	r1, r1, #4
 8003988:	6021      	strge	r1, [r4, #0]
 800398a:	b90e      	cbnz	r6, 8003990 <_printf_i+0x118>
 800398c:	2d00      	cmp	r5, #0
 800398e:	d04d      	beq.n	8003a2c <_printf_i+0x1b4>
 8003990:	4615      	mov	r5, r2
 8003992:	fbb6 f1f3 	udiv	r1, r6, r3
 8003996:	fb03 6711 	mls	r7, r3, r1, r6
 800399a:	5dc7      	ldrb	r7, [r0, r7]
 800399c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80039a0:	4637      	mov	r7, r6
 80039a2:	42bb      	cmp	r3, r7
 80039a4:	460e      	mov	r6, r1
 80039a6:	d9f4      	bls.n	8003992 <_printf_i+0x11a>
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d10b      	bne.n	80039c4 <_printf_i+0x14c>
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	07de      	lsls	r6, r3, #31
 80039b0:	d508      	bpl.n	80039c4 <_printf_i+0x14c>
 80039b2:	6923      	ldr	r3, [r4, #16]
 80039b4:	6861      	ldr	r1, [r4, #4]
 80039b6:	4299      	cmp	r1, r3
 80039b8:	bfde      	ittt	le
 80039ba:	2330      	movle	r3, #48	; 0x30
 80039bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039c4:	1b52      	subs	r2, r2, r5
 80039c6:	6122      	str	r2, [r4, #16]
 80039c8:	f8cd a000 	str.w	sl, [sp]
 80039cc:	464b      	mov	r3, r9
 80039ce:	aa03      	add	r2, sp, #12
 80039d0:	4621      	mov	r1, r4
 80039d2:	4640      	mov	r0, r8
 80039d4:	f7ff fee2 	bl	800379c <_printf_common>
 80039d8:	3001      	adds	r0, #1
 80039da:	d14c      	bne.n	8003a76 <_printf_i+0x1fe>
 80039dc:	f04f 30ff 	mov.w	r0, #4294967295
 80039e0:	b004      	add	sp, #16
 80039e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e6:	4835      	ldr	r0, [pc, #212]	; (8003abc <_printf_i+0x244>)
 80039e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039ec:	6829      	ldr	r1, [r5, #0]
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80039f4:	6029      	str	r1, [r5, #0]
 80039f6:	061d      	lsls	r5, r3, #24
 80039f8:	d514      	bpl.n	8003a24 <_printf_i+0x1ac>
 80039fa:	07df      	lsls	r7, r3, #31
 80039fc:	bf44      	itt	mi
 80039fe:	f043 0320 	orrmi.w	r3, r3, #32
 8003a02:	6023      	strmi	r3, [r4, #0]
 8003a04:	b91e      	cbnz	r6, 8003a0e <_printf_i+0x196>
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	f023 0320 	bic.w	r3, r3, #32
 8003a0c:	6023      	str	r3, [r4, #0]
 8003a0e:	2310      	movs	r3, #16
 8003a10:	e7b0      	b.n	8003974 <_printf_i+0xfc>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	f043 0320 	orr.w	r3, r3, #32
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	2378      	movs	r3, #120	; 0x78
 8003a1c:	4828      	ldr	r0, [pc, #160]	; (8003ac0 <_printf_i+0x248>)
 8003a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a22:	e7e3      	b.n	80039ec <_printf_i+0x174>
 8003a24:	0659      	lsls	r1, r3, #25
 8003a26:	bf48      	it	mi
 8003a28:	b2b6      	uxthmi	r6, r6
 8003a2a:	e7e6      	b.n	80039fa <_printf_i+0x182>
 8003a2c:	4615      	mov	r5, r2
 8003a2e:	e7bb      	b.n	80039a8 <_printf_i+0x130>
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	6826      	ldr	r6, [r4, #0]
 8003a34:	6961      	ldr	r1, [r4, #20]
 8003a36:	1d18      	adds	r0, r3, #4
 8003a38:	6028      	str	r0, [r5, #0]
 8003a3a:	0635      	lsls	r5, r6, #24
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	d501      	bpl.n	8003a44 <_printf_i+0x1cc>
 8003a40:	6019      	str	r1, [r3, #0]
 8003a42:	e002      	b.n	8003a4a <_printf_i+0x1d2>
 8003a44:	0670      	lsls	r0, r6, #25
 8003a46:	d5fb      	bpl.n	8003a40 <_printf_i+0x1c8>
 8003a48:	8019      	strh	r1, [r3, #0]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	6123      	str	r3, [r4, #16]
 8003a4e:	4615      	mov	r5, r2
 8003a50:	e7ba      	b.n	80039c8 <_printf_i+0x150>
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	1d1a      	adds	r2, r3, #4
 8003a56:	602a      	str	r2, [r5, #0]
 8003a58:	681d      	ldr	r5, [r3, #0]
 8003a5a:	6862      	ldr	r2, [r4, #4]
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4628      	mov	r0, r5
 8003a60:	f7fc fbbe 	bl	80001e0 <memchr>
 8003a64:	b108      	cbz	r0, 8003a6a <_printf_i+0x1f2>
 8003a66:	1b40      	subs	r0, r0, r5
 8003a68:	6060      	str	r0, [r4, #4]
 8003a6a:	6863      	ldr	r3, [r4, #4]
 8003a6c:	6123      	str	r3, [r4, #16]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a74:	e7a8      	b.n	80039c8 <_printf_i+0x150>
 8003a76:	6923      	ldr	r3, [r4, #16]
 8003a78:	462a      	mov	r2, r5
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	47d0      	blx	sl
 8003a80:	3001      	adds	r0, #1
 8003a82:	d0ab      	beq.n	80039dc <_printf_i+0x164>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	079b      	lsls	r3, r3, #30
 8003a88:	d413      	bmi.n	8003ab2 <_printf_i+0x23a>
 8003a8a:	68e0      	ldr	r0, [r4, #12]
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	4298      	cmp	r0, r3
 8003a90:	bfb8      	it	lt
 8003a92:	4618      	movlt	r0, r3
 8003a94:	e7a4      	b.n	80039e0 <_printf_i+0x168>
 8003a96:	2301      	movs	r3, #1
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	4640      	mov	r0, r8
 8003a9e:	47d0      	blx	sl
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d09b      	beq.n	80039dc <_printf_i+0x164>
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	68e3      	ldr	r3, [r4, #12]
 8003aa8:	9903      	ldr	r1, [sp, #12]
 8003aaa:	1a5b      	subs	r3, r3, r1
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	dcf2      	bgt.n	8003a96 <_printf_i+0x21e>
 8003ab0:	e7eb      	b.n	8003a8a <_printf_i+0x212>
 8003ab2:	2500      	movs	r5, #0
 8003ab4:	f104 0619 	add.w	r6, r4, #25
 8003ab8:	e7f5      	b.n	8003aa6 <_printf_i+0x22e>
 8003aba:	bf00      	nop
 8003abc:	08003d99 	.word	0x08003d99
 8003ac0:	08003daa 	.word	0x08003daa

08003ac4 <_sbrk_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4d06      	ldr	r5, [pc, #24]	; (8003ae0 <_sbrk_r+0x1c>)
 8003ac8:	2300      	movs	r3, #0
 8003aca:	4604      	mov	r4, r0
 8003acc:	4608      	mov	r0, r1
 8003ace:	602b      	str	r3, [r5, #0]
 8003ad0:	f7fd f828 	bl	8000b24 <_sbrk>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_sbrk_r+0x1a>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_sbrk_r+0x1a>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	20000198 	.word	0x20000198

08003ae4 <__sread>:
 8003ae4:	b510      	push	{r4, lr}
 8003ae6:	460c      	mov	r4, r1
 8003ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aec:	f000 f8a0 	bl	8003c30 <_read_r>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	bfab      	itete	ge
 8003af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003af6:	89a3      	ldrhlt	r3, [r4, #12]
 8003af8:	181b      	addge	r3, r3, r0
 8003afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003afe:	bfac      	ite	ge
 8003b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b02:	81a3      	strhlt	r3, [r4, #12]
 8003b04:	bd10      	pop	{r4, pc}

08003b06 <__swrite>:
 8003b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b0a:	461f      	mov	r7, r3
 8003b0c:	898b      	ldrh	r3, [r1, #12]
 8003b0e:	05db      	lsls	r3, r3, #23
 8003b10:	4605      	mov	r5, r0
 8003b12:	460c      	mov	r4, r1
 8003b14:	4616      	mov	r6, r2
 8003b16:	d505      	bpl.n	8003b24 <__swrite+0x1e>
 8003b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f000 f868 	bl	8003bf4 <_lseek_r>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b2e:	81a3      	strh	r3, [r4, #12]
 8003b30:	4632      	mov	r2, r6
 8003b32:	463b      	mov	r3, r7
 8003b34:	4628      	mov	r0, r5
 8003b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b3a:	f000 b817 	b.w	8003b6c <_write_r>

08003b3e <__sseek>:
 8003b3e:	b510      	push	{r4, lr}
 8003b40:	460c      	mov	r4, r1
 8003b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b46:	f000 f855 	bl	8003bf4 <_lseek_r>
 8003b4a:	1c43      	adds	r3, r0, #1
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	bf15      	itete	ne
 8003b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b5a:	81a3      	strheq	r3, [r4, #12]
 8003b5c:	bf18      	it	ne
 8003b5e:	81a3      	strhne	r3, [r4, #12]
 8003b60:	bd10      	pop	{r4, pc}

08003b62 <__sclose>:
 8003b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b66:	f000 b813 	b.w	8003b90 <_close_r>
	...

08003b6c <_write_r>:
 8003b6c:	b538      	push	{r3, r4, r5, lr}
 8003b6e:	4d07      	ldr	r5, [pc, #28]	; (8003b8c <_write_r+0x20>)
 8003b70:	4604      	mov	r4, r0
 8003b72:	4608      	mov	r0, r1
 8003b74:	4611      	mov	r1, r2
 8003b76:	2200      	movs	r2, #0
 8003b78:	602a      	str	r2, [r5, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f7fc ff81 	bl	8000a82 <_write>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_write_r+0x1e>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_write_r+0x1e>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	20000198 	.word	0x20000198

08003b90 <_close_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d06      	ldr	r5, [pc, #24]	; (8003bac <_close_r+0x1c>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	f7fc ff8d 	bl	8000aba <_close>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_close_r+0x1a>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_close_r+0x1a>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	20000198 	.word	0x20000198

08003bb0 <_fstat_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4d07      	ldr	r5, [pc, #28]	; (8003bd0 <_fstat_r+0x20>)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	602b      	str	r3, [r5, #0]
 8003bbe:	f7fc ff88 	bl	8000ad2 <_fstat>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d102      	bne.n	8003bcc <_fstat_r+0x1c>
 8003bc6:	682b      	ldr	r3, [r5, #0]
 8003bc8:	b103      	cbz	r3, 8003bcc <_fstat_r+0x1c>
 8003bca:	6023      	str	r3, [r4, #0]
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000198 	.word	0x20000198

08003bd4 <_isatty_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4d06      	ldr	r5, [pc, #24]	; (8003bf0 <_isatty_r+0x1c>)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	f7fc ff87 	bl	8000af2 <_isatty>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d102      	bne.n	8003bee <_isatty_r+0x1a>
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	b103      	cbz	r3, 8003bee <_isatty_r+0x1a>
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	20000198 	.word	0x20000198

08003bf4 <_lseek_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	4d07      	ldr	r5, [pc, #28]	; (8003c14 <_lseek_r+0x20>)
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	2200      	movs	r2, #0
 8003c00:	602a      	str	r2, [r5, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	f7fc ff80 	bl	8000b08 <_lseek>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d102      	bne.n	8003c12 <_lseek_r+0x1e>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	b103      	cbz	r3, 8003c12 <_lseek_r+0x1e>
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	20000198 	.word	0x20000198

08003c18 <__malloc_lock>:
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <__malloc_lock+0x8>)
 8003c1a:	f7ff bb1d 	b.w	8003258 <__retarget_lock_acquire_recursive>
 8003c1e:	bf00      	nop
 8003c20:	2000018c 	.word	0x2000018c

08003c24 <__malloc_unlock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_unlock+0x8>)
 8003c26:	f7ff bb18 	b.w	800325a <__retarget_lock_release_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	2000018c 	.word	0x2000018c

08003c30 <_read_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4d07      	ldr	r5, [pc, #28]	; (8003c50 <_read_r+0x20>)
 8003c34:	4604      	mov	r4, r0
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	602a      	str	r2, [r5, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	f7fc ff02 	bl	8000a48 <_read>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_read_r+0x1e>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_read_r+0x1e>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20000198 	.word	0x20000198

08003c54 <_init>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr

08003c60 <_fini>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr
