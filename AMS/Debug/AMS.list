
AMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae04  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023aac  0800afa4  0800afa4  0001afa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ea50  0802ea50  000405c0  2**0
                  CONTENTS
  4 .ARM          00000008  0802ea50  0802ea50  0003ea50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ea58  0802ea58  000405c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ea58  0802ea58  0003ea58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ea5c  0802ea5c  0003ea5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c0  20000000  0802ea60  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200005c0  0802f020  000405c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0802f020  0004093c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0015df93  00000000  00000000  000405f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004afa  00000000  00000000  0019e583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  001a3080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000ae40  00000000  00000000  001a42a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005ae5  00000000  00000000  001af0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032015  00000000  00000000  001b4bc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096824  00000000  00000000  001e6bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0027d3fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000512c  00000000  00000000  0027d450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000289bb  00000000  00000000  0028257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200005c0 	.word	0x200005c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af8c 	.word	0x0800af8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200005c4 	.word	0x200005c4
 80001dc:	0800af8c 	.word	0x0800af8c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <TIM5_IRQHandler>:
*/

void TIM5_IRQHandler(void)
{

	HAL_TIM_IRQHandler(&tim5);
 8000584:	4801      	ldr	r0, [pc, #4]	; (800058c <TIM5_IRQHandler+0x8>)
 8000586:	f003 bc3d 	b.w	8003e04 <HAL_TIM_IRQHandler>
 800058a:	bf00      	nop
 800058c:	200007c0 	.word	0x200007c0

08000590 <TIM1_TRG_COM_TIM11_IRQHandler>:

}

void TIM1_TRG_COM_TIM11_IRQHandler(void)	// Timebase source
{
  HAL_TIM_IRQHandler(&htim11);
 8000590:	4801      	ldr	r0, [pc, #4]	; (8000598 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8000592:	f003 bc37 	b.w	8003e04 <HAL_TIM_IRQHandler>
 8000596:	bf00      	nop
 8000598:	20000870 	.word	0x20000870

0800059c <__io_putchar>:
#if (USE_FREERTOS)
#define DWT_CTRL 	(*(volatile int *)0xE0001000)
#endif

int __io_putchar(int ch)
{
 800059c:	b500      	push	{lr}
 800059e:	b083      	sub	sp, #12
    return uart_write(USART1, (uint8_t *)&ch, 1);
 80005a0:	2201      	movs	r2, #1
{
 80005a2:	9001      	str	r0, [sp, #4]
    return uart_write(USART1, (uint8_t *)&ch, 1);
 80005a4:	a901      	add	r1, sp, #4
 80005a6:	4803      	ldr	r0, [pc, #12]	; (80005b4 <__io_putchar+0x18>)
 80005a8:	f005 fbd2 	bl	8005d50 <uart_write>
}
 80005ac:	b003      	add	sp, #12
 80005ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80005b2:	bf00      	nop
 80005b4:	40011000 	.word	0x40011000

080005b8 <check_validcard>:
}
#endif



uint8_t check_validcard(void){
 80005b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i=4;

	memset(uid_read,0,sizeof(uid_read));
	for(int j=0;j<emp_id_read;j++)
 80005bc:	4f1d      	ldr	r7, [pc, #116]	; (8000634 <check_validcard+0x7c>)
	memset(uid_read,0,sizeof(uid_read));
 80005be:	4d1e      	ldr	r5, [pc, #120]	; (8000638 <check_validcard+0x80>)
	for(int j=0;j<emp_id_read;j++)
 80005c0:	783b      	ldrb	r3, [r7, #0]
	memset(uid_read,0,sizeof(uid_read));
 80005c2:	2400      	movs	r4, #0
uint8_t check_validcard(void){
 80005c4:	b085      	sub	sp, #20
	memset(uid_read,0,sizeof(uid_read));
 80005c6:	602c      	str	r4, [r5, #0]
	for(int j=0;j<emp_id_read;j++)
 80005c8:	b383      	cbz	r3, 800062c <check_validcard+0x74>
 80005ca:	f8df b074 	ldr.w	fp, [pc, #116]	; 8000640 <check_validcard+0x88>
 80005ce:	4e1b      	ldr	r6, [pc, #108]	; (800063c <check_validcard+0x84>)
	{
		HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 156+j*32, 2, (uint8_t *)&uid_read, 4, 100);
 80005d0:	f8df a070 	ldr.w	sl, [pc, #112]	; 8000644 <check_validcard+0x8c>
	for(int j=0;j<emp_id_read;j++)
 80005d4:	f04f 089c 	mov.w	r8, #156	; 0x9c
		HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 156+j*32, 2, (uint8_t *)&uid_read, 4, 100);
 80005d8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80005dc:	e002      	b.n	80005e4 <check_validcard+0x2c>
	for(int j=0;j<emp_id_read;j++)
 80005de:	783b      	ldrb	r3, [r7, #0]
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	dd23      	ble.n	800062c <check_validcard+0x74>
		HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 156+j*32, 2, (uint8_t *)&uid_read, 4, 100);
 80005e4:	2304      	movs	r3, #4
 80005e6:	4642      	mov	r2, r8
 80005e8:	e9cd 5300 	strd	r5, r3, [sp]
 80005ec:	f89b 1000 	ldrb.w	r1, [fp]
 80005f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80005f4:	2302      	movs	r3, #2
 80005f6:	4650      	mov	r0, sl
 80005f8:	f002 fa08 	bl	8002a0c <HAL_I2C_Mem_Read>
		if((uid_read[3]==rfid_id[0])&&(uid_read[2]==rfid_id[1])&&(uid_read[1]==rfid_id[2])&&(uid_read[0]==rfid_id[3]))
 80005fc:	78ea      	ldrb	r2, [r5, #3]
 80005fe:	7833      	ldrb	r3, [r6, #0]
	for(int j=0;j<emp_id_read;j++)
 8000600:	f108 0820 	add.w	r8, r8, #32
		if((uid_read[3]==rfid_id[0])&&(uid_read[2]==rfid_id[1])&&(uid_read[1]==rfid_id[2])&&(uid_read[0]==rfid_id[3]))
 8000604:	429a      	cmp	r2, r3
	for(int j=0;j<emp_id_read;j++)
 8000606:	f104 0401 	add.w	r4, r4, #1
 800060a:	fa1f f888 	uxth.w	r8, r8
		if((uid_read[3]==rfid_id[0])&&(uid_read[2]==rfid_id[1])&&(uid_read[1]==rfid_id[2])&&(uid_read[0]==rfid_id[3]))
 800060e:	d1e6      	bne.n	80005de <check_validcard+0x26>
 8000610:	78aa      	ldrb	r2, [r5, #2]
 8000612:	7873      	ldrb	r3, [r6, #1]
 8000614:	429a      	cmp	r2, r3
 8000616:	d1e2      	bne.n	80005de <check_validcard+0x26>
 8000618:	786a      	ldrb	r2, [r5, #1]
 800061a:	78b3      	ldrb	r3, [r6, #2]
 800061c:	429a      	cmp	r2, r3
 800061e:	d1de      	bne.n	80005de <check_validcard+0x26>
 8000620:	782a      	ldrb	r2, [r5, #0]
 8000622:	78f3      	ldrb	r3, [r6, #3]
 8000624:	429a      	cmp	r2, r3
 8000626:	d1da      	bne.n	80005de <check_validcard+0x26>
		{
			char msg[] = "Access Granted\r\n";

												//HAL_UART_Transmit(&huart1,(uint8_t *)msg,sizeof(msg),1000);
			return 1;
 8000628:	2001      	movs	r0, #1
 800062a:	e000      	b.n	800062e <check_validcard+0x76>
		}
	}
	char msg[] = "Access Denied\r\n";
												//HAL_UART_Transmit(&huart1,(uint8_t *)msg,sizeof(msg),1000);
	return 0;
 800062c:	2000      	movs	r0, #0
}
 800062e:	b005      	add	sp, #20
 8000630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000634:	200005fa 	.word	0x200005fa
 8000638:	2000084c 	.word	0x2000084c
 800063c:	2000069c 	.word	0x2000069c
 8000640:	20000029 	.word	0x20000029
 8000644:	2000061c 	.word	0x2000061c

08000648 <read_card>:



void read_card(void)
{
 8000648:	b570      	push	{r4, r5, r6, lr}
	if(rc522_checkCard(rfid_id))
 800064a:	4c1f      	ldr	r4, [pc, #124]	; (80006c8 <read_card+0x80>)
{
 800064c:	b082      	sub	sp, #8
	if(rc522_checkCard(rfid_id))
 800064e:	4620      	mov	r0, r4
 8000650:	f004 fd28 	bl	80050a4 <rc522_checkCard>
 8000654:	b908      	cbnz	r0, 800065a <read_card+0x12>
			}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
			HAL_Delay(1000);
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
		}
}
 8000656:	b002      	add	sp, #8
 8000658:	bd70      	pop	{r4, r5, r6, pc}
			memset(data,0,sizeof(data));
 800065a:	4d1c      	ldr	r5, [pc, #112]	; (80006cc <read_card+0x84>)
			memset(issue_uid,0,sizeof(issue_uid));
 800065c:	4e1c      	ldr	r6, [pc, #112]	; (80006d0 <read_card+0x88>)
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 800065e:	491d      	ldr	r1, [pc, #116]	; (80006d4 <read_card+0x8c>)
 8000660:	481d      	ldr	r0, [pc, #116]	; (80006d8 <read_card+0x90>)
			memset(data,0,sizeof(data));
 8000662:	2200      	movs	r2, #0
 8000664:	e9c5 2200 	strd	r2, r2, [r5]
 8000668:	e9c5 2202 	strd	r2, r2, [r5, #8]
 800066c:	612a      	str	r2, [r5, #16]
			memset(issue_uid,0,sizeof(issue_uid));
 800066e:	6032      	str	r2, [r6, #0]
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	220a      	movs	r2, #10
 8000676:	f003 fd0d 	bl	8004094 <HAL_UART_Transmit>
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 800067a:	78e2      	ldrb	r2, [r4, #3]
 800067c:	78a3      	ldrb	r3, [r4, #2]
 800067e:	4917      	ldr	r1, [pc, #92]	; (80006dc <read_card+0x94>)
 8000680:	e9cd 3200 	strd	r3, r2, [sp]
 8000684:	4628      	mov	r0, r5
 8000686:	7863      	ldrb	r3, [r4, #1]
 8000688:	7822      	ldrb	r2, [r4, #0]
 800068a:	f009 fad5 	bl	8009c38 <siprintf>
			HAL_UART_Transmit(&uart1,(uint8_t *)data,sizeof(data),1000);
 800068e:	4629      	mov	r1, r5
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	2214      	movs	r2, #20
 8000696:	4810      	ldr	r0, [pc, #64]	; (80006d8 <read_card+0x90>)
 8000698:	f003 fcfc 	bl	8004094 <HAL_UART_Transmit>
			if(rfid_id[0] !=	0x26)
 800069c:	7823      	ldrb	r3, [r4, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 800069e:	4810      	ldr	r0, [pc, #64]	; (80006e0 <read_card+0x98>)
			if(rfid_id[0] !=	0x26)
 80006a0:	2b26      	cmp	r3, #38	; 0x26
					issue_uid[i]= rfid_id[i];
 80006a2:	bf1c      	itt	ne
 80006a4:	6823      	ldrne	r3, [r4, #0]
 80006a6:	6033      	strne	r3, [r6, #0]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2104      	movs	r1, #4
 80006ac:	f001 fe6c 	bl	8002388 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f001 fd06 	bl	80020c4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <read_card+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	2104      	movs	r1, #4
}
 80006be:	b002      	add	sp, #8
 80006c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80006c4:	f001 be60 	b.w	8002388 <HAL_GPIO_WritePin>
 80006c8:	2000069c 	.word	0x2000069c
 80006cc:	200005e4 	.word	0x200005e4
 80006d0:	20000674 	.word	0x20000674
 80006d4:	0800afa4 	.word	0x0800afa4
 80006d8:	20000808 	.word	0x20000808
 80006dc:	0800afb0 	.word	0x0800afb0
 80006e0:	40020400 	.word	0x40020400
 80006e4:	00000000 	.word	0x00000000

080006e8 <sysclock_config>:
}



void sysclock_config(void)
{
 80006e8:	b500      	push	{lr}
		printf("clock config failed\n\r");
	}

#elif defined(SYSCLK_PLL_84MHZ)

	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ea:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 8000758 <sysclock_config+0x70>
{
 80006ee:	b093      	sub	sp, #76	; 0x4c
	osc.HSEState = RCC_HSE_ON;

	osc.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	osc.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
	osc.PLL.PLLM = 25;
 80006f6:	2119      	movs	r1, #25
	osc.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f8:	920d      	str	r2, [sp, #52]	; 0x34
	osc.PLL.PLLN = 168;
	osc.PLL.PLLP = RCC_PLLP_DIV2;

	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 80006fa:	a806      	add	r0, sp, #24
	osc.PLL.PLLN = 168;
 80006fc:	22a8      	movs	r2, #168	; 0xa8
	osc.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fe:	ed8d 7b06 	vstr	d7, [sp, #24]
	osc.PLL.PLLN = 168;
 8000702:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
	osc.PLL.PLLState = RCC_PLL_ON;
 8000706:	930c      	str	r3, [sp, #48]	; 0x30
	osc.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	9310      	str	r3, [sp, #64]	; 0x40
	if(HAL_RCC_OscConfig(&osc) != HAL_OK)
 800070a:	f002 fb2d 	bl	8002d68 <HAL_RCC_OscConfig>
 800070e:	b9c8      	cbnz	r0, 8000744 <sysclock_config+0x5c>
	{
		printf("PLL Init failed\n\r");
	}

	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000710:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8000760 <sysclock_config+0x78>
 8000714:	2001      	movs	r0, #1
 8000716:	2102      	movs	r1, #2
 8000718:	e9cd 0100 	strd	r0, r1, [sp]
	clock.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	clock.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clock.APB1CLKDivider = RCC_HCLK_DIV2;
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0


	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_2)!=HAL_OK)
 800071e:	2102      	movs	r1, #2
 8000720:	4668      	mov	r0, sp
	clock.ClockType = RCC_CLOCKTYPE_SYSCLK;
 8000722:	ed8d 7b02 	vstr	d7, [sp, #8]
	clock.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	9304      	str	r3, [sp, #16]
	if(HAL_RCC_ClockConfig(&clock, FLASH_LATENCY_2)!=HAL_OK)
 8000728:	f002 fd36 	bl	8003198 <HAL_RCC_ClockConfig>
 800072c:	b970      	cbnz	r0, 800074c <sysclock_config+0x64>
#else
	printf("No clock source selected !! HSI Running by default\n\r");
#endif

	//uint32_t freq=HAL_RCC_GetSysClockFreq();
	freq=HAL_RCC_GetSysClockFreq();
 800072e:	f002 fcff 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <sysclock_config+0x80>)
 8000734:	4601      	mov	r1, r0
	printf("Sysclock frequency : %lu \r\n",freq);
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <sysclock_config+0x84>)
	freq=HAL_RCC_GetSysClockFreq();
 8000738:	6019      	str	r1, [r3, #0]
	printf("Sysclock frequency : %lu \r\n",freq);
 800073a:	f009 f913 	bl	8009964 <iprintf>
}
 800073e:	b013      	add	sp, #76	; 0x4c
 8000740:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("PLL Init failed\n\r");
 8000744:	480a      	ldr	r0, [pc, #40]	; (8000770 <sysclock_config+0x88>)
 8000746:	f009 f90d 	bl	8009964 <iprintf>
 800074a:	e7e1      	b.n	8000710 <sysclock_config+0x28>
		printf("clock config failed\n\r");
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <sysclock_config+0x8c>)
 800074e:	f009 f909 	bl	8009964 <iprintf>
 8000752:	e7ec      	b.n	800072e <sysclock_config+0x46>
 8000754:	f3af 8000 	nop.w
 8000758:	00000001 	.word	0x00000001
 800075c:	00010000 	.word	0x00010000
 8000760:	00000000 	.word	0x00000000
 8000764:	00001000 	.word	0x00001000
 8000768:	20000618 	.word	0x20000618
 800076c:	0800afec 	.word	0x0800afec
 8000770:	0800afc0 	.word	0x0800afc0
 8000774:	0800afd4 	.word	0x0800afd4

08000778 <gpio_init>:


void gpio_init(void)
{
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	b097      	sub	sp, #92	; 0x5c
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	2400      	movs	r4, #0
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <gpio_init+0x9c>)
 8000780:	9401      	str	r4, [sp, #4]
 8000782:	6b1a      	ldr	r2, [r3, #48]	; 0x30

	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);

	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 ;

	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 8000784:	4d24      	ldr	r5, [pc, #144]	; (8000818 <gpio_init+0xa0>)
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <gpio_init+0xa4>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	f042 0201 	orr.w	r2, r2, #1
 800078c:	631a      	str	r2, [r3, #48]	; 0x30
 800078e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000790:	f002 0201 	and.w	r2, r2, #1
 8000794:	9201      	str	r2, [sp, #4]
 8000796:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	9402      	str	r4, [sp, #8]
 800079a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079c:	f042 0202 	orr.w	r2, r2, #2
 80007a0:	631a      	str	r2, [r3, #48]	; 0x30
 80007a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a4:	f002 0202 	and.w	r2, r2, #2
 80007a8:	9202      	str	r2, [sp, #8]
 80007aa:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ac:	9403      	str	r4, [sp, #12]
 80007ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b0:	f042 0204 	orr.w	r2, r2, #4
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GPIO_InitTypeDef SSD_DATA_PINS ={0};
 80007b8:	9406      	str	r4, [sp, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 80007c0:	a904      	add	r1, sp, #16
	SSD_DATA_PINS.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 \
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	2301      	movs	r3, #1
 80007c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
	GPIO_InitTypeDef SSD_DATA_PINS ={0};
 80007ca:	e9cd 4407 	strd	r4, r4, [sp, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &SSD_DATA_PINS);
 80007d0:	f001 fce8 	bl	80021a4 <HAL_GPIO_Init>
	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 80007d4:	f44f 4260 	mov.w	r2, #57344	; 0xe000
	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 80007d8:	a90a      	add	r1, sp, #40	; 0x28
	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 80007da:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 80007dc:	4810      	ldr	r0, [pc, #64]	; (8000820 <gpio_init+0xa8>)
	GPIO_InitTypeDef SSD_CTRL_PINS ={0};
 80007de:	940e      	str	r4, [sp, #56]	; 0x38
	SSD_CTRL_PINS.Pin = GPIO_PIN_13 | GPIO_PIN_14| GPIO_PIN_15;
 80007e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	GPIO_InitTypeDef SSD_CTRL_PINS ={0};
 80007e4:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &SSD_CTRL_PINS);
 80007e8:	f001 fcdc 	bl	80021a4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 80007ec:	a90a      	add	r1, sp, #40	; 0x28
 80007ee:	4628      	mov	r0, r5
	SSD_CTRL_PINS.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 ;
 80007f0:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80007f4:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &SSD_CTRL_PINS);
 80007f6:	f001 fcd5 	bl	80021a4 <HAL_GPIO_Init>
#endif


#if 1
	GPIO_InitTypeDef RFID_SPI ={0};
	RFID_SPI.Pin = (GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2) ;
 80007fa:	2207      	movs	r2, #7
 80007fc:	2301      	movs	r3, #1
	RFID_SPI.Mode = GPIO_MODE_OUTPUT_PP;
	RFID_SPI.Pull = GPIO_NOPULL;
	RFID_SPI.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOB, &RFID_SPI);
 80007fe:	a910      	add	r1, sp, #64	; 0x40
 8000800:	4628      	mov	r0, r5
	RFID_SPI.Pin = (GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2) ;
 8000802:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	GPIO_InitTypeDef RFID_SPI ={0};
 8000806:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 800080a:	9414      	str	r4, [sp, #80]	; 0x50
	HAL_GPIO_Init(GPIOB, &RFID_SPI);
 800080c:	f001 fcca 	bl	80021a4 <HAL_GPIO_Init>
	LED.Speed = GPIO_SPEED_FREQ_LOW;

	HAL_GPIO_Init(GPIOC, &LED);
#endif

}
 8000810:	b017      	add	sp, #92	; 0x5c
 8000812:	bd30      	pop	{r4, r5, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020400 	.word	0x40020400
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <uart1_init>:



void uart1_init(void)
{
 8000824:	b510      	push	{r4, lr}
	uart1.Instance = USART1;
 8000826:	480b      	ldr	r0, [pc, #44]	; (8000854 <uart1_init+0x30>)
 8000828:	4c0b      	ldr	r4, [pc, #44]	; (8000858 <uart1_init+0x34>)
	uart1.Init.BaudRate =9600;
	uart1.Init.Parity=UART_PARITY_NONE;
 800082a:	2300      	movs	r3, #0
	uart1.Init.BaudRate =9600;
 800082c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
	uart1.Init.Mode =UART_MODE_TX_RX;
 8000830:	220c      	movs	r2, #12
	uart1.Init.BaudRate =9600;
 8000832:	e9c0 4100 	strd	r4, r1, [r0]
	uart1.Init.Mode =UART_MODE_TX_RX;
 8000836:	e9c0 3204 	strd	r3, r2, [r0, #16]
	uart1.Init.StopBits= UART_STOPBITS_1;
 800083a:	60c3      	str	r3, [r0, #12]
	uart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083c:	6183      	str	r3, [r0, #24]
	uart1.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	6083      	str	r3, [r0, #8]
	uart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8000840:	61c3      	str	r3, [r0, #28]

	if(HAL_UART_Init(&uart1)!= HAL_OK)
 8000842:	f003 fb8d 	bl	8003f60 <HAL_UART_Init>
 8000846:	b900      	cbnz	r0, 800084a <uart1_init+0x26>
	{
		printf("Uart 1 Init Failed\r\n");
	}
}
 8000848:	bd10      	pop	{r4, pc}
 800084a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("Uart 1 Init Failed\r\n");
 800084e:	4803      	ldr	r0, [pc, #12]	; (800085c <uart1_init+0x38>)
 8000850:	f009 b924 	b.w	8009a9c <puts>
 8000854:	20000808 	.word	0x20000808
 8000858:	40011000 	.word	0x40011000
 800085c:	0800b008 	.word	0x0800b008

08000860 <spi1_init>:
	}
}


void spi1_init(void)
{
 8000860:	b510      	push	{r4, lr}

	spi1.Instance = SPI1;
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <spi1_init+0x38>)
 8000864:	4c0d      	ldr	r4, [pc, #52]	; (800089c <spi1_init+0x3c>)
	spi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	f44f 7282 	mov.w	r2, #260	; 0x104
	spi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086a:	2300      	movs	r3, #0
	spi1.Init.Mode = SPI_MODE_MASTER;
 800086c:	e9c0 4200 	strd	r4, r2, [r0]
	spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
	spi1.Init.DataSize = SPI_DATASIZE_8BIT ;
	spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
	spi1.Init.CLKPhase = SPI_PHASE_1EDGE;
	spi1.Init.NSS = SPI_NSS_SOFT ;
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
	spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000874:	2230      	movs	r2, #48	; 0x30
	spi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000876:	e9c0 3303 	strd	r3, r3, [r0, #12]
	spi1.Init.NSS = SPI_NSS_SOFT ;
 800087a:	e9c0 3105 	strd	r3, r1, [r0, #20]
	spi1.Init.Direction = SPI_DIRECTION_2LINES;
 800087e:	6083      	str	r3, [r0, #8]
	spi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000880:	6203      	str	r3, [r0, #32]
	spi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000882:	61c2      	str	r2, [r0, #28]

	if(HAL_SPI_Init(&spi1) != HAL_OK)
 8000884:	f002 fdc8 	bl	8003418 <HAL_SPI_Init>
 8000888:	b900      	cbnz	r0, 800088c <spi1_init+0x2c>
	{
		printf("SPI1 Init Failed\r\n");
	}

}
 800088a:	bd10      	pop	{r4, pc}
 800088c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("SPI1 Init Failed\r\n");
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <spi1_init+0x40>)
 8000892:	f009 b903 	b.w	8009a9c <puts>
 8000896:	bf00      	nop
 8000898:	200006a8 	.word	0x200006a8
 800089c:	40013000 	.word	0x40013000
 80008a0:	0800b01c 	.word	0x0800b01c

080008a4 <spi2_init>:

void spi2_init(void) 		/* SPI2 : XPT2048 Touch Sensor */
{
 80008a4:	b510      	push	{r4, lr}

	spi2.Instance = SPI2;
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <spi2_init+0x38>)
 80008a8:	4c0d      	ldr	r4, [pc, #52]	; (80008e0 <spi2_init+0x3c>)
	spi2.Init.Mode = SPI_MODE_MASTER;
 80008aa:	f44f 7282 	mov.w	r2, #260	; 0x104
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	2300      	movs	r3, #0
	spi2.Init.Mode = SPI_MODE_MASTER;
 80008b0:	e9c0 4200 	strd	r4, r2, [r0]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
	spi2.Init.DataSize = SPI_DATASIZE_8BIT ;
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
	spi2.Init.CLKPhase = SPI_PHASE_1EDGE;
	spi2.Init.NSS = SPI_NSS_SOFT ;
 80008b4:	f44f 7100 	mov.w	r1, #512	; 0x200
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008b8:	2230      	movs	r2, #48	; 0x30
	spi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
	spi2.Init.NSS = SPI_NSS_SOFT ;
 80008be:	e9c0 3105 	strd	r3, r1, [r0, #20]
	spi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008c2:	6083      	str	r3, [r0, #8]
	spi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	6203      	str	r3, [r0, #32]
	spi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008c6:	61c2      	str	r2, [r0, #28]
	spi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c8:	6243      	str	r3, [r0, #36]	; 0x24

	if(HAL_SPI_Init(&spi2) != HAL_OK)
 80008ca:	f002 fda5 	bl	8003418 <HAL_SPI_Init>
 80008ce:	b900      	cbnz	r0, 80008d2 <spi2_init+0x2e>
	{
		printf("SPI2 Init Failed\r\n");
	}
}
 80008d0:	bd10      	pop	{r4, pc}
 80008d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("SPI2 Init Failed\r\n");
 80008d6:	4803      	ldr	r0, [pc, #12]	; (80008e4 <spi2_init+0x40>)
 80008d8:	f009 b8e0 	b.w	8009a9c <puts>
 80008dc:	20000700 	.word	0x20000700
 80008e0:	40003800 	.word	0x40003800
 80008e4:	0800b030 	.word	0x0800b030

080008e8 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	if (htim->Instance == TIM11)	/* TimeBase for HAL Layer */
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80008ea:	6802      	ldr	r2, [r0, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d000      	beq.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0xa>
	{
#if (DEBUG_LED)
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
#endif
	}
}
 80008f0:	4770      	bx	lr
		HAL_IncTick();
 80008f2:	f001 bbd5 	b.w	80020a0 <HAL_IncTick>
 80008f6:	bf00      	nop
 80008f8:	40014800 	.word	0x40014800

080008fc <rfid_read>:
	*/
}


void rfid_read(void)
{
 80008fc:	b570      	push	{r4, r5, r6, lr}
	if(rc522_checkCard(rfid_id))
 80008fe:	4c21      	ldr	r4, [pc, #132]	; (8000984 <rfid_read+0x88>)
{
 8000900:	b082      	sub	sp, #8
	if(rc522_checkCard(rfid_id))
 8000902:	4620      	mov	r0, r4
 8000904:	f004 fbce 	bl	80050a4 <rc522_checkCard>
 8000908:	b908      	cbnz	r0, 800090e <rfid_read+0x12>
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
#endif
			}
		}

}
 800090a:	b002      	add	sp, #8
 800090c:	bd70      	pop	{r4, r5, r6, pc}
			memset(data,0,sizeof(data));
 800090e:	4d1e      	ldr	r5, [pc, #120]	; (8000988 <rfid_read+0x8c>)
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000910:	491e      	ldr	r1, [pc, #120]	; (800098c <rfid_read+0x90>)
 8000912:	481f      	ldr	r0, [pc, #124]	; (8000990 <rfid_read+0x94>)
			memset(data,0,sizeof(data));
 8000914:	2600      	movs	r6, #0
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091a:	220a      	movs	r2, #10
			memset(data,0,sizeof(data));
 800091c:	e9c5 6600 	strd	r6, r6, [r5]
 8000920:	e9c5 6602 	strd	r6, r6, [r5, #8]
 8000924:	612e      	str	r6, [r5, #16]
			HAL_UART_Transmit(&uart1,(uint8_t *)"RFID UID :",strlen("RFID UID :"),1000);
 8000926:	f003 fbb5 	bl	8004094 <HAL_UART_Transmit>
			sprintf(data,"%x %x %x %x\r\n",rfid_id[0],rfid_id[1],rfid_id[2],rfid_id[3]);
 800092a:	78e2      	ldrb	r2, [r4, #3]
 800092c:	78a3      	ldrb	r3, [r4, #2]
 800092e:	4919      	ldr	r1, [pc, #100]	; (8000994 <rfid_read+0x98>)
 8000930:	e9cd 3200 	strd	r3, r2, [sp]
 8000934:	4628      	mov	r0, r5
 8000936:	7863      	ldrb	r3, [r4, #1]
 8000938:	7822      	ldrb	r2, [r4, #0]
 800093a:	f009 f97d 	bl	8009c38 <siprintf>
			HAL_UART_Transmit(&uart1,(uint8_t *)data,sizeof(data),1000);
 800093e:	2214      	movs	r2, #20
 8000940:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000944:	4629      	mov	r1, r5
 8000946:	4812      	ldr	r0, [pc, #72]	; (8000990 <rfid_read+0x94>)
 8000948:	f003 fba4 	bl	8004094 <HAL_UART_Transmit>
			if(1==check_validcard())
 800094c:	f7ff fe34 	bl	80005b8 <check_validcard>
 8000950:	2801      	cmp	r0, #1
 8000952:	4602      	mov	r2, r0
 8000954:	d1d9      	bne.n	800090a <rfid_read+0xe>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8000956:	2104      	movs	r1, #4
 8000958:	480f      	ldr	r0, [pc, #60]	; (8000998 <rfid_read+0x9c>)
 800095a:	f001 fd15 	bl	8002388 <HAL_GPIO_WritePin>
				HAL_Delay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f001 fbb0 	bl	80020c4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000964:	4632      	mov	r2, r6
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <rfid_read+0x9c>)
 8000968:	2104      	movs	r1, #4
 800096a:	f001 fd0d 	bl	8002388 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
 800096e:	490b      	ldr	r1, [pc, #44]	; (800099c <rfid_read+0xa0>)
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <rfid_read+0x94>)
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	2213      	movs	r2, #19
}
 8000978:	b002      	add	sp, #8
 800097a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				HAL_UART_Transmit(&uart1,(uint8_t *)"Authorised Access\r\n",strlen("Authorised Access\r\n"),1000);
 800097e:	f003 bb89 	b.w	8004094 <HAL_UART_Transmit>
 8000982:	bf00      	nop
 8000984:	2000069c 	.word	0x2000069c
 8000988:	200005e4 	.word	0x200005e4
 800098c:	0800afa4 	.word	0x0800afa4
 8000990:	20000808 	.word	0x20000808
 8000994:	0800afb0 	.word	0x0800afb0
 8000998:	40020400 	.word	0x40020400
 800099c:	0800b044 	.word	0x0800b044

080009a0 <add_Employee>:
			return 0;   //  employee not availble
}


void add_Employee (void)
{
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(32736 < calculate_addr)
 80009a2:	4c19      	ldr	r4, [pc, #100]	; (8000a08 <add_Employee+0x68>)
 80009a4:	8822      	ldrh	r2, [r4, #0]
 80009a6:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80009aa:	429a      	cmp	r2, r3
{
 80009ac:	b085      	sub	sp, #20
  if(32736 < calculate_addr)
 80009ae:	d901      	bls.n	80009b4 <add_Employee+0x14>
			 HAL_I2C_Mem_Write(&hi2c1, dev_addr, calculate_addr, 2, (uint8_t *) &(write_details), sizeof(write_details), 100);  ///  write employee_id
			 HAL_Delay(10);
			 chek_wr = 1;
		 }
	 }
}
 80009b0:	b005      	add	sp, #20
 80009b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <add_Employee+0x6c>)
 80009b6:	4d16      	ldr	r5, [pc, #88]	; (8000a10 <add_Employee+0x70>)
 80009b8:	7819      	ldrb	r1, [r3, #0]
 80009ba:	4816      	ldr	r0, [pc, #88]	; (8000a14 <add_Employee+0x74>)
 80009bc:	9500      	str	r5, [sp, #0]
 80009be:	2764      	movs	r7, #100	; 0x64
 80009c0:	2620      	movs	r6, #32
 80009c2:	2302      	movs	r3, #2
 80009c4:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80009c8:	f002 f820 	bl	8002a0c <HAL_I2C_Mem_Read>
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <add_Employee+0x78>)
 80009ce:	8b2a      	ldrh	r2, [r5, #24]
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d012      	beq.n	80009fc <add_Employee+0x5c>
			 HAL_I2C_Mem_Write(&hi2c1, dev_addr, calculate_addr, 2, (uint8_t *) &(write_details), sizeof(write_details), 100);  ///  write employee_id
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <add_Employee+0x7c>)
 80009d8:	4d11      	ldr	r5, [pc, #68]	; (8000a20 <add_Employee+0x80>)
 80009da:	7819      	ldrb	r1, [r3, #0]
 80009dc:	8822      	ldrh	r2, [r4, #0]
 80009de:	9500      	str	r5, [sp, #0]
 80009e0:	2302      	movs	r3, #2
 80009e2:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80009e6:	480b      	ldr	r0, [pc, #44]	; (8000a14 <add_Employee+0x74>)
 80009e8:	f001 ff1c 	bl	8002824 <HAL_I2C_Mem_Write>
			 HAL_Delay(10);
 80009ec:	200a      	movs	r0, #10
 80009ee:	f001 fb69 	bl	80020c4 <HAL_Delay>
			 chek_wr = 1;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <add_Employee+0x84>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	701a      	strb	r2, [r3, #0]
}
 80009f8:	b005      	add	sp, #20
 80009fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			 availble_employee = 1;   //  employee is availble
 80009fc:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <add_Employee+0x88>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	b005      	add	sp, #20
 8000a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200005e0 	.word	0x200005e0
 8000a0c:	20000029 	.word	0x20000029
 8000a10:	2000067c 	.word	0x2000067c
 8000a14:	2000061c 	.word	0x2000061c
 8000a18:	200006a2 	.word	0x200006a2
 8000a1c:	20000028 	.word	0x20000028
 8000a20:	20000850 	.word	0x20000850
 8000a24:	200005e2 	.word	0x200005e2
 8000a28:	200005df 	.word	0x200005df

08000a2c <main>:
{
 8000a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a30:	b08b      	sub	sp, #44	; 0x2c
	HAL_Init();
 8000a32:	f001 fb1b 	bl	800206c <HAL_Init>
	sysclock_config();
 8000a36:	f7ff fe57 	bl	80006e8 <sysclock_config>
	gpio_init();
 8000a3a:	f7ff fe9d 	bl	8000778 <gpio_init>
	uart1_init();
 8000a3e:	f7ff fef1 	bl	8000824 <uart1_init>
	spi1_init();
 8000a42:	f7ff ff0d 	bl	8000860 <spi1_init>
	spi2_init();
 8000a46:	f7ff ff2d 	bl	80008a4 <spi2_init>
	rc522_init();
 8000a4a:	f004 fb3f 	bl	80050cc <rc522_init>
	ssd1963_setup();
 8000a4e:	f006 fce5 	bl	800741c <ssd1963_setup>
	XPT2046_Init();
 8000a52:	f008 ff19 	bl	8009888 <XPT2046_Init>
	Front_screen();
 8000a56:	f007 fd37 	bl	80084c8 <Front_screen>
  uart_init(USART1,9600);
 8000a5a:	4854      	ldr	r0, [pc, #336]	; (8000bac <main+0x180>)
	curr_page = 1 ;
 8000a5c:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000be8 <main+0x1bc>
 8000a60:	4d53      	ldr	r5, [pc, #332]	; (8000bb0 <main+0x184>)
 8000a62:	f8df b188 	ldr.w	fp, [pc, #392]	; 8000bec <main+0x1c0>
 8000a66:	f8df a188 	ldr.w	sl, [pc, #392]	; 8000bf0 <main+0x1c4>
  uart_init(USART1,9600);
 8000a6a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000a6e:	f005 f8ad 	bl	8005bcc <uart_init>
  uart_init(USART6,57600);
 8000a72:	4850      	ldr	r0, [pc, #320]	; (8000bb4 <main+0x188>)
 8000a74:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000a78:	f005 f8a8 	bl	8005bcc <uart_init>
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a7c:	4a4e      	ldr	r2, [pc, #312]	; (8000bb8 <main+0x18c>)
 8000a7e:	6810      	ldr	r0, [r2, #0]
 8000a80:	2300      	movs	r3, #0
 8000a82:	4619      	mov	r1, r3
 8000a84:	2202      	movs	r2, #2
 8000a86:	6880      	ldr	r0, [r0, #8]
 8000a88:	f009 f810 	bl	8009aac <setvbuf>
  r307_init();
 8000a8c:	f004 ffa4 	bl	80059d8 <r307_init>
  fingerprint_match_loop();
 8000a90:	f005 f878 	bl	8005b84 <fingerprint_match_loop>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2104      	movs	r1, #4
 8000a98:	4848      	ldr	r0, [pc, #288]	; (8000bbc <main+0x190>)
 8000a9a:	f001 fc75 	bl	8002388 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000a9e:	2032      	movs	r0, #50	; 0x32
 8000aa0:	f001 fb10 	bl	80020c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2104      	movs	r1, #4
 8000aa8:	4844      	ldr	r0, [pc, #272]	; (8000bbc <main+0x190>)
 8000aaa:	f001 fc6d 	bl	8002388 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000aae:	2032      	movs	r0, #50	; 0x32
 8000ab0:	f001 fb08 	bl	80020c4 <HAL_Delay>
	HAL_UART_Transmit(&uart1,(uint8_t *)msg,sizeof(msg),1000);
 8000ab4:	4942      	ldr	r1, [pc, #264]	; (8000bc0 <main+0x194>)
 8000ab6:	4843      	ldr	r0, [pc, #268]	; (8000bc4 <main+0x198>)
 8000ab8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abc:	221f      	movs	r2, #31
 8000abe:	f003 fae9 	bl	8004094 <HAL_UART_Transmit>
HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 0x00, 2, (uint8_t *)&emp_id_read, 1, 100);
 8000ac2:	2464      	movs	r4, #100	; 0x64
	curr_page = 1 ;
 8000ac4:	2301      	movs	r3, #1
HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 0x00, 2, (uint8_t *)&emp_id_read, 1, 100);
 8000ac6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000aca:	4a3f      	ldr	r2, [pc, #252]	; (8000bc8 <main+0x19c>)
	curr_page = 1 ;
 8000acc:	f889 3000 	strb.w	r3, [r9]
HAL_I2C_Mem_Read(&hi2c1, dev_addr1, 0x00, 2, (uint8_t *)&emp_id_read, 1, 100);
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <main+0x1a0>)
 8000ad2:	9200      	str	r2, [sp, #0]
 8000ad4:	7819      	ldrb	r1, [r3, #0]
 8000ad6:	483e      	ldr	r0, [pc, #248]	; (8000bd0 <main+0x1a4>)
 8000ad8:	2302      	movs	r3, #2
 8000ada:	2200      	movs	r2, #0
 8000adc:	f001 ff96 	bl	8002a0c <HAL_I2C_Mem_Read>
HAL_I2C_Mem_Read(&hi2c1,dev_addr, 0,2,(uint8_t *)temp_str,sizeof(temp_str),100);
 8000ae0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8000ae4:	4b3b      	ldr	r3, [pc, #236]	; (8000bd4 <main+0x1a8>)
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <main+0x1ac>)
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	7811      	ldrb	r1, [r2, #0]
 8000aec:	4838      	ldr	r0, [pc, #224]	; (8000bd0 <main+0x1a4>)
 8000aee:	2302      	movs	r3, #2
 8000af0:	2200      	movs	r2, #0
 8000af2:	f001 ff8b 	bl	8002a0c <HAL_I2C_Mem_Read>
	HAL_Delay(200);
 8000af6:	20c8      	movs	r0, #200	; 0xc8
 8000af8:	f001 fae4 	bl	80020c4 <HAL_Delay>
	rfid_read();
 8000afc:	f7ff fefe 	bl	80008fc <rfid_read>
	if(curr_page == 1)
 8000b00:	f899 3000 	ldrb.w	r3, [r9]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	f000 8329 	beq.w	800115c <main+0x730>
	if(curr_page == 2)
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	f000 832b 	beq.w	8001166 <main+0x73a>
	if(curr_page == 3)
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	f000 8288 	beq.w	8001026 <main+0x5fa>
	if(curr_page == 4)
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	f000 81b1 	beq.w	8000e7e <main+0x452>
	if(curr_page == 5)
 8000b1c:	2b05      	cmp	r3, #5
 8000b1e:	d077      	beq.n	8000c10 <main+0x1e4>
	if(curr_page == 6)
 8000b20:	2b06      	cmp	r3, #6
 8000b22:	f000 810d 	beq.w	8000d40 <main+0x314>
	if(curr_page == 7)
 8000b26:	2b07      	cmp	r3, #7
 8000b28:	d020      	beq.n	8000b6c <main+0x140>
	if(curr_page == 8)
 8000b2a:	2b08      	cmp	r3, #8
 8000b2c:	d1e3      	bne.n	8000af6 <main+0xca>
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // back
 8000b2e:	882b      	ldrh	r3, [r5, #0]
 8000b30:	3b08      	subs	r3, #8
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	2b40      	cmp	r3, #64	; 0x40
 8000b36:	d8de      	bhi.n	8000af6 <main+0xca>
		if(touchX >= 8 && touchX <= 72 && touchY >= 10&& touchY <= 70) // back
 8000b38:	f8bb 3000 	ldrh.w	r3, [fp]
 8000b3c:	3b0a      	subs	r3, #10
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	2b3c      	cmp	r3, #60	; 0x3c
 8000b42:	d8d8      	bhi.n	8000af6 <main+0xca>
			Admin_screen();
 8000b44:	f007 fcda 	bl	80084fc <Admin_screen>
			curr_page = 2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f889 3000 	strb.w	r3, [r9]
	if(curr_page == 8)
 8000b4e:	e7d2      	b.n	8000af6 <main+0xca>
		if(touchX >= 200 && touchX <= 300 && touchY >= 275 && touchY <= 395)  // USER ROLE
 8000b50:	882b      	ldrh	r3, [r5, #0]
			curr_page = 7;
 8000b52:	2207      	movs	r2, #7
 8000b54:	f889 2000 	strb.w	r2, [r9]
		if(touchX >= 200 && touchX <= 300 && touchY >= 275 && touchY <= 395)  // USER ROLE
 8000b58:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 8000b5c:	2a64      	cmp	r2, #100	; 0x64
 8000b5e:	f240 84a5 	bls.w	80014ac <main+0xa80>
		if(touchX >= 500 && touchX <= 600 && touchY >= 275 && touchY <= 395)  // SETTING
 8000b62:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000b66:	2b64      	cmp	r3, #100	; 0x64
 8000b68:	f240 84b6 	bls.w	80014d8 <main+0xaac>
		if(touchX >= 190 && touchX <= 590 && touchY >= 36 && touchY <= 84) //190,590,36,84
 8000b6c:	882b      	ldrh	r3, [r5, #0]
 8000b6e:	f1a3 02be 	sub.w	r2, r3, #190	; 0xbe
 8000b72:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8000b76:	d814      	bhi.n	8000ba2 <main+0x176>
 8000b78:	f8bb 3000 	ldrh.w	r3, [fp]
 8000b7c:	3b24      	subs	r3, #36	; 0x24
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	2b30      	cmp	r3, #48	; 0x30
 8000b82:	d8b8      	bhi.n	8000af6 <main+0xca>
			PageKeyPad();
 8000b84:	f008 f80a 	bl	8008b9c <PageKeyPad>
			keypad_down = 0;
 8000b88:	4914      	ldr	r1, [pc, #80]	; (8000bdc <main+0x1b0>)
			print_string(200,50,emp_name,0x737373); //190,590,36,84,
 8000b8a:	4a15      	ldr	r2, [pc, #84]	; (8000be0 <main+0x1b4>)
			keypad_down = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	700b      	strb	r3, [r1, #0]
			curr_page = 6;
 8000b90:	2306      	movs	r3, #6
 8000b92:	f889 3000 	strb.w	r3, [r9]
			print_string(200,50,emp_name,0x737373); //190,590,36,84,
 8000b96:	2132      	movs	r1, #50	; 0x32
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <main+0x1b8>)
 8000b9a:	20c8      	movs	r0, #200	; 0xc8
 8000b9c:	f006 fbc8 	bl	8007330 <print_string>
		if(touchX >= 8 && touchX <= 72 && touchY >= 10&& touchY <= 70) // back
 8000ba0:	882b      	ldrh	r3, [r5, #0]
 8000ba2:	3b08      	subs	r3, #8
 8000ba4:	2b40      	cmp	r3, #64	; 0x40
 8000ba6:	d9c7      	bls.n	8000b38 <main+0x10c>
 8000ba8:	e7a5      	b.n	8000af6 <main+0xca>
 8000baa:	bf00      	nop
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	200008b8 	.word	0x200008b8
 8000bb4:	40011400 	.word	0x40011400
 8000bb8:	2000055c 	.word	0x2000055c
 8000bbc:	40020400 	.word	0x40020400
 8000bc0:	20000054 	.word	0x20000054
 8000bc4:	20000808 	.word	0x20000808
 8000bc8:	200005fa 	.word	0x200005fa
 8000bcc:	20000029 	.word	0x20000029
 8000bd0:	2000061c 	.word	0x2000061c
 8000bd4:	2000075c 	.word	0x2000075c
 8000bd8:	20000028 	.word	0x20000028
 8000bdc:	20000678 	.word	0x20000678
 8000be0:	200005fc 	.word	0x200005fc
 8000be4:	00737373 	.word	0x00737373
 8000be8:	20000022 	.word	0x20000022
 8000bec:	200008ba 	.word	0x200008ba
 8000bf0:	20000614 	.word	0x20000614
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // BACK
 8000bf4:	882b      	ldrh	r3, [r5, #0]
 8000bf6:	3b08      	subs	r3, #8
 8000bf8:	b29b      	uxth	r3, r3
			curr_page = 5;
 8000bfa:	2205      	movs	r2, #5
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // BACK
 8000bfc:	2b40      	cmp	r3, #64	; 0x40
			curr_page = 5;
 8000bfe:	f889 2000 	strb.w	r2, [r9]
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // BACK
 8000c02:	d805      	bhi.n	8000c10 <main+0x1e4>
 8000c04:	f8bb 3000 	ldrh.w	r3, [fp]
 8000c08:	3b0a      	subs	r3, #10
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	2b3c      	cmp	r3, #60	; 0x3c
 8000c0e:	d999      	bls.n	8000b44 <main+0x118>
		if(touchX >= 630 && touchX <= 720 && touchY >= 121 && touchY <= 169)  //SAVE  630,720,121,169
 8000c10:	882b      	ldrh	r3, [r5, #0]
		if(touchX >= 670 && touchX <= 720 && touchY >= 199 && touchY <= 259)     //	494,720,199,259,0xcedcfd  //desig
 8000c12:	f2a3 229e 	subw	r2, r3, #670	; 0x29e
 8000c16:	2a32      	cmp	r2, #50	; 0x32
 8000c18:	d867      	bhi.n	8000cea <main+0x2be>
 8000c1a:	f8bb 2000 	ldrh.w	r2, [fp]
 8000c1e:	f1a2 01c7 	sub.w	r1, r2, #199	; 0xc7
 8000c22:	293c      	cmp	r1, #60	; 0x3c
 8000c24:	d81c      	bhi.n	8000c60 <main+0x234>
			drop_btn = !drop_btn;
 8000c26:	4a83      	ldr	r2, [pc, #524]	; (8000e34 <main+0x408>)
 8000c28:	7813      	ldrb	r3, [r2, #0]
 8000c2a:	f083 0301 	eor.w	r3, r3, #1
 8000c2e:	7013      	strb	r3, [r2, #0]
			sub_page =4;
 8000c30:	4a81      	ldr	r2, [pc, #516]	; (8000e38 <main+0x40c>)
 8000c32:	2404      	movs	r4, #4
 8000c34:	7014      	strb	r4, [r2, #0]
			if(drop_btn)
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 8515 	beq.w	8001666 <main+0xc3a>
				NewUser_Desig1();
 8000c3c:	f008 fbc2 	bl	80093c4 <NewUser_Desig1>
				dropdown(&dropdown_desgn[0],4,297,217,32);
 8000c40:	2320      	movs	r3, #32
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	487d      	ldr	r0, [pc, #500]	; (8000e3c <main+0x410>)
 8000c46:	4621      	mov	r1, r4
 8000c48:	23d9      	movs	r3, #217	; 0xd9
 8000c4a:	f240 1229 	movw	r2, #297	; 0x129
 8000c4e:	f008 f8db 	bl	8008e08 <dropdown>
		if(touchX >= 670 && touchX <= 720 && touchY >= 289 && touchY <= 349)//	494,720,289,349,//role
 8000c52:	882b      	ldrh	r3, [r5, #0]
 8000c54:	f2a3 229e 	subw	r2, r3, #670	; 0x29e
 8000c58:	2a32      	cmp	r2, #50	; 0x32
 8000c5a:	d846      	bhi.n	8000cea <main+0x2be>
 8000c5c:	f8bb 2000 	ldrh.w	r2, [fp]
 8000c60:	f46f 7190 	mvn.w	r1, #288	; 0x120
 8000c64:	1851      	adds	r1, r2, r1
 8000c66:	293c      	cmp	r1, #60	; 0x3c
 8000c68:	f200 82fb 	bhi.w	8001262 <main+0x836>
			drop_btn = !drop_btn;
 8000c6c:	4a71      	ldr	r2, [pc, #452]	; (8000e34 <main+0x408>)
			sub_page =5;
 8000c6e:	4972      	ldr	r1, [pc, #456]	; (8000e38 <main+0x40c>)
			drop_btn = !drop_btn;
 8000c70:	7813      	ldrb	r3, [r2, #0]
 8000c72:	f083 0301 	eor.w	r3, r3, #1
 8000c76:	7013      	strb	r3, [r2, #0]
			sub_page =5;
 8000c78:	2205      	movs	r2, #5
 8000c7a:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 851b 	beq.w	80016b8 <main+0xc8c>
				NewUser_Role1();
 8000c82:	f008 fbed 	bl	8009460 <NewUser_Role1>
				NewUser_Card1();
 8000c86:	f008 fc41 	bl	800950c <NewUser_Card1>
				dropdown(&dropdown_role[0],3,297,217,-80);
 8000c8a:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	486b      	ldr	r0, [pc, #428]	; (8000e40 <main+0x414>)
 8000c92:	23d9      	movs	r3, #217	; 0xd9
 8000c94:	f240 1229 	movw	r2, #297	; 0x129
 8000c98:	2103      	movs	r1, #3
 8000c9a:	f008 f8b5 	bl	8008e08 <dropdown>
		if(touchX >= 670 && touchX <= 720 && touchY >= 379 && touchY <= 439)//	494,720,379,439 // card
 8000c9e:	882b      	ldrh	r3, [r5, #0]
 8000ca0:	f2a3 229e 	subw	r2, r3, #670	; 0x29e
 8000ca4:	2a32      	cmp	r2, #50	; 0x32
 8000ca6:	d820      	bhi.n	8000cea <main+0x2be>
 8000ca8:	f8bb 2000 	ldrh.w	r2, [fp]
 8000cac:	f5b2 7fbd 	cmp.w	r2, #378	; 0x17a
 8000cb0:	d925      	bls.n	8000cfe <main+0x2d2>
 8000cb2:	f5b2 7fdc 	cmp.w	r2, #440	; 0x1b8
 8000cb6:	d222      	bcs.n	8000cfe <main+0x2d2>
			drop_btn = !drop_btn;
 8000cb8:	4a5e      	ldr	r2, [pc, #376]	; (8000e34 <main+0x408>)
			sub_page =6;
 8000cba:	495f      	ldr	r1, [pc, #380]	; (8000e38 <main+0x40c>)
			drop_btn = !drop_btn;
 8000cbc:	7813      	ldrb	r3, [r2, #0]
 8000cbe:	f083 0301 	eor.w	r3, r3, #1
 8000cc2:	7013      	strb	r3, [r2, #0]
			sub_page =6;
 8000cc4:	2206      	movs	r2, #6
 8000cc6:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f000 84a8 	beq.w	800161e <main+0xbf2>
				NewUser_Desig1();
 8000cce:	f008 fb79 	bl	80093c4 <NewUser_Desig1>
				NewUser_Card1();
 8000cd2:	f008 fc1b 	bl	800950c <NewUser_Card1>
				dropdown(&dropdown_CardThumb[0],2,297,217,50);
 8000cd6:	2332      	movs	r3, #50	; 0x32
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	485a      	ldr	r0, [pc, #360]	; (8000e44 <main+0x418>)
 8000cdc:	23d9      	movs	r3, #217	; 0xd9
 8000cde:	f240 1229 	movw	r2, #297	; 0x129
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	f008 f890 	bl	8008e08 <dropdown>
		if(touchX >= 8 && touchX <= 72 && touchY >=  10&& touchY <= 70) //back
 8000ce8:	882b      	ldrh	r3, [r5, #0]
 8000cea:	3b08      	subs	r3, #8
 8000cec:	2b40      	cmp	r3, #64	; 0x40
 8000cee:	d806      	bhi.n	8000cfe <main+0x2d2>
 8000cf0:	f8bb 3000 	ldrh.w	r3, [fp]
 8000cf4:	3b0a      	subs	r3, #10
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	2b3c      	cmp	r3, #60	; 0x3c
 8000cfa:	f240 8489 	bls.w	8001610 <main+0xbe4>
		if((sub_page ==4))
 8000cfe:	4b4e      	ldr	r3, [pc, #312]	; (8000e38 <main+0x40c>)
 8000d00:	781c      	ldrb	r4, [r3, #0]
 8000d02:	2c04      	cmp	r4, #4
 8000d04:	f000 82cc 	beq.w	80012a0 <main+0x874>
		if(sub_page ==5)
 8000d08:	2c05      	cmp	r4, #5
 8000d0a:	f000 82af 	beq.w	800126c <main+0x840>
		if(sub_page ==6)
 8000d0e:	2c06      	cmp	r4, #6
 8000d10:	d111      	bne.n	8000d36 <main+0x30a>
			if(touchX >= 494 && touchX <= 720)
 8000d12:	882b      	ldrh	r3, [r5, #0]
 8000d14:	f5a3 73f7 	sub.w	r3, r3, #494	; 0x1ee
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	2be2      	cmp	r3, #226	; 0xe2
 8000d1c:	d80b      	bhi.n	8000d36 <main+0x30a>
				 if(touchY >= 284 && touchY <= 330)
 8000d1e:	f8bb 3000 	ldrh.w	r3, [fp]
 8000d22:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8000d26:	2a2e      	cmp	r2, #46	; 0x2e
 8000d28:	f240 8511 	bls.w	800174e <main+0xd22>
				 if(touchY >= 284+40 && touchY <= 330+40)
 8000d2c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000d30:	2b2e      	cmp	r3, #46	; 0x2e
 8000d32:	f240 84e6 	bls.w	8001702 <main+0xcd6>
	if(curr_page == 6)
 8000d36:	f899 3000 	ldrb.w	r3, [r9]
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	f47f aef3 	bne.w	8000b26 <main+0xfa>
		Set_Font(&Font12x18);
 8000d40:	4841      	ldr	r0, [pc, #260]	; (8000e48 <main+0x41c>)
 8000d42:	f005 f98d 	bl	8006060 <Set_Font>
		if(touchX >= 555 && touchX <= 695 && touchY >= 385+y && touchY <= 435+y) // down  555,695,385+y,435+y
 8000d46:	882b      	ldrh	r3, [r5, #0]
 8000d48:	f2a3 222b 	subw	r2, r3, #555	; 0x22b
 8000d4c:	2a8c      	cmp	r2, #140	; 0x8c
 8000d4e:	d81c      	bhi.n	8000d8a <main+0x35e>
 8000d50:	f8bb 2000 	ldrh.w	r2, [fp]
 8000d54:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	2a32      	cmp	r2, #50	; 0x32
 8000d5c:	f200 840b 	bhi.w	8001576 <main+0xb4a>
				if(keypad_down)
 8000d60:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <main+0x420>)
 8000d62:	7818      	ldrb	r0, [r3, #0]
					fill_area(0,800,200,480,PURPLE);
 8000d64:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <main+0x424>)
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	22c8      	movs	r2, #200	; 0xc8
 8000d6a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d6e:	f44f 7148 	mov.w	r1, #800	; 0x320
				if(keypad_down)
 8000d72:	2800      	cmp	r0, #0
 8000d74:	f000 87a1 	beq.w	8001cba <main+0x128e>
					fill_area(0,800,200,480,PURPLE);
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f005 fa23 	bl	80061c4 <fill_area>
					NewEntry_page();
 8000d7e:	f007 fe7f 	bl	8008a80 <NewEntry_page>
					curr_page = 4;
 8000d82:	2304      	movs	r3, #4
 8000d84:	f889 3000 	strb.w	r3, [r9]
		if(touchX >= 105 && touchX <= 185 && touchY >= 325+y && touchY <= 375+y) //caps  105,185,325+y,375+y
 8000d88:	882b      	ldrh	r3, [r5, #0]
 8000d8a:	f1a3 0269 	sub.w	r2, r3, #105	; 0x69
 8000d8e:	2a50      	cmp	r2, #80	; 0x50
 8000d90:	f200 83f1 	bhi.w	8001576 <main+0xb4a>
 8000d94:	f8bb 2000 	ldrh.w	r2, [fp]
 8000d98:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	2a32      	cmp	r2, #50	; 0x32
 8000da0:	d804      	bhi.n	8000dac <main+0x380>
			UC_FLAG = !UC_FLAG;
 8000da2:	492c      	ldr	r1, [pc, #176]	; (8000e54 <main+0x428>)
 8000da4:	780a      	ldrb	r2, [r1, #0]
 8000da6:	f082 0201 	eor.w	r2, r2, #1
 8000daa:	700a      	strb	r2, [r1, #0]
			pos--;
 8000dac:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <main+0x42c>)
 8000dae:	7811      	ldrb	r1, [r2, #0]
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // BACK
 8000db0:	f04f 0800 	mov.w	r8, #0
 8000db4:	22ec      	movs	r2, #236	; 0xec
 8000db6:	9205      	str	r2, [sp, #20]
 8000db8:	4647      	mov	r7, r8
 8000dba:	f8cd 8018 	str.w	r8, [sp, #24]
			x1+=30*idx1;
 8000dbe:	9806      	ldr	r0, [sp, #24]
 8000dc0:	ebc8 1208 	rsb	r2, r8, r8, lsl #4
 8000dc4:	4410      	add	r0, r2
			for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000dc6:	eba8 0707 	sub.w	r7, r8, r7
 8000dca:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <main+0x430>)
			x1+=30*idx1;
 8000dcc:	9006      	str	r0, [sp, #24]
			for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000dce:	f1c7 0709 	rsb	r7, r7, #9
 8000dd2:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8000dd6:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8000dda:	4416      	add	r6, r2
 8000ddc:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
 8000de0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
				if(touchX >= x1+105+x && touchX <= x1+155+x && touchY >= y1+205+y && touchY <= y1+255+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 8000de4:	9a05      	ldr	r2, [sp, #20]
 8000de6:	3232      	adds	r2, #50	; 0x32
 8000de8:	f100 0469 	add.w	r4, r0, #105	; 0x69
 8000dec:	9207      	str	r2, [sp, #28]
 8000dee:	e000      	b.n	8000df2 <main+0x3c6>
 8000df0:	882b      	ldrh	r3, [r5, #0]
 8000df2:	429c      	cmp	r4, r3
 8000df4:	f104 0232 	add.w	r2, r4, #50	; 0x32
			for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000df8:	f104 043c 	add.w	r4, r4, #60	; 0x3c
				if(touchX >= x1+105+x && touchX <= x1+155+x && touchY >= y1+205+y && touchY <= y1+255+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 8000dfc:	dc0a      	bgt.n	8000e14 <main+0x3e8>
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	dc08      	bgt.n	8000e14 <main+0x3e8>
 8000e02:	f8bb 3000 	ldrh.w	r3, [fp]
 8000e06:	9a05      	ldr	r2, [sp, #20]
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	db03      	blt.n	8000e14 <main+0x3e8>
 8000e0c:	9a07      	ldr	r2, [sp, #28]
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f340 82a9 	ble.w	8001366 <main+0x93a>
			for(int idx2=0; idx2<=9-(idx1*2-k); idx2++)
 8000e14:	42bc      	cmp	r4, r7
 8000e16:	f106 0601 	add.w	r6, r6, #1
 8000e1a:	d1e9      	bne.n	8000df0 <main+0x3c4>
		for(int idx1=0; idx1<3; idx1++)
 8000e1c:	9b05      	ldr	r3, [sp, #20]
 8000e1e:	333c      	adds	r3, #60	; 0x3c
 8000e20:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 8000e24:	9305      	str	r3, [sp, #20]
 8000e26:	f108 0802 	add.w	r8, r8, #2
 8000e2a:	f000 82b2 	beq.w	8001392 <main+0x966>
				if(touchX >= x1+105+x && touchX <= x1+155+x && touchY >= y1+205+y && touchY <= y1+255+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 8000e2e:	882b      	ldrh	r3, [r5, #0]
			k=1;
 8000e30:	2701      	movs	r7, #1
 8000e32:	e7c4      	b.n	8000dbe <main+0x392>
 8000e34:	200005f9 	.word	0x200005f9
 8000e38:	20000758 	.word	0x20000758
 8000e3c:	20000034 	.word	0x20000034
 8000e40:	20000044 	.word	0x20000044
 8000e44:	2000002c 	.word	0x2000002c
 8000e48:	20000544 	.word	0x20000544
 8000e4c:	20000678 	.word	0x20000678
 8000e50:	00800010 	.word	0x00800010
 8000e54:	200005dd 	.word	0x200005dd
 8000e58:	20000679 	.word	0x20000679
 8000e5c:	20000004 	.word	0x20000004
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // BACK
 8000e60:	3b08      	subs	r3, #8
 8000e62:	2b40      	cmp	r3, #64	; 0x40
 8000e64:	f63f ae47 	bhi.w	8000af6 <main+0xca>
 8000e68:	2203      	movs	r2, #3
 8000e6a:	f8bb 3000 	ldrh.w	r3, [fp]
 8000e6e:	3b0a      	subs	r3, #10
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	2b3c      	cmp	r3, #60	; 0x3c
 8000e74:	f67f ae66 	bls.w	8000b44 <main+0x118>
	if(curr_page == 4)
 8000e78:	2a04      	cmp	r2, #4
 8000e7a:	f47f ae3c 	bne.w	8000af6 <main+0xca>
		if(touchX >= 197 && touchX <= 503 && touchY >= 69 && touchY <= 135) // NAME
 8000e7e:	882b      	ldrh	r3, [r5, #0]
 8000e80:	f1a3 02c5 	sub.w	r2, r3, #197	; 0xc5
 8000e84:	f5b2 7f99 	cmp.w	r2, #306	; 0x132
 8000e88:	d823      	bhi.n	8000ed2 <main+0x4a6>
 8000e8a:	f8bb 2000 	ldrh.w	r2, [fp]
 8000e8e:	3a45      	subs	r2, #69	; 0x45
 8000e90:	b292      	uxth	r2, r2
 8000e92:	2a42      	cmp	r2, #66	; 0x42
 8000e94:	d81d      	bhi.n	8000ed2 <main+0x4a6>
			sub_page =7;
 8000e96:	4a9f      	ldr	r2, [pc, #636]	; (8001114 <main+0x6e8>)
			keypad_down = 1;
 8000e98:	4e9f      	ldr	r6, [pc, #636]	; (8001118 <main+0x6ec>)
			curr_page =6;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	f889 3000 	strb.w	r3, [r9]
			sub_page =7;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	7013      	strb	r3, [r2, #0]
			keypad_down = 1;
 8000ea4:	2401      	movs	r4, #1
			PageKeyPad();
 8000ea6:	f007 fe79 	bl	8008b9c <PageKeyPad>
			fill_area(210,400,80,120,0xe7eefe);
 8000eaa:	4b9c      	ldr	r3, [pc, #624]	; (800111c <main+0x6f0>)
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2250      	movs	r2, #80	; 0x50
 8000eb0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000eb4:	2378      	movs	r3, #120	; 0x78
 8000eb6:	20d2      	movs	r0, #210	; 0xd2
			keypad_down = 1;
 8000eb8:	7034      	strb	r4, [r6, #0]
			fill_area(210,400,80,120,0xe7eefe);
 8000eba:	f005 f983 	bl	80061c4 <fill_area>
			Set_Font(&Font12x18);
 8000ebe:	4898      	ldr	r0, [pc, #608]	; (8001120 <main+0x6f4>)
 8000ec0:	f005 f8ce 	bl	8006060 <Set_Font>
			print_string(220,90,emp_name,0x737373);
 8000ec4:	4b97      	ldr	r3, [pc, #604]	; (8001124 <main+0x6f8>)
 8000ec6:	4a98      	ldr	r2, [pc, #608]	; (8001128 <main+0x6fc>)
 8000ec8:	215a      	movs	r1, #90	; 0x5a
 8000eca:	20dc      	movs	r0, #220	; 0xdc
 8000ecc:	f006 fa30 	bl	8007330 <print_string>
		if(touchX >= 450 && touchX <= 500 && touchY >= 170 && touchY <= 220) // DESGI.draw_rect(450,500,170,220,BLUE);
 8000ed0:	882b      	ldrh	r3, [r5, #0]
 8000ed2:	f5a3 72e1 	sub.w	r2, r3, #450	; 0x1c2
 8000ed6:	2a32      	cmp	r2, #50	; 0x32
 8000ed8:	d86e      	bhi.n	8000fb8 <main+0x58c>
 8000eda:	f8bb 2000 	ldrh.w	r2, [fp]
 8000ede:	f1a2 01aa 	sub.w	r1, r2, #170	; 0xaa
 8000ee2:	2932      	cmp	r1, #50	; 0x32
 8000ee4:	d820      	bhi.n	8000f28 <main+0x4fc>
			drop_btn = !drop_btn;
 8000ee6:	4a91      	ldr	r2, [pc, #580]	; (800112c <main+0x700>)
			sub_page =1;
 8000ee8:	498a      	ldr	r1, [pc, #552]	; (8001114 <main+0x6e8>)
			drop_btn = !drop_btn;
 8000eea:	7813      	ldrb	r3, [r2, #0]
 8000eec:	f083 0301 	eor.w	r3, r3, #1
 8000ef0:	7013      	strb	r3, [r2, #0]
			sub_page =1;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f000 83f1 	beq.w	80016de <main+0xcb2>
				NewUser_Name();
 8000efc:	f007 fc28 	bl	8008750 <NewUser_Name>
				NewUser_Desig(0,0,0,0);
 8000f00:	2300      	movs	r3, #0
 8000f02:	461a      	mov	r2, r3
 8000f04:	4619      	mov	r1, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f007 fc6e 	bl	80087e8 <NewUser_Desig>
				dropdown(&dropdown_desgn[0],4,0,0,0);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4888      	ldr	r0, [pc, #544]	; (8001130 <main+0x704>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	2104      	movs	r1, #4
 8000f16:	f007 ff77 	bl	8008e08 <dropdown>
		if(touchX >= 450 && touchX <= 500 && touchY >= 260 && touchY <= 310) // ROLE
 8000f1a:	882b      	ldrh	r3, [r5, #0]
 8000f1c:	f5a3 72e1 	sub.w	r2, r3, #450	; 0x1c2
 8000f20:	2a32      	cmp	r2, #50	; 0x32
 8000f22:	d849      	bhi.n	8000fb8 <main+0x58c>
 8000f24:	f8bb 2000 	ldrh.w	r2, [fp]
 8000f28:	f5a2 7182 	sub.w	r1, r2, #260	; 0x104
 8000f2c:	2932      	cmp	r1, #50	; 0x32
 8000f2e:	f200 8193 	bhi.w	8001258 <main+0x82c>
			drop_btn = !drop_btn;
 8000f32:	4b7e      	ldr	r3, [pc, #504]	; (800112c <main+0x700>)
			sub_page =2;
 8000f34:	4a77      	ldr	r2, [pc, #476]	; (8001114 <main+0x6e8>)
			drop_btn = !drop_btn;
 8000f36:	781c      	ldrb	r4, [r3, #0]
 8000f38:	f084 0401 	eor.w	r4, r4, #1
 8000f3c:	701c      	strb	r4, [r3, #0]
			sub_page =2;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	7013      	strb	r3, [r2, #0]
			if(drop_btn)
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	f000 83a3 	beq.w	800168e <main+0xc62>
				NewUser_Role();
 8000f48:	f007 fccc 	bl	80088e4 <NewUser_Role>
				NewUser_Card();
 8000f4c:	f007 fd30 	bl	80089b0 <NewUser_Card>
				dropdown(&dropdown_role[0],3,0,0,-120);
 8000f50:	f06f 0377 	mvn.w	r3, #119	; 0x77
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2300      	movs	r3, #0
 8000f58:	4876      	ldr	r0, [pc, #472]	; (8001134 <main+0x708>)
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	f007 ff53 	bl	8008e08 <dropdown>
		if(touchX >= 450 && touchX <= 500 && touchY >= 355 && touchY <= 405) // CARD/THUMB
 8000f62:	882b      	ldrh	r3, [r5, #0]
 8000f64:	f5a3 72e1 	sub.w	r2, r3, #450	; 0x1c2
 8000f68:	2a32      	cmp	r2, #50	; 0x32
 8000f6a:	d825      	bhi.n	8000fb8 <main+0x58c>
 8000f6c:	f8bb 2000 	ldrh.w	r2, [fp]
 8000f70:	f5b2 7fb1 	cmp.w	r2, #354	; 0x162
 8000f74:	d92e      	bls.n	8000fd4 <main+0x5a8>
 8000f76:	f5b2 7fcb 	cmp.w	r2, #406	; 0x196
 8000f7a:	d22b      	bcs.n	8000fd4 <main+0x5a8>
			drop_btn = !drop_btn;
 8000f7c:	4a6b      	ldr	r2, [pc, #428]	; (800112c <main+0x700>)
			sub_page =3;
 8000f7e:	4965      	ldr	r1, [pc, #404]	; (8001114 <main+0x6e8>)
			drop_btn = !drop_btn;
 8000f80:	7813      	ldrb	r3, [r2, #0]
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	7013      	strb	r3, [r2, #0]
			sub_page =3;
 8000f88:	2203      	movs	r2, #3
 8000f8a:	700a      	strb	r2, [r1, #0]
			if(drop_btn)
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f000 8359 	beq.w	8001644 <main+0xc18>
				NewUser_Name();
 8000f92:	f007 fbdd 	bl	8008750 <NewUser_Name>
				NewUser_Desig(0,0,0,0);
 8000f96:	2300      	movs	r3, #0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f007 fc23 	bl	80087e8 <NewUser_Desig>
				NewUser_Card();
 8000fa2:	f007 fd05 	bl	80089b0 <NewUser_Card>
				dropdown(&dropdown_CardThumb[0],2,0,0,10);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	220a      	movs	r2, #10
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	4862      	ldr	r0, [pc, #392]	; (8001138 <main+0x70c>)
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	f007 ff29 	bl	8008e08 <dropdown>
		if(touchX >= 550 && touchX <= 650 && touchY >= 348 && touchY <= 408) 	// SCAN
 8000fb6:	882b      	ldrh	r3, [r5, #0]
 8000fb8:	f2a3 2226 	subw	r2, r3, #550	; 0x226
 8000fbc:	2a64      	cmp	r2, #100	; 0x64
 8000fbe:	d809      	bhi.n	8000fd4 <main+0x5a8>
 8000fc0:	f8bb 3000 	ldrh.w	r3, [fp]
 8000fc4:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8000fc8:	f080 81eb 	bcs.w	80013a2 <main+0x976>
		if(touchX >= 550 && touchX <= 650 && touchY >= 248 && touchY <= 308) 	// Save
 8000fcc:	2bf7      	cmp	r3, #247	; 0xf7
 8000fce:	f200 81eb 	bhi.w	80013a8 <main+0x97c>
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) //back
 8000fd2:	882b      	ldrh	r3, [r5, #0]
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	2b40      	cmp	r3, #64	; 0x40
 8000fd8:	d806      	bhi.n	8000fe8 <main+0x5bc>
 8000fda:	f8bb 3000 	ldrh.w	r3, [fp]
 8000fde:	3b0a      	subs	r3, #10
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	2b3c      	cmp	r3, #60	; 0x3c
 8000fe4:	f240 830e 	bls.w	8001604 <main+0xbd8>
		if((sub_page ==1))
 8000fe8:	4b4a      	ldr	r3, [pc, #296]	; (8001114 <main+0x6e8>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	f000 8191 	beq.w	8001314 <main+0x8e8>
		if(sub_page ==2)
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	f000 8174 	beq.w	80012e0 <main+0x8b4>
		if(sub_page ==3)
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d111      	bne.n	8001020 <main+0x5f4>
			if(touchX >= 197 && touchX <= 503)
 8000ffc:	882b      	ldrh	r3, [r5, #0]
 8000ffe:	3bc5      	subs	r3, #197	; 0xc5
 8001000:	b29b      	uxth	r3, r3
 8001002:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001006:	d80b      	bhi.n	8001020 <main+0x5f4>
				 if(touchY >= 254 && touchY <= 300)
 8001008:	f8bb 3000 	ldrh.w	r3, [fp]
 800100c:	f1a3 02fe 	sub.w	r2, r3, #254	; 0xfe
 8001010:	2a2e      	cmp	r2, #46	; 0x2e
 8001012:	f240 861b 	bls.w	8001c4c <main+0x1220>
				 if(touchY >= 254+40 && touchY <= 300+40)
 8001016:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800101a:	2b2e      	cmp	r3, #46	; 0x2e
 800101c:	f240 85f4 	bls.w	8001c08 <main+0x11dc>
	if(curr_page == 5)
 8001020:	f899 3000 	ldrb.w	r3, [r9]
 8001024:	e57a      	b.n	8000b1c <main+0xf0>
		if(touchX >= 327 && touchX <= 580 && touchY >= 115 && touchY <= 195) // NEW USER
 8001026:	882b      	ldrh	r3, [r5, #0]
 8001028:	f46f 76a3 	mvn.w	r6, #326	; 0x146
 800102c:	199a      	adds	r2, r3, r6
 800102e:	2afd      	cmp	r2, #253	; 0xfd
 8001030:	f63f af16 	bhi.w	8000e60 <main+0x434>
 8001034:	f8bb 2000 	ldrh.w	r2, [fp]
 8001038:	f1a2 0173 	sub.w	r1, r2, #115	; 0x73
 800103c:	2950      	cmp	r1, #80	; 0x50
 800103e:	f200 8200 	bhi.w	8001442 <main+0xa16>
			NewEntry_page();
 8001042:	f007 fd1d 	bl	8008a80 <NewEntry_page>
		if(touchX >= 327 && touchX <= 580 && touchY >= 280 && touchY <= 360) // ALL USER
 8001046:	882b      	ldrh	r3, [r5, #0]
 8001048:	f46f 74a3 	mvn.w	r4, #326	; 0x146
 800104c:	1919      	adds	r1, r3, r4
			curr_page = 4;
 800104e:	2204      	movs	r2, #4
		if(touchX >= 327 && touchX <= 580 && touchY >= 280 && touchY <= 360) // ALL USER
 8001050:	29fd      	cmp	r1, #253	; 0xfd
			curr_page = 4;
 8001052:	f889 2000 	strb.w	r2, [r9]
		if(touchX >= 327 && touchX <= 580 && touchY >= 280 && touchY <= 360) // ALL USER
 8001056:	f200 863d 	bhi.w	8001cd4 <main+0x12a8>
 800105a:	f8bb 1000 	ldrh.w	r1, [fp]
 800105e:	f5b1 7f8c 	cmp.w	r1, #280	; 0x118
 8001062:	f0c0 861d 	bcc.w	8001ca0 <main+0x1274>
 8001066:	f5b1 7fb4 	cmp.w	r1, #360	; 0x168
 800106a:	f63f af08 	bhi.w	8000e7e <main+0x452>
			AllUser_Page();
 800106e:	f008 fb07 	bl	8009680 <AllUser_Page>
			for(ia=0;ia<emp_id_read;ia++)
 8001072:	4b32      	ldr	r3, [pc, #200]	; (800113c <main+0x710>)
			scanned_EMPLO_ID = 1;
 8001074:	4932      	ldr	r1, [pc, #200]	; (8001140 <main+0x714>)
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 8001076:	4833      	ldr	r0, [pc, #204]	; (8001144 <main+0x718>)
			for(ia=0;ia<emp_id_read;ia++)
 8001078:	781a      	ldrb	r2, [r3, #0]
			scanned_EMPLO_ID = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	800b      	strh	r3, [r1, #0]
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	8001      	strh	r1, [r0, #0]
			for(ia=0;ia<emp_id_read;ia++)
 8001082:	4831      	ldr	r0, [pc, #196]	; (8001148 <main+0x71c>)
 8001084:	2100      	movs	r1, #0
 8001086:	6001      	str	r1, [r0, #0]
 8001088:	2a00      	cmp	r2, #0
 800108a:	f43f adb3 	beq.w	8000bf4 <main+0x1c8>
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 800108e:	4e2f      	ldr	r6, [pc, #188]	; (800114c <main+0x720>)
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 8001090:	4c2f      	ldr	r4, [pc, #188]	; (8001150 <main+0x724>)
		  {
			  availble_employee = 1;   //  employee availble
//	    data have readed successfully and stored in read_details structure please copy that.
		  }
		 else
			  availble_employee = 0;   //  employee not availble
 8001092:	460f      	mov	r7, r1
 8001094:	4608      	mov	r0, r1
 8001096:	e01b      	b.n	80010d0 <main+0x6a4>
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 8001098:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800109c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80010a0:	0089      	lsls	r1, r1, #2
 80010a2:	31c2      	adds	r1, #194	; 0xc2
 80010a4:	2300      	movs	r3, #0
 80010a6:	b289      	uxth	r1, r1
 80010a8:	4622      	mov	r2, r4
 80010aa:	20aa      	movs	r0, #170	; 0xaa
 80010ac:	f006 f940 	bl	8007330 <print_string>
			for(ia=0;ia<emp_id_read;ia++)
 80010b0:	4a25      	ldr	r2, [pc, #148]	; (8001148 <main+0x71c>)
				scanned_EMPLO_ID++;
 80010b2:	4b23      	ldr	r3, [pc, #140]	; (8001140 <main+0x714>)
			for(ia=0;ia<emp_id_read;ia++)
 80010b4:	6811      	ldr	r1, [r2, #0]
				scanned_EMPLO_ID++;
 80010b6:	881b      	ldrh	r3, [r3, #0]
			for(ia=0;ia<emp_id_read;ia++)
 80010b8:	4820      	ldr	r0, [pc, #128]	; (800113c <main+0x710>)
				scanned_EMPLO_ID++;
 80010ba:	3301      	adds	r3, #1
			for(ia=0;ia<emp_id_read;ia++)
 80010bc:	7802      	ldrb	r2, [r0, #0]
 80010be:	1c48      	adds	r0, r1, #1
				scanned_EMPLO_ID++;
 80010c0:	491f      	ldr	r1, [pc, #124]	; (8001140 <main+0x714>)
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	800b      	strh	r3, [r1, #0]
			for(ia=0;ia<emp_id_read;ia++)
 80010c6:	4920      	ldr	r1, [pc, #128]	; (8001148 <main+0x71c>)
 80010c8:	4290      	cmp	r0, r2
 80010ca:	6008      	str	r0, [r1, #0]
 80010cc:	f6bf ad92 	bge.w	8000bf4 <main+0x1c8>
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 80010d0:	1cda      	adds	r2, r3, #3
 80010d2:	0152      	lsls	r2, r2, #5
 80010d4:	b292      	uxth	r2, r2
 80010d6:	491b      	ldr	r1, [pc, #108]	; (8001144 <main+0x718>)
 if(32736 < calculate_addr)
 80010d8:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80010dc:	429a      	cmp	r2, r3
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 80010de:	800a      	strh	r2, [r1, #0]
 if(32736 < calculate_addr)
 80010e0:	d8da      	bhi.n	8001098 <main+0x66c>
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <main+0x724>)
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	491a      	ldr	r1, [pc, #104]	; (8001154 <main+0x728>)
 80010ec:	2320      	movs	r3, #32
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	7809      	ldrb	r1, [r1, #0]
 80010f2:	2302      	movs	r3, #2
 80010f4:	4630      	mov	r0, r6
 80010f6:	f001 fc89 	bl	8002a0c <HAL_I2C_Mem_Read>
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <main+0x724>)
 80010fc:	8b1a      	ldrh	r2, [r3, #24]
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <main+0x714>)
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	429a      	cmp	r2, r3
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <main+0x71c>)
 8001106:	6818      	ldr	r0, [r3, #0]
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 8001108:	f000 85c5 	beq.w	8001c96 <main+0x126a>
			  availble_employee = 0;   //  employee not availble
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <main+0x72c>)
 800110e:	701f      	strb	r7, [r3, #0]
 8001110:	e7c2      	b.n	8001098 <main+0x66c>
 8001112:	bf00      	nop
 8001114:	20000758 	.word	0x20000758
 8001118:	20000678 	.word	0x20000678
 800111c:	00e7eefe 	.word	0x00e7eefe
 8001120:	20000544 	.word	0x20000544
 8001124:	00737373 	.word	0x00737373
 8001128:	200005fc 	.word	0x200005fc
 800112c:	200005f9 	.word	0x200005f9
 8001130:	20000034 	.word	0x20000034
 8001134:	20000044 	.word	0x20000044
 8001138:	2000002c 	.word	0x2000002c
 800113c:	200005fa 	.word	0x200005fa
 8001140:	200006a2 	.word	0x200006a2
 8001144:	200005e0 	.word	0x200005e0
 8001148:	20000050 	.word	0x20000050
 800114c:	2000061c 	.word	0x2000061c
 8001150:	2000067c 	.word	0x2000067c
 8001154:	20000029 	.word	0x20000029
 8001158:	200005df 	.word	0x200005df
		Admin_screen();
 800115c:	f007 f9ce 	bl	80084fc <Admin_screen>
		curr_page = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	f889 3000 	strb.w	r3, [r9]
		if(isTouched(200, 300, 85, 205)){	// USER MANAGEMENT
 8001166:	23cd      	movs	r3, #205	; 0xcd
 8001168:	2255      	movs	r2, #85	; 0x55
 800116a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800116e:	20c8      	movs	r0, #200	; 0xc8
 8001170:	f000 ff36 	bl	8001fe0 <isTouched>
 8001174:	2800      	cmp	r0, #0
 8001176:	f040 81f8 	bne.w	800156a <main+0xb3e>
		if(isTouched(500, 600, 85, 205)){	// SEARCH ATTENDANCE
 800117a:	23cd      	movs	r3, #205	; 0xcd
 800117c:	2255      	movs	r2, #85	; 0x55
 800117e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8001182:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001186:	f000 ff2b 	bl	8001fe0 <isTouched>
		if(touchX >= 200 && touchX <= 300 && touchY >= 85 && touchY <= 205)
 800118a:	882b      	ldrh	r3, [r5, #0]
 800118c:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 8001190:	b291      	uxth	r1, r2
 8001192:	2964      	cmp	r1, #100	; 0x64
 8001194:	f200 80de 	bhi.w	8001354 <main+0x928>
 8001198:	f8bb 3000 	ldrh.w	r3, [fp]
 800119c:	3b55      	subs	r3, #85	; 0x55
 800119e:	b29b      	uxth	r3, r3
 80011a0:	2b78      	cmp	r3, #120	; 0x78
 80011a2:	f200 817f 	bhi.w	80014a4 <main+0xa78>
			User_Management();
 80011a6:	f007 fa4d 	bl	8008644 <User_Management>
		if(touchX >= 500 && touchX <= 600 && touchY >= 85 && touchY <= 205)  // SEARCH ATTENDANCE
 80011aa:	882b      	ldrh	r3, [r5, #0]
			curr_page = 3;
 80011ac:	2203      	movs	r2, #3
 80011ae:	f889 2000 	strb.w	r2, [r9]
		if(touchX >= 500 && touchX <= 600 && touchY >= 85 && touchY <= 205)  // SEARCH ATTENDANCE
 80011b2:	f5a3 72fa 	sub.w	r2, r3, #500	; 0x1f4
 80011b6:	2a64      	cmp	r2, #100	; 0x64
 80011b8:	f200 8172 	bhi.w	80014a0 <main+0xa74>
 80011bc:	f8bb 3000 	ldrh.w	r3, [fp]
 80011c0:	f1a3 0255 	sub.w	r2, r3, #85	; 0x55
 80011c4:	2a78      	cmp	r2, #120	; 0x78
 80011c6:	f200 8189 	bhi.w	80014dc <main+0xab0>
			attendence_search();
 80011ca:	f007 fe79 	bl	8008ec0 <attendence_search>
			for(ia=0;ia<5;ia++)
 80011ce:	4ba1      	ldr	r3, [pc, #644]	; (8001454 <main+0xa28>)
			scanned_EMPLO_ID =1;
 80011d0:	4aa1      	ldr	r2, [pc, #644]	; (8001458 <main+0xa2c>)
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 80011d2:	4ea2      	ldr	r6, [pc, #648]	; (800145c <main+0xa30>)
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 80011d4:	4ca2      	ldr	r4, [pc, #648]	; (8001460 <main+0xa34>)
			for(ia=0;ia<5;ia++)
 80011d6:	2100      	movs	r1, #0
 80011d8:	6019      	str	r1, [r3, #0]
			scanned_EMPLO_ID =1;
 80011da:	2301      	movs	r3, #1
 80011dc:	8013      	strh	r3, [r2, #0]
			  availble_employee = 0;   //  employee not availble
 80011de:	460f      	mov	r7, r1
 80011e0:	4608      	mov	r0, r1
 80011e2:	e018      	b.n	8001216 <main+0x7ea>
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 80011e4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 80011e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80011ec:	0089      	lsls	r1, r1, #2
 80011ee:	31c2      	adds	r1, #194	; 0xc2
 80011f0:	2300      	movs	r3, #0
 80011f2:	b289      	uxth	r1, r1
 80011f4:	4622      	mov	r2, r4
 80011f6:	20aa      	movs	r0, #170	; 0xaa
 80011f8:	f006 f89a 	bl	8007330 <print_string>
				scanned_EMPLO_ID++;
 80011fc:	4a96      	ldr	r2, [pc, #600]	; (8001458 <main+0xa2c>)
			for(ia=0;ia<5;ia++)
 80011fe:	4995      	ldr	r1, [pc, #596]	; (8001454 <main+0xa28>)
				scanned_EMPLO_ID++;
 8001200:	8813      	ldrh	r3, [r2, #0]
			for(ia=0;ia<5;ia++)
 8001202:	6809      	ldr	r1, [r1, #0]
				scanned_EMPLO_ID++;
 8001204:	3301      	adds	r3, #1
			for(ia=0;ia<5;ia++)
 8001206:	1c48      	adds	r0, r1, #1
 8001208:	4992      	ldr	r1, [pc, #584]	; (8001454 <main+0xa28>)
				scanned_EMPLO_ID++;
 800120a:	b29b      	uxth	r3, r3
			for(ia=0;ia<5;ia++)
 800120c:	2804      	cmp	r0, #4
				scanned_EMPLO_ID++;
 800120e:	8013      	strh	r3, [r2, #0]
			for(ia=0;ia<5;ia++)
 8001210:	6008      	str	r0, [r1, #0]
 8001212:	f73f ac9d 	bgt.w	8000b50 <main+0x124>
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 8001216:	1cda      	adds	r2, r3, #3
 8001218:	0152      	lsls	r2, r2, #5
 800121a:	b292      	uxth	r2, r2
 800121c:	4991      	ldr	r1, [pc, #580]	; (8001464 <main+0xa38>)
 if(32736 < calculate_addr)
 800121e:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 8001222:	429a      	cmp	r2, r3
				calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 8001224:	800a      	strh	r2, [r1, #0]
 if(32736 < calculate_addr)
 8001226:	d8dd      	bhi.n	80011e4 <main+0x7b8>
	HAL_I2C_Mem_Read(&hi2c1, dev_addr1, search_addr, 2, (uint8_t *) &(read_details), sizeof(read_details), 100);  ///  READ Employee_details
 8001228:	2364      	movs	r3, #100	; 0x64
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	4b8c      	ldr	r3, [pc, #560]	; (8001460 <main+0xa34>)
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	498d      	ldr	r1, [pc, #564]	; (8001468 <main+0xa3c>)
 8001232:	2320      	movs	r3, #32
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	7809      	ldrb	r1, [r1, #0]
 8001238:	2302      	movs	r3, #2
 800123a:	4630      	mov	r0, r6
 800123c:	f001 fbe6 	bl	8002a0c <HAL_I2C_Mem_Read>
	if((scanned_EMPLO_ID == read_details.rd_EMPLO_id))// && (scanned_UID == read_details.rd_EMPLO_RFID))
 8001240:	4b87      	ldr	r3, [pc, #540]	; (8001460 <main+0xa34>)
 8001242:	8b1a      	ldrh	r2, [r3, #24]
 8001244:	4b84      	ldr	r3, [pc, #528]	; (8001458 <main+0xa2c>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	f000 852f 	beq.w	8001cac <main+0x1280>
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 800124e:	4b81      	ldr	r3, [pc, #516]	; (8001454 <main+0xa28>)
 8001250:	6818      	ldr	r0, [r3, #0]
			  availble_employee = 0;   //  employee not availble
 8001252:	4b86      	ldr	r3, [pc, #536]	; (800146c <main+0xa40>)
 8001254:	701f      	strb	r7, [r3, #0]
 8001256:	e7c5      	b.n	80011e4 <main+0x7b8>
		if(touchX >= 450 && touchX <= 500 && touchY >= 355 && touchY <= 405) // CARD/THUMB
 8001258:	f5b2 7fb1 	cmp.w	r2, #354	; 0x162
 800125c:	f63f ae8b 	bhi.w	8000f76 <main+0x54a>
 8001260:	e6aa      	b.n	8000fb8 <main+0x58c>
		if(touchX >= 670 && touchX <= 720 && touchY >= 379 && touchY <= 439)//	494,720,379,439 // card
 8001262:	f5b2 7fbd 	cmp.w	r2, #378	; 0x17a
 8001266:	f67f ad40 	bls.w	8000cea <main+0x2be>
 800126a:	e522      	b.n	8000cb2 <main+0x286>
			if(touchX >= 494 && touchX <= 720)
 800126c:	882b      	ldrh	r3, [r5, #0]
 800126e:	f5a3 73f7 	sub.w	r3, r3, #494	; 0x1ee
 8001272:	b29b      	uxth	r3, r3
 8001274:	2be2      	cmp	r3, #226	; 0xe2
 8001276:	f63f ad5e 	bhi.w	8000d36 <main+0x30a>
				 if(touchY >= 154 && touchY <= 200)
 800127a:	f8bb 3000 	ldrh.w	r3, [fp]
 800127e:	f1a3 029a 	sub.w	r2, r3, #154	; 0x9a
 8001282:	2a2e      	cmp	r2, #46	; 0x2e
 8001284:	f240 8497 	bls.w	8001bb6 <main+0x118a>
				 if(touchY >= 154+40 && touchY <= 200+40)
 8001288:	f1a3 02c2 	sub.w	r2, r3, #194	; 0xc2
 800128c:	2a2e      	cmp	r2, #46	; 0x2e
 800128e:	f240 8469 	bls.w	8001b64 <main+0x1138>
				 if(touchY >= 154+80 && touchY <= 200+80)
 8001292:	3bea      	subs	r3, #234	; 0xea
 8001294:	2b2e      	cmp	r3, #46	; 0x2e
 8001296:	f240 8328 	bls.w	80018ea <main+0xebe>
		if(sub_page ==6)
 800129a:	4b75      	ldr	r3, [pc, #468]	; (8001470 <main+0xa44>)
 800129c:	781c      	ldrb	r4, [r3, #0]
 800129e:	e536      	b.n	8000d0e <main+0x2e2>
			if(touchX >= 494 && touchX <= 720)
 80012a0:	882b      	ldrh	r3, [r5, #0]
 80012a2:	f5a3 73f7 	sub.w	r3, r3, #494	; 0x1ee
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	2be2      	cmp	r3, #226	; 0xe2
 80012aa:	f63f ad44 	bhi.w	8000d36 <main+0x30a>
				 if(touchY >= 266 && touchY <= 312)
 80012ae:	f8bb 3000 	ldrh.w	r3, [fp]
 80012b2:	f5a3 7285 	sub.w	r2, r3, #266	; 0x10a
 80012b6:	2a2e      	cmp	r2, #46	; 0x2e
 80012b8:	f240 841c 	bls.w	8001af4 <main+0x10c8>
				 if(touchY >= 266+40 && touchY <= 312+40)
 80012bc:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80012c0:	2a2e      	cmp	r2, #46	; 0x2e
 80012c2:	f240 83f2 	bls.w	8001aaa <main+0x107e>
				 if(touchY >= 266+80 && touchY <= 312+80)
 80012c6:	f5a3 72ad 	sub.w	r2, r3, #346	; 0x15a
 80012ca:	2a2e      	cmp	r2, #46	; 0x2e
 80012cc:	f240 83c9 	bls.w	8001a62 <main+0x1036>
				 if(touchY >= 266+120 && touchY <= 312+120)
 80012d0:	f5a3 73c1 	sub.w	r3, r3, #386	; 0x182
 80012d4:	2b2e      	cmp	r3, #46	; 0x2e
 80012d6:	f240 83a2 	bls.w	8001a1e <main+0xff2>
		if(sub_page ==5)
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <main+0xa44>)
 80012dc:	781c      	ldrb	r4, [r3, #0]
 80012de:	e513      	b.n	8000d08 <main+0x2dc>
			if(touchX >= 197 && touchX <= 503)
 80012e0:	882b      	ldrh	r3, [r5, #0]
 80012e2:	3bc5      	subs	r3, #197	; 0xc5
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80012ea:	f63f ae99 	bhi.w	8001020 <main+0x5f4>
				 if(touchY >= 124 && touchY <= 170)
 80012ee:	f8bb 3000 	ldrh.w	r3, [fp]
 80012f2:	f1a3 027c 	sub.w	r2, r3, #124	; 0x7c
 80012f6:	2a2e      	cmp	r2, #46	; 0x2e
 80012f8:	f240 8369 	bls.w	80019ce <main+0xfa2>
				 if(touchY >= 124+40 && touchY <= 170+40)
 80012fc:	f1a3 02a4 	sub.w	r2, r3, #164	; 0xa4
 8001300:	2a2e      	cmp	r2, #46	; 0x2e
 8001302:	f240 833d 	bls.w	8001980 <main+0xf54>
				 if(touchY >= 124+80 && touchY <= 170+80)
 8001306:	3bcc      	subs	r3, #204	; 0xcc
 8001308:	2b2e      	cmp	r3, #46	; 0x2e
 800130a:	f240 8314 	bls.w	8001936 <main+0xf0a>
		if(sub_page ==3)
 800130e:	4b58      	ldr	r3, [pc, #352]	; (8001470 <main+0xa44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	e671      	b.n	8000ff8 <main+0x5cc>
			if(touchX >= 197 && touchX <= 503)
 8001314:	882b      	ldrh	r3, [r5, #0]
 8001316:	3bc5      	subs	r3, #197	; 0xc5
 8001318:	b29b      	uxth	r3, r3
 800131a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800131e:	f63f ae7f 	bhi.w	8001020 <main+0x5f4>
				 if(touchY >= 234 && touchY <= 280)
 8001322:	f8bb 3000 	ldrh.w	r3, [fp]
 8001326:	f1a3 02ea 	sub.w	r2, r3, #234	; 0xea
 800132a:	2a2e      	cmp	r2, #46	; 0x2e
 800132c:	f240 82ba 	bls.w	80018a4 <main+0xe78>
				 if(touchY >= 234+40 && touchY <= 280+40)
 8001330:	f5a3 7289 	sub.w	r2, r3, #274	; 0x112
 8001334:	2a2e      	cmp	r2, #46	; 0x2e
 8001336:	f240 8293 	bls.w	8001860 <main+0xe34>
				 if(touchY >= 234+80 && touchY <= 280+80)
 800133a:	f5a3 729d 	sub.w	r2, r3, #314	; 0x13a
 800133e:	2a2e      	cmp	r2, #46	; 0x2e
 8001340:	f240 824d 	bls.w	80017de <main+0xdb2>
				 if(touchY >= 234+120 && touchY <= 280+120)
 8001344:	f5a3 73b1 	sub.w	r3, r3, #354	; 0x162
 8001348:	2b2e      	cmp	r3, #46	; 0x2e
 800134a:	f240 8228 	bls.w	800179e <main+0xd72>
		if(sub_page ==2)
 800134e:	4b48      	ldr	r3, [pc, #288]	; (8001470 <main+0xa44>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	e64e      	b.n	8000ff2 <main+0x5c6>
		if(touchX >= 500 && touchX <= 600 && touchY >= 85 && touchY <= 205)  // SEARCH ATTENDANCE
 8001354:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001358:	2b64      	cmp	r3, #100	; 0x64
 800135a:	f67f af2f 	bls.w	80011bc <main+0x790>
	if(curr_page == 3)
 800135e:	f899 3000 	ldrb.w	r3, [r9]
 8001362:	f7ff bbd5 	b.w	8000b10 <main+0xe4>
							print_char(220+(pos*12),90,char_key[idx1][idx2],RED);
 8001366:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800136a:	0080      	lsls	r0, r0, #2
 800136c:	30dc      	adds	r0, #220	; 0xdc
 800136e:	7832      	ldrb	r2, [r6, #0]
 8001370:	b280      	uxth	r0, r0
 8001372:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001376:	215a      	movs	r1, #90	; 0x5a
 8001378:	f005 ffc8 	bl	800730c <print_char>
							*(emp_name+pos) =char_key[idx1][idx2];
 800137c:	483d      	ldr	r0, [pc, #244]	; (8001474 <main+0xa48>)
 800137e:	493e      	ldr	r1, [pc, #248]	; (8001478 <main+0xa4c>)
 8001380:	7803      	ldrb	r3, [r0, #0]
 8001382:	7832      	ldrb	r2, [r6, #0]
 8001384:	54ca      	strb	r2, [r1, r3]
						pos++;
 8001386:	f103 0c01 	add.w	ip, r3, #1
 800138a:	fa5f f18c 	uxtb.w	r1, ip
 800138e:	7001      	strb	r1, [r0, #0]
 8001390:	e540      	b.n	8000e14 <main+0x3e8>
		*(emp_name+pos+1)= '\0';
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <main+0xa4c>)
 8001394:	4419      	add	r1, r3
 8001396:	2300      	movs	r3, #0
 8001398:	704b      	strb	r3, [r1, #1]
	if(curr_page == 7)
 800139a:	f899 3000 	ldrb.w	r3, [r9]
 800139e:	f7ff bbc2 	b.w	8000b26 <main+0xfa>
		if(touchX >= 550 && touchX <= 650 && touchY >= 348 && touchY <= 408) 	// SCAN
 80013a2:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 80013a6:	d941      	bls.n	800142c <main+0xa00>
		if(touchX >= 550 && touchX <= 650 && touchY >= 248 && touchY <= 308) 	// Save
 80013a8:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80013ac:	f63f ae1c 	bhi.w	8000fe8 <main+0x5bc>
			HAL_Delay(500);
 80013b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013b4:	f000 fe86 	bl	80020c4 <HAL_Delay>
			scanned_EMPLO_ID = ++emp_id_read;
 80013b8:	4b30      	ldr	r3, [pc, #192]	; (800147c <main+0xa50>)
 80013ba:	4f27      	ldr	r7, [pc, #156]	; (8001458 <main+0xa2c>)
 80013bc:	781c      	ldrb	r4, [r3, #0]
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 80013be:	4a29      	ldr	r2, [pc, #164]	; (8001464 <main+0xa38>)
			strcpy(write_details.wr_EMPLO_name, emp_name);
 80013c0:	492d      	ldr	r1, [pc, #180]	; (8001478 <main+0xa4c>)
 80013c2:	482f      	ldr	r0, [pc, #188]	; (8001480 <main+0xa54>)
			scanned_EMPLO_ID = ++emp_id_read;
 80013c4:	3401      	adds	r4, #1
 80013c6:	b2e4      	uxtb	r4, r4
 80013c8:	701c      	strb	r4, [r3, #0]
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <main+0xa58>)
 80013cc:	681e      	ldr	r6, [r3, #0]
			scanned_UID = (((0xffffffff & issue_uid[0])<<24)|((0xffffffff & issue_uid[1])<<16)|((0xffffffff & issue_uid[2])<<8)|issue_uid[3]);
 80013ce:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <main+0xa5c>)
			scanned_EMPLO_ID = ++emp_id_read;
 80013d0:	b2a4      	uxth	r4, r4
 80013d2:	ba36      	rev	r6, r6
			scanned_UID = (((0xffffffff & issue_uid[0])<<24)|((0xffffffff & issue_uid[1])<<16)|((0xffffffff & issue_uid[2])<<8)|issue_uid[3]);
 80013d4:	601e      	str	r6, [r3, #0]
			calculate_addr = 128+(32*(scanned_EMPLO_ID-1));
 80013d6:	1ce3      	adds	r3, r4, #3
 80013d8:	015b      	lsls	r3, r3, #5
 80013da:	8013      	strh	r3, [r2, #0]
			scanned_EMPLO_ID = ++emp_id_read;
 80013dc:	803c      	strh	r4, [r7, #0]
			strcpy(write_details.wr_EMPLO_name, emp_name);
 80013de:	f008 fc4b 	bl	8009c78 <strcpy>
			write_details.wr_EMPLO_desig = desgn_id;
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <main+0xa60>)
			write_details.wr_EMPLO_id = scanned_EMPLO_ID;
 80013e4:	4a26      	ldr	r2, [pc, #152]	; (8001480 <main+0xa54>)
			write_details.wr_EMPLO_desig = desgn_id;
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	7693      	strb	r3, [r2, #26]
			write_details.wr_EMPLO_role = role_id;
 80013ea:	4b29      	ldr	r3, [pc, #164]	; (8001490 <main+0xa64>)
			write_details.wr_EMPLO_id = scanned_EMPLO_ID;
 80013ec:	8314      	strh	r4, [r2, #24]
			write_details.wr_EMPLO_role = role_id;
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	76d3      	strb	r3, [r2, #27]
			write_details.wr_employee_code = 'E';
 80013f2:	2345      	movs	r3, #69	; 0x45
			write_details.wr_EMPLO_RFID = scanned_UID;
 80013f4:	61d6      	str	r6, [r2, #28]
			write_details.wr_employee_code = 'E';
 80013f6:	75d3      	strb	r3, [r2, #23]
			add_Employee();
 80013f8:	f7ff fad2 	bl	80009a0 <add_Employee>
			HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&scanned_EMPLO_ID,1,100);
 80013fc:	2301      	movs	r3, #1
 80013fe:	2064      	movs	r0, #100	; 0x64
 8001400:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <main+0xa68>)
 8001406:	9700      	str	r7, [sp, #0]
 8001408:	7819      	ldrb	r1, [r3, #0]
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <main+0xa30>)
 800140c:	2302      	movs	r3, #2
 800140e:	2200      	movs	r2, #0
 8001410:	f001 fa08 	bl	8002824 <HAL_I2C_Mem_Write>
			Set_Font(&Font12x18);
 8001414:	4820      	ldr	r0, [pc, #128]	; (8001498 <main+0xa6c>)
 8001416:	f004 fe23 	bl	8006060 <Set_Font>
			print_string(550,240,"saved",RED);
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <main+0xa70>)
 800141c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001420:	21f0      	movs	r1, #240	; 0xf0
 8001422:	f240 2026 	movw	r0, #550	; 0x226
 8001426:	f005 ff83 	bl	8007330 <print_string>
 800142a:	e5d2      	b.n	8000fd2 <main+0x5a6>
			read_card();
 800142c:	f7ff f90c 	bl	8000648 <read_card>
		if(touchX >= 550 && touchX <= 650 && touchY >= 248 && touchY <= 308) 	// Save
 8001430:	882b      	ldrh	r3, [r5, #0]
 8001432:	f2a3 2226 	subw	r2, r3, #550	; 0x226
 8001436:	2a64      	cmp	r2, #100	; 0x64
 8001438:	f63f adcc 	bhi.w	8000fd4 <main+0x5a8>
 800143c:	f8bb 3000 	ldrh.w	r3, [fp]
 8001440:	e5c4      	b.n	8000fcc <main+0x5a0>
		if(touchX >= 327 && touchX <= 580 && touchY >= 280 && touchY <= 360) // ALL USER
 8001442:	f5b2 7f8c 	cmp.w	r2, #280	; 0x118
 8001446:	f4ff ad0b 	bcc.w	8000e60 <main+0x434>
 800144a:	f5b2 7fb4 	cmp.w	r2, #360	; 0x168
 800144e:	f63f ab52 	bhi.w	8000af6 <main+0xca>
 8001452:	e60c      	b.n	800106e <main+0x642>
 8001454:	20000050 	.word	0x20000050
 8001458:	200006a2 	.word	0x200006a2
 800145c:	2000061c 	.word	0x2000061c
 8001460:	2000067c 	.word	0x2000067c
 8001464:	200005e0 	.word	0x200005e0
 8001468:	20000029 	.word	0x20000029
 800146c:	200005df 	.word	0x200005df
 8001470:	20000758 	.word	0x20000758
 8001474:	20000679 	.word	0x20000679
 8001478:	200005fc 	.word	0x200005fc
 800147c:	200005fa 	.word	0x200005fa
 8001480:	20000850 	.word	0x20000850
 8001484:	20000674 	.word	0x20000674
 8001488:	200006a4 	.word	0x200006a4
 800148c:	200005f8 	.word	0x200005f8
 8001490:	200006a0 	.word	0x200006a0
 8001494:	20000028 	.word	0x20000028
 8001498:	20000544 	.word	0x20000544
 800149c:	0800b058 	.word	0x0800b058
 80014a0:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
		if(touchX >= 200 && touchX <= 300 && touchY >= 275 && touchY <= 395)  // USER ROLE
 80014a4:	b292      	uxth	r2, r2
 80014a6:	2a64      	cmp	r2, #100	; 0x64
 80014a8:	f63f af59 	bhi.w	800135e <main+0x932>
 80014ac:	f8bb 3000 	ldrh.w	r3, [fp]
 80014b0:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 80014b4:	f67f af53 	bls.w	800135e <main+0x932>
 80014b8:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 80014bc:	f4bf af4f 	bcs.w	800135e <main+0x932>
			Role_Page();
 80014c0:	f007 fe66 	bl	8009190 <Role_Page>
		if(touchX >= 500 && touchX <= 600 && touchY >= 275 && touchY <= 395)  // SETTING
 80014c4:	882b      	ldrh	r3, [r5, #0]
 80014c6:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80014ca:	b29b      	uxth	r3, r3
			curr_page = 8;
 80014cc:	2208      	movs	r2, #8
		if(touchX >= 500 && touchX <= 600 && touchY >= 275 && touchY <= 395)  // SETTING
 80014ce:	2b64      	cmp	r3, #100	; 0x64
			curr_page = 8;
 80014d0:	f889 2000 	strb.w	r2, [r9]
		if(touchX >= 500 && touchX <= 600 && touchY >= 275 && touchY <= 395)  // SETTING
 80014d4:	f63f ab2b 	bhi.w	8000b2e <main+0x102>
 80014d8:	f8bb 3000 	ldrh.w	r3, [fp]
 80014dc:	f46f 7789 	mvn.w	r7, #274	; 0x112
 80014e0:	443b      	add	r3, r7
 80014e2:	2b78      	cmp	r3, #120	; 0x78
 80014e4:	f63f af3b 	bhi.w	800135e <main+0x932>
}

void erase_EEPROM (void)
{
	uint16_t erase_addr = 0;
	uint64_t erase_data = 0xffffffffffffffff;
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	e9cd 2308 	strd	r2, r3, [sp, #32]

	while(erase_addr<1024)
	//while(erase_addr<32768)
	{
	  HAL_I2C_Mem_Write(&hi2c1, dev_addr, erase_addr, 2, (uint8_t *) &(erase_data), sizeof(erase_data), 100);  ///  write employee_id
 80014f4:	f8df 8334 	ldr.w	r8, [pc, #820]	; 800182c <main+0xe00>
	uint16_t erase_addr = 0;
 80014f8:	2400      	movs	r4, #0
	  HAL_I2C_Mem_Write(&hi2c1, dev_addr, erase_addr, 2, (uint8_t *) &(erase_data), sizeof(erase_data), 100);  ///  write employee_id
 80014fa:	2664      	movs	r6, #100	; 0x64
 80014fc:	2708      	movs	r7, #8
 80014fe:	e9cd 7601 	strd	r7, r6, [sp, #4]
 8001502:	ab08      	add	r3, sp, #32
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4bc7      	ldr	r3, [pc, #796]	; (8001824 <main+0xdf8>)
 8001508:	4622      	mov	r2, r4
 800150a:	7819      	ldrb	r1, [r3, #0]
 800150c:	4640      	mov	r0, r8
 800150e:	2302      	movs	r3, #2
 8001510:	f001 f988 	bl	8002824 <HAL_I2C_Mem_Write>
		HAL_Delay(5);
 8001514:	2005      	movs	r0, #5
 8001516:	f000 fdd5 	bl	80020c4 <HAL_Delay>
		erase_addr += 8;
 800151a:	3408      	adds	r4, #8
		erase_addr_cnt++;
 800151c:	f8ba 3000 	ldrh.w	r3, [sl]
		erase_addr += 8;
 8001520:	b2a4      	uxth	r4, r4
		erase_addr_cnt++;
 8001522:	3301      	adds	r3, #1
	while(erase_addr<1024)
 8001524:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		erase_addr_cnt++;
 8001528:	f8aa 3000 	strh.w	r3, [sl]
	while(erase_addr<1024)
 800152c:	d1e7      	bne.n	80014fe <main+0xad2>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2104      	movs	r1, #4
 8001532:	48bd      	ldr	r0, [pc, #756]	; (8001828 <main+0xdfc>)
 8001534:	f000 ff28 	bl	8002388 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8001538:	20c8      	movs	r0, #200	; 0xc8
 800153a:	f000 fdc3 	bl	80020c4 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 800153e:	48ba      	ldr	r0, [pc, #744]	; (8001828 <main+0xdfc>)
 8001540:	2200      	movs	r2, #0
 8001542:	2104      	movs	r1, #4
 8001544:	f000 ff20 	bl	8002388 <HAL_GPIO_WritePin>
				HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&val,1,100);
 8001548:	ab08      	add	r3, sp, #32
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	2301      	movs	r3, #1
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	4bb4      	ldr	r3, [pc, #720]	; (8001824 <main+0xdf8>)
 8001552:	9602      	str	r6, [sp, #8]
 8001554:	7819      	ldrb	r1, [r3, #0]
 8001556:	48b5      	ldr	r0, [pc, #724]	; (800182c <main+0xe00>)
				int val=0;
 8001558:	2200      	movs	r2, #0
				HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&val,1,100);
 800155a:	2302      	movs	r3, #2
				int val=0;
 800155c:	9208      	str	r2, [sp, #32]
				HAL_I2C_Mem_Write(&hi2c1,dev_addr,0x00,2,(uint8_t *)&val,1,100);
 800155e:	f001 f961 	bl	8002824 <HAL_I2C_Mem_Write>
	if(curr_page == 3)
 8001562:	f899 3000 	ldrb.w	r3, [r9]
 8001566:	f7ff bad3 	b.w	8000b10 <main+0xe4>
			User_Management();
 800156a:	f007 f86b 	bl	8008644 <User_Management>
			curr_page = 3;
 800156e:	2303      	movs	r3, #3
 8001570:	f889 3000 	strb.w	r3, [r9]
 8001574:	e601      	b.n	800117a <main+0x74e>
		if(touchX >= 225 && touchX <= 545 && touchY >= 385+y && touchY <= 435+y)		// space 255,545,385+y,435+y
 8001576:	f1a3 02e1 	sub.w	r2, r3, #225	; 0xe1
 800157a:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
 800157e:	f200 83a6 	bhi.w	8001cce <main+0x12a2>
 8001582:	f8bb 2000 	ldrh.w	r2, [fp]
 8001586:	f5b2 7fd0 	cmp.w	r2, #416	; 0x1a0
 800158a:	f4ff ac0f 	bcc.w	8000dac <main+0x380>
 800158e:	f5b2 7fe9 	cmp.w	r2, #466	; 0x1d2
 8001592:	f63f ac0b 	bhi.w	8000dac <main+0x380>
			print_char(220+(pos*12),85,32,0xe7eefe);
 8001596:	4ca6      	ldr	r4, [pc, #664]	; (8001830 <main+0xe04>)
			HAL_Delay(100);
 8001598:	2064      	movs	r0, #100	; 0x64
 800159a:	f000 fd93 	bl	80020c4 <HAL_Delay>
			print_char(220+(pos*12),85,32,0xe7eefe);
 800159e:	7823      	ldrb	r3, [r4, #0]
 80015a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015a4:	0098      	lsls	r0, r3, #2
 80015a6:	2220      	movs	r2, #32
 80015a8:	4ba2      	ldr	r3, [pc, #648]	; (8001834 <main+0xe08>)
 80015aa:	2155      	movs	r1, #85	; 0x55
 80015ac:	30dc      	adds	r0, #220	; 0xdc
 80015ae:	f005 fead 	bl	800730c <print_char>
			*(emp_name+pos) =32;
 80015b2:	7823      	ldrb	r3, [r4, #0]
 80015b4:	49a0      	ldr	r1, [pc, #640]	; (8001838 <main+0xe0c>)
 80015b6:	2220      	movs	r2, #32
 80015b8:	54ca      	strb	r2, [r1, r3]
			pos++;
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2d9      	uxtb	r1, r3
		if(touchX >= 615 && touchX <= 695 && touchY >= 325+y && touchY <= 375+y)  //backspace  615,695,325+y,375+y
 80015be:	882b      	ldrh	r3, [r5, #0]
			pos++;
 80015c0:	7021      	strb	r1, [r4, #0]
		if(touchX >= 615 && touchX <= 695 && touchY >= 325+y && touchY <= 375+y)  //backspace  615,695,325+y,375+y
 80015c2:	f2a3 2267 	subw	r2, r3, #615	; 0x267
 80015c6:	2a50      	cmp	r2, #80	; 0x50
 80015c8:	f63f abf2 	bhi.w	8000db0 <main+0x384>
 80015cc:	f8bb 2000 	ldrh.w	r2, [fp]
 80015d0:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 80015d4:	b292      	uxth	r2, r2
 80015d6:	2a32      	cmp	r2, #50	; 0x32
 80015d8:	f63f abea 	bhi.w	8000db0 <main+0x384>
			pos--;
 80015dc:	4c94      	ldr	r4, [pc, #592]	; (8001830 <main+0xe04>)
			fill_area(220+(pos*12),235+(pos*12),85,115,0xe7eefe);
 80015de:	4a95      	ldr	r2, [pc, #596]	; (8001834 <main+0xe08>)
 80015e0:	9200      	str	r2, [sp, #0]
			pos--;
 80015e2:	1e4b      	subs	r3, r1, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	7023      	strb	r3, [r4, #0]
			fill_area(220+(pos*12),235+(pos*12),85,115,0xe7eefe);
 80015e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015ec:	0098      	lsls	r0, r3, #2
 80015ee:	f100 01eb 	add.w	r1, r0, #235	; 0xeb
 80015f2:	2373      	movs	r3, #115	; 0x73
 80015f4:	2255      	movs	r2, #85	; 0x55
 80015f6:	30dc      	adds	r0, #220	; 0xdc
 80015f8:	f004 fde4 	bl	80061c4 <fill_area>
				if(touchX >= x1+105+x && touchX <= x1+155+x && touchY >= y1+205+y && touchY <= y1+255+y)  //keys x1+105+x,x1+155+x,y1+205+y,y1+255+y
 80015fc:	882b      	ldrh	r3, [r5, #0]
							print_char(220+(pos*12),90,char_key[idx1][idx2],RED);
 80015fe:	7821      	ldrb	r1, [r4, #0]
 8001600:	f7ff bbd6 	b.w	8000db0 <main+0x384>
			User_Management();
 8001604:	f007 f81e 	bl	8008644 <User_Management>
			curr_page = 3;
 8001608:	2303      	movs	r3, #3
 800160a:	f889 3000 	strb.w	r3, [r9]
 800160e:	e4eb      	b.n	8000fe8 <main+0x5bc>
			User_Management();
 8001610:	f007 f818 	bl	8008644 <User_Management>
			curr_page = 3;
 8001614:	2303      	movs	r3, #3
 8001616:	f889 3000 	strb.w	r3, [r9]
 800161a:	f7ff bb70 	b.w	8000cfe <main+0x2d2>
				sub_page=0;
 800161e:	4a87      	ldr	r2, [pc, #540]	; (800183c <main+0xe10>)
 8001620:	7013      	strb	r3, [r2, #0]
				fill_area(494,720,284,330+40,PURPLE);
 8001622:	4b87      	ldr	r3, [pc, #540]	; (8001840 <main+0xe14>)
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800162a:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800162e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8001632:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8001636:	f004 fdc5 	bl	80061c4 <fill_area>
				NewUser_Role1();
 800163a:	f007 ff11 	bl	8009460 <NewUser_Role1>
		if(touchX >= 8 && touchX <= 72 && touchY >=  10&& touchY <= 70) //back
 800163e:	882b      	ldrh	r3, [r5, #0]
 8001640:	f7ff bb53 	b.w	8000cea <main+0x2be>
				sub_page=0;
 8001644:	4a7d      	ldr	r2, [pc, #500]	; (800183c <main+0xe10>)
 8001646:	7013      	strb	r3, [r2, #0]
				fill_area(197,503,244,300+40,WHITE);
 8001648:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	22f4      	movs	r2, #244	; 0xf4
 8001650:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001654:	f240 11f7 	movw	r1, #503	; 0x1f7
 8001658:	20c5      	movs	r0, #197	; 0xc5
 800165a:	f004 fdb3 	bl	80061c4 <fill_area>
				NewUser_Role();
 800165e:	f007 f941 	bl	80088e4 <NewUser_Role>
		if(touchX >= 550 && touchX <= 650 && touchY >= 348 && touchY <= 408) 	// SCAN
 8001662:	882b      	ldrh	r3, [r5, #0]
 8001664:	e4a8      	b.n	8000fb8 <main+0x58c>
				sub_page=0;
 8001666:	4a75      	ldr	r2, [pc, #468]	; (800183c <main+0xe10>)
 8001668:	7013      	strb	r3, [r2, #0]
				fill_area(494,720,266,320+120,PURPLE);
 800166a:	4b75      	ldr	r3, [pc, #468]	; (8001840 <main+0xe14>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8001672:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8001676:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800167a:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 800167e:	f004 fda1 	bl	80061c4 <fill_area>
				NewUser_Role1();
 8001682:	f007 feed 	bl	8009460 <NewUser_Role1>
				NewUser_Card1();
 8001686:	f007 ff41 	bl	800950c <NewUser_Card1>
 800168a:	f7ff bae2 	b.w	8000c52 <main+0x226>
				sub_page=0;
 800168e:	4b6b      	ldr	r3, [pc, #428]	; (800183c <main+0xe10>)
 8001690:	701c      	strb	r4, [r3, #0]
				fill_area(197,503,124,170+80,WHITE);
 8001692:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	227c      	movs	r2, #124	; 0x7c
 800169a:	23fa      	movs	r3, #250	; 0xfa
 800169c:	f240 11f7 	movw	r1, #503	; 0x1f7
 80016a0:	20c5      	movs	r0, #197	; 0xc5
 80016a2:	f004 fd8f 	bl	80061c4 <fill_area>
				NewUser_Name();
 80016a6:	f007 f853 	bl	8008750 <NewUser_Name>
				NewUser_Desig(0,0,0,0);
 80016aa:	4623      	mov	r3, r4
 80016ac:	4622      	mov	r2, r4
 80016ae:	4621      	mov	r1, r4
 80016b0:	4620      	mov	r0, r4
 80016b2:	f007 f899 	bl	80087e8 <NewUser_Desig>
 80016b6:	e454      	b.n	8000f62 <main+0x536>
				sub_page=0;
 80016b8:	4a60      	ldr	r2, [pc, #384]	; (800183c <main+0xe10>)
 80016ba:	7013      	strb	r3, [r2, #0]
				fill_area(494,720,154,200+80,PURPLE);
 80016bc:	4b60      	ldr	r3, [pc, #384]	; (8001840 <main+0xe14>)
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	229a      	movs	r2, #154	; 0x9a
 80016c2:	f44f 738c 	mov.w	r3, #280	; 0x118
 80016c6:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80016ca:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 80016ce:	f004 fd79 	bl	80061c4 <fill_area>
				NewUser_Desig1();
 80016d2:	f007 fe77 	bl	80093c4 <NewUser_Desig1>
				SaveAndExit();
 80016d6:	f007 ff6f 	bl	80095b8 <SaveAndExit>
 80016da:	f7ff bae0 	b.w	8000c9e <main+0x272>
				sub_page=0;
 80016de:	4a57      	ldr	r2, [pc, #348]	; (800183c <main+0xe10>)
 80016e0:	7013      	strb	r3, [r2, #0]
				fill_area(197,503,234,280+120,WHITE);
 80016e2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80016e6:	22ea      	movs	r2, #234	; 0xea
 80016e8:	f240 11f7 	movw	r1, #503	; 0x1f7
 80016ec:	20c5      	movs	r0, #197	; 0xc5
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80016f4:	f004 fd66 	bl	80061c4 <fill_area>
				NewUser_Role();
 80016f8:	f007 f8f4 	bl	80088e4 <NewUser_Role>
				NewUser_Card();
 80016fc:	f007 f958 	bl	80089b0 <NewUser_Card>
 8001700:	e40b      	b.n	8000f1a <main+0x4ee>
						fill_area(499,655,384,434,0xe7eefe);
 8001702:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <main+0xe08>)
 8001704:	9300      	str	r3, [sp, #0]
						card_ptr = dropdown_CardThumb[1];
 8001706:	4b4f      	ldr	r3, [pc, #316]	; (8001844 <main+0xe18>)
 8001708:	4c4f      	ldr	r4, [pc, #316]	; (8001848 <main+0xe1c>)
 800170a:	685b      	ldr	r3, [r3, #4]
						active_role =1;
 800170c:	4e4f      	ldr	r6, [pc, #316]	; (800184c <main+0xe20>)
						card_ptr = dropdown_CardThumb[1];
 800170e:	6023      	str	r3, [r4, #0]
						active_role =1;
 8001710:	2301      	movs	r3, #1
 8001712:	7033      	strb	r3, [r6, #0]
						fill_area(499,655,384,434,0xe7eefe);
 8001714:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001718:	f240 218f 	movw	r1, #655	; 0x28f
 800171c:	f240 10f3 	movw	r0, #499	; 0x1f3
 8001720:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8001724:	f004 fd4e 	bl	80061c4 <fill_area>
						print_string(510,400,card_ptr,0x737373);
 8001728:	6822      	ldr	r2, [r4, #0]
 800172a:	4b49      	ldr	r3, [pc, #292]	; (8001850 <main+0xe24>)
 800172c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001730:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001734:	f005 fdfc 	bl	8007330 <print_string>
					 dropdown(&dropdown_CardThumb[0],2,297,217,50);
 8001738:	2332      	movs	r3, #50	; 0x32
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	4841      	ldr	r0, [pc, #260]	; (8001844 <main+0xe18>)
 800173e:	23d9      	movs	r3, #217	; 0xd9
 8001740:	f240 1229 	movw	r2, #297	; 0x129
 8001744:	2102      	movs	r1, #2
 8001746:	f007 fb5f 	bl	8008e08 <dropdown>
 800174a:	f7ff baf4 	b.w	8000d36 <main+0x30a>
						fill_area(499,655,384,434,0xe7eefe);
 800174e:	4b39      	ldr	r3, [pc, #228]	; (8001834 <main+0xe08>)
 8001750:	9300      	str	r3, [sp, #0]
					 card_ptr = dropdown_CardThumb[0];
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <main+0xe18>)
 8001754:	4c3c      	ldr	r4, [pc, #240]	; (8001848 <main+0xe1c>)
 8001756:	681b      	ldr	r3, [r3, #0]
						active_role =0;
 8001758:	4e3c      	ldr	r6, [pc, #240]	; (800184c <main+0xe20>)
					 card_ptr = dropdown_CardThumb[0];
 800175a:	6023      	str	r3, [r4, #0]
						active_role =0;
 800175c:	2300      	movs	r3, #0
						fill_area(499,655,384,434,0xe7eefe);
 800175e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001762:	f240 218f 	movw	r1, #655	; 0x28f
 8001766:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =0;
 800176a:	7033      	strb	r3, [r6, #0]
						fill_area(499,655,384,434,0xe7eefe);
 800176c:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8001770:	f004 fd28 	bl	80061c4 <fill_area>
						print_string(510,400,card_ptr,0x737373);
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <main+0xe24>)
 8001776:	6822      	ldr	r2, [r4, #0]
 8001778:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800177c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001780:	f005 fdd6 	bl	8007330 <print_string>
					 dropdown(&dropdown_CardThumb[0],2,297,217,50);
 8001784:	2332      	movs	r3, #50	; 0x32
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	482e      	ldr	r0, [pc, #184]	; (8001844 <main+0xe18>)
 800178a:	23d9      	movs	r3, #217	; 0xd9
 800178c:	f240 1229 	movw	r2, #297	; 0x129
 8001790:	2102      	movs	r1, #2
 8001792:	f007 fb39 	bl	8008e08 <dropdown>
				 if(touchY >= 284+40 && touchY <= 330+40)
 8001796:	f8bb 3000 	ldrh.w	r3, [fp]
 800179a:	f7ff bac7 	b.w	8000d2c <main+0x300>
					 	fill_area(210,400,180,210,0xe7eefe);
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <main+0xe08>)
					 desgn_ptr =	dropdown_desgn[3];
 80017a0:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <main+0xe28>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80017a2:	9300      	str	r3, [sp, #0]
					 desgn_ptr =	dropdown_desgn[3];
 80017a4:	4e2c      	ldr	r6, [pc, #176]	; (8001858 <main+0xe2c>)
 80017a6:	68d2      	ldr	r2, [r2, #12]
 80017a8:	6032      	str	r2, [r6, #0]
						active_role =3;
 80017aa:	4a28      	ldr	r2, [pc, #160]	; (800184c <main+0xe20>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80017ac:	23d2      	movs	r3, #210	; 0xd2
						active_role =3;
 80017ae:	2403      	movs	r4, #3
					 	fill_area(210,400,180,210,0xe7eefe);
 80017b0:	4618      	mov	r0, r3
						active_role =3;
 80017b2:	7014      	strb	r4, [r2, #0]
					 	fill_area(210,400,180,210,0xe7eefe);
 80017b4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017b8:	22b4      	movs	r2, #180	; 0xb4
 80017ba:	f004 fd03 	bl	80061c4 <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 80017be:	4b24      	ldr	r3, [pc, #144]	; (8001850 <main+0xe24>)
 80017c0:	6832      	ldr	r2, [r6, #0]
 80017c2:	21be      	movs	r1, #190	; 0xbe
 80017c4:	20dc      	movs	r0, #220	; 0xdc
 80017c6:	f005 fdb3 	bl	8007330 <print_string>
					 dropdown(&dropdown_desgn[0],4,0,0,0);
 80017ca:	2300      	movs	r3, #0
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4820      	ldr	r0, [pc, #128]	; (8001854 <main+0xe28>)
 80017d2:	2104      	movs	r1, #4
 80017d4:	f007 fb18 	bl	8008e08 <dropdown>
					 desgn_id =3;
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <main+0xe30>)
 80017da:	701c      	strb	r4, [r3, #0]
 80017dc:	e5b7      	b.n	800134e <main+0x922>
					 	fill_area(210,400,180,210,0xe7eefe);
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <main+0xe08>)
					 desgn_ptr =	dropdown_desgn[2];
 80017e0:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <main+0xe28>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80017e2:	9300      	str	r3, [sp, #0]
					 desgn_ptr =	dropdown_desgn[2];
 80017e4:	4e1c      	ldr	r6, [pc, #112]	; (8001858 <main+0xe2c>)
 80017e6:	6892      	ldr	r2, [r2, #8]
 80017e8:	6032      	str	r2, [r6, #0]
						active_role =2;
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <main+0xe20>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80017ec:	23d2      	movs	r3, #210	; 0xd2
						active_role =2;
 80017ee:	2402      	movs	r4, #2
					 	fill_area(210,400,180,210,0xe7eefe);
 80017f0:	4618      	mov	r0, r3
						active_role =2;
 80017f2:	7014      	strb	r4, [r2, #0]
					 	fill_area(210,400,180,210,0xe7eefe);
 80017f4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017f8:	22b4      	movs	r2, #180	; 0xb4
 80017fa:	f004 fce3 	bl	80061c4 <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 80017fe:	4b14      	ldr	r3, [pc, #80]	; (8001850 <main+0xe24>)
 8001800:	6832      	ldr	r2, [r6, #0]
 8001802:	21be      	movs	r1, #190	; 0xbe
 8001804:	20dc      	movs	r0, #220	; 0xdc
 8001806:	f005 fd93 	bl	8007330 <print_string>
					 dropdown(&dropdown_desgn[0],4,0,0,0);
 800180a:	2300      	movs	r3, #0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	4810      	ldr	r0, [pc, #64]	; (8001854 <main+0xe28>)
 8001812:	2104      	movs	r1, #4
 8001814:	f007 faf8 	bl	8008e08 <dropdown>
					 desgn_id =2;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <main+0xe30>)
 800181a:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 234+120 && touchY <= 280+120)
 800181c:	f8bb 3000 	ldrh.w	r3, [fp]
 8001820:	e590      	b.n	8001344 <main+0x918>
 8001822:	bf00      	nop
 8001824:	20000028 	.word	0x20000028
 8001828:	40020400 	.word	0x40020400
 800182c:	2000061c 	.word	0x2000061c
 8001830:	20000679 	.word	0x20000679
 8001834:	00e7eefe 	.word	0x00e7eefe
 8001838:	200005fc 	.word	0x200005fc
 800183c:	20000758 	.word	0x20000758
 8001840:	00800010 	.word	0x00800010
 8001844:	2000002c 	.word	0x2000002c
 8001848:	20000000 	.word	0x20000000
 800184c:	200005de 	.word	0x200005de
 8001850:	00737373 	.word	0x00737373
 8001854:	20000034 	.word	0x20000034
 8001858:	20000024 	.word	0x20000024
 800185c:	200005f8 	.word	0x200005f8
					 	fill_area(210,400,180,210,0xe7eefe);
 8001860:	4bb7      	ldr	r3, [pc, #732]	; (8001b40 <main+0x1114>)
					 desgn_ptr =	dropdown_desgn[1];
 8001862:	4ab8      	ldr	r2, [pc, #736]	; (8001b44 <main+0x1118>)
					 	fill_area(210,400,180,210,0xe7eefe);
 8001864:	9300      	str	r3, [sp, #0]
					 desgn_ptr =	dropdown_desgn[1];
 8001866:	4eb8      	ldr	r6, [pc, #736]	; (8001b48 <main+0x111c>)
 8001868:	6852      	ldr	r2, [r2, #4]
 800186a:	6032      	str	r2, [r6, #0]
						active_role =1;
 800186c:	4ab7      	ldr	r2, [pc, #732]	; (8001b4c <main+0x1120>)
					 	fill_area(210,400,180,210,0xe7eefe);
 800186e:	23d2      	movs	r3, #210	; 0xd2
						active_role =1;
 8001870:	2401      	movs	r4, #1
					 	fill_area(210,400,180,210,0xe7eefe);
 8001872:	4618      	mov	r0, r3
						active_role =1;
 8001874:	7014      	strb	r4, [r2, #0]
					 	fill_area(210,400,180,210,0xe7eefe);
 8001876:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800187a:	22b4      	movs	r2, #180	; 0xb4
 800187c:	f004 fca2 	bl	80061c4 <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 8001880:	4bb3      	ldr	r3, [pc, #716]	; (8001b50 <main+0x1124>)
 8001882:	6832      	ldr	r2, [r6, #0]
 8001884:	21be      	movs	r1, #190	; 0xbe
 8001886:	20dc      	movs	r0, #220	; 0xdc
 8001888:	f005 fd52 	bl	8007330 <print_string>
					 dropdown(&dropdown_desgn[0],4,0,0,0);
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	48ac      	ldr	r0, [pc, #688]	; (8001b44 <main+0x1118>)
 8001894:	2104      	movs	r1, #4
 8001896:	f007 fab7 	bl	8008e08 <dropdown>
					 desgn_id =1;
 800189a:	4bae      	ldr	r3, [pc, #696]	; (8001b54 <main+0x1128>)
 800189c:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 234+80 && touchY <= 280+80)
 800189e:	f8bb 3000 	ldrh.w	r3, [fp]
 80018a2:	e54a      	b.n	800133a <main+0x90e>
						active_role =0;
 80018a4:	4aa9      	ldr	r2, [pc, #676]	; (8001b4c <main+0x1120>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80018a6:	4ba6      	ldr	r3, [pc, #664]	; (8001b40 <main+0x1114>)
 80018a8:	9300      	str	r3, [sp, #0]
						active_role =0;
 80018aa:	2400      	movs	r4, #0
						desgn_ptr =	dropdown_desgn[0];
 80018ac:	49a6      	ldr	r1, [pc, #664]	; (8001b48 <main+0x111c>)
						active_role =0;
 80018ae:	7014      	strb	r4, [r2, #0]
						desgn_ptr =	dropdown_desgn[0];
 80018b0:	4aa4      	ldr	r2, [pc, #656]	; (8001b44 <main+0x1118>)
					 	fill_area(210,400,180,210,0xe7eefe);
 80018b2:	23d2      	movs	r3, #210	; 0xd2
						desgn_ptr =	dropdown_desgn[0];
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	600a      	str	r2, [r1, #0]
 80018b8:	460e      	mov	r6, r1
					 	fill_area(210,400,180,210,0xe7eefe);
 80018ba:	4618      	mov	r0, r3
 80018bc:	22b4      	movs	r2, #180	; 0xb4
 80018be:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80018c2:	f004 fc7f 	bl	80061c4 <fill_area>
						print_string(220,190,desgn_ptr,0x737373);
 80018c6:	4ba2      	ldr	r3, [pc, #648]	; (8001b50 <main+0x1124>)
 80018c8:	6832      	ldr	r2, [r6, #0]
 80018ca:	21be      	movs	r1, #190	; 0xbe
 80018cc:	20dc      	movs	r0, #220	; 0xdc
 80018ce:	f005 fd2f 	bl	8007330 <print_string>
						dropdown(&dropdown_desgn[0],4,0,0,0);
 80018d2:	4623      	mov	r3, r4
 80018d4:	489b      	ldr	r0, [pc, #620]	; (8001b44 <main+0x1118>)
 80018d6:	9400      	str	r4, [sp, #0]
 80018d8:	4622      	mov	r2, r4
 80018da:	2104      	movs	r1, #4
 80018dc:	f007 fa94 	bl	8008e08 <dropdown>
						desgn_id =0;
 80018e0:	4b9c      	ldr	r3, [pc, #624]	; (8001b54 <main+0x1128>)
 80018e2:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 234+40 && touchY <= 280+40)
 80018e4:	f8bb 3000 	ldrh.w	r3, [fp]
 80018e8:	e522      	b.n	8001330 <main+0x904>
						fill_area(499,655,294,344,0xe7eefe);
 80018ea:	4b95      	ldr	r3, [pc, #596]	; (8001b40 <main+0x1114>)
 80018ec:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[2];
 80018ee:	4b9a      	ldr	r3, [pc, #616]	; (8001b58 <main+0x112c>)
 80018f0:	4c9a      	ldr	r4, [pc, #616]	; (8001b5c <main+0x1130>)
 80018f2:	689b      	ldr	r3, [r3, #8]
						active_role =2;
 80018f4:	4e95      	ldr	r6, [pc, #596]	; (8001b4c <main+0x1120>)
						role_ptr =	dropdown_role[2];
 80018f6:	6023      	str	r3, [r4, #0]
						active_role =2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	7033      	strb	r3, [r6, #0]
						fill_area(499,655,294,344,0xe7eefe);
 80018fc:	f44f 7293 	mov.w	r2, #294	; 0x126
 8001900:	f240 218f 	movw	r1, #655	; 0x28f
 8001904:	f240 10f3 	movw	r0, #499	; 0x1f3
 8001908:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800190c:	f004 fc5a 	bl	80061c4 <fill_area>
						print_string(510,307,role_ptr,0x737373);
 8001910:	6822      	ldr	r2, [r4, #0]
 8001912:	4b8f      	ldr	r3, [pc, #572]	; (8001b50 <main+0x1124>)
 8001914:	f240 1133 	movw	r1, #307	; 0x133
 8001918:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 800191c:	f005 fd08 	bl	8007330 <print_string>
						dropdown(&dropdown_role[0],3,297,217,-80);
 8001920:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	488c      	ldr	r0, [pc, #560]	; (8001b58 <main+0x112c>)
 8001928:	23d9      	movs	r3, #217	; 0xd9
 800192a:	f240 1229 	movw	r2, #297	; 0x129
 800192e:	2103      	movs	r1, #3
 8001930:	f007 fa6a 	bl	8008e08 <dropdown>
 8001934:	e4b1      	b.n	800129a <main+0x86e>
						fill_area(210,400,270,310,0xe7eefe);
 8001936:	4b82      	ldr	r3, [pc, #520]	; (8001b40 <main+0x1114>)
 8001938:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[2];
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <main+0x112c>)
 800193c:	4e87      	ldr	r6, [pc, #540]	; (8001b5c <main+0x1130>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	6033      	str	r3, [r6, #0]
						active_role =2;
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <main+0x1120>)
 8001944:	2402      	movs	r4, #2
 8001946:	701c      	strb	r4, [r3, #0]
						fill_area(210,400,270,310,0xe7eefe);
 8001948:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800194c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001950:	20d2      	movs	r0, #210	; 0xd2
 8001952:	f44f 739b 	mov.w	r3, #310	; 0x136
 8001956:	f004 fc35 	bl	80061c4 <fill_area>
						print_string(220,280,role_ptr,0x737373);
 800195a:	4b7d      	ldr	r3, [pc, #500]	; (8001b50 <main+0x1124>)
 800195c:	6832      	ldr	r2, [r6, #0]
 800195e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001962:	20dc      	movs	r0, #220	; 0xdc
 8001964:	f005 fce4 	bl	8007330 <print_string>
					 dropdown(&dropdown_role[0],3,0,0,-120);
 8001968:	2300      	movs	r3, #0
 800196a:	f06f 0277 	mvn.w	r2, #119	; 0x77
 800196e:	9200      	str	r2, [sp, #0]
 8001970:	4879      	ldr	r0, [pc, #484]	; (8001b58 <main+0x112c>)
 8001972:	461a      	mov	r2, r3
 8001974:	2103      	movs	r1, #3
 8001976:	f007 fa47 	bl	8008e08 <dropdown>
						role_id =2;
 800197a:	4b79      	ldr	r3, [pc, #484]	; (8001b60 <main+0x1134>)
 800197c:	701c      	strb	r4, [r3, #0]
 800197e:	e4c6      	b.n	800130e <main+0x8e2>
						fill_area(210,400,270,310,0xe7eefe);
 8001980:	4b6f      	ldr	r3, [pc, #444]	; (8001b40 <main+0x1114>)
 8001982:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[1];
 8001984:	4b74      	ldr	r3, [pc, #464]	; (8001b58 <main+0x112c>)
 8001986:	4e75      	ldr	r6, [pc, #468]	; (8001b5c <main+0x1130>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	6033      	str	r3, [r6, #0]
						active_role =1;
 800198c:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <main+0x1120>)
 800198e:	2401      	movs	r4, #1
 8001990:	701c      	strb	r4, [r3, #0]
						fill_area(210,400,270,310,0xe7eefe);
 8001992:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001996:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800199a:	20d2      	movs	r0, #210	; 0xd2
 800199c:	f44f 739b 	mov.w	r3, #310	; 0x136
 80019a0:	f004 fc10 	bl	80061c4 <fill_area>
						print_string(220,280,role_ptr,0x737373);
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <main+0x1124>)
 80019a6:	6832      	ldr	r2, [r6, #0]
 80019a8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019ac:	20dc      	movs	r0, #220	; 0xdc
 80019ae:	f005 fcbf 	bl	8007330 <print_string>
					 dropdown(&dropdown_role[0],3,0,0,-120);
 80019b2:	2300      	movs	r3, #0
 80019b4:	f06f 0277 	mvn.w	r2, #119	; 0x77
 80019b8:	9200      	str	r2, [sp, #0]
 80019ba:	4867      	ldr	r0, [pc, #412]	; (8001b58 <main+0x112c>)
 80019bc:	461a      	mov	r2, r3
 80019be:	2103      	movs	r1, #3
 80019c0:	f007 fa22 	bl	8008e08 <dropdown>
					 role_id =1;
 80019c4:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <main+0x1134>)
 80019c6:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 124+80 && touchY <= 170+80)
 80019c8:	f8bb 3000 	ldrh.w	r3, [fp]
 80019cc:	e49b      	b.n	8001306 <main+0x8da>
						fill_area(210,400,270,310,0xe7eefe);
 80019ce:	4b5c      	ldr	r3, [pc, #368]	; (8001b40 <main+0x1114>)
 80019d0:	9300      	str	r3, [sp, #0]
						active_role =0;
 80019d2:	4b5e      	ldr	r3, [pc, #376]	; (8001b4c <main+0x1120>)
					 role_ptr =	dropdown_role[0];
 80019d4:	4a61      	ldr	r2, [pc, #388]	; (8001b5c <main+0x1130>)
						active_role =0;
 80019d6:	2400      	movs	r4, #0
 80019d8:	701c      	strb	r4, [r3, #0]
					 role_ptr =	dropdown_role[0];
 80019da:	4b5f      	ldr	r3, [pc, #380]	; (8001b58 <main+0x112c>)
 80019dc:	4616      	mov	r6, r2
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6013      	str	r3, [r2, #0]
						fill_area(210,400,270,310,0xe7eefe);
 80019e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80019e6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80019ea:	20d2      	movs	r0, #210	; 0xd2
 80019ec:	f44f 739b 	mov.w	r3, #310	; 0x136
 80019f0:	f004 fbe8 	bl	80061c4 <fill_area>
						print_string(220,280,role_ptr,0x737373);
 80019f4:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <main+0x1124>)
 80019f6:	6832      	ldr	r2, [r6, #0]
 80019f8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80019fc:	20dc      	movs	r0, #220	; 0xdc
 80019fe:	f005 fc97 	bl	8007330 <print_string>
					 dropdown(&dropdown_role[0],3,0,0,-120);
 8001a02:	f06f 0377 	mvn.w	r3, #119	; 0x77
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4853      	ldr	r0, [pc, #332]	; (8001b58 <main+0x112c>)
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	2103      	movs	r1, #3
 8001a10:	f007 f9fa 	bl	8008e08 <dropdown>
					 role_id =0;
 8001a14:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <main+0x1134>)
 8001a16:	701c      	strb	r4, [r3, #0]
				 if(touchY >= 124+40 && touchY <= 170+40)
 8001a18:	f8bb 3000 	ldrh.w	r3, [fp]
 8001a1c:	e46e      	b.n	80012fc <main+0x8d0>
					 	fill_area(499,655,204,254,0xe7eefe);
 8001a1e:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <main+0x1114>)
 8001a20:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[3];
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <main+0x1118>)
 8001a24:	4c48      	ldr	r4, [pc, #288]	; (8001b48 <main+0x111c>)
 8001a26:	68db      	ldr	r3, [r3, #12]
						active_role =3;
 8001a28:	4e48      	ldr	r6, [pc, #288]	; (8001b4c <main+0x1120>)
						desgn_ptr =	dropdown_desgn[3];
 8001a2a:	6023      	str	r3, [r4, #0]
						active_role =3;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	7033      	strb	r3, [r6, #0]
					 	fill_area(499,655,204,254,0xe7eefe);
 8001a30:	22cc      	movs	r2, #204	; 0xcc
 8001a32:	f240 218f 	movw	r1, #655	; 0x28f
 8001a36:	f240 10f3 	movw	r0, #499	; 0x1f3
 8001a3a:	23fe      	movs	r3, #254	; 0xfe
 8001a3c:	f004 fbc2 	bl	80061c4 <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 8001a40:	6822      	ldr	r2, [r4, #0]
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <main+0x1124>)
 8001a44:	21d6      	movs	r1, #214	; 0xd6
 8001a46:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001a4a:	f005 fc71 	bl	8007330 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 8001a4e:	2320      	movs	r3, #32
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	483c      	ldr	r0, [pc, #240]	; (8001b44 <main+0x1118>)
 8001a54:	23d9      	movs	r3, #217	; 0xd9
 8001a56:	f240 1229 	movw	r2, #297	; 0x129
 8001a5a:	2104      	movs	r1, #4
 8001a5c:	f007 f9d4 	bl	8008e08 <dropdown>
 8001a60:	e43b      	b.n	80012da <main+0x8ae>
					 	fill_area(499,655,204,254,0xe7eefe);
 8001a62:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <main+0x1114>)
 8001a64:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[2];
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <main+0x1118>)
 8001a68:	4c37      	ldr	r4, [pc, #220]	; (8001b48 <main+0x111c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
						active_role =2;
 8001a6c:	4e37      	ldr	r6, [pc, #220]	; (8001b4c <main+0x1120>)
						desgn_ptr =	dropdown_desgn[2];
 8001a6e:	6023      	str	r3, [r4, #0]
						active_role =2;
 8001a70:	2302      	movs	r3, #2
					 	fill_area(499,655,204,254,0xe7eefe);
 8001a72:	22cc      	movs	r2, #204	; 0xcc
 8001a74:	f240 218f 	movw	r1, #655	; 0x28f
 8001a78:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =2;
 8001a7c:	7033      	strb	r3, [r6, #0]
					 	fill_area(499,655,204,254,0xe7eefe);
 8001a7e:	23fe      	movs	r3, #254	; 0xfe
 8001a80:	f004 fba0 	bl	80061c4 <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 8001a84:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <main+0x1124>)
 8001a86:	6822      	ldr	r2, [r4, #0]
 8001a88:	21d6      	movs	r1, #214	; 0xd6
 8001a8a:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001a8e:	f005 fc4f 	bl	8007330 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 8001a92:	2320      	movs	r3, #32
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	482b      	ldr	r0, [pc, #172]	; (8001b44 <main+0x1118>)
 8001a98:	23d9      	movs	r3, #217	; 0xd9
 8001a9a:	f240 1229 	movw	r2, #297	; 0x129
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	f007 f9b2 	bl	8008e08 <dropdown>
				 if(touchY >= 266+120 && touchY <= 312+120)
 8001aa4:	f8bb 3000 	ldrh.w	r3, [fp]
 8001aa8:	e412      	b.n	80012d0 <main+0x8a4>
					 	fill_area(499,655,204,254,0xe7eefe);
 8001aaa:	4b25      	ldr	r3, [pc, #148]	; (8001b40 <main+0x1114>)
 8001aac:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[1];
 8001aae:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <main+0x1118>)
 8001ab0:	4c25      	ldr	r4, [pc, #148]	; (8001b48 <main+0x111c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
						active_role =1;
 8001ab4:	4e25      	ldr	r6, [pc, #148]	; (8001b4c <main+0x1120>)
						desgn_ptr =	dropdown_desgn[1];
 8001ab6:	6023      	str	r3, [r4, #0]
						active_role =1;
 8001ab8:	2301      	movs	r3, #1
					 	fill_area(499,655,204,254,0xe7eefe);
 8001aba:	22cc      	movs	r2, #204	; 0xcc
 8001abc:	f240 218f 	movw	r1, #655	; 0x28f
 8001ac0:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =1;
 8001ac4:	7033      	strb	r3, [r6, #0]
					 	fill_area(499,655,204,254,0xe7eefe);
 8001ac6:	23fe      	movs	r3, #254	; 0xfe
 8001ac8:	f004 fb7c 	bl	80061c4 <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 8001acc:	4b20      	ldr	r3, [pc, #128]	; (8001b50 <main+0x1124>)
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	21d6      	movs	r1, #214	; 0xd6
 8001ad2:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001ad6:	f005 fc2b 	bl	8007330 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 8001ada:	2320      	movs	r3, #32
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4819      	ldr	r0, [pc, #100]	; (8001b44 <main+0x1118>)
 8001ae0:	23d9      	movs	r3, #217	; 0xd9
 8001ae2:	f240 1229 	movw	r2, #297	; 0x129
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	f007 f98e 	bl	8008e08 <dropdown>
				 if(touchY >= 266+80 && touchY <= 312+80)
 8001aec:	f8bb 3000 	ldrh.w	r3, [fp]
 8001af0:	f7ff bbe9 	b.w	80012c6 <main+0x89a>
					 	fill_area(499,655,204,254,0xe7eefe);
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <main+0x1114>)
 8001af6:	9300      	str	r3, [sp, #0]
						desgn_ptr =	dropdown_desgn[0];
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <main+0x1118>)
 8001afa:	4e13      	ldr	r6, [pc, #76]	; (8001b48 <main+0x111c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
						active_role =0;
 8001afe:	4f13      	ldr	r7, [pc, #76]	; (8001b4c <main+0x1120>)
						desgn_ptr =	dropdown_desgn[0];
 8001b00:	6033      	str	r3, [r6, #0]
						active_role =0;
 8001b02:	2300      	movs	r3, #0
					 	fill_area(499,655,204,254,0xe7eefe);
 8001b04:	22cc      	movs	r2, #204	; 0xcc
 8001b06:	f240 218f 	movw	r1, #655	; 0x28f
 8001b0a:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =0;
 8001b0e:	703b      	strb	r3, [r7, #0]
					 	fill_area(499,655,204,254,0xe7eefe);
 8001b10:	23fe      	movs	r3, #254	; 0xfe
 8001b12:	f004 fb57 	bl	80061c4 <fill_area>
						print_string(510,214,desgn_ptr,0x737373);
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <main+0x1124>)
 8001b18:	6832      	ldr	r2, [r6, #0]
 8001b1a:	21d6      	movs	r1, #214	; 0xd6
 8001b1c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001b20:	f005 fc06 	bl	8007330 <print_string>
						dropdown(&dropdown_desgn[0],4,297,217,32);
 8001b24:	2320      	movs	r3, #32
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <main+0x1118>)
 8001b2a:	23d9      	movs	r3, #217	; 0xd9
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	f240 1229 	movw	r2, #297	; 0x129
 8001b32:	f007 f969 	bl	8008e08 <dropdown>
				 if(touchY >= 266+40 && touchY <= 312+40)
 8001b36:	f8bb 3000 	ldrh.w	r3, [fp]
 8001b3a:	f7ff bbbf 	b.w	80012bc <main+0x890>
 8001b3e:	bf00      	nop
 8001b40:	00e7eefe 	.word	0x00e7eefe
 8001b44:	20000034 	.word	0x20000034
 8001b48:	20000024 	.word	0x20000024
 8001b4c:	200005de 	.word	0x200005de
 8001b50:	00737373 	.word	0x00737373
 8001b54:	200005f8 	.word	0x200005f8
 8001b58:	20000044 	.word	0x20000044
 8001b5c:	20000074 	.word	0x20000074
 8001b60:	200006a0 	.word	0x200006a0
						fill_area(499,655,294,344,0xe7eefe);
 8001b64:	4b62      	ldr	r3, [pc, #392]	; (8001cf0 <main+0x12c4>)
 8001b66:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[1];
 8001b68:	4b62      	ldr	r3, [pc, #392]	; (8001cf4 <main+0x12c8>)
 8001b6a:	4c63      	ldr	r4, [pc, #396]	; (8001cf8 <main+0x12cc>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
						active_role =1;
 8001b6e:	4e63      	ldr	r6, [pc, #396]	; (8001cfc <main+0x12d0>)
						role_ptr =	dropdown_role[1];
 8001b70:	6023      	str	r3, [r4, #0]
						active_role =1;
 8001b72:	2301      	movs	r3, #1
						fill_area(499,655,294,344,0xe7eefe);
 8001b74:	f44f 7293 	mov.w	r2, #294	; 0x126
 8001b78:	f240 218f 	movw	r1, #655	; 0x28f
 8001b7c:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =1;
 8001b80:	7033      	strb	r3, [r6, #0]
						fill_area(499,655,294,344,0xe7eefe);
 8001b82:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001b86:	f004 fb1d 	bl	80061c4 <fill_area>
						print_string(510,307,role_ptr,0x737373);
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <main+0x12d4>)
 8001b8c:	6822      	ldr	r2, [r4, #0]
 8001b8e:	f240 1133 	movw	r1, #307	; 0x133
 8001b92:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001b96:	f005 fbcb 	bl	8007330 <print_string>
						dropdown(&dropdown_role[0],3,297,217,-80);
 8001b9a:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4854      	ldr	r0, [pc, #336]	; (8001cf4 <main+0x12c8>)
 8001ba2:	23d9      	movs	r3, #217	; 0xd9
 8001ba4:	f240 1229 	movw	r2, #297	; 0x129
 8001ba8:	2103      	movs	r1, #3
 8001baa:	f007 f92d 	bl	8008e08 <dropdown>
				 if(touchY >= 154+80 && touchY <= 200+80)
 8001bae:	f8bb 3000 	ldrh.w	r3, [fp]
 8001bb2:	f7ff bb6e 	b.w	8001292 <main+0x866>
						fill_area(499,655,294,344,0xe7eefe);
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <main+0x12c4>)
 8001bb8:	9300      	str	r3, [sp, #0]
						role_ptr =	dropdown_role[0];
 8001bba:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <main+0x12c8>)
 8001bbc:	4c4e      	ldr	r4, [pc, #312]	; (8001cf8 <main+0x12cc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
						active_role =0;
 8001bc0:	4e4e      	ldr	r6, [pc, #312]	; (8001cfc <main+0x12d0>)
						role_ptr =	dropdown_role[0];
 8001bc2:	6023      	str	r3, [r4, #0]
						active_role =0;
 8001bc4:	2300      	movs	r3, #0
						fill_area(499,655,294,344,0xe7eefe);
 8001bc6:	f44f 7293 	mov.w	r2, #294	; 0x126
 8001bca:	f240 218f 	movw	r1, #655	; 0x28f
 8001bce:	f240 10f3 	movw	r0, #499	; 0x1f3
						active_role =0;
 8001bd2:	7033      	strb	r3, [r6, #0]
						fill_area(499,655,294,344,0xe7eefe);
 8001bd4:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8001bd8:	f004 faf4 	bl	80061c4 <fill_area>
						print_string(510,307,role_ptr,0x737373);
 8001bdc:	4b48      	ldr	r3, [pc, #288]	; (8001d00 <main+0x12d4>)
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	f240 1133 	movw	r1, #307	; 0x133
 8001be4:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 8001be8:	f005 fba2 	bl	8007330 <print_string>
						dropdown(&dropdown_role[0],3,297,217,-80);
 8001bec:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	4840      	ldr	r0, [pc, #256]	; (8001cf4 <main+0x12c8>)
 8001bf4:	23d9      	movs	r3, #217	; 0xd9
 8001bf6:	f240 1229 	movw	r2, #297	; 0x129
 8001bfa:	2103      	movs	r1, #3
 8001bfc:	f007 f904 	bl	8008e08 <dropdown>
				 if(touchY >= 154+40 && touchY <= 200+40)
 8001c00:	f8bb 3000 	ldrh.w	r3, [fp]
 8001c04:	f7ff bb40 	b.w	8001288 <main+0x85c>
						fill_area(210,400,370,400,0xe7eefe);
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <main+0x12c4>)
						card_ptr = dropdown_CardThumb[1];
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <main+0x12d8>)
						fill_area(210,400,370,400,0xe7eefe);
 8001c0c:	9300      	str	r3, [sp, #0]
						card_ptr = dropdown_CardThumb[1];
 8001c0e:	4e3e      	ldr	r6, [pc, #248]	; (8001d08 <main+0x12dc>)
						active_role =1;
 8001c10:	4f3a      	ldr	r7, [pc, #232]	; (8001cfc <main+0x12d0>)
						card_ptr = dropdown_CardThumb[1];
 8001c12:	6852      	ldr	r2, [r2, #4]
 8001c14:	6032      	str	r2, [r6, #0]
						fill_area(210,400,370,400,0xe7eefe);
 8001c16:	f44f 73c8 	mov.w	r3, #400	; 0x190
						active_role =1;
 8001c1a:	2401      	movs	r4, #1
						fill_area(210,400,370,400,0xe7eefe);
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001c22:	20d2      	movs	r0, #210	; 0xd2
						active_role =1;
 8001c24:	703c      	strb	r4, [r7, #0]
						fill_area(210,400,370,400,0xe7eefe);
 8001c26:	f004 facd 	bl	80061c4 <fill_area>
						print_string(220,375,card_ptr,0x737373);
 8001c2a:	6832      	ldr	r2, [r6, #0]
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <main+0x12d4>)
 8001c2e:	f240 1177 	movw	r1, #375	; 0x177
 8001c32:	20dc      	movs	r0, #220	; 0xdc
 8001c34:	f005 fb7c 	bl	8007330 <print_string>
						dropdown(&dropdown_CardThumb[0],2,0,0,10);
 8001c38:	2300      	movs	r3, #0
 8001c3a:	220a      	movs	r2, #10
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	4831      	ldr	r0, [pc, #196]	; (8001d04 <main+0x12d8>)
 8001c40:	461a      	mov	r2, r3
 8001c42:	2102      	movs	r1, #2
 8001c44:	f007 f8e0 	bl	8008e08 <dropdown>
 8001c48:	f7ff b9ea 	b.w	8001020 <main+0x5f4>
						active_role =0;
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	; (8001cfc <main+0x12d0>)
						fill_area(210,400,370,400,0xe7eefe);
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <main+0x12c4>)
 8001c50:	9300      	str	r3, [sp, #0]
						active_role =0;
 8001c52:	2400      	movs	r4, #0
						card_ptr = dropdown_CardThumb[0];
 8001c54:	492c      	ldr	r1, [pc, #176]	; (8001d08 <main+0x12dc>)
						active_role =0;
 8001c56:	7014      	strb	r4, [r2, #0]
						card_ptr = dropdown_CardThumb[0];
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <main+0x12d8>)
						fill_area(210,400,370,400,0xe7eefe);
 8001c5a:	f44f 73c8 	mov.w	r3, #400	; 0x190
						card_ptr = dropdown_CardThumb[0];
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	600a      	str	r2, [r1, #0]
 8001c62:	460e      	mov	r6, r1
						fill_area(210,400,370,400,0xe7eefe);
 8001c64:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001c68:	4619      	mov	r1, r3
 8001c6a:	20d2      	movs	r0, #210	; 0xd2
 8001c6c:	f004 faaa 	bl	80061c4 <fill_area>
						print_string(220,375,card_ptr,0x737373);
 8001c70:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <main+0x12d4>)
 8001c72:	6832      	ldr	r2, [r6, #0]
 8001c74:	f240 1177 	movw	r1, #375	; 0x177
 8001c78:	20dc      	movs	r0, #220	; 0xdc
 8001c7a:	f005 fb59 	bl	8007330 <print_string>
						dropdown(&dropdown_CardThumb[0],2,0,0,10);
 8001c7e:	230a      	movs	r3, #10
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4820      	ldr	r0, [pc, #128]	; (8001d04 <main+0x12d8>)
 8001c84:	4623      	mov	r3, r4
 8001c86:	4622      	mov	r2, r4
 8001c88:	2102      	movs	r1, #2
 8001c8a:	f007 f8bd 	bl	8008e08 <dropdown>
				 if(touchY >= 254+40 && touchY <= 300+40)
 8001c8e:	f8bb 3000 	ldrh.w	r3, [fp]
 8001c92:	f7ff b9c0 	b.w	8001016 <main+0x5ea>
			  availble_employee = 1;   //  employee availble
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <main+0x12e0>)
 8001c98:	2301      	movs	r3, #1
 8001c9a:	7013      	strb	r3, [r2, #0]
 8001c9c:	f7ff b9fc 	b.w	8001098 <main+0x66c>
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // BACK
 8001ca0:	3b08      	subs	r3, #8
 8001ca2:	2b40      	cmp	r3, #64	; 0x40
 8001ca4:	f63f a8eb 	bhi.w	8000e7e <main+0x452>
 8001ca8:	f7ff b8df 	b.w	8000e6a <main+0x43e>
			  availble_employee = 1;   //  employee availble
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <main+0x12e0>)
 8001cae:	2301      	movs	r3, #1
 8001cb0:	7013      	strb	r3, [r2, #0]
				print_string(170,194+ia*52,read_details.rd_EMPLO_name,BLACK);
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <main+0x12e4>)
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	f7ff ba95 	b.w	80011e4 <main+0x7b8>
					fill_area(0,800,200,480,PURPLE);
 8001cba:	f004 fa83 	bl	80061c4 <fill_area>
					attendence_search();
 8001cbe:	f007 f8ff 	bl	8008ec0 <attendence_search>
					curr_page = 7;
 8001cc2:	2307      	movs	r3, #7
 8001cc4:	f889 3000 	strb.w	r3, [r9]
		if(touchX >= 105 && touchX <= 185 && touchY >= 325+y && touchY <= 375+y) //caps  105,185,325+y,375+y
 8001cc8:	882b      	ldrh	r3, [r5, #0]
 8001cca:	f7ff b85e 	b.w	8000d8a <main+0x35e>
			pos--;
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <main+0x12e8>)
 8001cd0:	7811      	ldrb	r1, [r2, #0]
 8001cd2:	e476      	b.n	80015c2 <main+0xb96>
		if(touchX >= 8 && touchX <= 72 && touchY >= 10 && touchY <= 70) // BACK
 8001cd4:	3b08      	subs	r3, #8
 8001cd6:	2b40      	cmp	r3, #64	; 0x40
 8001cd8:	f63f a8d1 	bhi.w	8000e7e <main+0x452>
 8001cdc:	f8bb 3000 	ldrh.w	r3, [fp]
 8001ce0:	3b0a      	subs	r3, #10
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b3c      	cmp	r3, #60	; 0x3c
 8001ce6:	f63f a8ca 	bhi.w	8000e7e <main+0x452>
 8001cea:	f7fe bf2b 	b.w	8000b44 <main+0x118>
 8001cee:	bf00      	nop
 8001cf0:	00e7eefe 	.word	0x00e7eefe
 8001cf4:	20000044 	.word	0x20000044
 8001cf8:	20000074 	.word	0x20000074
 8001cfc:	200005de 	.word	0x200005de
 8001d00:	00737373 	.word	0x00737373
 8001d04:	2000002c 	.word	0x2000002c
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	200005df 	.word	0x200005df
 8001d10:	20000050 	.word	0x20000050
 8001d14:	20000679 	.word	0x20000679

08001d18 <error_handler>:
	}
}


void error_handler(void)
{
 8001d18:	b508      	push	{r3, lr}
	printf("In Error Handler\r\n");
 8001d1a:	4802      	ldr	r0, [pc, #8]	; (8001d24 <error_handler+0xc>)
 8001d1c:	f007 febe 	bl	8009a9c <puts>
	while(1);
 8001d20:	e7fe      	b.n	8001d20 <error_handler+0x8>
 8001d22:	bf00      	nop
 8001d24:	0800b060 	.word	0x0800b060

08001d28 <HAL_MspInit>:

extern SPI_HandleTypeDef spi2;
extern TIM_HandleTypeDef tim5;

void HAL_MspInit(void)
{
 8001d28:	b082      	sub	sp, #8

	__HAL_RCC_SYSCFG_CLK_ENABLE();		// exti line controller clock
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_MspInit+0x34>)
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	9100      	str	r1, [sp, #0]
 8001d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44
 8001d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d3a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d3e:	9200      	str	r2, [sp, #0]
 8001d40:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_PWR_CLK_ENABLE();			// pwr  controller clock
 8001d42:	9101      	str	r1, [sp, #4]
 8001d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	9b01      	ldr	r3, [sp, #4]

}
 8001d56:	b002      	add	sp, #8
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
	GPIO_InitTypeDef gpio_uart;

	if(huart->Instance == USART1)		/* currently using for debugging */
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_UART_MspInit+0x70>)
 8001d62:	6802      	ldr	r2, [r0, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d000      	beq.n	8001d6a <HAL_UART_MspInit+0xa>
 8001d68:	4770      	bx	lr
{
 8001d6a:	b510      	push	{r4, lr}
 8001d6c:	b088      	sub	sp, #32
	{
		// enable the peripheral clock
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001d72:	2400      	movs	r4, #0
 8001d74:	9400      	str	r4, [sp, #0]
 8001d76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		gpio_uart.Mode 	=GPIO_MODE_AF_PP;
		gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
		gpio_uart.Pull = GPIO_PULLUP;
		gpio_uart.Alternate = GPIO_AF7_USART1;

		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001d78:	4816      	ldr	r0, [pc, #88]	; (8001dd4 <HAL_UART_MspInit+0x74>)
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d82:	f002 0201 	and.w	r2, r2, #1
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	9a00      	ldr	r2, [sp, #0]
		__HAL_RCC_USART1_CLK_ENABLE();
 8001d8a:	9401      	str	r4, [sp, #4]
 8001d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d8e:	f042 0210 	orr.w	r2, r2, #16
 8001d92:	645a      	str	r2, [r3, #68]	; 0x44
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	9301      	str	r3, [sp, #4]
		gpio_uart.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8001d9c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001da0:	2302      	movs	r3, #2
 8001da2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001da6:	2201      	movs	r2, #1
 8001da8:	2300      	movs	r3, #0
 8001daa:	e9cd 2304 	strd	r2, r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001dae:	a902      	add	r1, sp, #8
		gpio_uart.Alternate = GPIO_AF7_USART1;
 8001db0:	2307      	movs	r3, #7
		__HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	9a01      	ldr	r2, [sp, #4]
		gpio_uart.Alternate = GPIO_AF7_USART1;
 8001db4:	9306      	str	r3, [sp, #24]
		HAL_GPIO_Init(GPIOA, &gpio_uart);
 8001db6:	f000 f9f5 	bl	80021a4 <HAL_GPIO_Init>

		// enable NVIC irq line
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dba:	2025      	movs	r0, #37	; 0x25
 8001dbc:	f000 f9e4 	bl	8002188 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	2025      	movs	r0, #37	; 0x25
 8001dc6:	f000 f9a1 	bl	800210c <HAL_NVIC_SetPriority>
	}
}
 8001dca:	b008      	add	sp, #32
 8001dcc:	bd10      	pop	{r4, pc}
 8001dce:	bf00      	nop
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001dd8:	b510      	push	{r4, lr}
	GPIO_InitTypeDef spi_pins;

	if(hspi->Instance == SPI1)		/* using in RFID */
 8001dda:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <HAL_SPI_MspInit+0xb8>)
 8001ddc:	6803      	ldr	r3, [r0, #0]
 8001dde:	4293      	cmp	r3, r2
{
 8001de0:	b08a      	sub	sp, #40	; 0x28
	if(hspi->Instance == SPI1)		/* using in RFID */
 8001de2:	d004      	beq.n	8001dee <HAL_SPI_MspInit+0x16>
		spi_pins.Alternate = GPIO_AF5_SPI1;

		HAL_GPIO_Init(GPIOB, &spi_pins);
	}

	if(hspi->Instance == SPI2)		/* using in touch  */
 8001de4:	4a2b      	ldr	r2, [pc, #172]	; (8001e94 <HAL_SPI_MspInit+0xbc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d027      	beq.n	8001e3a <HAL_SPI_MspInit+0x62>
		spi_pins.Alternate = GPIO_AF5_SPI2;

		HAL_GPIO_Init(GPIOB, &spi_pins);
	}

}
 8001dea:	b00a      	add	sp, #40	; 0x28
 8001dec:	bd10      	pop	{r4, pc}
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001dee:	4b2a      	ldr	r3, [pc, #168]	; (8001e98 <HAL_SPI_MspInit+0xc0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001df6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001dfa:	6459      	str	r1, [r3, #68]	; 0x44
 8001dfc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001dfe:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001e02:	9100      	str	r1, [sp, #0]
 8001e04:	9900      	ldr	r1, [sp, #0]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e0a:	f041 0102 	orr.w	r1, r1, #2
 8001e0e:	6319      	str	r1, [r3, #48]	; 0x30
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		spi_pins.Pull = GPIO_NOPULL;
 8001e12:	9206      	str	r2, [sp, #24]
		spi_pins.Pin = (GPIO_PIN_3 | GPIO_PIN_4 |GPIO_PIN_5);
 8001e14:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 8001e80 <HAL_SPI_MspInit+0xa8>
 8001e18:	4604      	mov	r4, r0
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	9301      	str	r3, [sp, #4]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001e20:	481e      	ldr	r0, [pc, #120]	; (8001e9c <HAL_SPI_MspInit+0xc4>)
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	9a01      	ldr	r2, [sp, #4]
		spi_pins.Alternate = GPIO_AF5_SPI1;
 8001e24:	2305      	movs	r3, #5
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001e26:	a904      	add	r1, sp, #16
		spi_pins.Alternate = GPIO_AF5_SPI1;
 8001e28:	9308      	str	r3, [sp, #32]
		spi_pins.Pin = (GPIO_PIN_3 | GPIO_PIN_4 |GPIO_PIN_5);
 8001e2a:	ed8d 7b04 	vstr	d7, [sp, #16]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001e2e:	f000 f9b9 	bl	80021a4 <HAL_GPIO_Init>
	if(hspi->Instance == SPI2)		/* using in touch  */
 8001e32:	6823      	ldr	r3, [r4, #0]
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_SPI_MspInit+0xbc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d1d7      	bne.n	8001dea <HAL_SPI_MspInit+0x12>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <HAL_SPI_MspInit+0xc0>)
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001e3c:	4817      	ldr	r0, [pc, #92]	; (8001e9c <HAL_SPI_MspInit+0xc4>)
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001e3e:	2200      	movs	r2, #0
 8001e40:	9202      	str	r2, [sp, #8]
 8001e42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e44:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001e48:	6419      	str	r1, [r3, #64]	; 0x40
 8001e4a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001e4c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001e50:	9102      	str	r1, [sp, #8]
 8001e52:	9902      	ldr	r1, [sp, #8]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	9203      	str	r2, [sp, #12]
 8001e56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e58:	f041 0102 	orr.w	r1, r1, #2
 8001e5c:	6319      	str	r1, [r3, #48]	; 0x30
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		spi_pins.Pull = GPIO_NOPULL;
 8001e60:	9206      	str	r2, [sp, #24]
		spi_pins.Pin = ( GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8001e62:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8001e88 <HAL_SPI_MspInit+0xb0>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001e6c:	a904      	add	r1, sp, #16
		spi_pins.Alternate = GPIO_AF5_SPI2;
 8001e6e:	2305      	movs	r3, #5
		spi_pins.Pin = ( GPIO_PIN_13 |GPIO_PIN_14 |GPIO_PIN_15) ; // for SPI NSS select - NSS_HARD options
 8001e70:	ed8d 7b04 	vstr	d7, [sp, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e74:	9c03      	ldr	r4, [sp, #12]
		spi_pins.Alternate = GPIO_AF5_SPI2;
 8001e76:	9308      	str	r3, [sp, #32]
		HAL_GPIO_Init(GPIOB, &spi_pins);
 8001e78:	f000 f994 	bl	80021a4 <HAL_GPIO_Init>
}
 8001e7c:	b00a      	add	sp, #40	; 0x28
 8001e7e:	bd10      	pop	{r4, pc}
 8001e80:	00000038 	.word	0x00000038
 8001e84:	00000002 	.word	0x00000002
 8001e88:	0000e000 	.word	0x0000e000
 8001e8c:	00000002 	.word	0x00000002
 8001e90:	40013000 	.word	0x40013000
 8001e94:	40003800 	.word	0x40003800
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020400 	.word	0x40020400

08001ea0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM5)		/* 100ms - TimeBase */
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <HAL_TIM_Base_MspInit+0x3c>)
 8001ea2:	6802      	ldr	r2, [r0, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d000      	beq.n	8001eaa <HAL_TIM_Base_MspInit+0xa>
 8001ea8:	4770      	bx	lr
{
 8001eaa:	b500      	push	{lr}
 8001eac:	b083      	sub	sp, #12
	{
		__HAL_RCC_TIM5_CLK_ENABLE();
 8001eae:	f503 330b 	add.w	r3, r3, #142336	; 0x22c00
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	9201      	str	r2, [sp, #4]
 8001eb6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001eb8:	f041 0108 	orr.w	r1, r1, #8
 8001ebc:	6419      	str	r1, [r3, #64]	; 0x40
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	9301      	str	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001ec6:	2032      	movs	r0, #50	; 0x32
 8001ec8:	2105      	movs	r1, #5
		__HAL_RCC_TIM5_CLK_ENABLE();
 8001eca:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001ecc:	f000 f91e 	bl	800210c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ed0:	2032      	movs	r0, #50	; 0x32

	}

}
 8001ed2:	b003      	add	sp, #12
 8001ed4:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ed8:	f000 b956 	b.w	8002188 <HAL_NVIC_EnableIRQ>
 8001edc:	40000c00 	.word	0x40000c00

08001ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b570      	push	{r4, r5, r6, lr}
 8001ee2:	b088      	sub	sp, #32
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001ee4:	2500      	movs	r5, #0
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <HAL_InitTick+0x84>)
 8001ee8:	9502      	str	r5, [sp, #8]
 8001eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001eec:	4c1e      	ldr	r4, [pc, #120]	; (8001f68 <HAL_InitTick+0x88>)
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001eee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ef2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001efa:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001efc:	9302      	str	r3, [sp, #8]
{
 8001efe:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f00:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001f02:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f04:	f001 fa06 	bl	8003314 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f08:	f001 f9f4 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
  htim11.Instance = TIM11;
 8001f0c:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_InitTick+0x8c>)
 8001f0e:	6022      	str	r2, [r4, #0]
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f10:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f12:	4817      	ldr	r0, [pc, #92]	; (8001f70 <HAL_InitTick+0x90>)
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
  htim11.Init.Prescaler = uwPrescalerValue;
  htim11.Init.ClockDivision = 0;
 8001f14:	6125      	str	r5, [r4, #16]
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001f16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f1a:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f1c:	fba0 2303 	umull	r2, r3, r0, r3
 8001f20:	0c9b      	lsrs	r3, r3, #18
 8001f22:	3b01      	subs	r3, #1
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim11);
 8001f24:	4620      	mov	r0, r4
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f26:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	61a5      	str	r5, [r4, #24]
  status = HAL_TIM_Base_Init(&htim11);
 8001f2c:	f001 feb0 	bl	8003c90 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001f30:	4605      	mov	r5, r0
 8001f32:	b110      	cbz	r0, 8001f3a <HAL_InitTick+0x5a>
    }
  }

 /* Return function status */
  return status;
}
 8001f34:	4628      	mov	r0, r5
 8001f36:	b008      	add	sp, #32
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f001 ff26 	bl	8003d8c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001f40:	4605      	mov	r5, r0
 8001f42:	2800      	cmp	r0, #0
 8001f44:	d1f6      	bne.n	8001f34 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f46:	201a      	movs	r0, #26
 8001f48:	f000 f91e 	bl	8002188 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4c:	2e0f      	cmp	r6, #15
 8001f4e:	d901      	bls.n	8001f54 <HAL_InitTick+0x74>
        status = HAL_ERROR;
 8001f50:	2501      	movs	r5, #1
 8001f52:	e7ef      	b.n	8001f34 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001f54:	462a      	mov	r2, r5
 8001f56:	4631      	mov	r1, r6
 8001f58:	201a      	movs	r0, #26
 8001f5a:	f000 f8d7 	bl	800210c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_InitTick+0x94>)
 8001f60:	601e      	str	r6, [r3, #0]
 8001f62:	e7e7      	b.n	8001f34 <HAL_InitTick+0x54>
 8001f64:	40023800 	.word	0x40023800
 8001f68:	20000870 	.word	0x20000870
 8001f6c:	40014800 	.word	0x40014800
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	200000a0 	.word	0x200000a0

08001f78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	1e16      	subs	r6, r2, #0
 8001f7c:	dd07      	ble.n	8001f8e <_read+0x16>
 8001f7e:	460c      	mov	r4, r1
 8001f80:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001f82:	f3af 8000 	nop.w
 8001f86:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8a:	42a5      	cmp	r5, r4
 8001f8c:	d1f9      	bne.n	8001f82 <_read+0xa>
  }

  return len;
}
 8001f8e:	4630      	mov	r0, r6
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
 8001f92:	bf00      	nop

08001f94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f94:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	1e16      	subs	r6, r2, #0
 8001f98:	dd07      	ble.n	8001faa <_write+0x16>
 8001f9a:	460c      	mov	r4, r1
 8001f9c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001f9e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001fa2:	f7fe fafb 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	42ac      	cmp	r4, r5
 8001fa8:	d1f9      	bne.n	8001f9e <_write+0xa>
  }
  return len;
}
 8001faa:	4630      	mov	r0, r6
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	bf00      	nop

08001fb0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fbc:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop

08001fc4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	4770      	bx	lr

08001fc8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001fc8:	2000      	movs	r0, #0
 8001fca:	4770      	bx	lr

08001fcc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fcc:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <SystemInit+0x10>)
 8001fce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001fd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <isTouched>:

uint16_t touchX = 0;
uint16_t touchY = 0;

bool isTouched(uint16_t touchX1,uint16_t touchX2,uint16_t touchY1,uint16_t touchY2)
{
 8001fe0:	b410      	push	{r4}
	if(touchX >= touchX1 && touchX <= touchX2 && touchY >= touchY1 && touchY <= touchY2){
 8001fe2:	4c0b      	ldr	r4, [pc, #44]	; (8002010 <isTouched+0x30>)
 8001fe4:	f8b4 c000 	ldrh.w	ip, [r4]
 8001fe8:	4584      	cmp	ip, r0
 8001fea:	d301      	bcc.n	8001ff0 <isTouched+0x10>
 8001fec:	458c      	cmp	ip, r1
 8001fee:	d903      	bls.n	8001ff8 <isTouched+0x18>
		return 1;
	}
	return 0;
 8001ff0:	2000      	movs	r0, #0
}
 8001ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ff6:	4770      	bx	lr
	if(touchX >= touchX1 && touchX <= touchX2 && touchY >= touchY1 && touchY <= touchY2){
 8001ff8:	4906      	ldr	r1, [pc, #24]	; (8002014 <isTouched+0x34>)
 8001ffa:	8808      	ldrh	r0, [r1, #0]
 8001ffc:	4290      	cmp	r0, r2
 8001ffe:	d3f7      	bcc.n	8001ff0 <isTouched+0x10>
 8002000:	4298      	cmp	r0, r3
 8002002:	bf8c      	ite	hi
 8002004:	2000      	movhi	r0, #0
 8002006:	2001      	movls	r0, #1
}
 8002008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	200008b8 	.word	0x200008b8
 8002014:	200008ba 	.word	0x200008ba

08002018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002050 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800201c:	480d      	ldr	r0, [pc, #52]	; (8002054 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201e:	490e      	ldr	r1, [pc, #56]	; (8002058 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002020:	4a0e      	ldr	r2, [pc, #56]	; (800205c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002024:	e002      	b.n	800202c <LoopCopyDataInit>

08002026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202a:	3304      	adds	r3, #4

0800202c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800202c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002030:	d3f9      	bcc.n	8002026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002034:	4c0b      	ldr	r4, [pc, #44]	; (8002064 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002038:	e001      	b.n	800203e <LoopFillZerobss>

0800203a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800203c:	3204      	adds	r2, #4

0800203e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002040:	d3fb      	bcc.n	800203a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002042:	f7ff ffc3 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002046:	f007 fc53 	bl	80098f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204a:	f7fe fcef 	bl	8000a2c <main>
  bx  lr    
 800204e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002050:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002058:	200005c0 	.word	0x200005c0
  ldr r2, =_sidata
 800205c:	0802ea60 	.word	0x0802ea60
  ldr r2, =_sbss
 8002060:	200005c0 	.word	0x200005c0
  ldr r4, =_ebss
 8002064:	2000093c 	.word	0x2000093c

08002068 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC_IRQHandler>
	...

0800206c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800206c:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_Init+0x30>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800207e:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002086:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002088:	2003      	movs	r0, #3
 800208a:	f000 f82d 	bl	80020e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208e:	200f      	movs	r0, #15
 8002090:	f7ff ff26 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002094:	f7ff fe48 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002098:	2000      	movs	r0, #0
 800209a:	bd08      	pop	{r3, pc}
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020a0:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_IncTick+0x10>)
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_IncTick+0x14>)
 80020a4:	6811      	ldr	r1, [r2, #0]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	440b      	add	r3, r1
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200008bc 	.word	0x200008bc
 80020b4:	2000009c 	.word	0x2000009c

080020b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <HAL_GetTick+0x8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200008bc 	.word	0x200008bc

080020c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff fff6 	bl	80020b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020cc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80020ce:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80020d0:	d002      	beq.n	80020d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_Delay+0x20>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	1b43      	subs	r3, r0, r5
 80020de:	42a3      	cmp	r3, r4
 80020e0:	d3fa      	bcc.n	80020d8 <HAL_Delay+0x14>
  {
  }
}
 80020e2:	bd38      	pop	{r3, r4, r5, pc}
 80020e4:	2000009c 	.word	0x2000009c

080020e8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4907      	ldr	r1, [pc, #28]	; (8002108 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80020ea:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002102:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_NVIC_SetPriority+0x74>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002114:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002116:	f1c3 0e07 	rsb	lr, r3, #7
 800211a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002122:	bf28      	it	cs
 8002124:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002128:	f1bc 0f06 	cmp.w	ip, #6
 800212c:	d91b      	bls.n	8002166 <HAL_NVIC_SetPriority+0x5a>
 800212e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002130:	f04f 3cff 	mov.w	ip, #4294967295
 8002134:	fa0c fc03 	lsl.w	ip, ip, r3
 8002138:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	f04f 3cff 	mov.w	ip, #4294967295
 8002140:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002144:	ea21 010c 	bic.w	r1, r1, ip
 8002148:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800214a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002150:	db0c      	blt.n	800216c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002156:	0109      	lsls	r1, r1, #4
 8002158:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800215c:	b2c9      	uxtb	r1, r1
 800215e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002162:	f85d fb04 	ldr.w	pc, [sp], #4
 8002166:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002168:	4613      	mov	r3, r2
 800216a:	e7e7      	b.n	800213c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <HAL_NVIC_SetPriority+0x78>)
 800216e:	f000 000f 	and.w	r0, r0, #15
 8002172:	0109      	lsls	r1, r1, #4
 8002174:	4403      	add	r3, r0
 8002176:	b2c9      	uxtb	r1, r1
 8002178:	7619      	strb	r1, [r3, #24]
 800217a:	f85d fb04 	ldr.w	pc, [sp], #4
 800217e:	bf00      	nop
 8002180:	e000ed00 	.word	0xe000ed00
 8002184:	e000ecfc 	.word	0xe000ecfc

08002188 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002188:	2800      	cmp	r0, #0
 800218a:	db08      	blt.n	800219e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218c:	0941      	lsrs	r1, r0, #5
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_NVIC_EnableIRQ+0x18>)
 8002190:	f000 001f 	and.w	r0, r0, #31
 8002194:	2301      	movs	r3, #1
 8002196:	fa03 f000 	lsl.w	r0, r3, r0
 800219a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100

080021a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021a8:	2200      	movs	r2, #0
 80021aa:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ac:	4e70      	ldr	r6, [pc, #448]	; (8002370 <HAL_GPIO_Init+0x1cc>)
{
 80021ae:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b0:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80021b2:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	4689      	mov	r9, r1
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	3301      	adds	r3, #1
 80021bc:	2b10      	cmp	r3, #16
 80021be:	f102 0202 	add.w	r2, r2, #2
 80021c2:	d078      	beq.n	80022b6 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80021c4:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c8:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80021cc:	43a1      	bics	r1, r4
 80021ce:	d1f4      	bne.n	80021ba <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d0:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80021d4:	f00c 0103 	and.w	r1, ip, #3
 80021d8:	1e4d      	subs	r5, r1, #1
 80021da:	2d01      	cmp	r5, #1
 80021dc:	d96e      	bls.n	80022bc <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021de:	2903      	cmp	r1, #3
 80021e0:	f040 80ae 	bne.w	8002340 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	4091      	lsls	r1, r2
 80021e6:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80021e8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ea:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ee:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 80021f2:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f4:	d0e1      	beq.n	80021ba <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4d5f      	ldr	r5, [pc, #380]	; (8002374 <HAL_GPIO_Init+0x1d0>)
 80021f8:	2100      	movs	r1, #0
 80021fa:	9103      	str	r1, [sp, #12]
 80021fc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80021fe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002202:	6469      	str	r1, [r5, #68]	; 0x44
 8002204:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002206:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800220a:	9103      	str	r1, [sp, #12]
 800220c:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800220e:	f023 0103 	bic.w	r1, r3, #3
 8002212:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002216:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800221a:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800221e:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002222:	00bf      	lsls	r7, r7, #2
 8002224:	250f      	movs	r5, #15
 8002226:	40bd      	lsls	r5, r7
 8002228:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800222c:	4d52      	ldr	r5, [pc, #328]	; (8002378 <HAL_GPIO_Init+0x1d4>)
 800222e:	42a8      	cmp	r0, r5
 8002230:	d017      	beq.n	8002262 <HAL_GPIO_Init+0xbe>
 8002232:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002236:	42a8      	cmp	r0, r5
 8002238:	f000 8086 	beq.w	8002348 <HAL_GPIO_Init+0x1a4>
 800223c:	4d4f      	ldr	r5, [pc, #316]	; (800237c <HAL_GPIO_Init+0x1d8>)
 800223e:	42a8      	cmp	r0, r5
 8002240:	f000 8087 	beq.w	8002352 <HAL_GPIO_Init+0x1ae>
 8002244:	4d4e      	ldr	r5, [pc, #312]	; (8002380 <HAL_GPIO_Init+0x1dc>)
 8002246:	42a8      	cmp	r0, r5
 8002248:	f000 808a 	beq.w	8002360 <HAL_GPIO_Init+0x1bc>
 800224c:	4d4d      	ldr	r5, [pc, #308]	; (8002384 <HAL_GPIO_Init+0x1e0>)
 800224e:	42a8      	cmp	r0, r5
 8002250:	bf0c      	ite	eq
 8002252:	f04f 0e04 	moveq.w	lr, #4
 8002256:	f04f 0e07 	movne.w	lr, #7
 800225a:	fa0e f707 	lsl.w	r7, lr, r7
 800225e:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002262:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8002266:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002268:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226c:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8002270:	bf0c      	ite	eq
 8002272:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8002274:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8002278:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 800227a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800227c:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8002280:	bf0c      	ite	eq
 8002282:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002284:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8002288:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 800228a:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800228c:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8002290:	bf0c      	ite	eq
 8002292:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002294:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8002298:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800229a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a0:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80022a4:	bf0c      	ite	eq
 80022a6:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80022a8:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ac:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80022ae:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b0:	f102 0202 	add.w	r2, r2, #2
 80022b4:	d186      	bne.n	80021c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022b6:	b005      	add	sp, #20
 80022b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022bc:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80022c0:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022c2:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c6:	2503      	movs	r5, #3
 80022c8:	fa05 fe02 	lsl.w	lr, r5, r2
 80022cc:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d0:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 80022d4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80022d6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022dc:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e0:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80022e4:	409f      	lsls	r7, r3
 80022e6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80022ea:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80022ec:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f2:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80022f6:	4097      	lsls	r7, r2
 80022f8:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022fc:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80022fe:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002300:	fa01 f102 	lsl.w	r1, r1, r2
 8002304:	f47f af70 	bne.w	80021e8 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8002308:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 800230c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002310:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002314:	f8de 7020 	ldr.w	r7, [lr, #32]
 8002318:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800231a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800231e:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002322:	fa07 f708 	lsl.w	r7, r7, r8
 8002326:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002328:	270f      	movs	r7, #15
 800232a:	fa07 f808 	lsl.w	r8, r7, r8
 800232e:	9f00      	ldr	r7, [sp, #0]
 8002330:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002334:	9f01      	ldr	r7, [sp, #4]
 8002336:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 800233a:	f8ce 7020 	str.w	r7, [lr, #32]
 800233e:	e753      	b.n	80021e8 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	2503      	movs	r5, #3
 8002342:	4095      	lsls	r5, r2
 8002344:	43ed      	mvns	r5, r5
 8002346:	e7d1      	b.n	80022ec <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002348:	fa0a f707 	lsl.w	r7, sl, r7
 800234c:	ea48 0807 	orr.w	r8, r8, r7
 8002350:	e787      	b.n	8002262 <HAL_GPIO_Init+0xbe>
 8002352:	f04f 0e02 	mov.w	lr, #2
 8002356:	fa0e f707 	lsl.w	r7, lr, r7
 800235a:	ea48 0807 	orr.w	r8, r8, r7
 800235e:	e780      	b.n	8002262 <HAL_GPIO_Init+0xbe>
 8002360:	f04f 0e03 	mov.w	lr, #3
 8002364:	fa0e f707 	lsl.w	r7, lr, r7
 8002368:	ea48 0807 	orr.w	r8, r8, r7
 800236c:	e779      	b.n	8002262 <HAL_GPIO_Init+0xbe>
 800236e:	bf00      	nop
 8002370:	40013c00 	.word	0x40013c00
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002388:	b902      	cbnz	r2, 800238c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238a:	0409      	lsls	r1, r1, #16
 800238c:	6181      	str	r1, [r0, #24]
  }
}
 800238e:	4770      	bx	lr

08002390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002394:	6804      	ldr	r4, [r0, #0]
{
 8002396:	b083      	sub	sp, #12
 8002398:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239a:	6823      	ldr	r3, [r4, #0]
{
 800239c:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80023a0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80023a8:	4606      	mov	r6, r0
 80023aa:	468a      	mov	sl, r1
 80023ac:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ae:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80023b0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80023b4:	d135      	bne.n	8002422 <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023b6:	6965      	ldr	r5, [r4, #20]
 80023b8:	07e8      	lsls	r0, r5, #31
 80023ba:	d5fc      	bpl.n	80023b6 <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023bc:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 80023c0:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80023c2:	f1b9 3fff 	cmp.w	r9, #4294967295
 80023c6:	d003      	beq.n	80023d0 <I2C_RequestMemoryWrite+0x40>
 80023c8:	e04e      	b.n	8002468 <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023ca:	6961      	ldr	r1, [r4, #20]
 80023cc:	054d      	lsls	r5, r1, #21
 80023ce:	d45c      	bmi.n	800248a <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023d0:	6961      	ldr	r1, [r4, #20]
 80023d2:	078b      	lsls	r3, r1, #30
 80023d4:	d5f9      	bpl.n	80023ca <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	6963      	ldr	r3, [r4, #20]
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	69a3      	ldr	r3, [r4, #24]
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80023e8:	f040 8087 	bne.w	80024fa <I2C_RequestMemoryWrite+0x16a>
 80023ec:	6963      	ldr	r3, [r4, #20]
 80023ee:	061a      	lsls	r2, r3, #24
 80023f0:	d463      	bmi.n	80024ba <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023f2:	6963      	ldr	r3, [r4, #20]
 80023f4:	055b      	lsls	r3, r3, #21
 80023f6:	d5f9      	bpl.n	80023ec <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023f8:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80023fa:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023fc:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002400:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002402:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002404:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002408:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800240c:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002418:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800241a:	2b04      	cmp	r3, #4
 800241c:	d066      	beq.n	80024ec <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
 8002420:	e01f      	b.n	8002462 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002422:	6963      	ldr	r3, [r4, #20]
 8002424:	07d9      	lsls	r1, r3, #31
 8002426:	d4c9      	bmi.n	80023bc <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002428:	f7ff fe46 	bl	80020b8 <HAL_GetTick>
 800242c:	eba0 000b 	sub.w	r0, r0, fp
 8002430:	4581      	cmp	r9, r0
 8002432:	d304      	bcc.n	800243e <I2C_RequestMemoryWrite+0xae>
 8002434:	f1b9 0f00 	cmp.w	r9, #0
 8002438:	d001      	beq.n	800243e <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243a:	6834      	ldr	r4, [r6, #0]
 800243c:	e7b8      	b.n	80023b0 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800243e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002440:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002442:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002444:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002448:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800244c:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800244e:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8002450:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	f042 0220 	orr.w	r2, r2, #32
 8002458:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800245a:	680b      	ldr	r3, [r1, #0]
 800245c:	05dc      	lsls	r4, r3, #23
 800245e:	d435      	bmi.n	80024cc <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8002460:	2003      	movs	r0, #3
}
 8002462:	b003      	add	sp, #12
 8002464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002468:	6963      	ldr	r3, [r4, #20]
 800246a:	0798      	lsls	r0, r3, #30
 800246c:	d4b3      	bmi.n	80023d6 <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800246e:	6963      	ldr	r3, [r4, #20]
 8002470:	055a      	lsls	r2, r3, #21
 8002472:	d40a      	bmi.n	800248a <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002474:	f7ff fe20 	bl	80020b8 <HAL_GetTick>
 8002478:	eba0 000b 	sub.w	r0, r0, fp
 800247c:	4581      	cmp	r9, r0
 800247e:	d34e      	bcc.n	800251e <I2C_RequestMemoryWrite+0x18e>
 8002480:	f1b9 0f00 	cmp.w	r9, #0
 8002484:	d04b      	beq.n	800251e <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002486:	6834      	ldr	r4, [r6, #0]
 8002488:	e79b      	b.n	80023c2 <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002490:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002492:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002494:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002498:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800249a:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800249c:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800249e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a2:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024a6:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80024a8:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ac:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024b2:	6433      	str	r3, [r6, #64]	; 0x40
}
 80024b4:	b003      	add	sp, #12
 80024b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024ba:	f1b8 0f01 	cmp.w	r8, #1
 80024be:	d109      	bne.n	80024d4 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024c0:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 80024c2:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024c4:	6127      	str	r7, [r4, #16]
}
 80024c6:	b003      	add	sp, #12
 80024c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d0:	6433      	str	r3, [r6, #64]	; 0x40
 80024d2:	e7c5      	b.n	8002460 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024d4:	0a3b      	lsrs	r3, r7, #8
 80024d6:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024d8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80024dc:	d12e      	bne.n	800253c <I2C_RequestMemoryWrite+0x1ac>
 80024de:	6963      	ldr	r3, [r4, #20]
 80024e0:	0619      	lsls	r1, r3, #24
 80024e2:	d4ed      	bmi.n	80024c0 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e4:	6963      	ldr	r3, [r4, #20]
 80024e6:	055a      	lsls	r2, r3, #21
 80024e8:	d5f9      	bpl.n	80024de <I2C_RequestMemoryWrite+0x14e>
 80024ea:	e785      	b.n	80023f8 <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	6832      	ldr	r2, [r6, #0]
 80024ee:	6813      	ldr	r3, [r2, #0]
 80024f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80024f4:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e7b3      	b.n	8002462 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024fa:	6963      	ldr	r3, [r4, #20]
 80024fc:	061d      	lsls	r5, r3, #24
 80024fe:	d4dc      	bmi.n	80024ba <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002500:	6963      	ldr	r3, [r4, #20]
 8002502:	0559      	lsls	r1, r3, #21
 8002504:	f53f af78 	bmi.w	80023f8 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002508:	f7ff fdd6 	bl	80020b8 <HAL_GetTick>
 800250c:	eba0 000b 	sub.w	r0, r0, fp
 8002510:	4581      	cmp	r9, r0
 8002512:	d325      	bcc.n	8002560 <I2C_RequestMemoryWrite+0x1d0>
 8002514:	f1b9 0f00 	cmp.w	r9, #0
 8002518:	d022      	beq.n	8002560 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800251a:	6834      	ldr	r4, [r6, #0]
 800251c:	e762      	b.n	80023e4 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002520:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002522:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002528:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800252e:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002532:	f043 0320 	orr.w	r3, r3, #32
 8002536:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 8002538:	2001      	movs	r0, #1
 800253a:	e792      	b.n	8002462 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800253c:	6963      	ldr	r3, [r4, #20]
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	d4be      	bmi.n	80024c0 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002542:	6963      	ldr	r3, [r4, #20]
 8002544:	0558      	lsls	r0, r3, #21
 8002546:	f53f af57 	bmi.w	80023f8 <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7ff fdb5 	bl	80020b8 <HAL_GetTick>
 800254e:	eba0 000b 	sub.w	r0, r0, fp
 8002552:	4581      	cmp	r9, r0
 8002554:	d304      	bcc.n	8002560 <I2C_RequestMemoryWrite+0x1d0>
 8002556:	f1b9 0f00 	cmp.w	r9, #0
 800255a:	d001      	beq.n	8002560 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800255c:	6834      	ldr	r4, [r6, #0]
 800255e:	e7bb      	b.n	80024d8 <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002560:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002562:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002564:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002566:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800256a:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800256e:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002570:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800257a:	e74d      	b.n	8002418 <I2C_RequestMemoryWrite+0x88>

0800257c <I2C_RequestMemoryRead>:
{
 800257c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002580:	6804      	ldr	r4, [r0, #0]
{
 8002582:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258a:	6023      	str	r3, [r4, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800258c:	6823      	ldr	r3, [r4, #0]
{
 800258e:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8002594:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002598:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259c:	6023      	str	r3, [r4, #0]
{
 800259e:	4606      	mov	r6, r0
 80025a0:	468b      	mov	fp, r1
 80025a2:	4617      	mov	r7, r2
 80025a4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80025a8:	d139      	bne.n	800261e <I2C_RequestMemoryRead+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025aa:	6965      	ldr	r5, [r4, #20]
 80025ac:	07eb      	lsls	r3, r5, #31
 80025ae:	d5fc      	bpl.n	80025aa <I2C_RequestMemoryRead+0x2e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025b0:	f00b 03fe 	and.w	r3, fp, #254	; 0xfe
 80025b4:	6123      	str	r3, [r4, #16]
 80025b6:	fa5f fb8b 	uxtb.w	fp, fp
 80025ba:	f1ba 3fff 	cmp.w	sl, #4294967295
 80025be:	d003      	beq.n	80025c8 <I2C_RequestMemoryRead+0x4c>
 80025c0:	e068      	b.n	8002694 <I2C_RequestMemoryRead+0x118>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025c2:	6961      	ldr	r1, [r4, #20]
 80025c4:	054a      	lsls	r2, r1, #21
 80025c6:	d450      	bmi.n	800266a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025c8:	6961      	ldr	r1, [r4, #20]
 80025ca:	0789      	lsls	r1, r1, #30
 80025cc:	d5f9      	bpl.n	80025c2 <I2C_RequestMemoryRead+0x46>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ce:	2300      	movs	r3, #0
 80025d0:	9301      	str	r3, [sp, #4]
 80025d2:	6963      	ldr	r3, [r4, #20]
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	69a3      	ldr	r3, [r4, #24]
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80025e0:	f040 80b8 	bne.w	8002754 <I2C_RequestMemoryRead+0x1d8>
 80025e4:	6963      	ldr	r3, [r4, #20]
 80025e6:	0618      	lsls	r0, r3, #24
 80025e8:	d467      	bmi.n	80026ba <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025ea:	6963      	ldr	r3, [r4, #20]
 80025ec:	0559      	lsls	r1, r3, #21
 80025ee:	d5f9      	bpl.n	80025e4 <I2C_RequestMemoryRead+0x68>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80025f0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80025f2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80025f8:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80025fa:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025fc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002600:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002604:	6c33      	ldr	r3, [r6, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002606:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002610:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002612:	2b04      	cmp	r3, #4
 8002614:	d06c      	beq.n	80026f0 <I2C_RequestMemoryRead+0x174>
    return HAL_ERROR;
 8002616:	2001      	movs	r0, #1
}
 8002618:	b003      	add	sp, #12
 800261a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800261e:	6963      	ldr	r3, [r4, #20]
 8002620:	07dd      	lsls	r5, r3, #31
 8002622:	d4c5      	bmi.n	80025b0 <I2C_RequestMemoryRead+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7ff fd48 	bl	80020b8 <HAL_GetTick>
 8002628:	eba0 0009 	sub.w	r0, r0, r9
 800262c:	4582      	cmp	sl, r0
 800262e:	d304      	bcc.n	800263a <I2C_RequestMemoryRead+0xbe>
 8002630:	f1ba 0f00 	cmp.w	sl, #0
 8002634:	d001      	beq.n	800263a <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002636:	6834      	ldr	r4, [r6, #0]
 8002638:	e7b4      	b.n	80025a4 <I2C_RequestMemoryRead+0x28>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800263a:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800263c:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800263e:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002640:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002644:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800264a:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 800264c:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002650:	f042 0220 	orr.w	r2, r2, #32
 8002654:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002656:	680b      	ldr	r3, [r1, #0]
 8002658:	05dc      	lsls	r4, r3, #23
 800265a:	d502      	bpl.n	8002662 <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800265c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002660:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_TIMEOUT;
 8002662:	2003      	movs	r0, #3
}
 8002664:	b003      	add	sp, #12
 8002666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266a:	6823      	ldr	r3, [r4, #0]
 800266c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002670:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002672:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002674:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002676:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 800267a:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800267c:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800267e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002682:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002686:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002688:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6433      	str	r3, [r6, #64]	; 0x40
 8002692:	e7c0      	b.n	8002616 <I2C_RequestMemoryRead+0x9a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002694:	6963      	ldr	r3, [r4, #20]
 8002696:	079b      	lsls	r3, r3, #30
 8002698:	d499      	bmi.n	80025ce <I2C_RequestMemoryRead+0x52>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800269a:	6963      	ldr	r3, [r4, #20]
 800269c:	0558      	lsls	r0, r3, #21
 800269e:	d4e4      	bmi.n	800266a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7ff fd0a 	bl	80020b8 <HAL_GetTick>
 80026a4:	eba0 0009 	sub.w	r0, r0, r9
 80026a8:	4582      	cmp	sl, r0
 80026aa:	f0c0 808b 	bcc.w	80027c4 <I2C_RequestMemoryRead+0x248>
 80026ae:	f1ba 0f00 	cmp.w	sl, #0
 80026b2:	f000 8087 	beq.w	80027c4 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026b6:	6834      	ldr	r4, [r6, #0]
 80026b8:	e77f      	b.n	80025ba <I2C_RequestMemoryRead+0x3e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ba:	f1b8 0f01 	cmp.w	r8, #1
 80026be:	d10b      	bne.n	80026d8 <I2C_RequestMemoryRead+0x15c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026c0:	b2ff      	uxtb	r7, r7
 80026c2:	6127      	str	r7, [r4, #16]
 80026c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80026c8:	d16a      	bne.n	80027a0 <I2C_RequestMemoryRead+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ca:	6963      	ldr	r3, [r4, #20]
 80026cc:	061b      	lsls	r3, r3, #24
 80026ce:	d416      	bmi.n	80026fe <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d0:	6963      	ldr	r3, [r4, #20]
 80026d2:	055f      	lsls	r7, r3, #21
 80026d4:	d5f9      	bpl.n	80026ca <I2C_RequestMemoryRead+0x14e>
 80026d6:	e78b      	b.n	80025f0 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026d8:	0a3b      	lsrs	r3, r7, #8
 80026da:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026dc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80026e0:	d17f      	bne.n	80027e2 <I2C_RequestMemoryRead+0x266>
 80026e2:	6963      	ldr	r3, [r4, #20]
 80026e4:	061d      	lsls	r5, r3, #24
 80026e6:	d4eb      	bmi.n	80026c0 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026e8:	6963      	ldr	r3, [r4, #20]
 80026ea:	0558      	lsls	r0, r3, #21
 80026ec:	d5f9      	bpl.n	80026e2 <I2C_RequestMemoryRead+0x166>
 80026ee:	e77f      	b.n	80025f0 <I2C_RequestMemoryRead+0x74>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	6832      	ldr	r2, [r6, #0]
 80026f2:	6813      	ldr	r3, [r2, #0]
 80026f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	e78c      	b.n	8002618 <I2C_RequestMemoryRead+0x9c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002706:	f1ba 3fff 	cmp.w	sl, #4294967295
 800270a:	d113      	bne.n	8002734 <I2C_RequestMemoryRead+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800270c:	6963      	ldr	r3, [r4, #20]
 800270e:	07d8      	lsls	r0, r3, #31
 8002710:	d5fc      	bpl.n	800270c <I2C_RequestMemoryRead+0x190>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002712:	f04b 0301 	orr.w	r3, fp, #1
 8002716:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002718:	f1ba 3fff 	cmp.w	sl, #4294967295
 800271c:	d003      	beq.n	8002726 <I2C_RequestMemoryRead+0x1aa>
 800271e:	e02b      	b.n	8002778 <I2C_RequestMemoryRead+0x1fc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002720:	6963      	ldr	r3, [r4, #20]
 8002722:	055b      	lsls	r3, r3, #21
 8002724:	d4a1      	bmi.n	800266a <I2C_RequestMemoryRead+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002726:	6963      	ldr	r3, [r4, #20]
 8002728:	43db      	mvns	r3, r3
 800272a:	f013 0302 	ands.w	r3, r3, #2
 800272e:	d1f7      	bne.n	8002720 <I2C_RequestMemoryRead+0x1a4>
  return HAL_OK;
 8002730:	4618      	mov	r0, r3
 8002732:	e771      	b.n	8002618 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002734:	6963      	ldr	r3, [r4, #20]
 8002736:	07d9      	lsls	r1, r3, #31
 8002738:	d4eb      	bmi.n	8002712 <I2C_RequestMemoryRead+0x196>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff fcbd 	bl	80020b8 <HAL_GetTick>
 800273e:	eba0 0009 	sub.w	r0, r0, r9
 8002742:	4582      	cmp	sl, r0
 8002744:	f4ff af79 	bcc.w	800263a <I2C_RequestMemoryRead+0xbe>
 8002748:	f1ba 0f00 	cmp.w	sl, #0
 800274c:	f43f af75 	beq.w	800263a <I2C_RequestMemoryRead+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002750:	6834      	ldr	r4, [r6, #0]
 8002752:	e7d8      	b.n	8002706 <I2C_RequestMemoryRead+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002754:	6963      	ldr	r3, [r4, #20]
 8002756:	061a      	lsls	r2, r3, #24
 8002758:	d4af      	bmi.n	80026ba <I2C_RequestMemoryRead+0x13e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800275a:	6963      	ldr	r3, [r4, #20]
 800275c:	055d      	lsls	r5, r3, #21
 800275e:	f53f af47 	bmi.w	80025f0 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7ff fca9 	bl	80020b8 <HAL_GetTick>
 8002766:	eba0 0009 	sub.w	r0, r0, r9
 800276a:	4582      	cmp	sl, r0
 800276c:	d34c      	bcc.n	8002808 <I2C_RequestMemoryRead+0x28c>
 800276e:	f1ba 0f00 	cmp.w	sl, #0
 8002772:	d049      	beq.n	8002808 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002774:	6834      	ldr	r4, [r6, #0]
 8002776:	e731      	b.n	80025dc <I2C_RequestMemoryRead+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002778:	6963      	ldr	r3, [r4, #20]
 800277a:	43db      	mvns	r3, r3
 800277c:	f013 0302 	ands.w	r3, r3, #2
 8002780:	d0d6      	beq.n	8002730 <I2C_RequestMemoryRead+0x1b4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002782:	6963      	ldr	r3, [r4, #20]
 8002784:	055a      	lsls	r2, r3, #21
 8002786:	f53f af70 	bmi.w	800266a <I2C_RequestMemoryRead+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278a:	f7ff fc95 	bl	80020b8 <HAL_GetTick>
 800278e:	eba0 0009 	sub.w	r0, r0, r9
 8002792:	4582      	cmp	sl, r0
 8002794:	d316      	bcc.n	80027c4 <I2C_RequestMemoryRead+0x248>
 8002796:	f1ba 0f00 	cmp.w	sl, #0
 800279a:	d013      	beq.n	80027c4 <I2C_RequestMemoryRead+0x248>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279c:	6834      	ldr	r4, [r6, #0]
 800279e:	e7bb      	b.n	8002718 <I2C_RequestMemoryRead+0x19c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a0:	6963      	ldr	r3, [r4, #20]
 80027a2:	061d      	lsls	r5, r3, #24
 80027a4:	d4ab      	bmi.n	80026fe <I2C_RequestMemoryRead+0x182>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a6:	6963      	ldr	r3, [r4, #20]
 80027a8:	055a      	lsls	r2, r3, #21
 80027aa:	f53f af21 	bmi.w	80025f0 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7ff fc83 	bl	80020b8 <HAL_GetTick>
 80027b2:	eba0 0009 	sub.w	r0, r0, r9
 80027b6:	4582      	cmp	sl, r0
 80027b8:	d326      	bcc.n	8002808 <I2C_RequestMemoryRead+0x28c>
 80027ba:	f1ba 0f00 	cmp.w	sl, #0
 80027be:	d023      	beq.n	8002808 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027c0:	6834      	ldr	r4, [r6, #0]
 80027c2:	e77f      	b.n	80026c4 <I2C_RequestMemoryRead+0x148>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c4:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c6:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c8:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ca:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ce:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d2:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80027d4:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80027de:	2001      	movs	r0, #1
 80027e0:	e71a      	b.n	8002618 <I2C_RequestMemoryRead+0x9c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e2:	6963      	ldr	r3, [r4, #20]
 80027e4:	0619      	lsls	r1, r3, #24
 80027e6:	f53f af6b 	bmi.w	80026c0 <I2C_RequestMemoryRead+0x144>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ea:	6963      	ldr	r3, [r4, #20]
 80027ec:	055b      	lsls	r3, r3, #21
 80027ee:	f53f aeff 	bmi.w	80025f0 <I2C_RequestMemoryRead+0x74>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7ff fc61 	bl	80020b8 <HAL_GetTick>
 80027f6:	eba0 0009 	sub.w	r0, r0, r9
 80027fa:	4582      	cmp	sl, r0
 80027fc:	d304      	bcc.n	8002808 <I2C_RequestMemoryRead+0x28c>
 80027fe:	f1ba 0f00 	cmp.w	sl, #0
 8002802:	d001      	beq.n	8002808 <I2C_RequestMemoryRead+0x28c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002804:	6834      	ldr	r4, [r6, #0]
 8002806:	e769      	b.n	80026dc <I2C_RequestMemoryRead+0x160>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002808:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800280a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800280c:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800280e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002812:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002816:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002818:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800281c:	f043 0320 	orr.w	r3, r3, #32
 8002820:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8002822:	e6f5      	b.n	8002610 <I2C_RequestMemoryRead+0x94>

08002824 <HAL_I2C_Mem_Write>:
{
 8002824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002828:	4604      	mov	r4, r0
 800282a:	b083      	sub	sp, #12
 800282c:	4699      	mov	r9, r3
 800282e:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002832:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002834:	460f      	mov	r7, r1
 8002836:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7ff fc3e 	bl	80020b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800283c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002840:	2b20      	cmp	r3, #32
 8002842:	d004      	beq.n	800284e <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8002844:	2702      	movs	r7, #2
}
 8002846:	4638      	mov	r0, r7
 8002848:	b003      	add	sp, #12
 800284a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800284e:	4605      	mov	r5, r0
 8002850:	e005      	b.n	800285e <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002852:	f7ff fc31 	bl	80020b8 <HAL_GetTick>
 8002856:	1b40      	subs	r0, r0, r5
 8002858:	2819      	cmp	r0, #25
 800285a:	f200 80aa 	bhi.w	80029b2 <HAL_I2C_Mem_Write+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	6983      	ldr	r3, [r0, #24]
 8002862:	ea6f 0c03 	mvn.w	ip, r3
 8002866:	f01c 0b02 	ands.w	fp, ip, #2
 800286a:	d0f2      	beq.n	8002852 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 800286c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002870:	2b01      	cmp	r3, #1
 8002872:	d0e7      	beq.n	8002844 <HAL_I2C_Mem_Write+0x20>
 8002874:	2301      	movs	r3, #1
 8002876:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800287a:	6803      	ldr	r3, [r0, #0]
 800287c:	07db      	lsls	r3, r3, #31
 800287e:	d571      	bpl.n	8002964 <HAL_I2C_Mem_Write+0x140>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002880:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002882:	6807      	ldr	r7, [r0, #0]
 8002884:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8002888:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800288a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800288c:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800288e:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002890:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002894:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002898:	2040      	movs	r0, #64	; 0x40
 800289a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289e:	2000      	movs	r0, #0
 80028a0:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80028a2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a6:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80028a8:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028aa:	4857      	ldr	r0, [pc, #348]	; (8002a08 <HAL_I2C_Mem_Write+0x1e4>)
 80028ac:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ae:	464b      	mov	r3, r9
 80028b0:	4642      	mov	r2, r8
 80028b2:	4620      	mov	r0, r4
 80028b4:	f7ff fd6c 	bl	8002390 <I2C_RequestMemoryWrite>
 80028b8:	4607      	mov	r7, r0
 80028ba:	b9f8      	cbnz	r0, 80028fc <HAL_I2C_Mem_Write+0xd8>
    while (hi2c->XferSize > 0U)
 80028bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 80a0 	beq.w	8002a04 <HAL_I2C_Mem_Write+0x1e0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	1c72      	adds	r2, r6, #1
 80028c8:	d158      	bne.n	800297c <HAL_I2C_Mem_Write+0x158>
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	0610      	lsls	r0, r2, #24
 80028ce:	d41a      	bmi.n	8002906 <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	0551      	lsls	r1, r2, #21
 80028d4:	d5f9      	bpl.n	80028ca <HAL_I2C_Mem_Write+0xa6>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80028d6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d8:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80028dc:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028de:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80028e0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028e2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028e6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80028ec:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d038      	beq.n	800296e <HAL_I2C_Mem_Write+0x14a>
      return HAL_ERROR;
 80028fc:	2701      	movs	r7, #1
}
 80028fe:	4638      	mov	r0, r7
 8002900:	b003      	add	sp, #12
 8002902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002906:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800290a:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290e:	4661      	mov	r1, ip
      hi2c->XferSize--;
 8002910:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002914:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002918:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800291a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800291c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800291e:	3a01      	subs	r2, #1
 8002920:	b292      	uxth	r2, r2
 8002922:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002924:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002926:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 8002928:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800292a:	0740      	lsls	r0, r0, #29
 800292c:	d517      	bpl.n	800295e <HAL_I2C_Mem_Write+0x13a>
 800292e:	b942      	cbnz	r2, 8002942 <HAL_I2C_Mem_Write+0x11e>
 8002930:	1c72      	adds	r2, r6, #1
 8002932:	d159      	bne.n	80029e8 <HAL_I2C_Mem_Write+0x1c4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	0750      	lsls	r0, r2, #29
 8002938:	d449      	bmi.n	80029ce <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	0551      	lsls	r1, r2, #21
 800293e:	d5f9      	bpl.n	8002934 <HAL_I2C_Mem_Write+0x110>
 8002940:	e7c9      	b.n	80028d6 <HAL_I2C_Mem_Write+0xb2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002942:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8002946:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8002948:	f10c 0102 	add.w	r1, ip, #2
 800294c:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800294e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002950:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 8002954:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8002956:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8002958:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 800295a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800295c:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800295e:	2a00      	cmp	r2, #0
 8002960:	d1b1      	bne.n	80028c6 <HAL_I2C_Mem_Write+0xa2>
 8002962:	e7e5      	b.n	8002930 <HAL_I2C_Mem_Write+0x10c>
      __HAL_I2C_ENABLE(hi2c);
 8002964:	6803      	ldr	r3, [r0, #0]
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6003      	str	r3, [r0, #0]
 800296c:	e788      	b.n	8002880 <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296e:	6822      	ldr	r2, [r4, #0]
 8002970:	6813      	ldr	r3, [r2, #0]
 8002972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8002976:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e764      	b.n	8002846 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	0612      	lsls	r2, r2, #24
 8002980:	d4c1      	bmi.n	8002906 <HAL_I2C_Mem_Write+0xe2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	0551      	lsls	r1, r2, #21
 8002986:	d4a6      	bmi.n	80028d6 <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002988:	f7ff fb96 	bl	80020b8 <HAL_GetTick>
 800298c:	1b40      	subs	r0, r0, r5
 800298e:	4286      	cmp	r6, r0
 8002990:	d301      	bcc.n	8002996 <HAL_I2C_Mem_Write+0x172>
 8002992:	2e00      	cmp	r6, #0
 8002994:	d196      	bne.n	80028c4 <HAL_I2C_Mem_Write+0xa0>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002996:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002998:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800299a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800299c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029a0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80029a6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029aa:	f043 0320 	orr.w	r3, r3, #32
 80029ae:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80029b0:	e7a1      	b.n	80028f6 <HAL_I2C_Mem_Write+0xd2>
        hi2c->State             = HAL_I2C_STATE_READY;
 80029b2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029b4:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029bc:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80029c2:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029c6:	f043 0320 	orr.w	r3, r3, #32
 80029ca:	6423      	str	r3, [r4, #64]	; 0x40
 80029cc:	e73a      	b.n	8002844 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d8:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80029de:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80029e6:	e72e      	b.n	8002846 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	0752      	lsls	r2, r2, #29
 80029ec:	d4ef      	bmi.n	80029ce <HAL_I2C_Mem_Write+0x1aa>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	0551      	lsls	r1, r2, #21
 80029f2:	f53f af70 	bmi.w	80028d6 <HAL_I2C_Mem_Write+0xb2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7ff fb5f 	bl	80020b8 <HAL_GetTick>
 80029fa:	1b40      	subs	r0, r0, r5
 80029fc:	4286      	cmp	r6, r0
 80029fe:	d3ca      	bcc.n	8002996 <HAL_I2C_Mem_Write+0x172>
 8002a00:	2e00      	cmp	r6, #0
 8002a02:	d0c8      	beq.n	8002996 <HAL_I2C_Mem_Write+0x172>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	e793      	b.n	8002930 <HAL_I2C_Mem_Write+0x10c>
 8002a08:	ffff0000 	.word	0xffff0000

08002a0c <HAL_I2C_Mem_Read>:
{
 8002a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a10:	4604      	mov	r4, r0
 8002a12:	b087      	sub	sp, #28
 8002a14:	4699      	mov	r9, r3
 8002a16:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8002a1a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002a1c:	460f      	mov	r7, r1
 8002a1e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff fb4a 	bl	80020b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a24:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d004      	beq.n	8002a36 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8002a2c:	2702      	movs	r7, #2
}
 8002a2e:	4638      	mov	r0, r7
 8002a30:	b007      	add	sp, #28
 8002a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a36:	4606      	mov	r6, r0
 8002a38:	e005      	b.n	8002a46 <HAL_I2C_Mem_Read+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7ff fb3d 	bl	80020b8 <HAL_GetTick>
 8002a3e:	1b80      	subs	r0, r0, r6
 8002a40:	2819      	cmp	r0, #25
 8002a42:	f200 80d2 	bhi.w	8002bea <HAL_I2C_Mem_Read+0x1de>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a46:	f8d4 c000 	ldr.w	ip, [r4]
 8002a4a:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002a4e:	43c0      	mvns	r0, r0
 8002a50:	f010 0b02 	ands.w	fp, r0, #2
 8002a54:	d0f1      	beq.n	8002a3a <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 8002a56:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d0e6      	beq.n	8002a2c <HAL_I2C_Mem_Read+0x20>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a64:	f8dc 3000 	ldr.w	r3, [ip]
 8002a68:	07d9      	lsls	r1, r3, #31
 8002a6a:	d537      	bpl.n	8002adc <HAL_I2C_Mem_Read+0xd0>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6c:	f8dc 0000 	ldr.w	r0, [ip]
 8002a70:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8002a74:	f8cc 0000 	str.w	r0, [ip]
    hi2c->pBuffPtr    = pData;
 8002a78:	9810      	ldr	r0, [sp, #64]	; 0x40
 8002a7a:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a7c:	2022      	movs	r0, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7e:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a82:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a86:	2040      	movs	r0, #64	; 0x40
 8002a88:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002a90:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a94:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002a96:	8520      	strh	r0, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a98:	4893      	ldr	r0, [pc, #588]	; (8002ce8 <HAL_I2C_Mem_Read+0x2dc>)
 8002a9a:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a9c:	4639      	mov	r1, r7
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff fd6a 	bl	800257c <I2C_RequestMemoryRead>
 8002aa8:	4607      	mov	r7, r0
 8002aaa:	2800      	cmp	r0, #0
 8002aac:	f040 80ab 	bne.w	8002c06 <HAL_I2C_Mem_Read+0x1fa>
    if (hi2c->XferSize == 0U)
 8002ab0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002ab2:	b9d2      	cbnz	r2, 8002aea <HAL_I2C_Mem_Read+0xde>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	9002      	str	r0, [sp, #8]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	9202      	str	r2, [sp, #8]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	9202      	str	r2, [sp, #8]
 8002ac0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aca:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	2220      	movs	r2, #32
 8002ace:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002ad2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002ada:	e7a8      	b.n	8002a2e <HAL_I2C_Mem_Read+0x22>
      __HAL_I2C_ENABLE(hi2c);
 8002adc:	f8dc 3000 	ldr.w	r3, [ip]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	f8cc 3000 	str.w	r3, [ip]
 8002ae8:	e7c0      	b.n	8002a6c <HAL_I2C_Mem_Read+0x60>
    else if (hi2c->XferSize == 1U)
 8002aea:	2a01      	cmp	r2, #1
 8002aec:	f000 812c 	beq.w	8002d48 <HAL_I2C_Mem_Read+0x33c>
    else if (hi2c->XferSize == 2U)
 8002af0:	2a02      	cmp	r2, #2
 8002af2:	f000 80bd 	beq.w	8002c70 <HAL_I2C_Mem_Read+0x264>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af6:	6823      	ldr	r3, [r4, #0]
 8002af8:	9005      	str	r0, [sp, #20]
 8002afa:	6959      	ldr	r1, [r3, #20]
 8002afc:	9105      	str	r1, [sp, #20]
 8002afe:	6999      	ldr	r1, [r3, #24]
 8002b00:	9105      	str	r1, [sp, #20]
 8002b02:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8002b04:	2a03      	cmp	r2, #3
 8002b06:	d849      	bhi.n	8002b9c <HAL_I2C_Mem_Read+0x190>
        if (hi2c->XferSize == 1U)
 8002b08:	2a01      	cmp	r2, #1
 8002b0a:	f000 80eb 	beq.w	8002ce4 <HAL_I2C_Mem_Read+0x2d8>
        else if (hi2c->XferSize == 2U)
 8002b0e:	2a02      	cmp	r2, #2
 8002b10:	f000 8089 	beq.w	8002c26 <HAL_I2C_Mem_Read+0x21a>
 8002b14:	1c69      	adds	r1, r5, #1
 8002b16:	f040 80bb 	bne.w	8002c90 <HAL_I2C_Mem_Read+0x284>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b1a:	695a      	ldr	r2, [r3, #20]
 8002b1c:	0752      	lsls	r2, r2, #29
 8002b1e:	d5fc      	bpl.n	8002b1a <HAL_I2C_Mem_Read+0x10e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b20:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b22:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b28:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002b2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b32:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b34:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002b36:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002b38:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002b3a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002b3c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b3e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b40:	8563      	strh	r3, [r4, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002b42:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b44:	6822      	ldr	r2, [r4, #0]
 8002b46:	f040 80af 	bne.w	8002ca8 <HAL_I2C_Mem_Read+0x29c>
 8002b4a:	6953      	ldr	r3, [r2, #20]
 8002b4c:	075b      	lsls	r3, r3, #29
 8002b4e:	d5fc      	bpl.n	8002b4a <HAL_I2C_Mem_Read+0x13e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b52:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b58:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	6913      	ldr	r3, [r2, #16]
 8002b5c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002b5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002b60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002b62:	6a60      	ldr	r0, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b64:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8002b66:	3b01      	subs	r3, #1
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b6c:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8002b6e:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8002b70:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8002b74:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002b76:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7a:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8002b7c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b82:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002b84:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002b86:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002b88:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002b8a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002b8c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002b8e:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b90:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b92:	2a00      	cmp	r2, #0
 8002b94:	d099      	beq.n	8002aca <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8002b96:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b98:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8002b9a:	d9b5      	bls.n	8002b08 <HAL_I2C_Mem_Read+0xfc>
 8002b9c:	b95d      	cbnz	r5, 8002bb6 <HAL_I2C_Mem_Read+0x1aa>
 8002b9e:	e0c5      	b.n	8002d2c <HAL_I2C_Mem_Read+0x320>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	06d0      	lsls	r0, r2, #27
 8002ba4:	f100 80b2 	bmi.w	8002d0c <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba8:	f7ff fa86 	bl	80020b8 <HAL_GetTick>
 8002bac:	1b80      	subs	r0, r0, r6
 8002bae:	4285      	cmp	r5, r0
 8002bb0:	f0c0 8086 	bcc.w	8002cc0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	0652      	lsls	r2, r2, #25
 8002bba:	d5f1      	bpl.n	8002ba0 <HAL_I2C_Mem_Read+0x194>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8002bc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bc4:	6820      	ldr	r0, [r4, #0]
        hi2c->XferSize--;
 8002bc6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002bc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bd0:	6943      	ldr	r3, [r0, #20]
        hi2c->XferSize--;
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8002bd6:	f101 0c01 	add.w	ip, r1, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bda:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8002bdc:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8002bde:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002be2:	d5d6      	bpl.n	8002b92 <HAL_I2C_Mem_Read+0x186>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be4:	6903      	ldr	r3, [r0, #16]
 8002be6:	704b      	strb	r3, [r1, #1]
 8002be8:	e036      	b.n	8002c58 <HAL_I2C_Mem_Read+0x24c>
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bea:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bec:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bf0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bf4:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bfa:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bfe:	f043 0320 	orr.w	r3, r3, #32
 8002c02:	6423      	str	r3, [r4, #64]	; 0x40
 8002c04:	e712      	b.n	8002a2c <HAL_I2C_Mem_Read+0x20>
      return HAL_ERROR;
 8002c06:	2701      	movs	r7, #1
}
 8002c08:	4638      	mov	r0, r7
 8002c0a:	b007      	add	sp, #28
 8002c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	0750      	lsls	r0, r2, #29
 8002c14:	d40c      	bmi.n	8002c30 <HAL_I2C_Mem_Read+0x224>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7ff fa4f 	bl	80020b8 <HAL_GetTick>
 8002c1a:	1b80      	subs	r0, r0, r6
 8002c1c:	4285      	cmp	r5, r0
 8002c1e:	d34f      	bcc.n	8002cc0 <HAL_I2C_Mem_Read+0x2b4>
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	d04d      	beq.n	8002cc0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	1c69      	adds	r1, r5, #1
 8002c28:	d1f2      	bne.n	8002c10 <HAL_I2C_Mem_Read+0x204>
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	0752      	lsls	r2, r2, #29
 8002c2e:	d5fc      	bpl.n	8002c2a <HAL_I2C_Mem_Read+0x21e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c36:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c3c:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8002c3e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8002c40:	6a62      	ldr	r2, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002c48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8002c50:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c52:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8002c54:	6261      	str	r1, [r4, #36]	; 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c56:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002c5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8002c60:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8002c62:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002c64:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8002c66:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002c68:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8002c6a:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002c6c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002c6e:	e790      	b.n	8002b92 <HAL_I2C_Mem_Read+0x186>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002c78:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c7a:	6819      	ldr	r1, [r3, #0]
 8002c7c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002c80:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c82:	9004      	str	r0, [sp, #16]
 8002c84:	6959      	ldr	r1, [r3, #20]
 8002c86:	9104      	str	r1, [sp, #16]
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	9104      	str	r1, [sp, #16]
 8002c8c:	9904      	ldr	r1, [sp, #16]
 8002c8e:	e739      	b.n	8002b04 <HAL_I2C_Mem_Read+0xf8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	0750      	lsls	r0, r2, #29
 8002c94:	f53f af44 	bmi.w	8002b20 <HAL_I2C_Mem_Read+0x114>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c98:	f7ff fa0e 	bl	80020b8 <HAL_GetTick>
 8002c9c:	1b80      	subs	r0, r0, r6
 8002c9e:	4285      	cmp	r5, r0
 8002ca0:	d30e      	bcc.n	8002cc0 <HAL_I2C_Mem_Read+0x2b4>
 8002ca2:	b16d      	cbz	r5, 8002cc0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	e735      	b.n	8002b14 <HAL_I2C_Mem_Read+0x108>
 8002ca8:	6953      	ldr	r3, [r2, #20]
 8002caa:	0758      	lsls	r0, r3, #29
 8002cac:	f53f af50 	bmi.w	8002b50 <HAL_I2C_Mem_Read+0x144>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb0:	f7ff fa02 	bl	80020b8 <HAL_GetTick>
 8002cb4:	1b80      	subs	r0, r0, r6
 8002cb6:	4285      	cmp	r5, r0
 8002cb8:	d302      	bcc.n	8002cc0 <HAL_I2C_Mem_Read+0x2b4>
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	f47f af41 	bne.w	8002b42 <HAL_I2C_Mem_Read+0x136>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cc0:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cc2:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cc4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cca:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002cd0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002cd4:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cd6:	f043 0320 	orr.w	r3, r3, #32
}
 8002cda:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002cde:	b007      	add	sp, #28
 8002ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce4:	b95d      	cbnz	r5, 8002cfe <HAL_I2C_Mem_Read+0x2f2>
 8002ce6:	e02b      	b.n	8002d40 <HAL_I2C_Mem_Read+0x334>
 8002ce8:	ffff0000 	.word	0xffff0000
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	06d2      	lsls	r2, r2, #27
 8002cf0:	d40c      	bmi.n	8002d0c <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf2:	f7ff f9e1 	bl	80020b8 <HAL_GetTick>
 8002cf6:	1b80      	subs	r0, r0, r6
 8002cf8:	4285      	cmp	r5, r0
 8002cfa:	d3e1      	bcc.n	8002cc0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	695a      	ldr	r2, [r3, #20]
 8002d00:	0651      	lsls	r1, r2, #25
 8002d02:	d5f3      	bpl.n	8002cec <HAL_I2C_Mem_Read+0x2e0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d08:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d0a:	e7a5      	b.n	8002c58 <HAL_I2C_Mem_Read+0x24c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d0e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d12:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d14:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d16:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d18:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d22:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002d24:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8002d28:	2701      	movs	r7, #1
 8002d2a:	e680      	b.n	8002a2e <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	0652      	lsls	r2, r2, #25
 8002d30:	f53f af44 	bmi.w	8002bbc <HAL_I2C_Mem_Read+0x1b0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	06d1      	lsls	r1, r2, #27
 8002d38:	d4e8      	bmi.n	8002d0c <HAL_I2C_Mem_Read+0x300>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	f7ff f9bd 	bl	80020b8 <HAL_GetTick>
 8002d3e:	e7bf      	b.n	8002cc0 <HAL_I2C_Mem_Read+0x2b4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	0650      	lsls	r0, r2, #25
 8002d44:	d5f6      	bpl.n	8002d34 <HAL_I2C_Mem_Read+0x328>
 8002d46:	e7dd      	b.n	8002d04 <HAL_I2C_Mem_Read+0x2f8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	6819      	ldr	r1, [r3, #0]
 8002d4c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002d50:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	9003      	str	r0, [sp, #12]
 8002d54:	6959      	ldr	r1, [r3, #20]
 8002d56:	9103      	str	r1, [sp, #12]
 8002d58:	6999      	ldr	r1, [r3, #24]
 8002d5a:	9103      	str	r1, [sp, #12]
 8002d5c:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5e:	6819      	ldr	r1, [r3, #0]
 8002d60:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002d64:	6019      	str	r1, [r3, #0]
 8002d66:	e6cd      	b.n	8002b04 <HAL_I2C_Mem_Read+0xf8>

08002d68 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	2800      	cmp	r0, #0
 8002d6a:	f000 81a2 	beq.w	80030b2 <HAL_RCC_OscConfig+0x34a>
{
 8002d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	6803      	ldr	r3, [r0, #0]
 8002d74:	07dd      	lsls	r5, r3, #31
{
 8002d76:	b082      	sub	sp, #8
 8002d78:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7a:	d52f      	bpl.n	8002ddc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7c:	499e      	ldr	r1, [pc, #632]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002d7e:	688a      	ldr	r2, [r1, #8]
 8002d80:	f002 020c 	and.w	r2, r2, #12
 8002d84:	2a04      	cmp	r2, #4
 8002d86:	f000 80ed 	beq.w	8002f64 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	688a      	ldr	r2, [r1, #8]
 8002d8c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d90:	2a08      	cmp	r2, #8
 8002d92:	f000 80e3 	beq.w	8002f5c <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9c:	f000 80ec 	beq.w	8002f78 <HAL_RCC_OscConfig+0x210>
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	f000 8175 	beq.w	8003092 <HAL_RCC_OscConfig+0x32a>
 8002da8:	4d93      	ldr	r5, [pc, #588]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002daa:	682a      	ldr	r2, [r5, #0]
 8002dac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002db0:	602a      	str	r2, [r5, #0]
 8002db2:	682a      	ldr	r2, [r5, #0]
 8002db4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f040 80e1 	bne.w	8002f82 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f97a 	bl	80020b8 <HAL_GetTick>
 8002dc4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7ff f976 	bl	80020b8 <HAL_GetTick>
 8002dcc:	1b80      	subs	r0, r0, r6
 8002dce:	2864      	cmp	r0, #100	; 0x64
 8002dd0:	f200 8101 	bhi.w	8002fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	039b      	lsls	r3, r3, #14
 8002dd8:	d4f6      	bmi.n	8002dc8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	079f      	lsls	r7, r3, #30
 8002dde:	d528      	bpl.n	8002e32 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002de0:	4a85      	ldr	r2, [pc, #532]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002de2:	6891      	ldr	r1, [r2, #8]
 8002de4:	f011 0f0c 	tst.w	r1, #12
 8002de8:	f000 8090 	beq.w	8002f0c <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dec:	6891      	ldr	r1, [r2, #8]
 8002dee:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002df2:	2908      	cmp	r1, #8
 8002df4:	f000 8086 	beq.w	8002f04 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df8:	68e3      	ldr	r3, [r4, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 810e 	beq.w	800301c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e00:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e02:	4e7d      	ldr	r6, [pc, #500]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e08:	f7ff f956 	bl	80020b8 <HAL_GetTick>
 8002e0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	e005      	b.n	8002e1c <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e10:	f7ff f952 	bl	80020b8 <HAL_GetTick>
 8002e14:	1b40      	subs	r0, r0, r5
 8002e16:	2802      	cmp	r0, #2
 8002e18:	f200 80dd 	bhi.w	8002fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	6833      	ldr	r3, [r6, #0]
 8002e1e:	0798      	lsls	r0, r3, #30
 8002e20:	d5f6      	bpl.n	8002e10 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e22:	6833      	ldr	r3, [r6, #0]
 8002e24:	6922      	ldr	r2, [r4, #16]
 8002e26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e2a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002e2e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	071a      	lsls	r2, r3, #28
 8002e34:	d451      	bmi.n	8002eda <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e36:	0758      	lsls	r0, r3, #29
 8002e38:	d52f      	bpl.n	8002e9a <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002e3c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e3e:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002e42:	d07f      	beq.n	8002f44 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002e44:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e46:	4e6e      	ldr	r6, [pc, #440]	; (8003000 <HAL_RCC_OscConfig+0x298>)
 8002e48:	6833      	ldr	r3, [r6, #0]
 8002e4a:	05d9      	lsls	r1, r3, #23
 8002e4c:	f140 80b3 	bpl.w	8002fb6 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e50:	68a3      	ldr	r3, [r4, #8]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	f000 80c3 	beq.w	8002fde <HAL_RCC_OscConfig+0x276>
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	f000 812c 	beq.w	80030b6 <HAL_RCC_OscConfig+0x34e>
 8002e5e:	4e66      	ldr	r6, [pc, #408]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002e60:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002e62:	f022 0201 	bic.w	r2, r2, #1
 8002e66:	6732      	str	r2, [r6, #112]	; 0x70
 8002e68:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002e6a:	f022 0204 	bic.w	r2, r2, #4
 8002e6e:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 80b9 	bne.w	8002fe8 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7ff f91f 	bl	80020b8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e7e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e80:	e005      	b.n	8002e8e <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e82:	f7ff f919 	bl	80020b8 <HAL_GetTick>
 8002e86:	1bc0      	subs	r0, r0, r7
 8002e88:	4540      	cmp	r0, r8
 8002e8a:	f200 80a4 	bhi.w	8002fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002e90:	0798      	lsls	r0, r3, #30
 8002e92:	d4f6      	bmi.n	8002e82 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	f040 8106 	bne.w	80030a6 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9a:	69a0      	ldr	r0, [r4, #24]
 8002e9c:	b1c8      	cbz	r0, 8002ed2 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e9e:	4d56      	ldr	r5, [pc, #344]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002ea0:	68ab      	ldr	r3, [r5, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	f000 80c9 	beq.w	800303e <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_RCC_OscConfig+0x294>)
 8002eae:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002eb2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb4:	f000 8109 	beq.w	80030ca <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f8fe 	bl	80020b8 <HAL_GetTick>
 8002ebc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	e005      	b.n	8002ecc <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec0:	f7ff f8fa 	bl	80020b8 <HAL_GetTick>
 8002ec4:	1b00      	subs	r0, r0, r4
 8002ec6:	2802      	cmp	r0, #2
 8002ec8:	f200 8085 	bhi.w	8002fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	019b      	lsls	r3, r3, #6
 8002ed0:	d4f6      	bmi.n	8002ec0 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2000      	movs	r0, #0
}
 8002ed4:	b002      	add	sp, #8
 8002ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	6963      	ldr	r3, [r4, #20]
 8002edc:	b30b      	cbz	r3, 8002f22 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee0:	4e45      	ldr	r6, [pc, #276]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002ee8:	f7ff f8e6 	bl	80020b8 <HAL_GetTick>
 8002eec:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e004      	b.n	8002efa <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f8e2 	bl	80020b8 <HAL_GetTick>
 8002ef4:	1b40      	subs	r0, r0, r5
 8002ef6:	2802      	cmp	r0, #2
 8002ef8:	d86d      	bhi.n	8002fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002efc:	079b      	lsls	r3, r3, #30
 8002efe:	d5f7      	bpl.n	8002ef0 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	e798      	b.n	8002e36 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f04:	6852      	ldr	r2, [r2, #4]
 8002f06:	0256      	lsls	r6, r2, #9
 8002f08:	f53f af76 	bmi.w	8002df8 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0c:	4a3a      	ldr	r2, [pc, #232]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	0795      	lsls	r5, r2, #30
 8002f12:	d544      	bpl.n	8002f9e <HAL_RCC_OscConfig+0x236>
 8002f14:	68e2      	ldr	r2, [r4, #12]
 8002f16:	2a01      	cmp	r2, #1
 8002f18:	d041      	beq.n	8002f9e <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8002f1a:	2001      	movs	r0, #1
}
 8002f1c:	b002      	add	sp, #8
 8002f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002f22:	4a36      	ldr	r2, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f24:	4e34      	ldr	r6, [pc, #208]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8002f26:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002f2a:	f7ff f8c5 	bl	80020b8 <HAL_GetTick>
 8002f2e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	e004      	b.n	8002f3c <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f32:	f7ff f8c1 	bl	80020b8 <HAL_GetTick>
 8002f36:	1b40      	subs	r0, r0, r5
 8002f38:	2802      	cmp	r0, #2
 8002f3a:	d84c      	bhi.n	8002fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002f3e:	079f      	lsls	r7, r3, #30
 8002f40:	d4f7      	bmi.n	8002f32 <HAL_RCC_OscConfig+0x1ca>
 8002f42:	e7dd      	b.n	8002f00 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f58:	2501      	movs	r5, #1
 8002f5a:	e774      	b.n	8002e46 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5c:	684a      	ldr	r2, [r1, #4]
 8002f5e:	0250      	lsls	r0, r2, #9
 8002f60:	f57f af19 	bpl.w	8002d96 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	0391      	lsls	r1, r2, #14
 8002f6a:	f57f af37 	bpl.w	8002ddc <HAL_RCC_OscConfig+0x74>
 8002f6e:	6862      	ldr	r2, [r4, #4]
 8002f70:	2a00      	cmp	r2, #0
 8002f72:	f47f af33 	bne.w	8002ddc <HAL_RCC_OscConfig+0x74>
 8002f76:	e7d0      	b.n	8002f1a <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002f7a:	6813      	ldr	r3, [r2, #0]
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f82:	f7ff f899 	bl	80020b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4e1c      	ldr	r6, [pc, #112]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002f88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e004      	b.n	8002f96 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7ff f894 	bl	80020b8 <HAL_GetTick>
 8002f90:	1b40      	subs	r0, r0, r5
 8002f92:	2864      	cmp	r0, #100	; 0x64
 8002f94:	d81f      	bhi.n	8002fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	6833      	ldr	r3, [r6, #0]
 8002f98:	039a      	lsls	r2, r3, #14
 8002f9a:	d5f7      	bpl.n	8002f8c <HAL_RCC_OscConfig+0x224>
 8002f9c:	e71d      	b.n	8002dda <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002fa0:	6920      	ldr	r0, [r4, #16]
 8002fa2:	680a      	ldr	r2, [r1, #0]
 8002fa4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002fa8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002fac:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	071a      	lsls	r2, r3, #28
 8002fb0:	f57f af41 	bpl.w	8002e36 <HAL_RCC_OscConfig+0xce>
 8002fb4:	e791      	b.n	8002eda <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	6833      	ldr	r3, [r6, #0]
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002fbe:	f7ff f87b 	bl	80020b8 <HAL_GetTick>
 8002fc2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	6833      	ldr	r3, [r6, #0]
 8002fc6:	05da      	lsls	r2, r3, #23
 8002fc8:	f53f af42 	bmi.w	8002e50 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fcc:	f7ff f874 	bl	80020b8 <HAL_GetTick>
 8002fd0:	1bc0      	subs	r0, r0, r7
 8002fd2:	2802      	cmp	r0, #2
 8002fd4:	d9f6      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002fd6:	2003      	movs	r0, #3
}
 8002fd8:	b002      	add	sp, #8
 8002fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fde:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
 8002fe0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002fe8:	f7ff f866 	bl	80020b8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	4f02      	ldr	r7, [pc, #8]	; (8002ff8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8002fee:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff4:	e00b      	b.n	800300e <HAL_RCC_OscConfig+0x2a6>
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	42470000 	.word	0x42470000
 8003000:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7ff f858 	bl	80020b8 <HAL_GetTick>
 8003008:	1b80      	subs	r0, r0, r6
 800300a:	4540      	cmp	r0, r8
 800300c:	d8e3      	bhi.n	8002fd6 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003010:	079b      	lsls	r3, r3, #30
 8003012:	d5f7      	bpl.n	8003004 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8003014:	2d00      	cmp	r5, #0
 8003016:	f43f af40 	beq.w	8002e9a <HAL_RCC_OscConfig+0x132>
 800301a:	e044      	b.n	80030a6 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 800301c:	4a42      	ldr	r2, [pc, #264]	; (8003128 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4e43      	ldr	r6, [pc, #268]	; (800312c <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8003020:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003022:	f7ff f849 	bl	80020b8 <HAL_GetTick>
 8003026:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003028:	e004      	b.n	8003034 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302a:	f7ff f845 	bl	80020b8 <HAL_GetTick>
 800302e:	1b40      	subs	r0, r0, r5
 8003030:	2802      	cmp	r0, #2
 8003032:	d8d0      	bhi.n	8002fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003034:	6833      	ldr	r3, [r6, #0]
 8003036:	0799      	lsls	r1, r3, #30
 8003038:	d4f7      	bmi.n	800302a <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	e6f9      	b.n	8002e32 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303e:	2801      	cmp	r0, #1
 8003040:	f43f af48 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8003044:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003046:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003048:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304c:	4291      	cmp	r1, r2
 800304e:	f47f af64 	bne.w	8002f1a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003054:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003058:	4291      	cmp	r1, r2
 800305a:	f47f af5e 	bne.w	8002f1a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800305e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003060:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003064:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003066:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800306a:	f47f af56 	bne.w	8002f1a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800306e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003070:	0852      	lsrs	r2, r2, #1
 8003072:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003076:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003078:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800307c:	f47f af4d 	bne.w	8002f1a <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003080:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003082:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003086:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800308a:	bf14      	ite	ne
 800308c:	2001      	movne	r0, #1
 800308e:	2000      	moveq	r0, #0
 8003090:	e720      	b.n	8002ed4 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003092:	4b26      	ldr	r3, [pc, #152]	; (800312c <HAL_RCC_OscConfig+0x3c4>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030a2:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a4:	e76d      	b.n	8002f82 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4a21      	ldr	r2, [pc, #132]	; (800312c <HAL_RCC_OscConfig+0x3c4>)
 80030a8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ae:	6413      	str	r3, [r2, #64]	; 0x40
 80030b0:	e6f3      	b.n	8002e9a <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
}
 80030b4:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_RCC_OscConfig+0x3c4>)
 80030b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030ba:	f042 0204 	orr.w	r2, r2, #4
 80030be:	671a      	str	r2, [r3, #112]	; 0x70
 80030c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c8:	e78e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80030ca:	f7fe fff5 	bl	80020b8 <HAL_GetTick>
 80030ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d0:	e005      	b.n	80030de <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe fff1 	bl	80020b8 <HAL_GetTick>
 80030d6:	1b80      	subs	r0, r0, r6
 80030d8:	2802      	cmp	r0, #2
 80030da:	f63f af7c 	bhi.w	8002fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	0199      	lsls	r1, r3, #6
 80030e2:	d4f6      	bmi.n	80030d2 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80030e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030ea:	430b      	orrs	r3, r1
 80030ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80030f0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80030f4:	0852      	lsrs	r2, r2, #1
 80030f6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80030fa:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 80030fc:	490a      	ldr	r1, [pc, #40]	; (8003128 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003102:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003104:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003106:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003108:	f7fe ffd6 	bl	80020b8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310c:	4d07      	ldr	r5, [pc, #28]	; (800312c <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 800310e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003110:	e005      	b.n	800311e <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003112:	f7fe ffd1 	bl	80020b8 <HAL_GetTick>
 8003116:	1b00      	subs	r0, r0, r4
 8003118:	2802      	cmp	r0, #2
 800311a:	f63f af5c 	bhi.w	8002fd6 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311e:	682b      	ldr	r3, [r5, #0]
 8003120:	019a      	lsls	r2, r3, #6
 8003122:	d5f6      	bpl.n	8003112 <HAL_RCC_OscConfig+0x3aa>
 8003124:	e6d5      	b.n	8002ed2 <HAL_RCC_OscConfig+0x16a>
 8003126:	bf00      	nop
 8003128:	42470000 	.word	0x42470000
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003130:	4916      	ldr	r1, [pc, #88]	; (800318c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003132:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003134:	688b      	ldr	r3, [r1, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b04      	cmp	r3, #4
 800313c:	d01b      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0x46>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d117      	bne.n	8003172 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003142:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003144:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003148:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003150:	d113      	bne.n	800317a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	480f      	ldr	r0, [pc, #60]	; (8003190 <HAL_RCC_GetSysClockFreq+0x60>)
 8003154:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003158:	fba1 0100 	umull	r0, r1, r1, r0
 800315c:	f7fd f890 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003168:	3301      	adds	r3, #1
 800316a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800316c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003170:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003172:	4807      	ldr	r0, [pc, #28]	; (8003190 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8003174:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003176:	4807      	ldr	r0, [pc, #28]	; (8003194 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003178:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317a:	4806      	ldr	r0, [pc, #24]	; (8003194 <HAL_RCC_GetSysClockFreq+0x64>)
 800317c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003180:	2300      	movs	r3, #0
 8003182:	fba1 0100 	umull	r0, r1, r1, r0
 8003186:	f7fd f87b 	bl	8000280 <__aeabi_uldivmod>
 800318a:	e7e9      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x30>
 800318c:	40023800 	.word	0x40023800
 8003190:	00f42400 	.word	0x00f42400
 8003194:	017d7840 	.word	0x017d7840

08003198 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003198:	2800      	cmp	r0, #0
 800319a:	f000 8087 	beq.w	80032ac <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800319e:	4a48      	ldr	r2, [pc, #288]	; (80032c0 <HAL_RCC_ClockConfig+0x128>)
 80031a0:	6813      	ldr	r3, [r2, #0]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	428b      	cmp	r3, r1
{
 80031a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ac:	460d      	mov	r5, r1
 80031ae:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	d209      	bcs.n	80031c6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	b2cb      	uxtb	r3, r1
 80031b4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	428b      	cmp	r3, r1
 80031be:	d002      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80031c0:	2001      	movs	r0, #1
}
 80031c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	0798      	lsls	r0, r3, #30
 80031ca:	d514      	bpl.n	80031f6 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	0759      	lsls	r1, r3, #29
 80031ce:	d504      	bpl.n	80031da <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	493c      	ldr	r1, [pc, #240]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 80031d2:	688a      	ldr	r2, [r1, #8]
 80031d4:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80031d8:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	071a      	lsls	r2, r3, #28
 80031dc:	d504      	bpl.n	80031e8 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031de:	4939      	ldr	r1, [pc, #228]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 80031e0:	688a      	ldr	r2, [r1, #8]
 80031e2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80031e6:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e8:	4936      	ldr	r1, [pc, #216]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 80031ea:	68a0      	ldr	r0, [r4, #8]
 80031ec:	688a      	ldr	r2, [r1, #8]
 80031ee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031f2:	4302      	orrs	r2, r0
 80031f4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	07df      	lsls	r7, r3, #31
 80031f8:	d521      	bpl.n	800323e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031fa:	6862      	ldr	r2, [r4, #4]
 80031fc:	2a01      	cmp	r2, #1
 80031fe:	d057      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003200:	1e93      	subs	r3, r2, #2
 8003202:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003204:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 8003206:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003208:	d94d      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	0799      	lsls	r1, r3, #30
 800320c:	d5d8      	bpl.n	80031c0 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4e2d      	ldr	r6, [pc, #180]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 8003210:	68b3      	ldr	r3, [r6, #8]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	4313      	orrs	r3, r2
 8003218:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800321a:	f7fe ff4d 	bl	80020b8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003222:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003224:	e004      	b.n	8003230 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003226:	f7fe ff47 	bl	80020b8 <HAL_GetTick>
 800322a:	1bc0      	subs	r0, r0, r7
 800322c:	4540      	cmp	r0, r8
 800322e:	d844      	bhi.n	80032ba <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003230:	68b3      	ldr	r3, [r6, #8]
 8003232:	6862      	ldr	r2, [r4, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800323c:	d1f3      	bne.n	8003226 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323e:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <HAL_RCC_ClockConfig+0x128>)
 8003240:	6813      	ldr	r3, [r2, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	42ab      	cmp	r3, r5
 8003248:	d906      	bls.n	8003258 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	b2eb      	uxtb	r3, r5
 800324c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	42ab      	cmp	r3, r5
 8003256:	d1b3      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	075a      	lsls	r2, r3, #29
 800325c:	d506      	bpl.n	800326c <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800325e:	4919      	ldr	r1, [pc, #100]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 8003260:	68e0      	ldr	r0, [r4, #12]
 8003262:	688a      	ldr	r2, [r1, #8]
 8003264:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003268:	4302      	orrs	r2, r0
 800326a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	d507      	bpl.n	8003280 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 8003272:	6921      	ldr	r1, [r4, #16]
 8003274:	6893      	ldr	r3, [r2, #8]
 8003276:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800327a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800327e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003280:	f7ff ff56 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 8003284:	4a0f      	ldr	r2, [pc, #60]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 8003286:	4c10      	ldr	r4, [pc, #64]	; (80032c8 <HAL_RCC_ClockConfig+0x130>)
 8003288:	6892      	ldr	r2, [r2, #8]
 800328a:	4910      	ldr	r1, [pc, #64]	; (80032cc <HAL_RCC_ClockConfig+0x134>)
 800328c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003290:	4603      	mov	r3, r0
 8003292:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003294:	480e      	ldr	r0, [pc, #56]	; (80032d0 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003296:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003298:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800329a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800329c:	f7fe fe20 	bl	8001ee0 <HAL_InitTick>
  return HAL_OK;
 80032a0:	2000      	movs	r0, #0
}
 80032a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a6:	0198      	lsls	r0, r3, #6
 80032a8:	d4b1      	bmi.n	800320e <HAL_RCC_ClockConfig+0x76>
 80032aa:	e789      	b.n	80031c0 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80032ac:	2001      	movs	r0, #1
}
 80032ae:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HAL_RCC_ClockConfig+0x12c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	039e      	lsls	r6, r3, #14
 80032b6:	d4aa      	bmi.n	800320e <HAL_RCC_ClockConfig+0x76>
 80032b8:	e782      	b.n	80031c0 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80032ba:	2003      	movs	r0, #3
 80032bc:	e781      	b.n	80031c2 <HAL_RCC_ClockConfig+0x2a>
 80032be:	bf00      	nop
 80032c0:	40023c00 	.word	0x40023c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	0800b0cc 	.word	0x0800b0cc
 80032cc:	20000098 	.word	0x20000098
 80032d0:	200000a0 	.word	0x200000a0

080032d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80032d6:	4905      	ldr	r1, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80032dc:	6808      	ldr	r0, [r1, #0]
 80032de:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
}
 80032e4:	40d8      	lsrs	r0, r3
 80032e6:	4770      	bx	lr
 80032e8:	40023800 	.word	0x40023800
 80032ec:	20000098 	.word	0x20000098
 80032f0:	0800b0dc 	.word	0x0800b0dc

080032f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80032f6:	4905      	ldr	r1, [pc, #20]	; (800330c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4a05      	ldr	r2, [pc, #20]	; (8003310 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80032fc:	6808      	ldr	r0, [r1, #0]
 80032fe:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003302:	5cd3      	ldrb	r3, [r2, r3]
}
 8003304:	40d8      	lsrs	r0, r3
 8003306:	4770      	bx	lr
 8003308:	40023800 	.word	0x40023800
 800330c:	20000098 	.word	0x20000098
 8003310:	0800b0dc 	.word	0x0800b0dc

08003314 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003316:	220f      	movs	r2, #15
 8003318:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	f002 0203 	and.w	r2, r2, #3
 8003320:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003328:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003330:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	08db      	lsrs	r3, r3, #3
{
 8003336:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003338:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800333c:	4c05      	ldr	r4, [pc, #20]	; (8003354 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800333e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003340:	6823      	ldr	r3, [r4, #0]
}
 8003342:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	600b      	str	r3, [r1, #0]
}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40023c00 	.word	0x40023c00

08003358 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	461d      	mov	r5, r3
 8003360:	4616      	mov	r6, r2
 8003362:	460c      	mov	r4, r1
 8003364:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003366:	f7fe fea7 	bl	80020b8 <HAL_GetTick>
 800336a:	4435      	add	r5, r6
 800336c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800336e:	f7fe fea3 	bl	80020b8 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003372:	4b28      	ldr	r3, [pc, #160]	; (8003414 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xbc>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800337a:	fb05 f303 	mul.w	r3, r5, r3
  tmp_tickstart = HAL_GetTick();
 800337e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003380:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003382:	1c73      	adds	r3, r6, #1
 8003384:	6839      	ldr	r1, [r7, #0]
 8003386:	d107      	bne.n	8003398 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x40>
 8003388:	688b      	ldr	r3, [r1, #8]
 800338a:	ea34 0303 	bics.w	r3, r4, r3
 800338e:	d0fb      	beq.n	8003388 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8003390:	2000      	movs	r0, #0
}
 8003392:	b002      	add	sp, #8
 8003394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003398:	688b      	ldr	r3, [r1, #8]
 800339a:	ea34 0303 	bics.w	r3, r4, r3
 800339e:	d1f7      	bne.n	8003390 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033a0:	f7fe fe8a 	bl	80020b8 <HAL_GetTick>
 80033a4:	eba0 0008 	sub.w	r0, r0, r8
 80033a8:	42a8      	cmp	r0, r5
 80033aa:	d208      	bcs.n	80033be <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
      if (count == 0U)
 80033ac:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80033ae:	2b00      	cmp	r3, #0
      count--;
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80033b6:	bf08      	it	eq
 80033b8:	2500      	moveq	r5, #0
      count--;
 80033ba:	9301      	str	r3, [sp, #4]
 80033bc:	e7e1      	b.n	8003382 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033be:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c2:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c4:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033cc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ce:	d014      	beq.n	80033fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033d2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80033d6:	d007      	beq.n	80033e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 80033d8:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 80033da:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 80033dc:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80033e0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 80033e4:	2003      	movs	r0, #3
 80033e6:	e7d4      	b.n	8003392 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e7ee      	b.n	80033d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003400:	d002      	beq.n	8003408 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003402:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003406:	d1e3      	bne.n	80033d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
          __HAL_SPI_DISABLE(hspi);
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	e7de      	b.n	80033d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x78>
 8003412:	bf00      	nop
 8003414:	20000098 	.word	0x20000098

08003418 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003418:	2800      	cmp	r0, #0
 800341a:	d05c      	beq.n	80034d6 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800341c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800341e:	b570      	push	{r4, r5, r6, lr}
 8003420:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003422:	2900      	cmp	r1, #0
 8003424:	d047      	beq.n	80034b6 <HAL_SPI_Init+0x9e>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003426:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003428:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800342c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003430:	2300      	movs	r3, #0
 8003432:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003434:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8003438:	2a00      	cmp	r2, #0
 800343a:	d042      	beq.n	80034c2 <HAL_SPI_Init+0xaa>
 800343c:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 800343e:	6825      	ldr	r5, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003440:	68a2      	ldr	r2, [r4, #8]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003442:	2302      	movs	r3, #2
 8003444:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344e:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003456:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800345a:	4313      	orrs	r3, r2
 800345c:	68e2      	ldr	r2, [r4, #12]
 800345e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003462:	4313      	orrs	r3, r2
 8003464:	6922      	ldr	r2, [r4, #16]
 8003466:	f002 0202 	and.w	r2, r2, #2
 800346a:	4313      	orrs	r3, r2
 800346c:	6962      	ldr	r2, [r4, #20]
 800346e:	f002 0201 	and.w	r2, r2, #1
 8003472:	431a      	orrs	r2, r3
 8003474:	69e3      	ldr	r3, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003476:	f001 0010 	and.w	r0, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800347a:	f003 0638 	and.w	r6, r3, #56	; 0x38
 800347e:	69a1      	ldr	r1, [r4, #24]
 8003480:	6a23      	ldr	r3, [r4, #32]
 8003482:	f003 0e80 	and.w	lr, r3, #128	; 0x80
 8003486:	f401 7300 	and.w	r3, r1, #512	; 0x200
 800348a:	4313      	orrs	r3, r2
 800348c:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800348e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003490:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003494:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003498:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800349c:	4301      	orrs	r1, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800349e:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034a0:	6069      	str	r1, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034a2:	69eb      	ldr	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034a4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80034aa:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ac:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034ae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034b0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 80034b4:	bd70      	pop	{r4, r5, r6, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b6:	6843      	ldr	r3, [r0, #4]
 80034b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034bc:	d0b6      	beq.n	800342c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034be:	61c1      	str	r1, [r0, #28]
 80034c0:	e7b4      	b.n	800342c <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80034c2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7fe fc86 	bl	8001dd8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034cc:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d0:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 80034d4:	e7b3      	b.n	800343e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 80034d6:	2001      	movs	r0, #1
}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <HAL_SPI_Transmit>:
{
 80034dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80034e2:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
 80034e6:	2801      	cmp	r0, #1
{
 80034e8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80034ea:	f000 8087 	beq.w	80035fc <HAL_SPI_Transmit+0x120>
 80034ee:	461d      	mov	r5, r3
 80034f0:	2301      	movs	r3, #1
 80034f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80034f6:	4688      	mov	r8, r1
 80034f8:	4617      	mov	r7, r2
 80034fa:	f7fe fddd 	bl	80020b8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80034fe:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003502:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003504:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003506:	b2d8      	uxtb	r0, r3
 8003508:	d009      	beq.n	800351e <HAL_SPI_Transmit+0x42>
    errorcode = HAL_BUSY;
 800350a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800350c:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800350e:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003510:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003514:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003518:	b002      	add	sp, #8
 800351a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800351e:	f1b8 0f00 	cmp.w	r8, #0
 8003522:	d0f3      	beq.n	800350c <HAL_SPI_Transmit+0x30>
 8003524:	2f00      	cmp	r7, #0
 8003526:	d0f1      	beq.n	800350c <HAL_SPI_Transmit+0x30>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003528:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800352a:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800352c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003530:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003532:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003534:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003538:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->RxISR       = NULL;
 800353c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003540:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 8003542:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003544:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003546:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003548:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800354a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800354c:	f000 8083 	beq.w	8003656 <HAL_SPI_Transmit+0x17a>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003550:	6803      	ldr	r3, [r0, #0]
 8003552:	065b      	lsls	r3, r3, #25
    __HAL_SPI_DISABLE(hspi);
 8003554:	4684      	mov	ip, r0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003556:	d403      	bmi.n	8003560 <HAL_SPI_Transmit+0x84>
    __HAL_SPI_ENABLE(hspi);
 8003558:	6803      	ldr	r3, [r0, #0]
 800355a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355e:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003560:	68e3      	ldr	r3, [r4, #12]
 8003562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003566:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003568:	d04c      	beq.n	8003604 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8095 	beq.w	800369a <HAL_SPI_Transmit+0x1be>
 8003570:	2f01      	cmp	r7, #1
 8003572:	f000 8092 	beq.w	800369a <HAL_SPI_Transmit+0x1be>
    while (hspi->TxXferCount > 0U)
 8003576:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	b1bb      	cbz	r3, 80035ac <HAL_SPI_Transmit+0xd0>
 800357c:	2d00      	cmp	r5, #0
 800357e:	f000 80cb 	beq.w	8003718 <HAL_SPI_Transmit+0x23c>
 8003582:	1c6f      	adds	r7, r5, #1
 8003584:	d17e      	bne.n	8003684 <HAL_SPI_Transmit+0x1a8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	0790      	lsls	r0, r2, #30
 800358c:	f140 8090 	bpl.w	80036b0 <HAL_SPI_Transmit+0x1d4>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003590:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003596:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003598:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800359a:	3901      	subs	r1, #1
 800359c:	b289      	uxth	r1, r1
 800359e:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80035a0:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035a2:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80035a4:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80035a6:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80035a8:	2900      	cmp	r1, #0
 80035aa:	d1ec      	bne.n	8003586 <HAL_SPI_Transmit+0xaa>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035ac:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035ae:	4b72      	ldr	r3, [pc, #456]	; (8003778 <HAL_SPI_Transmit+0x29c>)
 80035b0:	4972      	ldr	r1, [pc, #456]	; (800377c <HAL_SPI_Transmit+0x2a0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	fba1 1303 	umull	r1, r3, r1, r3
 80035b8:	0d5b      	lsrs	r3, r3, #21
 80035ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80035be:	fb01 f303 	mul.w	r3, r1, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035c6:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c8:	d107      	bne.n	80035da <HAL_SPI_Transmit+0xfe>
 80035ca:	e0c6      	b.n	800375a <HAL_SPI_Transmit+0x27e>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 80035cc:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ce:	6822      	ldr	r2, [r4, #0]
      count--;
 80035d0:	3b01      	subs	r3, #1
 80035d2:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035d4:	6893      	ldr	r3, [r2, #8]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	d502      	bpl.n	80035e0 <HAL_SPI_Transmit+0x104>
      if (count == 0U)
 80035da:	9b01      	ldr	r3, [sp, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f5      	bne.n	80035cc <HAL_SPI_Transmit+0xf0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035e0:	68a3      	ldr	r3, [r4, #8]
 80035e2:	b933      	cbnz	r3, 80035f2 <HAL_SPI_Transmit+0x116>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e4:	6822      	ldr	r2, [r4, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	68d3      	ldr	r3, [r2, #12]
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	6893      	ldr	r3, [r2, #8]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80035f4:	3800      	subs	r0, #0
 80035f6:	bf18      	it	ne
 80035f8:	2001      	movne	r0, #1
error:
 80035fa:	e787      	b.n	800350c <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 80035fc:	2002      	movs	r0, #2
}
 80035fe:	b002      	add	sp, #8
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003604:	461a      	mov	r2, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d174      	bne.n	80036f4 <HAL_SPI_Transmit+0x218>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800360a:	4641      	mov	r1, r8
 800360c:	f831 7b02 	ldrh.w	r7, [r1], #2
 8003610:	60c7      	str	r7, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003612:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003614:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003616:	3901      	subs	r1, #1
 8003618:	b289      	uxth	r1, r1
 800361a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800361c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 800361e:	b289      	uxth	r1, r1
 8003620:	2900      	cmp	r1, #0
 8003622:	d0c4      	beq.n	80035ae <HAL_SPI_Transmit+0xd2>
 8003624:	2d00      	cmp	r5, #0
 8003626:	f000 808b 	beq.w	8003740 <HAL_SPI_Transmit+0x264>
 800362a:	1c69      	adds	r1, r5, #1
 800362c:	d158      	bne.n	80036e0 <HAL_SPI_Transmit+0x204>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800362e:	6883      	ldr	r3, [r0, #8]
 8003630:	079a      	lsls	r2, r3, #30
 8003632:	f140 8089 	bpl.w	8003748 <HAL_SPI_Transmit+0x26c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003636:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003638:	f832 3b02 	ldrh.w	r3, [r2], #2
 800363c:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800363e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003642:	3b01      	subs	r3, #1
 8003644:	b29b      	uxth	r3, r3
 8003646:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003648:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_SPI_Transmit+0x152>
 8003650:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003652:	461a      	mov	r2, r3
 8003654:	e7ab      	b.n	80035ae <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8003656:	6803      	ldr	r3, [r0, #0]
 8003658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365c:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800365e:	6803      	ldr	r3, [r0, #0]
 8003660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003664:	6003      	str	r3, [r0, #0]
 8003666:	e773      	b.n	8003550 <HAL_SPI_Transmit+0x74>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003668:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800366a:	7812      	ldrb	r2, [r2, #0]
 800366c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800366e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003670:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003672:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003674:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8003676:	b29b      	uxth	r3, r3
 8003678:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800367a:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800367c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800367e:	b29b      	uxth	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d093      	beq.n	80035ac <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	0791      	lsls	r1, r2, #30
 800368a:	d4ed      	bmi.n	8003668 <HAL_SPI_Transmit+0x18c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800368c:	f7fe fd14 	bl	80020b8 <HAL_GetTick>
 8003690:	1b80      	subs	r0, r0, r6
 8003692:	4285      	cmp	r5, r0
 8003694:	d8f2      	bhi.n	800367c <HAL_SPI_Transmit+0x1a0>
          errorcode = HAL_TIMEOUT;
 8003696:	2003      	movs	r0, #3
 8003698:	e738      	b.n	800350c <HAL_SPI_Transmit+0x30>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800369a:	f898 3000 	ldrb.w	r3, [r8]
 800369e:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80036a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80036a4:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036a6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80036a8:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036aa:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80036ac:	86e3      	strh	r3, [r4, #54]	; 0x36
 80036ae:	e762      	b.n	8003576 <HAL_SPI_Transmit+0x9a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036b0:	f7fe fd02 	bl	80020b8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80036b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f47f af64 	bne.w	8003586 <HAL_SPI_Transmit+0xaa>
 80036be:	e775      	b.n	80035ac <HAL_SPI_Transmit+0xd0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036c2:	f832 3b02 	ldrh.w	r3, [r2], #2
 80036c6:	f8cc 300c 	str.w	r3, [ip, #12]
        hspi->TxXferCount--;
 80036ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036cc:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80036d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0b9      	beq.n	8003650 <HAL_SPI_Transmit+0x174>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036dc:	f8d4 c000 	ldr.w	ip, [r4]
 80036e0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80036e4:	079b      	lsls	r3, r3, #30
 80036e6:	d4eb      	bmi.n	80036c0 <HAL_SPI_Transmit+0x1e4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036e8:	f7fe fce6 	bl	80020b8 <HAL_GetTick>
 80036ec:	1b80      	subs	r0, r0, r6
 80036ee:	4285      	cmp	r5, r0
 80036f0:	d9d1      	bls.n	8003696 <HAL_SPI_Transmit+0x1ba>
 80036f2:	e7ef      	b.n	80036d4 <HAL_SPI_Transmit+0x1f8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f4:	2f01      	cmp	r7, #1
 80036f6:	d191      	bne.n	800361c <HAL_SPI_Transmit+0x140>
 80036f8:	e787      	b.n	800360a <HAL_SPI_Transmit+0x12e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036fc:	7812      	ldrb	r2, [r2, #0]
 80036fe:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003700:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003702:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003704:	3b01      	subs	r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800370a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800370c:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 800370e:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003710:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8003712:	2b00      	cmp	r3, #0
 8003714:	f43f af4a 	beq.w	80035ac <HAL_SPI_Transmit+0xd0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003718:	6823      	ldr	r3, [r4, #0]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	0792      	lsls	r2, r2, #30
 800371e:	d4ec      	bmi.n	80036fa <HAL_SPI_Transmit+0x21e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003720:	f7fe fcca 	bl	80020b8 <HAL_GetTick>
 8003724:	e7b7      	b.n	8003696 <HAL_SPI_Transmit+0x1ba>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003726:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003728:	f831 2b02 	ldrh.w	r2, [r1], #2
 800372c:	60c2      	str	r2, [r0, #12]
        hspi->TxXferCount--;
 800372e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003730:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003732:	3a01      	subs	r2, #1
 8003734:	b292      	uxth	r2, r2
 8003736:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003738:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800373a:	b292      	uxth	r2, r2
 800373c:	2a00      	cmp	r2, #0
 800373e:	d088      	beq.n	8003652 <HAL_SPI_Transmit+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003740:	6882      	ldr	r2, [r0, #8]
 8003742:	0797      	lsls	r7, r2, #30
 8003744:	d5ec      	bpl.n	8003720 <HAL_SPI_Transmit+0x244>
 8003746:	e7ee      	b.n	8003726 <HAL_SPI_Transmit+0x24a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003748:	f7fe fcb6 	bl	80020b8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800374c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f43f af7d 	beq.w	8003650 <HAL_SPI_Transmit+0x174>
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	e769      	b.n	800362e <HAL_SPI_Transmit+0x152>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800375a:	4633      	mov	r3, r6
 800375c:	462a      	mov	r2, r5
 800375e:	2180      	movs	r1, #128	; 0x80
 8003760:	4620      	mov	r0, r4
 8003762:	f7ff fdf9 	bl	8003358 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003766:	2800      	cmp	r0, #0
 8003768:	f43f af3a 	beq.w	80035e0 <HAL_SPI_Transmit+0x104>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800376e:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003770:	4313      	orrs	r3, r2
 8003772:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003774:	6562      	str	r2, [r4, #84]	; 0x54
 8003776:	e733      	b.n	80035e0 <HAL_SPI_Transmit+0x104>
 8003778:	20000098 	.word	0x20000098
 800377c:	165e9f81 	.word	0x165e9f81

08003780 <HAL_SPI_TransmitReceive>:
{
 8003780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003784:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003786:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 800378a:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 800378c:	2801      	cmp	r0, #1
{
 800378e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003790:	f000 8083 	beq.w	800389a <HAL_SPI_TransmitReceive+0x11a>
 8003794:	461f      	mov	r7, r3
 8003796:	2301      	movs	r3, #1
 8003798:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800379c:	4689      	mov	r9, r1
 800379e:	4690      	mov	r8, r2
 80037a0:	f7fe fc8a 	bl	80020b8 <HAL_GetTick>
 80037a4:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80037a6:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80037aa:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037ac:	2801      	cmp	r0, #1
  tmp_state           = hspi->State;
 80037ae:	b2c1      	uxtb	r1, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037b0:	d011      	beq.n	80037d6 <HAL_SPI_TransmitReceive+0x56>
 80037b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037b6:	d009      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 80037b8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80037ba:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80037bc:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80037be:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037c2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80037c6:	b003      	add	sp, #12
 80037c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80037cc:	68a2      	ldr	r2, [r4, #8]
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	d1f2      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x38>
 80037d2:	2904      	cmp	r1, #4
 80037d4:	d1f0      	bne.n	80037b8 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037d6:	f1b9 0f00 	cmp.w	r9, #0
 80037da:	d062      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x122>
 80037dc:	f1b8 0f00 	cmp.w	r8, #0
 80037e0:	d05f      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x122>
 80037e2:	2f00      	cmp	r7, #0
 80037e4:	d05d      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x122>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037e6:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037ea:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037ee:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037f0:	bf1c      	itt	ne
 80037f2:	2205      	movne	r2, #5
 80037f4:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f8:	2200      	movs	r2, #0
 80037fa:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80037fc:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003800:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = Size;
 8003802:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003804:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	6811      	ldr	r1, [r2, #0]
  hspi->RxXferSize  = Size;
 8003808:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800380a:	0649      	lsls	r1, r1, #25
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800380c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003810:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003812:	d403      	bmi.n	800381c <HAL_SPI_TransmitReceive+0x9c>
    __HAL_SPI_ENABLE(hspi);
 8003814:	6811      	ldr	r1, [r2, #0]
 8003816:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800381a:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800381c:	68e1      	ldr	r1, [r4, #12]
 800381e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003822:	d04e      	beq.n	80038c2 <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003824:	2b00      	cmp	r3, #0
 8003826:	d03e      	beq.n	80038a6 <HAL_SPI_TransmitReceive+0x126>
 8003828:	2f01      	cmp	r7, #1
 800382a:	d03c      	beq.n	80038a6 <HAL_SPI_TransmitReceive+0x126>
        txallowed = 1U;
 800382c:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003830:	b29b      	uxth	r3, r3
 8003832:	b91b      	cbnz	r3, 800383c <HAL_SPI_TransmitReceive+0xbc>
 8003834:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d07f      	beq.n	800393c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800383c:	6822      	ldr	r2, [r4, #0]
 800383e:	6893      	ldr	r3, [r2, #8]
 8003840:	0799      	lsls	r1, r3, #30
 8003842:	d50f      	bpl.n	8003864 <HAL_SPI_TransmitReceive+0xe4>
 8003844:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003846:	b29b      	uxth	r3, r3
 8003848:	b163      	cbz	r3, 8003864 <HAL_SPI_TransmitReceive+0xe4>
 800384a:	b15f      	cbz	r7, 8003864 <HAL_SPI_TransmitReceive+0xe4>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800384c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8003852:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8003854:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003856:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8003858:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800385a:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 800385c:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800385e:	6822      	ldr	r2, [r4, #0]
        hspi->TxXferCount--;
 8003860:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003862:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003864:	6893      	ldr	r3, [r2, #8]
 8003866:	f013 0301 	ands.w	r3, r3, #1
 800386a:	d00d      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x108>
 800386c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800386e:	b289      	uxth	r1, r1
 8003870:	b151      	cbz	r1, 8003888 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 1U;
 8003872:	461f      	mov	r7, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003874:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003876:	68d2      	ldr	r2, [r2, #12]
 8003878:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800387a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800387c:	3301      	adds	r3, #1
 800387e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003880:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003882:	3b01      	subs	r3, #1
 8003884:	b29b      	uxth	r3, r3
 8003886:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003888:	f7fe fc16 	bl	80020b8 <HAL_GetTick>
 800388c:	1b80      	subs	r0, r0, r6
 800388e:	42a8      	cmp	r0, r5
 8003890:	d314      	bcc.n	80038bc <HAL_SPI_TransmitReceive+0x13c>
 8003892:	1c6a      	adds	r2, r5, #1
 8003894:	d0cb      	beq.n	800382e <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8003896:	2003      	movs	r0, #3
 8003898:	e78f      	b.n	80037ba <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 800389a:	2002      	movs	r0, #2
}
 800389c:	b003      	add	sp, #12
 800389e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80038a2:	2001      	movs	r0, #1
 80038a4:	e789      	b.n	80037ba <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038a6:	f899 3000 	ldrb.w	r3, [r9]
 80038aa:	7313      	strb	r3, [r2, #12]
      hspi->TxXferCount--;
 80038ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80038b0:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b2:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80038b4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038b6:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80038b8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80038ba:	e7b7      	b.n	800382c <HAL_SPI_TransmitReceive+0xac>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038bc:	2d00      	cmp	r5, #0
 80038be:	d1b6      	bne.n	800382e <HAL_SPI_TransmitReceive+0xae>
 80038c0:	e7e9      	b.n	8003896 <HAL_SPI_TransmitReceive+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d16c      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x220>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c6:	4649      	mov	r1, r9
 80038c8:	f831 3b02 	ldrh.w	r3, [r1], #2
 80038cc:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 80038ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d0:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	86e3      	strh	r3, [r4, #54]	; 0x36
 80038d8:	1c6a      	adds	r2, r5, #1
{
 80038da:	f04f 0701 	mov.w	r7, #1
 80038de:	d025      	beq.n	800392c <HAL_SPI_TransmitReceive+0x1ac>
 80038e0:	e061      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x226>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038e2:	6822      	ldr	r2, [r4, #0]
 80038e4:	6893      	ldr	r3, [r2, #8]
 80038e6:	079b      	lsls	r3, r3, #30
 80038e8:	d50d      	bpl.n	8003906 <HAL_SPI_TransmitReceive+0x186>
 80038ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b153      	cbz	r3, 8003906 <HAL_SPI_TransmitReceive+0x186>
 80038f0:	b14f      	cbz	r7, 8003906 <HAL_SPI_TransmitReceive+0x186>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80038f4:	f831 3b02 	ldrh.w	r3, [r1], #2
 80038f8:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80038fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fc:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29b      	uxth	r3, r3
        txallowed = 0U;
 8003902:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 8003904:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003906:	6893      	ldr	r3, [r2, #8]
 8003908:	f013 0301 	ands.w	r3, r3, #1
 800390c:	d00c      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x1a8>
 800390e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003910:	b289      	uxth	r1, r1
 8003912:	b149      	cbz	r1, 8003928 <HAL_SPI_TransmitReceive+0x1a8>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003914:	68d1      	ldr	r1, [r2, #12]
 8003916:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003918:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 800391c:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 800391e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003920:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003922:	3b01      	subs	r3, #1
 8003924:	b29b      	uxth	r3, r3
 8003926:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003928:	f7fe fbc6 	bl	80020b8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800392c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1d6      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x162>
 8003934:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1d2      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x162>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800393c:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <HAL_SPI_TransmitReceive+0x28c>)
 800393e:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <HAL_SPI_TransmitReceive+0x290>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0d5b      	lsrs	r3, r3, #21
 8003948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800394c:	fb02 f303 	mul.w	r3, r2, r3
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003950:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003952:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003954:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003958:	d114      	bne.n	8003984 <HAL_SPI_TransmitReceive+0x204>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800395a:	4633      	mov	r3, r6
 800395c:	462a      	mov	r2, r5
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	4620      	mov	r0, r4
 8003962:	f7ff fcf9 	bl	8003358 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003966:	b180      	cbz	r0, 800398a <HAL_SPI_TransmitReceive+0x20a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003968:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800396a:	2220      	movs	r2, #32
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800396c:	4313      	orrs	r3, r2
 800396e:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003970:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003972:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8003974:	e721      	b.n	80037ba <HAL_SPI_TransmitReceive+0x3a>
      count--;
 8003976:	9b01      	ldr	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003978:	6822      	ldr	r2, [r4, #0]
      count--;
 800397a:	3b01      	subs	r3, #1
 800397c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800397e:	6893      	ldr	r3, [r2, #8]
 8003980:	061b      	lsls	r3, r3, #24
 8003982:	d502      	bpl.n	800398a <HAL_SPI_TransmitReceive+0x20a>
      if (count == 0U)
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f5      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800398a:	68a0      	ldr	r0, [r4, #8]
 800398c:	2800      	cmp	r0, #0
 800398e:	d13a      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x286>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	9000      	str	r0, [sp, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	9200      	str	r2, [sp, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	9b00      	ldr	r3, [sp, #0]
 800399e:	e70c      	b.n	80037ba <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a0:	2f01      	cmp	r7, #1
 80039a2:	d199      	bne.n	80038d8 <HAL_SPI_TransmitReceive+0x158>
 80039a4:	e78f      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x146>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	b91b      	cbnz	r3, 80039b4 <HAL_SPI_TransmitReceive+0x234>
 80039ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0c3      	beq.n	800393c <HAL_SPI_TransmitReceive+0x1bc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039b4:	6822      	ldr	r2, [r4, #0]
 80039b6:	6893      	ldr	r3, [r2, #8]
 80039b8:	0798      	lsls	r0, r3, #30
 80039ba:	d50d      	bpl.n	80039d8 <HAL_SPI_TransmitReceive+0x258>
 80039bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039be:	b29b      	uxth	r3, r3
 80039c0:	b153      	cbz	r3, 80039d8 <HAL_SPI_TransmitReceive+0x258>
 80039c2:	b14f      	cbz	r7, 80039d8 <HAL_SPI_TransmitReceive+0x258>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80039c6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80039ca:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039cc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80039ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29b      	uxth	r3, r3
        txallowed = 0U;
 80039d4:	2700      	movs	r7, #0
        hspi->TxXferCount--;
 80039d6:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039d8:	6893      	ldr	r3, [r2, #8]
 80039da:	f013 0301 	ands.w	r3, r3, #1
 80039de:	d00c      	beq.n	80039fa <HAL_SPI_TransmitReceive+0x27a>
 80039e0:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80039e2:	b289      	uxth	r1, r1
 80039e4:	b149      	cbz	r1, 80039fa <HAL_SPI_TransmitReceive+0x27a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039e6:	68d1      	ldr	r1, [r2, #12]
 80039e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039ea:	f822 1b02 	strh.w	r1, [r2], #2
        txallowed = 1U;
 80039ee:	461f      	mov	r7, r3
        hspi->RxXferCount--;
 80039f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039f2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039fa:	f7fe fb5d 	bl	80020b8 <HAL_GetTick>
 80039fe:	1b80      	subs	r0, r0, r6
 8003a00:	42a8      	cmp	r0, r5
 8003a02:	d3d0      	bcc.n	80039a6 <HAL_SPI_TransmitReceive+0x226>
 8003a04:	e747      	b.n	8003896 <HAL_SPI_TransmitReceive+0x116>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a06:	2000      	movs	r0, #0
 8003a08:	e6d7      	b.n	80037ba <HAL_SPI_TransmitReceive+0x3a>
 8003a0a:	bf00      	nop
 8003a0c:	20000098 	.word	0x20000098
 8003a10:	165e9f81 	.word	0x165e9f81

08003a14 <HAL_SPI_Receive>:
{
 8003a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a18:	6846      	ldr	r6, [r0, #4]
 8003a1a:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
{
 8003a1e:	b082      	sub	sp, #8
 8003a20:	4604      	mov	r4, r0
 8003a22:	4690      	mov	r8, r2
 8003a24:	461d      	mov	r5, r3
 8003a26:	460f      	mov	r7, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a28:	d073      	beq.n	8003b12 <HAL_SPI_Receive+0xfe>
  __HAL_LOCK(hspi);
 8003a2a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d07b      	beq.n	8003b2a <HAL_SPI_Receive+0x116>
 8003a32:	2301      	movs	r3, #1
 8003a34:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003a38:	f7fe fb3e 	bl	80020b8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003a3c:	f894 c051 	ldrb.w	ip, [r4, #81]	; 0x51
 8003a40:	f1bc 0f01 	cmp.w	ip, #1
  tickstart = HAL_GetTick();
 8003a44:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003a46:	fa5f f08c 	uxtb.w	r0, ip
 8003a4a:	d009      	beq.n	8003a60 <HAL_SPI_Receive+0x4c>
    errorcode = HAL_BUSY;
 8003a4c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003a4e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003a50:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003a52:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a56:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003a5a:	b002      	add	sp, #8
 8003a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003a60:	2f00      	cmp	r7, #0
 8003a62:	d0f4      	beq.n	8003a4e <HAL_SPI_Receive+0x3a>
 8003a64:	f1b8 0f00 	cmp.w	r8, #0
 8003a68:	d0f1      	beq.n	8003a4e <HAL_SPI_Receive+0x3a>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6a:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a6c:	63a7      	str	r7, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a6e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8003a72:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 8003a74:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a78:	f04f 0300 	mov.w	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a7c:	f04f 0104 	mov.w	r1, #4
 8003a80:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 8003a84:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a88:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a8a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a8c:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->RxXferCount = Size;
 8003a8e:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003a92:	86e3      	strh	r3, [r4, #54]	; 0x36
    __HAL_SPI_DISABLE(hspi);
 8003a94:	4613      	mov	r3, r2
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a96:	d107      	bne.n	8003aa8 <HAL_SPI_Receive+0x94>
    __HAL_SPI_DISABLE(hspi);
 8003a98:	6811      	ldr	r1, [r2, #0]
 8003a9a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003a9e:	6011      	str	r1, [r2, #0]
    SPI_1LINE_RX(hspi);
 8003aa0:	6811      	ldr	r1, [r2, #0]
 8003aa2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8003aa6:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aa8:	6811      	ldr	r1, [r2, #0]
 8003aaa:	064f      	lsls	r7, r1, #25
 8003aac:	d403      	bmi.n	8003ab6 <HAL_SPI_Receive+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8003aae:	6811      	ldr	r1, [r2, #0]
 8003ab0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003ab4:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ab6:	68e1      	ldr	r1, [r4, #12]
 8003ab8:	2900      	cmp	r1, #0
 8003aba:	d05a      	beq.n	8003b72 <HAL_SPI_Receive+0x15e>
    while (hspi->RxXferCount > 0U)
 8003abc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003abe:	b289      	uxth	r1, r1
 8003ac0:	b1a1      	cbz	r1, 8003aec <HAL_SPI_Receive+0xd8>
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	f000 80b3 	beq.w	8003c2e <HAL_SPI_Receive+0x21a>
 8003ac8:	1c68      	adds	r0, r5, #1
 8003aca:	d140      	bne.n	8003b4e <HAL_SPI_Receive+0x13a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003acc:	6893      	ldr	r3, [r2, #8]
 8003ace:	07d9      	lsls	r1, r3, #31
 8003ad0:	d547      	bpl.n	8003b62 <HAL_SPI_Receive+0x14e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ad4:	68d1      	ldr	r1, [r2, #12]
 8003ad6:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->RxXferCount--;
 8003ada:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003adc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003ade:	3901      	subs	r1, #1
 8003ae0:	b289      	uxth	r1, r1
 8003ae2:	87e1      	strh	r1, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1ef      	bne.n	8003acc <HAL_SPI_Receive+0xb8>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af2:	f000 80a0 	beq.w	8003c36 <HAL_SPI_Receive+0x222>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003af6:	4633      	mov	r3, r6
 8003af8:	462a      	mov	r2, r5
 8003afa:	2101      	movs	r1, #1
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff fc2b 	bl	8003358 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	f040 80a7 	bne.w	8003c56 <HAL_SPI_Receive+0x242>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003b0a:	3800      	subs	r0, #0
 8003b0c:	bf18      	it	ne
 8003b0e:	2001      	movne	r0, #1
error :
 8003b10:	e79d      	b.n	8003a4e <HAL_SPI_Receive+0x3a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b12:	6883      	ldr	r3, [r0, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d188      	bne.n	8003a2a <HAL_SPI_Receive+0x16>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b18:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b1a:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b1c:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b1e:	f880 5051 	strb.w	r5, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b22:	460a      	mov	r2, r1
 8003b24:	f7ff fe2c 	bl	8003780 <HAL_SPI_TransmitReceive>
 8003b28:	e797      	b.n	8003a5a <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 8003b2a:	2002      	movs	r0, #2
}
 8003b2c:	b002      	add	sp, #8
 8003b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8003b3a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b3c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003b44:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0cf      	beq.n	8003aec <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	07d2      	lsls	r2, r2, #31
 8003b52:	d4ee      	bmi.n	8003b32 <HAL_SPI_Receive+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b54:	f7fe fab0 	bl	80020b8 <HAL_GetTick>
 8003b58:	1b80      	subs	r0, r0, r6
 8003b5a:	4285      	cmp	r5, r0
 8003b5c:	d8f2      	bhi.n	8003b44 <HAL_SPI_Receive+0x130>
          errorcode = HAL_TIMEOUT;
 8003b5e:	2003      	movs	r0, #3
 8003b60:	e775      	b.n	8003a4e <HAL_SPI_Receive+0x3a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b62:	f7fe faa9 	bl	80020b8 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8003b66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0be      	beq.n	8003aec <HAL_SPI_Receive+0xd8>
 8003b6e:	6822      	ldr	r2, [r4, #0]
 8003b70:	e7ac      	b.n	8003acc <HAL_SPI_Receive+0xb8>
    while (hspi->RxXferCount > 0U)
 8003b72:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003b74:	b292      	uxth	r2, r2
 8003b76:	2a00      	cmp	r2, #0
 8003b78:	d0b8      	beq.n	8003aec <HAL_SPI_Receive+0xd8>
 8003b7a:	2d00      	cmp	r5, #0
 8003b7c:	d043      	beq.n	8003c06 <HAL_SPI_Receive+0x1f2>
 8003b7e:	1c6f      	adds	r7, r5, #1
 8003b80:	d00f      	beq.n	8003ba2 <HAL_SPI_Receive+0x18e>
 8003b82:	e027      	b.n	8003bd4 <HAL_SPI_Receive+0x1c0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b86:	7b1b      	ldrb	r3, [r3, #12]
 8003b88:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8003b8a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003b8e:	3901      	subs	r1, #1
 8003b90:	b289      	uxth	r1, r1
 8003b92:	87e1      	strh	r1, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003b94:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b96:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8003b98:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b9a:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0a5      	beq.n	8003aec <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	07d0      	lsls	r0, r2, #31
 8003ba6:	d4ed      	bmi.n	8003b84 <HAL_SPI_Receive+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba8:	f7fe fa86 	bl	80020b8 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8003bac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f5      	bne.n	8003ba0 <HAL_SPI_Receive+0x18c>
 8003bb4:	e79a      	b.n	8003aec <HAL_SPI_Receive+0xd8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bb8:	7b1b      	ldrb	r3, [r3, #12]
 8003bba:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8003bbc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003bc0:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bc2:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bc8:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8003bca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d08c      	beq.n	8003aec <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	07d1      	lsls	r1, r2, #31
 8003bd8:	d4ed      	bmi.n	8003bb6 <HAL_SPI_Receive+0x1a2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bda:	f7fe fa6d 	bl	80020b8 <HAL_GetTick>
 8003bde:	1b80      	subs	r0, r0, r6
 8003be0:	4285      	cmp	r5, r0
 8003be2:	d9bc      	bls.n	8003b5e <HAL_SPI_Receive+0x14a>
 8003be4:	e7f1      	b.n	8003bca <HAL_SPI_Receive+0x1b6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003be6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003be8:	7b1b      	ldrb	r3, [r3, #12]
 8003bea:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8003bec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003bf6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bf8:	3201      	adds	r2, #1
    while (hspi->RxXferCount > 0U)
 8003bfa:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bfc:	63a2      	str	r2, [r4, #56]	; 0x38
    while (hspi->RxXferCount > 0U)
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f43f af74 	beq.w	8003aec <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	07d2      	lsls	r2, r2, #31
 8003c0a:	d4ec      	bmi.n	8003be6 <HAL_SPI_Receive+0x1d2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0c:	f7fe fa54 	bl	80020b8 <HAL_GetTick>
 8003c10:	e7a5      	b.n	8003b5e <HAL_SPI_Receive+0x14a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003c14:	68d3      	ldr	r3, [r2, #12]
 8003c16:	f821 3b02 	strh.w	r3, [r1], #2
        hspi->RxXferCount--;
 8003c1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c1c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003c24:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f43f af5f 	beq.w	8003aec <HAL_SPI_Receive+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c2e:	6893      	ldr	r3, [r2, #8]
 8003c30:	07db      	lsls	r3, r3, #31
 8003c32:	d5eb      	bpl.n	8003c0c <HAL_SPI_Receive+0x1f8>
 8003c34:	e7ed      	b.n	8003c12 <HAL_SPI_Receive+0x1fe>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c36:	68a3      	ldr	r3, [r4, #8]
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3c:	d021      	beq.n	8003c82 <HAL_SPI_Receive+0x26e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c42:	d00f      	beq.n	8003c64 <HAL_SPI_Receive+0x250>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c44:	4633      	mov	r3, r6
 8003c46:	462a      	mov	r2, r5
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f7ff fb84 	bl	8003358 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	f43f af59 	beq.w	8003b08 <HAL_SPI_Receive+0xf4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c58:	f043 0320 	orr.w	r3, r3, #32
 8003c5c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c5e:	2320      	movs	r3, #32
 8003c60:	6563      	str	r3, [r4, #84]	; 0x54
 8003c62:	e751      	b.n	8003b08 <HAL_SPI_Receive+0xf4>
    __HAL_SPI_DISABLE(hspi);
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	6801      	ldr	r1, [r0, #0]
 8003c68:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8003c6c:	6001      	str	r1, [r0, #0]
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6e:	4633      	mov	r3, r6
 8003c70:	462a      	mov	r2, r5
 8003c72:	2101      	movs	r1, #1
 8003c74:	4620      	mov	r0, r4
 8003c76:	f7ff fb6f 	bl	8003358 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	f43f af44 	beq.w	8003b08 <HAL_SPI_Receive+0xf4>
 8003c80:	e7e9      	b.n	8003c56 <HAL_SPI_Receive+0x242>
    __HAL_SPI_DISABLE(hspi);
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	6813      	ldr	r3, [r2, #0]
 8003c86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c8a:	6013      	str	r3, [r2, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c8c:	e7da      	b.n	8003c44 <HAL_SPI_Receive+0x230>
 8003c8e:	bf00      	nop

08003c90 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d076      	beq.n	8003d82 <HAL_TIM_Base_Init+0xf2>
{
 8003c94:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d055      	beq.n	8003d50 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca4:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ca6:	4938      	ldr	r1, [pc, #224]	; (8003d88 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cae:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003cb0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb2:	d052      	beq.n	8003d5a <HAL_TIM_Base_Init+0xca>
 8003cb4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003cb8:	d021      	beq.n	8003cfe <HAL_TIM_Base_Init+0x6e>
 8003cba:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003cbe:	428a      	cmp	r2, r1
 8003cc0:	d01d      	beq.n	8003cfe <HAL_TIM_Base_Init+0x6e>
 8003cc2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003cc6:	428a      	cmp	r2, r1
 8003cc8:	d019      	beq.n	8003cfe <HAL_TIM_Base_Init+0x6e>
 8003cca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003cce:	428a      	cmp	r2, r1
 8003cd0:	d015      	beq.n	8003cfe <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8003cd6:	428a      	cmp	r2, r1
 8003cd8:	d015      	beq.n	8003d06 <HAL_TIM_Base_Init+0x76>
 8003cda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003cde:	428a      	cmp	r2, r1
 8003ce0:	d011      	beq.n	8003d06 <HAL_TIM_Base_Init+0x76>
 8003ce2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003ce6:	428a      	cmp	r2, r1
 8003ce8:	d00d      	beq.n	8003d06 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cea:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cec:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003cfa:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfc:	e010      	b.n	8003d20 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003cfe:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d04:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d08:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d14:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d16:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003d18:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003d1a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d1c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d1e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d20:	2301      	movs	r3, #1
 8003d22:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d24:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003d2c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003d30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003d34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003d4c:	2000      	movs	r0, #0
}
 8003d4e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d54:	f7fe f8a4 	bl	8001ea0 <HAL_TIM_Base_MspInit>
 8003d58:	e7a4      	b.n	8003ca4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003d5a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d62:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d68:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6a:	69a1      	ldr	r1, [r4, #24]
 8003d6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d70:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003d72:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d74:	68e3      	ldr	r3, [r4, #12]
 8003d76:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d78:	6863      	ldr	r3, [r4, #4]
 8003d7a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003d7c:	6963      	ldr	r3, [r4, #20]
 8003d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d80:	e7ce      	b.n	8003d20 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8003d82:	2001      	movs	r0, #1
}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000

08003d8c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003d8c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d127      	bne.n	8003de4 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d94:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d96:	4915      	ldr	r1, [pc, #84]	; (8003dec <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9e:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	d011      	beq.n	8003dce <HAL_TIM_Base_Start_IT+0x42>
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dae:	d00e      	beq.n	8003dce <HAL_TIM_Base_Start_IT+0x42>
 8003db0:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <HAL_TIM_Base_Start_IT+0x64>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <HAL_TIM_Base_Start_IT+0x42>
 8003db6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <HAL_TIM_Base_Start_IT+0x42>
 8003dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_Base_Start_IT+0x42>
 8003dc6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d104      	bne.n	8003dd8 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	2a06      	cmp	r2, #6
 8003dd6:	d007      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8003dde:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	4770      	bx	lr
    return HAL_ERROR;
 8003de4:	2001      	movs	r0, #1
 8003de6:	4770      	bx	lr
  return HAL_OK;
 8003de8:	2000      	movs	r0, #0
}
 8003dea:	4770      	bx	lr
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40000400 	.word	0x40000400

08003df4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop

08003df8 <HAL_TIM_IC_CaptureCallback>:
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <HAL_TIM_PWM_PulseFinishedCallback>:
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <HAL_TIM_TriggerCallback>:
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e04:	6803      	ldr	r3, [r0, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	0791      	lsls	r1, r2, #30
{
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e0e:	d502      	bpl.n	8003e16 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	0792      	lsls	r2, r2, #30
 8003e14:	d45f      	bmi.n	8003ed6 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	0750      	lsls	r0, r2, #29
 8003e1a:	d502      	bpl.n	8003e22 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	0751      	lsls	r1, r2, #29
 8003e20:	d446      	bmi.n	8003eb0 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	0712      	lsls	r2, r2, #28
 8003e26:	d502      	bpl.n	8003e2e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	0710      	lsls	r0, r2, #28
 8003e2c:	d42e      	bmi.n	8003e8c <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	06d2      	lsls	r2, r2, #27
 8003e32:	d502      	bpl.n	8003e3a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	06d0      	lsls	r0, r2, #27
 8003e38:	d418      	bmi.n	8003e6c <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	07d1      	lsls	r1, r2, #31
 8003e3e:	d502      	bpl.n	8003e46 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	07d2      	lsls	r2, r2, #31
 8003e44:	d45d      	bmi.n	8003f02 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	0610      	lsls	r0, r2, #24
 8003e4a:	d502      	bpl.n	8003e52 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	0611      	lsls	r1, r2, #24
 8003e50:	d45f      	bmi.n	8003f12 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	0652      	lsls	r2, r2, #25
 8003e56:	d502      	bpl.n	8003e5e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	0650      	lsls	r0, r2, #25
 8003e5c:	d461      	bmi.n	8003f22 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e5e:	691a      	ldr	r2, [r3, #16]
 8003e60:	0691      	lsls	r1, r2, #26
 8003e62:	d502      	bpl.n	8003e6a <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	0692      	lsls	r2, r2, #26
 8003e68:	d443      	bmi.n	8003ef2 <HAL_TIM_IRQHandler+0xee>
}
 8003e6a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e6c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e70:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e72:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e74:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003e7c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e7e:	d064      	beq.n	8003f4a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e80:	f7ff ffba 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e84:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e86:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e88:	7722      	strb	r2, [r4, #28]
 8003e8a:	e7d6      	b.n	8003e3a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e8c:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e90:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e92:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e94:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e9c:	d152      	bne.n	8003f44 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	f7ff ffa9 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f7ff ffaa 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eaa:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eac:	7722      	strb	r2, [r4, #28]
 8003eae:	e7be      	b.n	8003e2e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb0:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb4:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec2:	d13c      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec4:	f7ff ff96 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f7ff ff97 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	7722      	strb	r2, [r4, #28]
 8003ed4:	e7a5      	b.n	8003e22 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ed6:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eda:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003edc:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ede:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	079b      	lsls	r3, r3, #30
 8003ee4:	d025      	beq.n	8003f32 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	f7ff ff87 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eea:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eec:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eee:	7722      	strb	r2, [r4, #28]
 8003ef0:	e791      	b.n	8003e16 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003ef6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ef8:	611a      	str	r2, [r3, #16]
}
 8003efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003efe:	f000 b82b 	b.w	8003f58 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f02:	f06f 0201 	mvn.w	r2, #1
 8003f06:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7fc fced 	bl	80008e8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	e799      	b.n	8003e46 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003f18:	4620      	mov	r0, r4
 8003f1a:	f000 f81f 	bl	8003f5c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	e797      	b.n	8003e52 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f26:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003f28:	4620      	mov	r0, r4
 8003f2a:	f7ff ff69 	bl	8003e00 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	e795      	b.n	8003e5e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f32:	f7ff ff5f 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f36:	4620      	mov	r0, r4
 8003f38:	f7ff ff60 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8003f3c:	e7d5      	b.n	8003eea <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	f7ff ff5b 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
 8003f42:	e7c4      	b.n	8003ece <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003f44:	f7ff ff58 	bl	8003df8 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e7ae      	b.n	8003ea8 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	f7ff ff53 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7ff ff54 	bl	8003dfc <HAL_TIM_PWM_PulseFinishedCallback>
 8003f54:	e796      	b.n	8003e84 <HAL_TIM_IRQHandler+0x80>
 8003f56:	bf00      	nop

08003f58 <HAL_TIMEx_CommutCallback>:
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop

08003f5c <HAL_TIMEx_BreakCallback>:
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop

08003f60 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f60:	2800      	cmp	r0, #0
 8003f62:	f000 808f 	beq.w	8004084 <HAL_UART_Init+0x124>
{
 8003f66:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8081 	beq.w	800407a <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f78:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f7a:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003f7c:	2224      	movs	r2, #36	; 0x24
 8003f7e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f88:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8a:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f8c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f8e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8003f92:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f94:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f96:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f98:	4302      	orrs	r2, r0
 8003f9a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003f9c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f9e:	4302      	orrs	r2, r0
 8003fa0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003fa2:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003fa6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003faa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003fac:	430a      	orrs	r2, r1
 8003fae:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fb4:	4934      	ldr	r1, [pc, #208]	; (8004088 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fb6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fba:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fbc:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fbe:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fc0:	d035      	beq.n	800402e <HAL_UART_Init+0xce>
 8003fc2:	4a32      	ldr	r2, [pc, #200]	; (800408c <HAL_UART_Init+0x12c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d032      	beq.n	800402e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7ff f984 	bl	80032d4 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fcc:	69e3      	ldr	r3, [r4, #28]
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d032      	beq.n	800403a <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd4:	6863      	ldr	r3, [r4, #4]
 8003fd6:	2119      	movs	r1, #25
 8003fd8:	009a      	lsls	r2, r3, #2
 8003fda:	fba0 0101 	umull	r0, r1, r0, r1
 8003fde:	0f9b      	lsrs	r3, r3, #30
 8003fe0:	f7fc f94e 	bl	8000280 <__aeabi_uldivmod>
 8003fe4:	492a      	ldr	r1, [pc, #168]	; (8004090 <HAL_UART_Init+0x130>)
 8003fe6:	fba1 3200 	umull	r3, r2, r1, r0
 8003fea:	0952      	lsrs	r2, r2, #5
 8003fec:	2564      	movs	r5, #100	; 0x64
 8003fee:	fb05 0012 	mls	r0, r5, r2, r0
 8003ff2:	0100      	lsls	r0, r0, #4
 8003ff4:	3032      	adds	r0, #50	; 0x32
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	fba1 1000 	umull	r1, r0, r1, r0
 8003ffc:	0112      	lsls	r2, r2, #4
 8003ffe:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8004002:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800400a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004012:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004014:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004016:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004018:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800401a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800401e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004022:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004026:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800402a:	4628      	mov	r0, r5
}
 800402c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800402e:	f7ff f961 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004032:	69e3      	ldr	r3, [r4, #28]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d1cc      	bne.n	8003fd4 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800403a:	6862      	ldr	r2, [r4, #4]
 800403c:	2119      	movs	r1, #25
 800403e:	1892      	adds	r2, r2, r2
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	415b      	adcs	r3, r3
 8004046:	fba0 0101 	umull	r0, r1, r0, r1
 800404a:	f7fc f919 	bl	8000280 <__aeabi_uldivmod>
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <HAL_UART_Init+0x130>)
 8004050:	fba3 2100 	umull	r2, r1, r3, r0
 8004054:	094d      	lsrs	r5, r1, #5
 8004056:	2264      	movs	r2, #100	; 0x64
 8004058:	fb02 0215 	mls	r2, r2, r5, r0
 800405c:	00d2      	lsls	r2, r2, #3
 800405e:	3232      	adds	r2, #50	; 0x32
 8004060:	fba3 3202 	umull	r3, r2, r3, r2
 8004064:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004068:	0912      	lsrs	r2, r2, #4
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004070:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004074:	440a      	add	r2, r1
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	e7c4      	b.n	8004004 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800407a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800407e:	f7fd fe6f 	bl	8001d60 <HAL_UART_MspInit>
 8004082:	e779      	b.n	8003f78 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004084:	2001      	movs	r0, #1
}
 8004086:	4770      	bx	lr
 8004088:	40011000 	.word	0x40011000
 800408c:	40011400 	.word	0x40011400
 8004090:	51eb851f 	.word	0x51eb851f

08004094 <HAL_UART_Transmit>:
{
 8004094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004098:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800409a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800409e:	2820      	cmp	r0, #32
 80040a0:	d177      	bne.n	8004192 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 80040a2:	4689      	mov	r9, r1
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d040      	beq.n	800412a <HAL_UART_Transmit+0x96>
 80040a8:	4614      	mov	r4, r2
 80040aa:	2a00      	cmp	r2, #0
 80040ac:	d03d      	beq.n	800412a <HAL_UART_Transmit+0x96>
 80040ae:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 80040b0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d06c      	beq.n	8004192 <HAL_UART_Transmit+0xfe>
 80040b8:	2301      	movs	r3, #1
 80040ba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040be:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c2:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80040cc:	f7fd fff4 	bl	80020b8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d0:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 80040d2:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 80040d8:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 80040da:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040dc:	d05c      	beq.n	8004198 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 80040de:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 80040e0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80040e2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80040e4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d07e      	beq.n	80041ea <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ec:	682c      	ldr	r4, [r5, #0]
 80040ee:	1c72      	adds	r2, r6, #1
 80040f0:	d11e      	bne.n	8004130 <HAL_UART_Transmit+0x9c>
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	0613      	lsls	r3, r2, #24
 80040f6:	d5fc      	bpl.n	80040f2 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 80040f8:	f1b9 0f00 	cmp.w	r9, #0
 80040fc:	d044      	beq.n	8004188 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040fe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8004102:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8004104:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8004106:	3b01      	subs	r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800410c:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ec      	bne.n	80040ee <HAL_UART_Transmit+0x5a>
 8004114:	1c71      	adds	r1, r6, #1
 8004116:	d145      	bne.n	80041a4 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	065a      	lsls	r2, r3, #25
 800411c:	d5fc      	bpl.n	8004118 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800411e:	2320      	movs	r3, #32
 8004120:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8004124:	2000      	movs	r0, #0
}
 8004126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800412a:	2001      	movs	r0, #1
}
 800412c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	0618      	lsls	r0, r3, #24
 8004134:	d4e0      	bmi.n	80040f8 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004136:	b12e      	cbz	r6, 8004144 <HAL_UART_Transmit+0xb0>
 8004138:	f7fd ffbe 	bl	80020b8 <HAL_GetTick>
 800413c:	1bc0      	subs	r0, r0, r7
 800413e:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004140:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004142:	d2d4      	bcs.n	80040ee <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	f104 030c 	add.w	r3, r4, #12
 8004148:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800414c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	f104 010c 	add.w	r1, r4, #12
 8004154:	e841 3200 	strex	r2, r3, [r1]
 8004158:	2a00      	cmp	r2, #0
 800415a:	d1f3      	bne.n	8004144 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	f104 0314 	add.w	r3, r4, #20
 8004160:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	f104 0114 	add.w	r1, r4, #20
 800416c:	e841 3200 	strex	r2, r3, [r1]
 8004170:	2a00      	cmp	r2, #0
 8004172:	d1f3      	bne.n	800415c <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8004174:	2320      	movs	r3, #32
 8004176:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800417a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800417e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8004182:	2003      	movs	r0, #3
}
 8004184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004188:	f838 3b02 	ldrh.w	r3, [r8], #2
 800418c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004190:	e7b7      	b.n	8004102 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8004192:	2002      	movs	r0, #2
}
 8004194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004198:	692b      	ldr	r3, [r5, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d19f      	bne.n	80040de <HAL_UART_Transmit+0x4a>
 800419e:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 80041a0:	4699      	mov	r9, r3
 80041a2:	e79c      	b.n	80040de <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	065b      	lsls	r3, r3, #25
 80041a8:	d4b9      	bmi.n	800411e <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041aa:	b12e      	cbz	r6, 80041b8 <HAL_UART_Transmit+0x124>
 80041ac:	f7fd ff84 	bl	80020b8 <HAL_GetTick>
 80041b0:	1bc0      	subs	r0, r0, r7
 80041b2:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041b4:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041b6:	d2ad      	bcs.n	8004114 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b8:	f104 030c 	add.w	r3, r4, #12
 80041bc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	f104 010c 	add.w	r1, r4, #12
 80041c8:	e841 3200 	strex	r2, r3, [r1]
 80041cc:	2a00      	cmp	r2, #0
 80041ce:	d1f3      	bne.n	80041b8 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	f104 0314 	add.w	r3, r4, #20
 80041d4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	f104 0114 	add.w	r1, r4, #20
 80041e0:	e841 3200 	strex	r2, r3, [r1]
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d1f3      	bne.n	80041d0 <HAL_UART_Transmit+0x13c>
 80041e8:	e7c4      	b.n	8004174 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ea:	682c      	ldr	r4, [r5, #0]
 80041ec:	e792      	b.n	8004114 <HAL_UART_Transmit+0x80>
 80041ee:	bf00      	nop

080041f0 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    GPIOB->ODR &= ~(1UL << 0);
 80041f4:	4cb8      	ldr	r4, [pc, #736]	; (80044d8 <rc522_request+0x2e8>)
 80041f6:	6963      	ldr	r3, [r4, #20]
{
 80041f8:	b082      	sub	sp, #8
	    GPIOB->ODR &= ~(1UL << 0);
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004200:	f240 731a 	movw	r3, #1818	; 0x71a
{
 8004204:	4689      	mov	r9, r1
 8004206:	4605      	mov	r5, r0
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004208:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800420c:	2202      	movs	r2, #2
 800420e:	2364      	movs	r3, #100	; 0x64
 8004210:	a901      	add	r1, sp, #4
 8004212:	48b2      	ldr	r0, [pc, #712]	; (80044dc <rc522_request+0x2ec>)
 8004214:	f7ff f962 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004218:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800421a:	48b0      	ldr	r0, [pc, #704]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6163      	str	r3, [r4, #20]
  bool status=false;
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
  tagType[0] = reqMode;
 8004222:	f889 5000 	strb.w	r5, [r9]
	    GPIOB->ODR &= ~(1UL << 0);
 8004226:	6962      	ldr	r2, [r4, #20]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800422e:	f24f 7204 	movw	r2, #63236	; 0xf704
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004232:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004234:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004238:	a901      	add	r1, sp, #4
 800423a:	2202      	movs	r2, #2
 800423c:	f7ff f94e 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004240:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004242:	48a6      	ldr	r0, [pc, #664]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800424a:	6963      	ldr	r3, [r4, #20]
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004252:	f04f 0888 	mov.w	r8, #136	; 0x88
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004256:	2364      	movs	r3, #100	; 0x64
 8004258:	2201      	movs	r2, #1
 800425a:	f10d 0103 	add.w	r1, sp, #3
	uint8_t dataRd=0;
 800425e:	2600      	movs	r6, #0
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004260:	f88d 8003 	strb.w	r8, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004264:	f7ff f93a 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004268:	2364      	movs	r3, #100	; 0x64
 800426a:	2201      	movs	r2, #1
 800426c:	a901      	add	r1, sp, #4
 800426e:	489b      	ldr	r0, [pc, #620]	; (80044dc <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 8004270:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004274:	f7ff fbce 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004278:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800427a:	4898      	ldr	r0, [pc, #608]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004282:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004284:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004288:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 800428c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004290:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004292:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004294:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004298:	2202      	movs	r2, #2
 800429a:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800429c:	2508      	movs	r5, #8
 800429e:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042a2:	f7ff f91b 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80042a6:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80042a8:	488c      	ldr	r0, [pc, #560]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80042b0:	6963      	ldr	r3, [r4, #20]
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80042b8:	2201      	movs	r2, #1
 80042ba:	2364      	movs	r3, #100	; 0x64
 80042bc:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80042c0:	2594      	movs	r5, #148	; 0x94
 80042c2:	f88d 5003 	strb.w	r5, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80042c6:	f7ff f909 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80042ca:	2364      	movs	r3, #100	; 0x64
 80042cc:	2201      	movs	r2, #1
 80042ce:	a901      	add	r1, sp, #4
 80042d0:	4882      	ldr	r0, [pc, #520]	; (80044dc <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 80042d2:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80042d6:	f7ff fb9d 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80042da:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042dc:	487f      	ldr	r0, [pc, #508]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80042e4:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 80042e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80042ea:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 80042ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80042f2:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042f4:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80042f6:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80042fa:	2202      	movs	r2, #2
 80042fc:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80042fe:	2514      	movs	r5, #20
 8004300:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004304:	f7ff f8ea 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004308:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800430a:	4874      	ldr	r0, [pc, #464]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800430c:	f043 0301 	orr.w	r3, r3, #1
 8004310:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004312:	6963      	ldr	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004314:	2502      	movs	r5, #2
	    GPIOB->ODR &= ~(1UL << 0);
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800431c:	462a      	mov	r2, r5
 800431e:	2364      	movs	r3, #100	; 0x64
 8004320:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004322:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004326:	f7ff f8d9 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800432a:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800432c:	486b      	ldr	r0, [pc, #428]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004334:	6963      	ldr	r3, [r4, #20]

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8004336:	f899 2000 	ldrb.w	r2, [r9]
	    GPIOB->ODR &= ~(1UL << 0);
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004340:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004342:	f88d 2005 	strb.w	r2, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004346:	2364      	movs	r3, #100	; 0x64
 8004348:	462a      	mov	r2, r5
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800434a:	2712      	movs	r7, #18
 800434c:	f88d 7004 	strb.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004350:	f7ff f8c4 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004354:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004356:	4861      	ldr	r0, [pc, #388]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800435e:	6963      	ldr	r3, [r4, #20]
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004366:	462a      	mov	r2, r5
 8004368:	2364      	movs	r3, #100	; 0x64
 800436a:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800436c:	f640 4702 	movw	r7, #3074	; 0xc02
 8004370:	f8ad 7004 	strh.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004374:	f7ff f8b2 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004378:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800437a:	4858      	ldr	r0, [pc, #352]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800437c:	f043 0301 	orr.w	r3, r3, #1
 8004380:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004382:	6963      	ldr	r3, [r4, #20]
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800438a:	2201      	movs	r2, #1
 800438c:	2364      	movs	r3, #100	; 0x64
 800438e:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004392:	279a      	movs	r7, #154	; 0x9a
 8004394:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004398:	f7ff f8a0 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800439c:	2364      	movs	r3, #100	; 0x64
 800439e:	2201      	movs	r2, #1
 80043a0:	a901      	add	r1, sp, #4
 80043a2:	484e      	ldr	r0, [pc, #312]	; (80044dc <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 80043a4:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80043a8:	f7ff fb34 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80043ac:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80043ae:	484b      	ldr	r0, [pc, #300]	; (80044dc <rc522_request+0x2ec>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80043b0:	4f4a      	ldr	r7, [pc, #296]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80043b8:	6961      	ldr	r1, [r4, #20]
  return dataRd;
 80043ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80043be:	f021 0101 	bic.w	r1, r1, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 80043c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80043c6:	6161      	str	r1, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80043c8:	462a      	mov	r2, r5
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80043ca:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80043ce:	a901      	add	r1, sp, #4
 80043d0:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80043d2:	251a      	movs	r5, #26
 80043d4:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80043d8:	f7ff f880 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80043dc:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80043de:	483f      	ldr	r0, [pc, #252]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80043e6:	6963      	ldr	r3, [r4, #20]
 80043e8:	f023 0301 	bic.w	r3, r3, #1
 80043ec:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80043ee:	2201      	movs	r2, #1
 80043f0:	2364      	movs	r3, #100	; 0x64
 80043f2:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80043f6:	f88d 8003 	strb.w	r8, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80043fa:	f7ff f86f 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80043fe:	2364      	movs	r3, #100	; 0x64
 8004400:	4836      	ldr	r0, [pc, #216]	; (80044dc <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 8004402:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004406:	2201      	movs	r2, #1
 8004408:	a901      	add	r1, sp, #4
 800440a:	f7ff fb03 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800440e:	6963      	ldr	r3, [r4, #20]
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004416:	f89d 6004 	ldrb.w	r6, [sp, #4]
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
    i--;
 800441a:	2563      	movs	r5, #99	; 0x63
 800441c:	e018      	b.n	8004450 <rc522_request+0x260>
	    GPIOB->ODR &= ~(1UL << 0);
 800441e:	6966      	ldr	r6, [r4, #20]
 8004420:	f026 0601 	bic.w	r6, r6, #1
 8004424:	6166      	str	r6, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004426:	f88d 8003 	strb.w	r8, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800442a:	f7ff f857 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800442e:	2364      	movs	r3, #100	; 0x64
 8004430:	2201      	movs	r2, #1
 8004432:	a901      	add	r1, sp, #4
 8004434:	4638      	mov	r0, r7
	uint8_t dataRd=0;
 8004436:	f88d a004 	strb.w	sl, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800443a:	f7ff faeb 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800443e:	6963      	ldr	r3, [r4, #20]
    i--;
 8004440:	3d01      	subs	r5, #1
	    GPIOB->ODR |= (1UL << 0);
 8004442:	f043 0301 	orr.w	r3, r3, #1
 8004446:	6163      	str	r3, [r4, #20]
    i--;
 8004448:	b2ad      	uxth	r5, r5
  return dataRd;
 800444a:	f89d 6004 	ldrb.w	r6, [sp, #4]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800444e:	b15d      	cbz	r5, 8004468 <rc522_request+0x278>
 8004450:	f016 0f31 	tst.w	r6, #49	; 0x31
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004454:	f04f 0364 	mov.w	r3, #100	; 0x64
 8004458:	f04f 0201 	mov.w	r2, #1
 800445c:	f10d 0103 	add.w	r1, sp, #3
 8004460:	4638      	mov	r0, r7
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004462:	f006 0a31 	and.w	sl, r6, #49	; 0x31
 8004466:	d0da      	beq.n	800441e <rc522_request+0x22e>
	    GPIOB->ODR &= ~(1UL << 0);
 8004468:	4f1b      	ldr	r7, [pc, #108]	; (80044d8 <rc522_request+0x2e8>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800446a:	481c      	ldr	r0, [pc, #112]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR &= ~(1UL << 0);
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	617a      	str	r2, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004474:	2364      	movs	r3, #100	; 0x64
 8004476:	2201      	movs	r2, #1
 8004478:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800447c:	249a      	movs	r4, #154	; 0x9a
 800447e:	f88d 4003 	strb.w	r4, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004482:	f7ff f82b 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004486:	2400      	movs	r4, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004488:	2364      	movs	r3, #100	; 0x64
 800448a:	2201      	movs	r2, #1
 800448c:	a901      	add	r1, sp, #4
 800448e:	4813      	ldr	r0, [pc, #76]	; (80044dc <rc522_request+0x2ec>)
	uint8_t dataRd=0;
 8004490:	f88d 4004 	strb.w	r4, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004494:	f7ff fabe 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004498:	697b      	ldr	r3, [r7, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800449a:	4810      	ldr	r0, [pc, #64]	; (80044dc <rc522_request+0x2ec>)
	    GPIOB->ODR |= (1UL << 0);
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	617b      	str	r3, [r7, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80044a2:	697a      	ldr	r2, [r7, #20]
  return dataRd;
 80044a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80044a8:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 80044ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80044b0:	617a      	str	r2, [r7, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80044b2:	f88d 3005 	strb.w	r3, [sp, #5]
 80044b6:	231a      	movs	r3, #26
 80044b8:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80044bc:	2202      	movs	r2, #2
 80044be:	2364      	movs	r3, #100	; 0x64
 80044c0:	a901      	add	r1, sp, #4
 80044c2:	f7ff f80b 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	617b      	str	r3, [r7, #20]

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0

  if (i != 0)  {
 80044ce:	b93d      	cbnz	r5, 80044e0 <rc522_request+0x2f0>
    status = false;
 80044d0:	2000      	movs	r0, #0
}
 80044d2:	b002      	add	sp, #8
 80044d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d8:	40020400 	.word	0x40020400
 80044dc:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 80044e0:	697b      	ldr	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80044e2:	484f      	ldr	r0, [pc, #316]	; (8004620 <rc522_request+0x430>)
	    GPIOB->ODR &= ~(1UL << 0);
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	617b      	str	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80044ea:	2201      	movs	r2, #1
 80044ec:	2364      	movs	r3, #100	; 0x64
 80044ee:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80044f2:	258c      	movs	r5, #140	; 0x8c
 80044f4:	f88d 5003 	strb.w	r5, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80044f8:	f7fe fff0 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80044fc:	2364      	movs	r3, #100	; 0x64
 80044fe:	4848      	ldr	r0, [pc, #288]	; (8004620 <rc522_request+0x430>)
	uint8_t dataRd=0;
 8004500:	f88d 4004 	strb.w	r4, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004504:	2201      	movs	r2, #1
 8004506:	a901      	add	r1, sp, #4
 8004508:	f7ff fa84 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	617b      	str	r3, [r7, #20]
  return dataRd;
 8004514:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8004518:	f013 051b 	ands.w	r5, r3, #27
 800451c:	d1d8      	bne.n	80044d0 <rc522_request+0x2e0>
	    GPIOB->ODR &= ~(1UL << 0);
 800451e:	697b      	ldr	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004520:	483f      	ldr	r0, [pc, #252]	; (8004620 <rc522_request+0x430>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	617b      	str	r3, [r7, #20]
      status = true;
      if (n & irqEn & 0x01) {
 8004528:	43f4      	mvns	r4, r6
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800452a:	2364      	movs	r3, #100	; 0x64
 800452c:	2201      	movs	r2, #1
 800452e:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004532:	2694      	movs	r6, #148	; 0x94
 8004534:	f88d 6003 	strb.w	r6, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004538:	f7fe ffd0 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800453c:	2364      	movs	r3, #100	; 0x64
 800453e:	2201      	movs	r2, #1
 8004540:	a901      	add	r1, sp, #4
 8004542:	4837      	ldr	r0, [pc, #220]	; (8004620 <rc522_request+0x430>)
	uint8_t dataRd=0;
 8004544:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004548:	f7ff fa64 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 800454c:	697b      	ldr	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800454e:	4834      	ldr	r0, [pc, #208]	; (8004620 <rc522_request+0x430>)
	    GPIOB->ODR |= (1UL << 0);
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	617b      	str	r3, [r7, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004556:	697b      	ldr	r3, [r7, #20]
  return dataRd;
 8004558:	f89d 8004 	ldrb.w	r8, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 800455c:	f023 0301 	bic.w	r3, r3, #1
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004560:	2698      	movs	r6, #152	; 0x98
	    GPIOB->ODR &= ~(1UL << 0);
 8004562:	617b      	str	r3, [r7, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004564:	2201      	movs	r2, #1
 8004566:	2364      	movs	r3, #100	; 0x64
 8004568:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800456c:	f88d 6003 	strb.w	r6, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004570:	f7fe ffb4 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004574:	2364      	movs	r3, #100	; 0x64
 8004576:	482a      	ldr	r0, [pc, #168]	; (8004620 <rc522_request+0x430>)
	uint8_t dataRd=0;
 8004578:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800457c:	2201      	movs	r2, #1
 800457e:	a901      	add	r1, sp, #4
 8004580:	f7ff fa48 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004584:	697b      	ldr	r3, [r7, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004586:	4d27      	ldr	r5, [pc, #156]	; (8004624 <rc522_request+0x434>)
	    GPIOB->ODR |= (1UL << 0);
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	617b      	str	r3, [r7, #20]
  return dataRd;
 800458e:	f89d 3004 	ldrb.w	r3, [sp, #4]

      if (command == PCD_TRANSCEIVE) {
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
       // uint8_t l = n;
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
        if (lastBits) {
 8004592:	f013 0307 	ands.w	r3, r3, #7
          *backLen = (n - 1) * 8 + lastBits;
 8004596:	bf18      	it	ne
 8004598:	f108 36ff 	addne.w	r6, r8, #4294967295
        if (n > MFRC522_MAX_LEN) {
          n = MFRC522_MAX_LEN;
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) 
 800459c:	4647      	mov	r7, r8
          *backLen = (n - 1) * 8 + lastBits;
 800459e:	bf16      	itet	ne
 80045a0:	eb03 03c6 	addne.w	r3, r3, r6, lsl #3
          *backLen = n * 8;
 80045a4:	ea4f 06c8 	moveq.w	r6, r8, lsl #3
          *backLen = (n - 1) * 8 + lastBits;
 80045a8:	b29e      	uxthne	r6, r3
        for (i = 0; i < n; i++) 
 80045aa:	2f10      	cmp	r7, #16
 80045ac:	bf28      	it	cs
 80045ae:	2710      	movcs	r7, #16
 80045b0:	2f01      	cmp	r7, #1
 80045b2:	bf38      	it	cc
 80045b4:	2701      	movcc	r7, #1
 80045b6:	3f01      	subs	r7, #1
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80045b8:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004620 <rc522_request+0x430>
 80045bc:	fa19 f787 	uxtah	r7, r9, r7
      if (n & irqEn & 0x01) {
 80045c0:	f004 0401 	and.w	r4, r4, #1
        for (i = 0; i < n; i++) 
 80045c4:	f109 39ff 	add.w	r9, r9, #4294967295
	    GPIOB->ODR &= ~(1UL << 0);
 80045c8:	696b      	ldr	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 80045ca:	2092      	movs	r0, #146	; 0x92
	    GPIOB->ODR &= ~(1UL << 0);
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80045d2:	2201      	movs	r2, #1
 80045d4:	2364      	movs	r3, #100	; 0x64
 80045d6:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80045da:	f88d 0003 	strb.w	r0, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80045de:	4640      	mov	r0, r8
 80045e0:	f7fe ff7c 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f88d 3004 	strb.w	r3, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80045ea:	2201      	movs	r2, #1
 80045ec:	2364      	movs	r3, #100	; 0x64
 80045ee:	a901      	add	r1, sp, #4
 80045f0:	4640      	mov	r0, r8
 80045f2:	f7ff fa0f 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80045f6:	696b      	ldr	r3, [r5, #20]
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	616b      	str	r3, [r5, #20]
  return dataRd;
 80045fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
				{
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
//          if (l == 4)
//            printf("%02x ", d);
          backData[i] = d;
 8004602:	f809 3f01 	strb.w	r3, [r9, #1]!
        for (i = 0; i < n; i++) 
 8004606:	454f      	cmp	r7, r9
 8004608:	d1de      	bne.n	80045c8 <rc522_request+0x3d8>
  if ((status != true) || (backBits != 0x10)) {
 800460a:	2c00      	cmp	r4, #0
 800460c:	f43f af60 	beq.w	80044d0 <rc522_request+0x2e0>
 8004610:	f1a6 0010 	sub.w	r0, r6, #16
 8004614:	fab0 f080 	clz	r0, r0
 8004618:	0940      	lsrs	r0, r0, #5
}
 800461a:	b002      	add	sp, #8
 800461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004620:	200006a8 	.word	0x200006a8
 8004624:	40020400 	.word	0x40020400

08004628 <rc522_antiColl>:

  return status;
}

bool rc522_antiColl(uint8_t* serNum)
{
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	    GPIOB->ODR &= ~(1UL << 0);
 800462c:	4cc0      	ldr	r4, [pc, #768]	; (8004930 <rc522_antiColl+0x308>)
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800462e:	f8df a304 	ldr.w	sl, [pc, #772]	; 8004934 <rc522_antiColl+0x30c>
	    GPIOB->ODR &= ~(1UL << 0);
 8004632:	6963      	ldr	r3, [r4, #20]
{
 8004634:	b083      	sub	sp, #12
	    GPIOB->ODR &= ~(1UL << 0);
 8004636:	f023 0301 	bic.w	r3, r3, #1
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800463a:	211a      	movs	r1, #26
	    GPIOB->ODR &= ~(1UL << 0);
 800463c:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800463e:	2202      	movs	r2, #2
 8004640:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004642:	f8ad 1004 	strh.w	r1, [sp, #4]
{
 8004646:	4606      	mov	r6, r0
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004648:	a901      	add	r1, sp, #4
 800464a:	48ba      	ldr	r0, [pc, #744]	; (8004934 <rc522_antiColl+0x30c>)
 800464c:	f7fe ff46 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004650:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004652:	48b8      	ldr	r0, [pc, #736]	; (8004934 <rc522_antiColl+0x30c>)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]

  serNum[0] = PICC_ANTICOLL;
 8004654:	46b0      	mov	r8, r6
	    GPIOB->ODR |= (1UL << 0);
 8004656:	f043 0301 	orr.w	r3, r3, #1
  serNum[0] = PICC_ANTICOLL;
 800465a:	f242 0293 	movw	r2, #8339	; 0x2093
	    GPIOB->ODR |= (1UL << 0);
 800465e:	6163      	str	r3, [r4, #20]
  serNum[0] = PICC_ANTICOLL;
 8004660:	f828 2901 	strh.w	r2, [r8], #-1
	    GPIOB->ODR &= ~(1UL << 0);
 8004664:	6963      	ldr	r3, [r4, #20]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800466c:	f24f 7304 	movw	r3, #63236	; 0xf704
 8004670:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004674:	2202      	movs	r2, #2
 8004676:	2364      	movs	r3, #100	; 0x64
 8004678:	a901      	add	r1, sp, #4
 800467a:	f7fe ff2f 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800467e:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004680:	48ac      	ldr	r0, [pc, #688]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004688:	6963      	ldr	r3, [r4, #20]
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004690:	2388      	movs	r3, #136	; 0x88
 8004692:	f88d 3003 	strb.w	r3, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004696:	2201      	movs	r2, #1
 8004698:	2364      	movs	r3, #100	; 0x64
 800469a:	f10d 0103 	add.w	r1, sp, #3
 800469e:	f7fe ff1d 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80046a2:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80046a4:	2364      	movs	r3, #100	; 0x64
 80046a6:	2201      	movs	r2, #1
 80046a8:	a901      	add	r1, sp, #4
 80046aa:	48a2      	ldr	r0, [pc, #648]	; (8004934 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 80046ac:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80046b0:	f7ff f9b0 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80046b4:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046b6:	489f      	ldr	r0, [pc, #636]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80046be:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 80046c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80046c4:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 80046c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 80046cc:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046ce:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80046d0:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046d4:	2202      	movs	r2, #2
 80046d6:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80046d8:	2708      	movs	r7, #8
 80046da:	f88d 7004 	strb.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80046de:	f7fe fefd 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80046e2:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80046e4:	4893      	ldr	r0, [pc, #588]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80046ec:	6963      	ldr	r3, [r4, #20]
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80046f4:	2201      	movs	r2, #1
 80046f6:	2364      	movs	r3, #100	; 0x64
 80046f8:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80046fc:	2794      	movs	r7, #148	; 0x94
 80046fe:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004702:	f7fe feeb 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004706:	2364      	movs	r3, #100	; 0x64
 8004708:	2201      	movs	r2, #1
 800470a:	a901      	add	r1, sp, #4
 800470c:	4889      	ldr	r0, [pc, #548]	; (8004934 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 800470e:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004712:	f7ff f97f 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004716:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004718:	4886      	ldr	r0, [pc, #536]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004720:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004722:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004726:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 800472a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 800472e:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004730:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004732:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004736:	2202      	movs	r2, #2
 8004738:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800473a:	2514      	movs	r5, #20
 800473c:	f88d 5004 	strb.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004740:	f7fe fecc 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004744:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004746:	487b      	ldr	r0, [pc, #492]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800474e:	6963      	ldr	r3, [r4, #20]
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004756:	2202      	movs	r2, #2
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004758:	2364      	movs	r3, #100	; 0x64
 800475a:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800475c:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004760:	f7fe febc 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004764:	6963      	ldr	r3, [r4, #20]
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 800476c:	4645      	mov	r5, r8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800476e:	f04f 0912 	mov.w	r9, #18
	    GPIOB->ODR &= ~(1UL << 0);
 8004772:	6962      	ldr	r2, [r4, #20]
 8004774:	462f      	mov	r7, r5
 8004776:	f022 0201 	bic.w	r2, r2, #1
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 800477a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
	    GPIOB->ODR &= ~(1UL << 0);
 800477e:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004780:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004782:	f88d 0005 	strb.w	r0, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004786:	2202      	movs	r2, #2
 8004788:	a901      	add	r1, sp, #4
 800478a:	4650      	mov	r0, sl
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800478c:	f88d 9004 	strb.w	r9, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004790:	f7fe fea4 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004794:	6963      	ldr	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 8004796:	42b7      	cmp	r7, r6
	    GPIOB->ODR |= (1UL << 0);
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 800479e:	d1e8      	bne.n	8004772 <rc522_antiColl+0x14a>
	    GPIOB->ODR &= ~(1UL << 0);
 80047a0:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80047a2:	4864      	ldr	r0, [pc, #400]	; (8004934 <rc522_antiColl+0x30c>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047a4:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8004934 <rc522_antiColl+0x30c>
	    GPIOB->ODR &= ~(1UL << 0);
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80047ae:	2202      	movs	r2, #2
 80047b0:	2364      	movs	r3, #100	; 0x64
 80047b2:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80047b4:	f640 4502 	movw	r5, #3074	; 0xc02
 80047b8:	f8ad 5004 	strh.w	r5, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80047bc:	f7fe fe8e 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80047c0:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047c2:	485c      	ldr	r0, [pc, #368]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80047ca:	6963      	ldr	r3, [r4, #20]
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047d2:	2201      	movs	r2, #1
 80047d4:	2364      	movs	r3, #100	; 0x64
 80047d6:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80047da:	259a      	movs	r5, #154	; 0x9a
 80047dc:	f88d 5003 	strb.w	r5, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80047e0:	f7fe fe7c 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80047e4:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80047e6:	2364      	movs	r3, #100	; 0x64
 80047e8:	2201      	movs	r2, #1
 80047ea:	a901      	add	r1, sp, #4
 80047ec:	4851      	ldr	r0, [pc, #324]	; (8004934 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 80047ee:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80047f2:	f7ff f90f 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80047f6:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80047f8:	484e      	ldr	r0, [pc, #312]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004800:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004802:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004806:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 800480a:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 800480e:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004810:	a901      	add	r1, sp, #4
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004812:	f88d 3005 	strb.w	r3, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004816:	2202      	movs	r2, #2
 8004818:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800481a:	271a      	movs	r7, #26
 800481c:	f88d 7004 	strb.w	r7, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004820:	f7fe fe5c 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004824:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004826:	4843      	ldr	r0, [pc, #268]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800482e:	6963      	ldr	r3, [r4, #20]
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004836:	2201      	movs	r2, #1
 8004838:	2364      	movs	r3, #100	; 0x64
 800483a:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800483e:	2788      	movs	r7, #136	; 0x88
 8004840:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004844:	f7fe fe4a 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004848:	2364      	movs	r3, #100	; 0x64
 800484a:	483a      	ldr	r0, [pc, #232]	; (8004934 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 800484c:	f88d 5004 	strb.w	r5, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004850:	2201      	movs	r2, #1
 8004852:	a901      	add	r1, sp, #4
 8004854:	f7ff f8de 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004858:	6963      	ldr	r3, [r4, #20]
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004860:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  return dataRd;
 8004864:	f89d b004 	ldrb.w	fp, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8004868:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
    i--;
 800486c:	2463      	movs	r4, #99	; 0x63
 800486e:	e01a      	b.n	80048a6 <rc522_antiColl+0x27e>
	    GPIOB->ODR &= ~(1UL << 0);
 8004870:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8004874:	f02c 0c01 	bic.w	ip, ip, #1
 8004878:	f8c5 c014 	str.w	ip, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 800487c:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004880:	f7fe fe2c 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004884:	2364      	movs	r3, #100	; 0x64
 8004886:	2201      	movs	r2, #1
 8004888:	a901      	add	r1, sp, #4
 800488a:	4648      	mov	r0, r9
	uint8_t dataRd=0;
 800488c:	f88d a004 	strb.w	sl, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004890:	f7ff f8c0 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004894:	696b      	ldr	r3, [r5, #20]
    i--;
 8004896:	3c01      	subs	r4, #1
	    GPIOB->ODR |= (1UL << 0);
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	616b      	str	r3, [r5, #20]
    i--;
 800489e:	b2a4      	uxth	r4, r4
  return dataRd;
 80048a0:	f89d b004 	ldrb.w	fp, [sp, #4]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80048a4:	b15c      	cbz	r4, 80048be <rc522_antiColl+0x296>
 80048a6:	f01b 0f31 	tst.w	fp, #49	; 0x31
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80048aa:	f04f 0364 	mov.w	r3, #100	; 0x64
 80048ae:	f04f 0201 	mov.w	r2, #1
 80048b2:	f10d 0103 	add.w	r1, sp, #3
 80048b6:	4648      	mov	r0, r9
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80048b8:	f00b 0a31 	and.w	sl, fp, #49	; 0x31
 80048bc:	d0d8      	beq.n	8004870 <rc522_antiColl+0x248>
	    GPIOB->ODR &= ~(1UL << 0);
 80048be:	4d1c      	ldr	r5, [pc, #112]	; (8004930 <rc522_antiColl+0x308>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80048c0:	481c      	ldr	r0, [pc, #112]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR &= ~(1UL << 0);
 80048c2:	696a      	ldr	r2, [r5, #20]
 80048c4:	f022 0201 	bic.w	r2, r2, #1
 80048c8:	616a      	str	r2, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80048ca:	2364      	movs	r3, #100	; 0x64
 80048cc:	2201      	movs	r2, #1
 80048ce:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80048d2:	279a      	movs	r7, #154	; 0x9a
 80048d4:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80048d8:	f7fe fe00 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 80048dc:	2700      	movs	r7, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80048de:	2364      	movs	r3, #100	; 0x64
 80048e0:	2201      	movs	r2, #1
 80048e2:	a901      	add	r1, sp, #4
 80048e4:	4813      	ldr	r0, [pc, #76]	; (8004934 <rc522_antiColl+0x30c>)
	uint8_t dataRd=0;
 80048e6:	f88d 7004 	strb.w	r7, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80048ea:	f7ff f893 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80048ee:	696b      	ldr	r3, [r5, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80048f0:	4810      	ldr	r0, [pc, #64]	; (8004934 <rc522_antiColl+0x30c>)
	    GPIOB->ODR |= (1UL << 0);
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80048f8:	696a      	ldr	r2, [r5, #20]
  return dataRd;
 80048fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80048fe:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004906:	616a      	str	r2, [r5, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004908:	f88d 3005 	strb.w	r3, [sp, #5]
 800490c:	231a      	movs	r3, #26
 800490e:	f88d 3004 	strb.w	r3, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004912:	2202      	movs	r2, #2
 8004914:	2364      	movs	r3, #100	; 0x64
 8004916:	a901      	add	r1, sp, #4
 8004918:	f7fe fde0 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800491c:	696b      	ldr	r3, [r5, #20]
 800491e:	f043 0301 	orr.w	r3, r3, #1
 8004922:	616b      	str	r3, [r5, #20]
  if (i != 0)  {
 8004924:	b944      	cbnz	r4, 8004938 <rc522_antiColl+0x310>
  bool status = false;
 8004926:	2000      	movs	r0, #0
    if (serNumCheck != serNum[i]) {
      status = false;
    }
  }
  return status;
}
 8004928:	b003      	add	sp, #12
 800492a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492e:	bf00      	nop
 8004930:	40020400 	.word	0x40020400
 8004934:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 8004938:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800493a:	484b      	ldr	r0, [pc, #300]	; (8004a68 <rc522_antiColl+0x440>)
	    GPIOB->ODR &= ~(1UL << 0);
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004942:	2201      	movs	r2, #1
 8004944:	2364      	movs	r3, #100	; 0x64
 8004946:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 800494a:	248c      	movs	r4, #140	; 0x8c
 800494c:	f88d 4003 	strb.w	r4, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004950:	f7fe fdc4 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004954:	2364      	movs	r3, #100	; 0x64
 8004956:	4844      	ldr	r0, [pc, #272]	; (8004a68 <rc522_antiColl+0x440>)
	uint8_t dataRd=0;
 8004958:	f88d 7004 	strb.w	r7, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800495c:	2201      	movs	r2, #1
 800495e:	a901      	add	r1, sp, #4
 8004960:	f7ff f858 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004964:	696b      	ldr	r3, [r5, #20]
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	616b      	str	r3, [r5, #20]
  return dataRd;
 800496c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8004970:	f013 091b 	ands.w	r9, r3, #27
 8004974:	d1d7      	bne.n	8004926 <rc522_antiColl+0x2fe>
	    GPIOB->ODR &= ~(1UL << 0);
 8004976:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004978:	483b      	ldr	r0, [pc, #236]	; (8004a68 <rc522_antiColl+0x440>)
	    GPIOB->ODR &= ~(1UL << 0);
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004980:	2201      	movs	r2, #1
 8004982:	2364      	movs	r3, #100	; 0x64
 8004984:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004988:	2794      	movs	r7, #148	; 0x94
 800498a:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800498e:	f7fe fda5 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004992:	2364      	movs	r3, #100	; 0x64
 8004994:	2201      	movs	r2, #1
 8004996:	a901      	add	r1, sp, #4
 8004998:	4833      	ldr	r0, [pc, #204]	; (8004a68 <rc522_antiColl+0x440>)
	uint8_t dataRd=0;
 800499a:	f88d 9004 	strb.w	r9, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800499e:	f7ff f839 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 80049a2:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80049a4:	4830      	ldr	r0, [pc, #192]	; (8004a68 <rc522_antiColl+0x440>)
	    GPIOB->ODR |= (1UL << 0);
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80049ac:	696b      	ldr	r3, [r5, #20]
  return dataRd;
 80049ae:	f89d 7004 	ldrb.w	r7, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	616b      	str	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 80049b8:	f04f 0c98 	mov.w	ip, #152	; 0x98
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80049bc:	2364      	movs	r3, #100	; 0x64
 80049be:	2201      	movs	r2, #1
 80049c0:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80049c4:	f88d c003 	strb.w	ip, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80049c8:	f7fe fd88 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80049cc:	2364      	movs	r3, #100	; 0x64
 80049ce:	4826      	ldr	r0, [pc, #152]	; (8004a68 <rc522_antiColl+0x440>)
	uint8_t dataRd=0;
 80049d0:	f88d 9004 	strb.w	r9, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 80049d4:	2201      	movs	r2, #1
 80049d6:	a901      	add	r1, sp, #4
 80049d8:	f7ff f81c 	bl	8003a14 <HAL_SPI_Receive>
        for (i = 0; i < n; i++) 
 80049dc:	2f10      	cmp	r7, #16
 80049de:	bf28      	it	cs
 80049e0:	2710      	movcs	r7, #16
	    GPIOB->ODR |= (1UL << 0);
 80049e2:	696b      	ldr	r3, [r5, #20]
        for (i = 0; i < n; i++) 
 80049e4:	2f01      	cmp	r7, #1
 80049e6:	bf38      	it	cc
 80049e8:	2701      	movcc	r7, #1
 80049ea:	f107 39ff 	add.w	r9, r7, #4294967295
      if (n & irqEn & 0x01) {
 80049ee:	ea6f 040b 	mvn.w	r4, fp
	    GPIOB->ODR |= (1UL << 0);
 80049f2:	f043 0301 	orr.w	r3, r3, #1
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80049f6:	4f1c      	ldr	r7, [pc, #112]	; (8004a68 <rc522_antiColl+0x440>)
	    GPIOB->ODR |= (1UL << 0);
 80049f8:	616b      	str	r3, [r5, #20]
      if (n & irqEn & 0x01) {
 80049fa:	f004 0401 	and.w	r4, r4, #1
        for (i = 0; i < n; i++) 
 80049fe:	fa16 f989 	uxtah	r9, r6, r9
	    GPIOB->ODR &= ~(1UL << 0);
 8004a02:	696b      	ldr	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004a04:	2092      	movs	r0, #146	; 0x92
	    GPIOB->ODR &= ~(1UL << 0);
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	2364      	movs	r3, #100	; 0x64
 8004a10:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004a14:	f88d 0003 	strb.w	r0, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004a18:	4638      	mov	r0, r7
 8004a1a:	f7fe fd5f 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f88d 3004 	strb.w	r3, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004a24:	2201      	movs	r2, #1
 8004a26:	2364      	movs	r3, #100	; 0x64
 8004a28:	a901      	add	r1, sp, #4
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f7fe fff2 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004a30:	696b      	ldr	r3, [r5, #20]
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	616b      	str	r3, [r5, #20]
  return dataRd;
 8004a38:	f89d 3004 	ldrb.w	r3, [sp, #4]
          backData[i] = d;
 8004a3c:	f808 3f01 	strb.w	r3, [r8, #1]!
        for (i = 0; i < n; i++) 
 8004a40:	45c1      	cmp	r9, r8
 8004a42:	d1de      	bne.n	8004a02 <rc522_antiColl+0x3da>
  if (status == true) {
 8004a44:	2c00      	cmp	r4, #0
 8004a46:	f43f af6e 	beq.w	8004926 <rc522_antiColl+0x2fe>
      serNumCheck ^= serNum[i];
 8004a4a:	7833      	ldrb	r3, [r6, #0]
 8004a4c:	7870      	ldrb	r0, [r6, #1]
 8004a4e:	78b1      	ldrb	r1, [r6, #2]
 8004a50:	78f2      	ldrb	r2, [r6, #3]
 8004a52:	4058      	eors	r0, r3
 8004a54:	4048      	eors	r0, r1
    if (serNumCheck != serNum[i]) {
 8004a56:	7933      	ldrb	r3, [r6, #4]
 8004a58:	4050      	eors	r0, r2
 8004a5a:	1a18      	subs	r0, r3, r0
 8004a5c:	fab0 f080 	clz	r0, r0
 8004a60:	0940      	lsrs	r0, r0, #5
}
 8004a62:	b003      	add	sp, #12
 8004a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a68:	200006a8 	.word	0x200006a8

08004a6c <rc522_halt>:

void rc522_halt(void)
{
 8004a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a70:	b084      	sub	sp, #16
	    GPIOB->ODR &= ~(1UL << 0);
 8004a72:	4c5c      	ldr	r4, [pc, #368]	; (8004be4 <rc522_halt+0x178>)
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004a74:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8004be8 <rc522_halt+0x17c>
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8004a78:	2350      	movs	r3, #80	; 0x50
 8004a7a:	f8ad 300c 	strh.w	r3, [sp, #12]
	    GPIOB->ODR &= ~(1UL << 0);
 8004a7e:	6963      	ldr	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004a80:	208a      	movs	r0, #138	; 0x8a
	    GPIOB->ODR &= ~(1UL << 0);
 8004a82:	f023 0301 	bic.w	r3, r3, #1
 8004a86:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2364      	movs	r3, #100	; 0x64
 8004a8c:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004a90:	f88d 0007 	strb.w	r0, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004a94:	4854      	ldr	r0, [pc, #336]	; (8004be8 <rc522_halt+0x17c>)
 8004a96:	f7fe fd21 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004a9a:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004a9c:	2364      	movs	r3, #100	; 0x64
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	a902      	add	r1, sp, #8
 8004aa2:	4851      	ldr	r0, [pc, #324]	; (8004be8 <rc522_halt+0x17c>)
	uint8_t dataRd=0;
 8004aa4:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004aa8:	f7fe ffb4 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004aac:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004aae:	484e      	ldr	r0, [pc, #312]	; (8004be8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004ab6:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004ab8:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004abc:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
	    GPIOB->ODR &= ~(1UL << 0);
 8004ac4:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004ac6:	a902      	add	r1, sp, #8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004ac8:	f88d 3009 	strb.w	r3, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004acc:	2202      	movs	r2, #2
 8004ace:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004ad0:	260a      	movs	r6, #10
 8004ad2:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004ad6:	f7fe fd01 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004ada:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004adc:	4842      	ldr	r0, [pc, #264]	; (8004be8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004ae4:	6963      	ldr	r3, [r4, #20]
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004aec:	2394      	movs	r3, #148	; 0x94
 8004aee:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004af2:	2201      	movs	r2, #1
 8004af4:	2364      	movs	r3, #100	; 0x64
 8004af6:	f10d 0107 	add.w	r1, sp, #7
 8004afa:	f7fe fcef 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004afe:	2364      	movs	r3, #100	; 0x64
 8004b00:	2201      	movs	r2, #1
 8004b02:	a902      	add	r1, sp, #8
 8004b04:	4838      	ldr	r0, [pc, #224]	; (8004be8 <rc522_halt+0x17c>)
	uint8_t dataRd=0;
 8004b06:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004b0a:	f7fe ff83 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004b0e:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004b10:	4835      	ldr	r0, [pc, #212]	; (8004be8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004b18:	6963      	ldr	r3, [r4, #20]
  return dataRd;
 8004b1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6163      	str	r3, [r4, #20]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8004b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004b28:	2314      	movs	r3, #20
 8004b2a:	f88d 3008 	strb.w	r3, [sp, #8]
 8004b2e:	f88d 2009 	strb.w	r2, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004b32:	2364      	movs	r3, #100	; 0x64
 8004b34:	2202      	movs	r2, #2
 8004b36:	a902      	add	r1, sp, #8
 8004b38:	f7fe fcd0 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004b3c:	6963      	ldr	r3, [r4, #20]
 8004b3e:	af03      	add	r7, sp, #12
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6163      	str	r3, [r4, #20]
  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8004b46:	f10d 080e 	add.w	r8, sp, #14
 8004b4a:	463d      	mov	r5, r7
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004b4c:	2612      	movs	r6, #18
	    GPIOB->ODR &= ~(1UL << 0);
 8004b4e:	6963      	ldr	r3, [r4, #20]
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8004b50:	f815 cb01 	ldrb.w	ip, [r5], #1
	    GPIOB->ODR &= ~(1UL << 0);
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	2364      	movs	r3, #100	; 0x64
 8004b5e:	a902      	add	r1, sp, #8
 8004b60:	4648      	mov	r0, r9
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004b62:	f88d 6008 	strb.w	r6, [sp, #8]
 8004b66:	f88d c009 	strb.w	ip, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004b6a:	f7fe fcb7 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004b6e:	6963      	ldr	r3, [r4, #20]
  for (i = 0; i < len; i++) {
 8004b70:	45a8      	cmp	r8, r5
	    GPIOB->ODR |= (1UL << 0);
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6163      	str	r3, [r4, #20]
  for (i = 0; i < len; i++) {
 8004b78:	d1e9      	bne.n	8004b4e <rc522_halt+0xe2>
	    GPIOB->ODR &= ~(1UL << 0);
 8004b7a:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004b7c:	481a      	ldr	r0, [pc, #104]	; (8004be8 <rc522_halt+0x17c>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004b7e:	4d19      	ldr	r5, [pc, #100]	; (8004be4 <rc522_halt+0x178>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b80:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8004be8 <rc522_halt+0x17c>
	    GPIOB->ODR &= ~(1UL << 0);
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004b8a:	f240 3302 	movw	r3, #770	; 0x302
 8004b8e:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004b92:	2202      	movs	r2, #2
 8004b94:	2364      	movs	r3, #100	; 0x64
 8004b96:	a902      	add	r1, sp, #8
 8004b98:	f7fe fca0 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004b9c:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004b9e:	4812      	ldr	r0, [pc, #72]	; (8004be8 <rc522_halt+0x17c>)
	    GPIOB->ODR |= (1UL << 0);
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2364      	movs	r3, #100	; 0x64
 8004bb2:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004bb6:	f04f 098a 	mov.w	r9, #138	; 0x8a
 8004bba:	f88d 9007 	strb.w	r9, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004bbe:	f7fe fc8d 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f88d 3008 	strb.w	r3, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004bc8:	4807      	ldr	r0, [pc, #28]	; (8004be8 <rc522_halt+0x17c>)
 8004bca:	2364      	movs	r3, #100	; 0x64
 8004bcc:	2201      	movs	r2, #1
 8004bce:	a902      	add	r1, sp, #8
 8004bd0:	f7fe ff20 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004bd4:	6963      	ldr	r3, [r4, #20]
 8004bd6:	f043 0301 	orr.w	r3, r3, #1
 8004bda:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004bdc:	f89d 6008 	ldrb.w	r6, [sp, #8]
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);

  //Wait CRC calculation is complete
  i = 0xFF;
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8004be0:	24fe      	movs	r4, #254	; 0xfe
 8004be2:	e01d      	b.n	8004c20 <rc522_halt+0x1b4>
 8004be4:	40020400 	.word	0x40020400
 8004be8:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 8004bec:	696e      	ldr	r6, [r5, #20]
 8004bee:	f026 0601 	bic.w	r6, r6, #1
 8004bf2:	616e      	str	r6, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004bf4:	f88d 9007 	strb.w	r9, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004bf8:	f7fe fc70 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004bfc:	2364      	movs	r3, #100	; 0x64
 8004bfe:	2201      	movs	r2, #1
 8004c00:	a902      	add	r1, sp, #8
 8004c02:	4640      	mov	r0, r8
	uint8_t dataRd=0;
 8004c04:	f88d a008 	strb.w	sl, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c08:	f7fe ff04 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004c0c:	696b      	ldr	r3, [r5, #20]
    i--;
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004c0e:	3c01      	subs	r4, #1
	    GPIOB->ODR |= (1UL << 0);
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	616b      	str	r3, [r5, #20]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004c16:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
  return dataRd;
 8004c1a:	f89d 6008 	ldrb.w	r6, [sp, #8]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004c1e:	d00a      	beq.n	8004c36 <rc522_halt+0x1ca>
 8004c20:	f006 0a04 	and.w	sl, r6, #4
 8004c24:	0776      	lsls	r6, r6, #29
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c26:	f04f 0364 	mov.w	r3, #100	; 0x64
 8004c2a:	f04f 0201 	mov.w	r2, #1
 8004c2e:	f10d 0107 	add.w	r1, sp, #7
 8004c32:	4640      	mov	r0, r8
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8004c34:	d5da      	bpl.n	8004bec <rc522_halt+0x180>
	    GPIOB->ODR &= ~(1UL << 0);
 8004c36:	4ca5      	ldr	r4, [pc, #660]	; (8004ecc <rc522_halt+0x460>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c38:	48a5      	ldr	r0, [pc, #660]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004c3a:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004c3c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 8004ed0 <rc522_halt+0x464>
	    GPIOB->ODR &= ~(1UL << 0);
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	6162      	str	r2, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004c46:	22c4      	movs	r2, #196	; 0xc4
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c48:	2364      	movs	r3, #100	; 0x64
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004c4a:	f88d 2007 	strb.w	r2, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c4e:	f10d 0107 	add.w	r1, sp, #7
 8004c52:	2201      	movs	r2, #1
 8004c54:	f7fe fc42 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004c58:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c5a:	2364      	movs	r3, #100	; 0x64
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	a902      	add	r1, sp, #8
 8004c60:	489b      	ldr	r0, [pc, #620]	; (8004ed0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004c62:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c66:	f7fe fed5 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004c6a:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c6c:	4898      	ldr	r0, [pc, #608]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004c74:	f89d 3008 	ldrb.w	r3, [sp, #8]

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8004c78:	f88d 300e 	strb.w	r3, [sp, #14]
	    GPIOB->ODR &= ~(1UL << 0);
 8004c7c:	6963      	ldr	r3, [r4, #20]
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004c84:	23c2      	movs	r3, #194	; 0xc2
 8004c86:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	2364      	movs	r3, #100	; 0x64
 8004c8e:	f10d 0107 	add.w	r1, sp, #7
 8004c92:	f7fe fc23 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004c96:	2364      	movs	r3, #100	; 0x64
 8004c98:	2201      	movs	r2, #1
 8004c9a:	a902      	add	r1, sp, #8
 8004c9c:	488c      	ldr	r0, [pc, #560]	; (8004ed0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004c9e:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ca2:	f7fe feb7 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004ca6:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004ca8:	4889      	ldr	r0, [pc, #548]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004caa:	f043 0301 	orr.w	r3, r3, #1
 8004cae:	6163      	str	r3, [r4, #20]
  return dataRd;
 8004cb0:	f89d 3008 	ldrb.w	r3, [sp, #8]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8004cb4:	f88d 300f 	strb.w	r3, [sp, #15]
	    GPIOB->ODR &= ~(1UL << 0);
 8004cb8:	6963      	ldr	r3, [r4, #20]
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004cc0:	f24f 7304 	movw	r3, #63236	; 0xf704
 8004cc4:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004cc8:	2202      	movs	r2, #2
 8004cca:	2364      	movs	r3, #100	; 0x64
 8004ccc:	a902      	add	r1, sp, #8
 8004cce:	f7fe fc05 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004cd2:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004cd4:	487e      	ldr	r0, [pc, #504]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004cd6:	f043 0301 	orr.w	r3, r3, #1
 8004cda:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004cdc:	6963      	ldr	r3, [r4, #20]
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004ce4:	2388      	movs	r3, #136	; 0x88
 8004ce6:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004cea:	2201      	movs	r2, #1
 8004cec:	2364      	movs	r3, #100	; 0x64
 8004cee:	f10d 0107 	add.w	r1, sp, #7
 8004cf2:	f7fe fbf3 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004cf6:	2364      	movs	r3, #100	; 0x64
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	a902      	add	r1, sp, #8
 8004cfc:	4874      	ldr	r0, [pc, #464]	; (8004ed0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004cfe:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004d02:	f7fe fe87 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004d06:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d08:	4871      	ldr	r0, [pc, #452]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d10:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004d12:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d16:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d1e:	2608      	movs	r6, #8
	    GPIOB->ODR &= ~(1UL << 0);
 8004d20:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d22:	a902      	add	r1, sp, #8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d24:	f88d 3009 	strb.w	r3, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d28:	2202      	movs	r2, #2
 8004d2a:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d2c:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d30:	f7fe fbd4 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004d34:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004d36:	4866      	ldr	r0, [pc, #408]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d3e:	6963      	ldr	r3, [r4, #20]
 8004d40:	f023 0301 	bic.w	r3, r3, #1
 8004d44:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004d46:	2394      	movs	r3, #148	; 0x94
 8004d48:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2364      	movs	r3, #100	; 0x64
 8004d50:	f10d 0107 	add.w	r1, sp, #7
 8004d54:	f7fe fbc2 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004d58:	eb0d 0106 	add.w	r1, sp, r6
 8004d5c:	2364      	movs	r3, #100	; 0x64
 8004d5e:	2201      	movs	r2, #1
 8004d60:	485b      	ldr	r0, [pc, #364]	; (8004ed0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004d62:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004d66:	f7fe fe55 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004d6a:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d6c:	4858      	ldr	r0, [pc, #352]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d74:	6963      	ldr	r3, [r4, #20]
  return dataRd;
 8004d76:	f89d 2008 	ldrb.w	r2, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	6163      	str	r3, [r4, #20]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8004d80:	f062 027f 	orn	r2, r2, #127	; 0x7f
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d84:	2314      	movs	r3, #20
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d86:	eb0d 0106 	add.w	r1, sp, r6
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004d8a:	f88d 3008 	strb.w	r3, [sp, #8]
 8004d8e:	f88d 2009 	strb.w	r2, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d92:	2364      	movs	r3, #100	; 0x64
 8004d94:	2202      	movs	r2, #2
 8004d96:	f7fe fba1 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004d9a:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004d9c:	484c      	ldr	r0, [pc, #304]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004d9e:	f043 0301 	orr.w	r3, r3, #1
 8004da2:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004da4:	6963      	ldr	r3, [r4, #20]
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004dac:	2202      	movs	r2, #2
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004dae:	2364      	movs	r3, #100	; 0x64
 8004db0:	eb0d 0106 	add.w	r1, sp, r6
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004db4:	f8ad 2008 	strh.w	r2, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004db8:	f7fe fb90 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004dbc:	6963      	ldr	r3, [r4, #20]
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	f107 0904 	add.w	r9, r7, #4
 8004dc6:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 8004dc8:	463d      	mov	r5, r7
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004dca:	2612      	movs	r6, #18
	    GPIOB->ODR &= ~(1UL << 0);
 8004dcc:	6963      	ldr	r3, [r4, #20]
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8004dce:	f815 cb01 	ldrb.w	ip, [r5], #1
	    GPIOB->ODR &= ~(1UL << 0);
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004dd8:	2202      	movs	r2, #2
 8004dda:	2364      	movs	r3, #100	; 0x64
 8004ddc:	a902      	add	r1, sp, #8
 8004dde:	4640      	mov	r0, r8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004de0:	f88d 6008 	strb.w	r6, [sp, #8]
 8004de4:	f88d c009 	strb.w	ip, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004de8:	f7fe fb78 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004dec:	6963      	ldr	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 8004dee:	454d      	cmp	r5, r9
	    GPIOB->ODR |= (1UL << 0);
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	6163      	str	r3, [r4, #20]
  for (i = 0; i < sendLen; i++) {
 8004df6:	d1e9      	bne.n	8004dcc <rc522_halt+0x360>
	    GPIOB->ODR &= ~(1UL << 0);
 8004df8:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004dfa:	4835      	ldr	r0, [pc, #212]	; (8004ed0 <rc522_halt+0x464>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004dfc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004ed0 <rc522_halt+0x464>
	    GPIOB->ODR &= ~(1UL << 0);
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004e06:	f640 4302 	movw	r3, #3074	; 0xc02
 8004e0a:	f8ad 3008 	strh.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004e0e:	2202      	movs	r2, #2
 8004e10:	2364      	movs	r3, #100	; 0x64
 8004e12:	a902      	add	r1, sp, #8
 8004e14:	f7fe fb62 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004e18:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e1a:	482d      	ldr	r0, [pc, #180]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	6163      	str	r3, [r4, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004e2a:	239a      	movs	r3, #154	; 0x9a
 8004e2c:	f88d 3007 	strb.w	r3, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e30:	2201      	movs	r2, #1
 8004e32:	2364      	movs	r3, #100	; 0x64
 8004e34:	f10d 0107 	add.w	r1, sp, #7
 8004e38:	f7fe fb50 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004e3c:	2500      	movs	r5, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004e3e:	2364      	movs	r3, #100	; 0x64
 8004e40:	2201      	movs	r2, #1
 8004e42:	a902      	add	r1, sp, #8
 8004e44:	4822      	ldr	r0, [pc, #136]	; (8004ed0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004e46:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004e4a:	f7fe fde3 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004e4e:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004e50:	481f      	ldr	r0, [pc, #124]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004e58:	6962      	ldr	r2, [r4, #20]
  return dataRd;
 8004e5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8004e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004e66:	6162      	str	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004e68:	a902      	add	r1, sp, #8
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004e6a:	f88d 3009 	strb.w	r3, [sp, #9]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004e6e:	2202      	movs	r2, #2
 8004e70:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004e72:	261a      	movs	r6, #26
 8004e74:	f88d 6008 	strb.w	r6, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004e78:	f7fe fb30 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004e7c:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e7e:	4814      	ldr	r0, [pc, #80]	; (8004ed0 <rc522_halt+0x464>)
	    GPIOB->ODR |= (1UL << 0);
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004e86:	6963      	ldr	r3, [r4, #20]
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e8e:	2201      	movs	r2, #1
 8004e90:	2364      	movs	r3, #100	; 0x64
 8004e92:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004e96:	f04f 0888 	mov.w	r8, #136	; 0x88
 8004e9a:	f88d 8007 	strb.w	r8, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004e9e:	f7fe fb1d 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ea2:	2364      	movs	r3, #100	; 0x64
 8004ea4:	480a      	ldr	r0, [pc, #40]	; (8004ed0 <rc522_halt+0x464>)
	uint8_t dataRd=0;
 8004ea6:	f88d 5008 	strb.w	r5, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004eaa:	2201      	movs	r2, #1
 8004eac:	a902      	add	r1, sp, #8
 8004eae:	f7fe fdb1 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004eb2:	6963      	ldr	r3, [r4, #20]
 8004eb4:	f043 0301 	orr.w	r3, r3, #1
 8004eb8:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004eba:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
  return dataRd;
 8004ebe:	f89d 6008 	ldrb.w	r6, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004ec2:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
    i--;
 8004ec6:	2463      	movs	r4, #99	; 0x63
 8004ec8:	e01d      	b.n	8004f06 <rc522_halt+0x49a>
 8004eca:	bf00      	nop
 8004ecc:	40020400 	.word	0x40020400
 8004ed0:	200006a8 	.word	0x200006a8
	    GPIOB->ODR &= ~(1UL << 0);
 8004ed4:	696e      	ldr	r6, [r5, #20]
 8004ed6:	f026 0601 	bic.w	r6, r6, #1
 8004eda:	616e      	str	r6, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004edc:	f88d 8007 	strb.w	r8, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004ee0:	f7fe fafc 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ee4:	2364      	movs	r3, #100	; 0x64
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	a902      	add	r1, sp, #8
 8004eea:	4648      	mov	r0, r9
	uint8_t dataRd=0;
 8004eec:	f88d a008 	strb.w	sl, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ef0:	f7fe fd90 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004ef4:	696b      	ldr	r3, [r5, #20]
    i--;
 8004ef6:	3c01      	subs	r4, #1
	    GPIOB->ODR |= (1UL << 0);
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	616b      	str	r3, [r5, #20]
    i--;
 8004efe:	b2a4      	uxth	r4, r4
  return dataRd;
 8004f00:	f89d 6008 	ldrb.w	r6, [sp, #8]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004f04:	b15c      	cbz	r4, 8004f1e <rc522_halt+0x4b2>
 8004f06:	f016 0f31 	tst.w	r6, #49	; 0x31
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f0a:	f04f 0364 	mov.w	r3, #100	; 0x64
 8004f0e:	f04f 0201 	mov.w	r2, #1
 8004f12:	f10d 0107 	add.w	r1, sp, #7
 8004f16:	4648      	mov	r0, r9
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8004f18:	f006 0a31 	and.w	sl, r6, #49	; 0x31
 8004f1c:	d0da      	beq.n	8004ed4 <rc522_halt+0x468>
	    GPIOB->ODR &= ~(1UL << 0);
 8004f1e:	4d5f      	ldr	r5, [pc, #380]	; (800509c <rc522_halt+0x630>)
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f20:	485f      	ldr	r0, [pc, #380]	; (80050a0 <rc522_halt+0x634>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004f22:	696a      	ldr	r2, [r5, #20]
 8004f24:	f022 0201 	bic.w	r2, r2, #1
 8004f28:	616a      	str	r2, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f2a:	2364      	movs	r3, #100	; 0x64
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004f32:	269a      	movs	r6, #154	; 0x9a
 8004f34:	f88d 6007 	strb.w	r6, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f38:	f7fe fad0 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8004f3c:	2600      	movs	r6, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004f3e:	2364      	movs	r3, #100	; 0x64
 8004f40:	2201      	movs	r2, #1
 8004f42:	a902      	add	r1, sp, #8
 8004f44:	4856      	ldr	r0, [pc, #344]	; (80050a0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8004f46:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004f4a:	f7fe fd63 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004f4e:	696b      	ldr	r3, [r5, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004f50:	4853      	ldr	r0, [pc, #332]	; (80050a0 <rc522_halt+0x634>)
	    GPIOB->ODR |= (1UL << 0);
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8004f58:	696a      	ldr	r2, [r5, #20]
  return dataRd;
 8004f5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8004f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	    GPIOB->ODR &= ~(1UL << 0);
 8004f66:	616a      	str	r2, [r5, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8004f68:	f88d 3009 	strb.w	r3, [sp, #9]
 8004f6c:	231a      	movs	r3, #26
 8004f6e:	f88d 3008 	strb.w	r3, [sp, #8]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8004f72:	2202      	movs	r2, #2
 8004f74:	2364      	movs	r3, #100	; 0x64
 8004f76:	a902      	add	r1, sp, #8
 8004f78:	f7fe fab0 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8004f7c:	696b      	ldr	r3, [r5, #20]
 8004f7e:	f043 0301 	orr.w	r3, r3, #1
 8004f82:	616b      	str	r3, [r5, #20]
  if (i != 0)  {
 8004f84:	b914      	cbnz	r4, 8004f8c <rc522_halt+0x520>
}
 8004f86:	b004      	add	sp, #16
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    GPIOB->ODR &= ~(1UL << 0);
 8004f8c:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f8e:	4844      	ldr	r0, [pc, #272]	; (80050a0 <rc522_halt+0x634>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004f96:	2201      	movs	r2, #1
 8004f98:	2364      	movs	r3, #100	; 0x64
 8004f9a:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004f9e:	248c      	movs	r4, #140	; 0x8c
 8004fa0:	f88d 4007 	strb.w	r4, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004fa4:	f7fe fa9a 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004fa8:	2364      	movs	r3, #100	; 0x64
 8004faa:	483d      	ldr	r0, [pc, #244]	; (80050a0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8004fac:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	a902      	add	r1, sp, #8
 8004fb4:	f7fe fd2e 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004fb8:	696b      	ldr	r3, [r5, #20]
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	616b      	str	r3, [r5, #20]
  return dataRd;
 8004fc0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8004fc4:	f013 061b 	ands.w	r6, r3, #27
 8004fc8:	d1dd      	bne.n	8004f86 <rc522_halt+0x51a>
	    GPIOB->ODR &= ~(1UL << 0);
 8004fca:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004fcc:	4834      	ldr	r0, [pc, #208]	; (80050a0 <rc522_halt+0x634>)
	    GPIOB->ODR &= ~(1UL << 0);
 8004fce:	f023 0301 	bic.w	r3, r3, #1
 8004fd2:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	2364      	movs	r3, #100	; 0x64
 8004fd8:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8004fdc:	2494      	movs	r4, #148	; 0x94
 8004fde:	f88d 4007 	strb.w	r4, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004fe2:	f7fe fa7b 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004fe6:	2364      	movs	r3, #100	; 0x64
 8004fe8:	2201      	movs	r2, #1
 8004fea:	a902      	add	r1, sp, #8
 8004fec:	482c      	ldr	r0, [pc, #176]	; (80050a0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8004fee:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8004ff2:	f7fe fd0f 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8004ff6:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8004ff8:	4829      	ldr	r0, [pc, #164]	; (80050a0 <rc522_halt+0x634>)
	    GPIOB->ODR |= (1UL << 0);
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	616b      	str	r3, [r5, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8005000:	696b      	ldr	r3, [r5, #20]
  return dataRd;
 8005002:	f89d 4008 	ldrb.w	r4, [sp, #8]
	    GPIOB->ODR &= ~(1UL << 0);
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	616b      	str	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 800500c:	f04f 0c98 	mov.w	ip, #152	; 0x98
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8005010:	2364      	movs	r3, #100	; 0x64
 8005012:	2201      	movs	r2, #1
 8005014:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8005018:	f88d c007 	strb.w	ip, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800501c:	f7fe fa5e 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005020:	2364      	movs	r3, #100	; 0x64
 8005022:	481f      	ldr	r0, [pc, #124]	; (80050a0 <rc522_halt+0x634>)
	uint8_t dataRd=0;
 8005024:	f88d 6008 	strb.w	r6, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005028:	2201      	movs	r2, #1
 800502a:	a902      	add	r1, sp, #8
 800502c:	f7fe fcf2 	bl	8003a14 <HAL_SPI_Receive>
        for (i = 0; i < n; i++) 
 8005030:	2c10      	cmp	r4, #16
 8005032:	bf28      	it	cs
 8005034:	2410      	movcs	r4, #16
	    GPIOB->ODR |= (1UL << 0);
 8005036:	696b      	ldr	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8005038:	4e19      	ldr	r6, [pc, #100]	; (80050a0 <rc522_halt+0x634>)
        for (i = 0; i < n; i++) 
 800503a:	2c01      	cmp	r4, #1
 800503c:	bf38      	it	cc
 800503e:	2401      	movcc	r4, #1
 8005040:	f104 38ff 	add.w	r8, r4, #4294967295
	    GPIOB->ODR |= (1UL << 0);
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	1c7c      	adds	r4, r7, #1
 800504a:	616b      	str	r3, [r5, #20]
        for (i = 0; i < n; i++) 
 800504c:	fa14 f888 	uxtah	r8, r4, r8
 8005050:	e000      	b.n	8005054 <rc522_halt+0x5e8>
 8005052:	3401      	adds	r4, #1
	    GPIOB->ODR &= ~(1UL << 0);
 8005054:	696b      	ldr	r3, [r5, #20]
  reg = ((reg << 1) & 0x7E) | 0x80;
 8005056:	2292      	movs	r2, #146	; 0x92
	    GPIOB->ODR &= ~(1UL << 0);
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	616b      	str	r3, [r5, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800505e:	f10d 0107 	add.w	r1, sp, #7
  reg = ((reg << 1) & 0x7E) | 0x80;
 8005062:	f88d 2007 	strb.w	r2, [sp, #7]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8005066:	2364      	movs	r3, #100	; 0x64
 8005068:	2201      	movs	r2, #1
 800506a:	4630      	mov	r0, r6
 800506c:	f7fe fa36 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8005070:	2200      	movs	r2, #0
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005072:	2364      	movs	r3, #100	; 0x64
	uint8_t dataRd=0;
 8005074:	f88d 2008 	strb.w	r2, [sp, #8]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005078:	a902      	add	r1, sp, #8
 800507a:	2201      	movs	r2, #1
 800507c:	4630      	mov	r0, r6
 800507e:	f7fe fcc9 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8005082:	696b      	ldr	r3, [r5, #20]
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	616b      	str	r3, [r5, #20]
  return dataRd;
 800508a:	f89d 3008 	ldrb.w	r3, [sp, #8]
          backData[i] = d;
 800508e:	703b      	strb	r3, [r7, #0]
        for (i = 0; i < n; i++) 
 8005090:	45a0      	cmp	r8, r4
 8005092:	4627      	mov	r7, r4
 8005094:	d1dd      	bne.n	8005052 <rc522_halt+0x5e6>
}
 8005096:	b004      	add	sp, #16
 8005098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509c:	40020400 	.word	0x40020400
 80050a0:	200006a8 	.word	0x200006a8

080050a4 <rc522_checkCard>:
{
 80050a4:	b538      	push	{r3, r4, r5, lr}
    status = rc522_request(PICC_REQIDL, id);
 80050a6:	4601      	mov	r1, r0
{
 80050a8:	4605      	mov	r5, r0
    status = rc522_request(PICC_REQIDL, id);
 80050aa:	2026      	movs	r0, #38	; 0x26
 80050ac:	f7ff f8a0 	bl	80041f0 <rc522_request>
    if (status == true) {
 80050b0:	b920      	cbnz	r0, 80050bc <rc522_checkCard+0x18>
 80050b2:	4604      	mov	r4, r0
    rc522_halt();      //Command card into hibernation
 80050b4:	f7ff fcda 	bl	8004a6c <rc522_halt>
}
 80050b8:	4620      	mov	r0, r4
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
      status = rc522_antiColl(id);
 80050bc:	4628      	mov	r0, r5
 80050be:	f7ff fab3 	bl	8004628 <rc522_antiColl>
 80050c2:	4604      	mov	r4, r0
    rc522_halt();      //Command card into hibernation
 80050c4:	f7ff fcd2 	bl	8004a6c <rc522_halt>
}
 80050c8:	4620      	mov	r0, r4
 80050ca:	bd38      	pop	{r3, r4, r5, pc}

080050cc <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 80050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * SPI  -> SPI
	 * PA8  ->RST
	 * PB0  ->CS
	 * */
																							//SPI_Init();
  MFRC522_RST_LOW();
 80050ce:	4c6f      	ldr	r4, [pc, #444]	; (800528c <rc522_init+0x1c0>)
 80050d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
{
 80050d4:	b083      	sub	sp, #12
  HAL_Delay(10);
  MFRC522_RST_HIGH();
 80050d6:	2502      	movs	r5, #2
  MFRC522_RST_LOW();
 80050d8:	61a3      	str	r3, [r4, #24]
  HAL_Delay(10);
 80050da:	200a      	movs	r0, #10
 80050dc:	f7fc fff2 	bl	80020c4 <HAL_Delay>
	HAL_Delay(10);
 80050e0:	200a      	movs	r0, #10
  MFRC522_RST_HIGH();
 80050e2:	61a5      	str	r5, [r4, #24]
	HAL_Delay(10);
 80050e4:	f7fc ffee 	bl	80020c4 <HAL_Delay>
	    GPIOB->ODR &= ~(1UL << 0);
 80050e8:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050ea:	4869      	ldr	r0, [pc, #420]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR &= ~(1UL << 0);
 80050ec:	f023 0301 	bic.w	r3, r3, #1
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80050f0:	f640 7102 	movw	r1, #3842	; 0xf02
	    GPIOB->ODR &= ~(1UL << 0);
 80050f4:	6163      	str	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050f6:	462a      	mov	r2, r5
 80050f8:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80050fa:	f8ad 1004 	strh.w	r1, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80050fe:	a901      	add	r1, sp, #4
 8005100:	f7fe f9ec 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005104:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005106:	4862      	ldr	r0, [pc, #392]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800510e:	6962      	ldr	r2, [r4, #20]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005116:	f248 0254 	movw	r2, #32852	; 0x8054
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800511a:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800511c:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005120:	a901      	add	r1, sp, #4
 8005122:	462a      	mov	r2, r5
 8005124:	f7fe f9da 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005128:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800512a:	4859      	ldr	r0, [pc, #356]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8005132:	6962      	ldr	r2, [r4, #20]
 8005134:	f022 0201 	bic.w	r2, r2, #1
 8005138:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800513a:	f64a 1256 	movw	r2, #43350	; 0xa956
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800513e:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005140:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005144:	a901      	add	r1, sp, #4
 8005146:	462a      	mov	r2, r5
 8005148:	f7fe f9c8 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 800514c:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800514e:	4850      	ldr	r0, [pc, #320]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 8005156:	6962      	ldr	r2, [r4, #20]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800515e:	f64e 025a 	movw	r2, #59482	; 0xe85a
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005162:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005164:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005168:	a901      	add	r1, sp, #4
 800516a:	462a      	mov	r2, r5
 800516c:	f7fe f9b6 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005170:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005172:	4847      	ldr	r0, [pc, #284]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800517a:	6962      	ldr	r2, [r4, #20]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005182:	f44f 7256 	mov.w	r2, #856	; 0x358
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005186:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005188:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800518c:	a901      	add	r1, sp, #4
 800518e:	462a      	mov	r2, r5
 8005190:	f7fe f9a4 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005194:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005196:	483e      	ldr	r0, [pc, #248]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005198:	f042 0201 	orr.w	r2, r2, #1
 800519c:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800519e:	6962      	ldr	r2, [r4, #20]
 80051a0:	f022 0201 	bic.w	r2, r2, #1
 80051a4:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80051a6:	f244 022a 	movw	r2, #16426	; 0x402a
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80051aa:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80051ac:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80051b0:	a901      	add	r1, sp, #4
 80051b2:	462a      	mov	r2, r5
 80051b4:	f7fe f992 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80051b8:	6962      	ldr	r2, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80051ba:	4835      	ldr	r0, [pc, #212]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	6162      	str	r2, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80051c2:	6962      	ldr	r2, [r4, #20]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	6162      	str	r2, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80051ca:	f643 5222 	movw	r2, #15650	; 0x3d22
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80051ce:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80051d0:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 80051d4:	a901      	add	r1, sp, #4
 80051d6:	462a      	mov	r2, r5
 80051d8:	f7fe f980 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 80051dc:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80051de:	482c      	ldr	r0, [pc, #176]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 80051e6:	6963      	ldr	r3, [r4, #20]
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80051ee:	2201      	movs	r2, #1
 80051f0:	2364      	movs	r3, #100	; 0x64
 80051f2:	f10d 0103 	add.w	r1, sp, #3
  reg = ((reg << 1) & 0x7E) | 0x80;
 80051f6:	27a8      	movs	r7, #168	; 0xa8
 80051f8:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 80051fc:	f7fe f96e 	bl	80034dc <HAL_SPI_Transmit>
	uint8_t dataRd=0;
 8005200:	2300      	movs	r3, #0
 8005202:	f88d 3004 	strb.w	r3, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005206:	4822      	ldr	r0, [pc, #136]	; (8005290 <rc522_init+0x1c4>)
 8005208:	2364      	movs	r3, #100	; 0x64
 800520a:	2201      	movs	r2, #1
 800520c:	a901      	add	r1, sp, #4
 800520e:	f7fe fc01 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8005212:	6963      	ldr	r3, [r4, #20]
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	6163      	str	r3, [r4, #20]
  return dataRd;
 800521a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  if (!(temp & 0x03)) {
 800521e:	f013 0603 	ands.w	r6, r3, #3
 8005222:	d001      	beq.n	8005228 <rc522_init+0x15c>

  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);

  rc522_antennaON();   //Open the antenna
}
 8005224:	b003      	add	sp, #12
 8005226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    GPIOB->ODR &= ~(1UL << 0);
 8005228:	6963      	ldr	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800522a:	4819      	ldr	r0, [pc, #100]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR &= ~(1UL << 0);
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	6163      	str	r3, [r4, #20]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 8005232:	f10d 0103 	add.w	r1, sp, #3
 8005236:	2364      	movs	r3, #100	; 0x64
 8005238:	2201      	movs	r2, #1
  reg = ((reg << 1) & 0x7E) | 0x80;
 800523a:	f88d 7003 	strb.w	r7, [sp, #3]
																			HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&reg,1,100);
 800523e:	f7fe f94d 	bl	80034dc <HAL_SPI_Transmit>
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 8005242:	a901      	add	r1, sp, #4
 8005244:	2364      	movs	r3, #100	; 0x64
 8005246:	2201      	movs	r2, #1
 8005248:	4811      	ldr	r0, [pc, #68]	; (8005290 <rc522_init+0x1c4>)
	uint8_t dataRd=0;
 800524a:	f88d 6004 	strb.w	r6, [sp, #4]
																			HAL_SPI_Receive(&MFRC522_SPI,(uint8_t *)&dataRd,1,100);
 800524e:	f7fe fbe1 	bl	8003a14 <HAL_SPI_Receive>
	    GPIOB->ODR |= (1UL << 0);
 8005252:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005254:	480e      	ldr	r0, [pc, #56]	; (8005290 <rc522_init+0x1c4>)
	    GPIOB->ODR |= (1UL << 0);
 8005256:	f043 0301 	orr.w	r3, r3, #1
 800525a:	6163      	str	r3, [r4, #20]
	    GPIOB->ODR &= ~(1UL << 0);
 800525c:	6963      	ldr	r3, [r4, #20]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800525e:	462a      	mov	r2, r5
	    GPIOB->ODR &= ~(1UL << 0);
 8005260:	f023 0301 	bic.w	r3, r3, #1
  return dataRd;
 8005264:	f89d 5004 	ldrb.w	r5, [sp, #4]
	    GPIOB->ODR &= ~(1UL << 0);
 8005268:	6163      	str	r3, [r4, #20]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 800526a:	2328      	movs	r3, #40	; 0x28
 800526c:	f88d 3004 	strb.w	r3, [sp, #4]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8005270:	f045 0503 	orr.w	r5, r5, #3
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 8005274:	a901      	add	r1, sp, #4
 8005276:	2364      	movs	r3, #100	; 0x64
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8005278:	f88d 5005 	strb.w	r5, [sp, #5]
	HAL_SPI_Transmit(&MFRC522_SPI,(uint8_t *)&txData,2,100);
 800527c:	f7fe f92e 	bl	80034dc <HAL_SPI_Transmit>
	    GPIOB->ODR |= (1UL << 0);
 8005280:	6963      	ldr	r3, [r4, #20]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	6163      	str	r3, [r4, #20]
}
 8005288:	b003      	add	sp, #12
 800528a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800528c:	40020400 	.word	0x40020400
 8005290:	200006a8 	.word	0x200006a8

08005294 <write_packet>:
        return rc;

    return confirm_code == FPM_HANDSHAKE_OK;
}

static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 8005294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    len += 2;
 8005298:	3302      	adds	r3, #2
 800529a:	b29f      	uxth	r7, r3
    
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
                          (uint8_t)packettype, (uint8_t)(len >> 8), (uint8_t)(len) };
 800529c:	f3c3 2407 	ubfx	r4, r3, #8, #8
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 80052a0:	6903      	ldr	r3, [r0, #16]
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 80052a2:	b084      	sub	sp, #16
 80052a4:	4615      	mov	r5, r2
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 80052a6:	0e1a      	lsrs	r2, r3, #24
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 80052a8:	f88d 3009 	strb.w	r3, [sp, #9]
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 80052ac:	f88d 2006 	strb.w	r2, [sp, #6]
 80052b0:	0c1a      	lsrs	r2, r3, #16
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f88d 3008 	strb.w	r3, [sp, #8]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 80052b8:	23ef      	movs	r3, #239	; 0xef
 80052ba:	f88d 3004 	strb.w	r3, [sp, #4]
 80052be:	2301      	movs	r3, #1
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 80052c0:	4688      	mov	r8, r1
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 80052c2:	f88d 100a 	strb.w	r1, [sp, #10]
                          (uint8_t)packettype, (uint8_t)(len >> 8), (uint8_t)(len) };
 80052c6:	f88d 400b 	strb.w	r4, [sp, #11]
 80052ca:	f88d 700c 	strb.w	r7, [sp, #12]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 80052ce:	f88d 3005 	strb.w	r3, [sp, #5]
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 80052d2:	4606      	mov	r6, r0
    
    fpm->write_func(preamble, sizeof(preamble));
 80052d4:	6843      	ldr	r3, [r0, #4]
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 80052d6:	f88d 2007 	strb.w	r2, [sp, #7]
    fpm->write_func(preamble, sizeof(preamble));
 80052da:	2109      	movs	r1, #9
 80052dc:	a801      	add	r0, sp, #4
 80052de:	4798      	blx	r3
  
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 80052e0:	fa54 f387 	uxtab	r3, r4, r7
    for (uint8_t i = 0; i < len - 2; i++) {
 80052e4:	3f02      	subs	r7, #2
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 80052e6:	eb03 0408 	add.w	r4, r3, r8
    for (uint8_t i = 0; i < len - 2; i++) {
 80052ea:	2f00      	cmp	r7, #0
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 80052ec:	f8ad 4002 	strh.w	r4, [sp, #2]
    for (uint8_t i = 0; i < len - 2; i++) {
 80052f0:	dd0e      	ble.n	8005310 <write_packet+0x7c>
 80052f2:	2400      	movs	r4, #0
        fpm->write_func(&packet[i], 1);
 80052f4:	6873      	ldr	r3, [r6, #4]
 80052f6:	1928      	adds	r0, r5, r4
 80052f8:	2101      	movs	r1, #1
 80052fa:	4798      	blx	r3
        sum += packet[i];
 80052fc:	5d2b      	ldrb	r3, [r5, r4]
 80052fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
    for (uint8_t i = 0; i < len - 2; i++) {
 8005302:	3401      	adds	r4, #1
 8005304:	b2e4      	uxtb	r4, r4
        sum += packet[i];
 8005306:	4413      	add	r3, r2
    for (uint8_t i = 0; i < len - 2; i++) {
 8005308:	42bc      	cmp	r4, r7
        sum += packet[i];
 800530a:	f8ad 3002 	strh.w	r3, [sp, #2]
    for (uint8_t i = 0; i < len - 2; i++) {
 800530e:	dbf1      	blt.n	80052f4 <write_packet+0x60>
    }
    
    /* assume little-endian mcu */
    fpm->write_func((uint8_t *)(&sum) + 1, 1);
 8005310:	6873      	ldr	r3, [r6, #4]
 8005312:	f10d 0003 	add.w	r0, sp, #3
 8005316:	2101      	movs	r1, #1
 8005318:	4798      	blx	r3
    fpm->write_func((uint8_t *)&sum, 1);
 800531a:	6873      	ldr	r3, [r6, #4]
 800531c:	2101      	movs	r1, #1
 800531e:	f10d 0002 	add.w	r0, sp, #2
 8005322:	4798      	blx	r3
}
 8005324:	b004      	add	sp, #16
 8005326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800532a:	bf00      	nop

0800532c <get_reply>:

static int16_t get_reply(FPM * fpm, uint8_t * replyBuf, uint16_t buflen, 
                        uint8_t * pktid, fpm_uart_write_func out_stream) {
 800532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t pid = 0;
    uint16_t length = 0;
    uint16_t chksum = 0;
    uint16_t remn = 0;
    
    uint32_t last_read = millis_func();
 8005330:	4f72      	ldr	r7, [pc, #456]	; (80054fc <get_reply+0x1d0>)
                        uint8_t * pktid, fpm_uart_write_func out_stream) {
 8005332:	b087      	sub	sp, #28
    uint8_t pid = 0;
 8005334:	f04f 0a00 	mov.w	sl, #0
                        uint8_t * pktid, fpm_uart_write_func out_stream) {
 8005338:	9301      	str	r3, [sp, #4]
    uint8_t pid = 0;
 800533a:	f88d a013 	strb.w	sl, [sp, #19]
    uint32_t last_read = millis_func();
 800533e:	683b      	ldr	r3, [r7, #0]
                        uint8_t * pktid, fpm_uart_write_func out_stream) {
 8005340:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005344:	4606      	mov	r6, r0
    uint32_t last_read = millis_func();
 8005346:	4798      	blx	r3
    uint16_t chksum = 0;
 8005348:	46d0      	mov	r8, sl
    uint32_t last_read = millis_func();
 800534a:	4604      	mov	r4, r0
    uint16_t length = 0;
 800534c:	46d1      	mov	r9, sl
    uint16_t header = 0;
 800534e:	46d3      	mov	fp, sl
    FPM_State state = FPM_STATE_READ_HEADER;
 8005350:	4655      	mov	r5, sl
    
    while ((uint32_t)(millis_func() - last_read) < FPM_DEFAULT_TIMEOUT) {        
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	4798      	blx	r3
 8005356:	1b00      	subs	r0, r0, r4
 8005358:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800535c:	f080 80be 	bcs.w	80054dc <get_reply+0x1b0>
        switch (state) {
 8005360:	2d05      	cmp	r5, #5
 8005362:	d8f6      	bhi.n	8005352 <get_reply+0x26>
 8005364:	e8df f005 	tbb	[pc, r5]
 8005368:	3b915e74 	.word	0x3b915e74
 800536c:	031b      	.short	0x031b
                FPM_INFO_PRINT("%lX ");
                remn--;
                break;
            }
            case FPM_STATE_READ_CHECKSUM: {
                if (fpm->avail_func() < 2)
 800536e:	68b3      	ldr	r3, [r6, #8]
 8005370:	4798      	blx	r3
 8005372:	2801      	cmp	r0, #1
 8005374:	d9ed      	bls.n	8005352 <get_reply+0x26>
                    continue;
                
                last_read = millis_func();
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	4798      	blx	r3
                uint8_t temp[2];
                fpm->read_func(temp, 2);
 800537a:	2102      	movs	r1, #2
 800537c:	6833      	ldr	r3, [r6, #0]
                last_read = millis_func();
 800537e:	4604      	mov	r4, r0
                fpm->read_func(temp, 2);
 8005380:	a805      	add	r0, sp, #20
 8005382:	4798      	blx	r3
                uint16_t to_check = temp[0]; to_check <<= 8;
                to_check |= temp[1];
 8005384:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8005388:	ba49      	rev16	r1, r1
 800538a:	b289      	uxth	r1, r1
                
                if (to_check != chksum) {
 800538c:	4588      	cmp	r8, r1
 800538e:	f040 8096 	bne.w	80054be <get_reply+0x192>
                    continue;
                }
                
                FPM_INFO_PRINTLN("\r\n[+]Read complete");
                /* without chksum */
                return length - 2;
 8005392:	f1a9 0002 	sub.w	r0, r9, #2
 8005396:	b200      	sxth	r0, r0
        }
    }
    
    FPM_ERROR_PRINTLN("[+]Response timeout\r\n");
    return FPM_TIMEOUT;
}
 8005398:	b007      	add	sp, #28
 800539a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (remn <= 2) {
 800539e:	f1ba 0f02 	cmp.w	sl, #2
 80053a2:	f240 8088 	bls.w	80054b6 <get_reply+0x18a>
                if (fpm->avail_func() == 0)
 80053a6:	68b3      	ldr	r3, [r6, #8]
 80053a8:	4798      	blx	r3
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0d1      	beq.n	8005352 <get_reply+0x26>
                last_read = millis_func();
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	4798      	blx	r3
                fpm->read_func(&byte, 1);
 80053b2:	6833      	ldr	r3, [r6, #0]
                last_read = millis_func();
 80053b4:	4604      	mov	r4, r0
                fpm->read_func(&byte, 1);
 80053b6:	2101      	movs	r1, #1
 80053b8:	a805      	add	r0, sp, #20
 80053ba:	4798      	blx	r3
                if (out_stream != NULL) {
 80053bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8094 	beq.w	80054ec <get_reply+0x1c0>
                    out_stream(&byte, 1);
 80053c4:	a805      	add	r0, sp, #20
 80053c6:	2101      	movs	r1, #1
 80053c8:	4798      	blx	r3
                chksum += byte;
 80053ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80053ce:	4498      	add	r8, r3
                remn--;
 80053d0:	f10a 3aff 	add.w	sl, sl, #4294967295
                chksum += byte;
 80053d4:	fa1f f888 	uxth.w	r8, r8
                remn--;
 80053d8:	fa1f fa8a 	uxth.w	sl, sl
                break;
 80053dc:	e7b9      	b.n	8005352 <get_reply+0x26>
                if (fpm->avail_func() < 2)
 80053de:	68b3      	ldr	r3, [r6, #8]
 80053e0:	4798      	blx	r3
 80053e2:	2801      	cmp	r0, #1
 80053e4:	d9b5      	bls.n	8005352 <get_reply+0x26>
                last_read = millis_func();
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	4798      	blx	r3
 80053ea:	4604      	mov	r4, r0
                fpm->read_func(fpm->buffer, 2);
 80053ec:	4630      	mov	r0, r6
 80053ee:	2102      	movs	r1, #2
 80053f0:	f850 3b28 	ldr.w	r3, [r0], #40
 80053f4:	4798      	blx	r3
                length |= fpm->buffer[1];
 80053f6:	f8b6 9028 	ldrh.w	r9, [r6, #40]	; 0x28
 80053fa:	fa99 f999 	rev16.w	r9, r9
 80053fe:	fa1f f989 	uxth.w	r9, r9
                if (length > FPM_MAX_PACKET_LEN + 2 || (out_stream == NULL && length > buflen + 2)) {
 8005402:	f5b9 7f81 	cmp.w	r9, #258	; 0x102
 8005406:	d863      	bhi.n	80054d0 <get_reply+0x1a4>
 8005408:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d05c      	beq.n	80054c8 <get_reply+0x19c>
                length |= fpm->buffer[1];
 800540e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
                length = fpm->buffer[0]; length <<= 8;
 8005412:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
                chksum += fpm->buffer[0]; chksum += fpm->buffer[1];
 8005416:	4413      	add	r3, r2
 8005418:	4498      	add	r8, r3
 800541a:	fa1f f888 	uxth.w	r8, r8
                break;
 800541e:	46ca      	mov	sl, r9
                state = FPM_STATE_READ_CONTENTS;
 8005420:	2504      	movs	r5, #4
                break;
 8005422:	e796      	b.n	8005352 <get_reply+0x26>
                if (fpm->avail_func() < 4)
 8005424:	68b3      	ldr	r3, [r6, #8]
 8005426:	4798      	blx	r3
 8005428:	2803      	cmp	r0, #3
 800542a:	d992      	bls.n	8005352 <get_reply+0x26>
                last_read = millis_func();
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	4798      	blx	r3
 8005430:	4604      	mov	r4, r0
                fpm->read_func(fpm->buffer, 4);
 8005432:	4630      	mov	r0, r6
 8005434:	2104      	movs	r1, #4
 8005436:	f850 3b28 	ldr.w	r3, [r0], #40
 800543a:	4798      	blx	r3
                addr |= fpm->buffer[3];
 800543c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
                if (addr != fpm->address) {
 800543e:	6933      	ldr	r3, [r6, #16]
 8005440:	ba09      	rev	r1, r1
 8005442:	428b      	cmp	r3, r1
 8005444:	d039      	beq.n	80054ba <get_reply+0x18e>
                    FPM_ERROR_PRINTLN("[+]Wrong address: 0x%lX", addr);
 8005446:	482e      	ldr	r0, [pc, #184]	; (8005500 <get_reply+0x1d4>)
 8005448:	f004 fa8c 	bl	8009964 <iprintf>
                    state = FPM_STATE_READ_HEADER;
 800544c:	2500      	movs	r5, #0
                    break;
 800544e:	e780      	b.n	8005352 <get_reply+0x26>
                if (fpm->avail_func() == 0)
 8005450:	68b3      	ldr	r3, [r6, #8]
 8005452:	4798      	blx	r3
 8005454:	2800      	cmp	r0, #0
 8005456:	f43f af7c 	beq.w	8005352 <get_reply+0x26>
                last_read = millis_func();
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	4798      	blx	r3
                fpm->read_func(&byte, 1);
 800545e:	6833      	ldr	r3, [r6, #0]
                last_read = millis_func();
 8005460:	4604      	mov	r4, r0
                fpm->read_func(&byte, 1);
 8005462:	2101      	movs	r1, #1
 8005464:	a805      	add	r0, sp, #20
 8005466:	4798      	blx	r3
                header <<= 8; header |= byte;
 8005468:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
 800546c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8005470:	fa1f fb8b 	uxth.w	fp, fp
 8005474:	ea4b 0b03 	orr.w	fp, fp, r3
                if (header != FPM_STARTCODE)
 8005478:	f64e 7301 	movw	r3, #61185	; 0xef01
 800547c:	459b      	cmp	fp, r3
 800547e:	f47f af68 	bne.w	8005352 <get_reply+0x26>
                header = 0;
 8005482:	f04f 0b00 	mov.w	fp, #0
                state = FPM_STATE_READ_ADDRESS;
 8005486:	2501      	movs	r5, #1
 8005488:	e763      	b.n	8005352 <get_reply+0x26>
                if (fpm->avail_func() == 0)
 800548a:	68b3      	ldr	r3, [r6, #8]
 800548c:	4798      	blx	r3
 800548e:	2800      	cmp	r0, #0
 8005490:	f43f af5f 	beq.w	8005352 <get_reply+0x26>
                last_read = millis_func();
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	4798      	blx	r3
                fpm->read_func(&pid, 1);
 8005498:	6833      	ldr	r3, [r6, #0]
                last_read = millis_func();
 800549a:	4604      	mov	r4, r0
                fpm->read_func(&pid, 1);
 800549c:	2101      	movs	r1, #1
 800549e:	f10d 0013 	add.w	r0, sp, #19
 80054a2:	4798      	blx	r3
                chksum = pid;
 80054a4:	f89d 8013 	ldrb.w	r8, [sp, #19]
                *pktid = pid;
 80054a8:	9b01      	ldr	r3, [sp, #4]
                state = FPM_STATE_READ_LENGTH;
 80054aa:	2503      	movs	r5, #3
                *pktid = pid;
 80054ac:	f883 8000 	strb.w	r8, [r3]
                chksum = pid;
 80054b0:	fa1f f888 	uxth.w	r8, r8
                break;
 80054b4:	e74d      	b.n	8005352 <get_reply+0x26>
                    state = FPM_STATE_READ_CHECKSUM;
 80054b6:	2505      	movs	r5, #5
 80054b8:	e74b      	b.n	8005352 <get_reply+0x26>
                state = FPM_STATE_READ_PID;
 80054ba:	2502      	movs	r5, #2
 80054bc:	e749      	b.n	8005352 <get_reply+0x26>
                    FPM_ERROR_PRINTLN("\r\n[+]Wrong chksum: 0x%X", to_check);
 80054be:	4811      	ldr	r0, [pc, #68]	; (8005504 <get_reply+0x1d8>)
 80054c0:	f004 fa50 	bl	8009964 <iprintf>
                    state = FPM_STATE_READ_HEADER;
 80054c4:	2500      	movs	r5, #0
                    continue;
 80054c6:	e744      	b.n	8005352 <get_reply+0x26>
                if (length > FPM_MAX_PACKET_LEN + 2 || (out_stream == NULL && length > buflen + 2)) {
 80054c8:	9b03      	ldr	r3, [sp, #12]
 80054ca:	3302      	adds	r3, #2
 80054cc:	4599      	cmp	r9, r3
 80054ce:	dd9e      	ble.n	800540e <get_reply+0xe2>
                    FPM_ERROR_PRINTLN("[+]Packet too long: %d", length);
 80054d0:	480d      	ldr	r0, [pc, #52]	; (8005508 <get_reply+0x1dc>)
 80054d2:	4649      	mov	r1, r9
 80054d4:	f004 fa46 	bl	8009964 <iprintf>
                    state = FPM_STATE_READ_HEADER;
 80054d8:	2500      	movs	r5, #0
                    continue;
 80054da:	e73a      	b.n	8005352 <get_reply+0x26>
    FPM_ERROR_PRINTLN("[+]Response timeout\r\n");
 80054dc:	480b      	ldr	r0, [pc, #44]	; (800550c <get_reply+0x1e0>)
 80054de:	f004 fadd 	bl	8009a9c <puts>
    return FPM_TIMEOUT;
 80054e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80054e6:	b007      	add	sp, #28
 80054e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    *replyBuf++ = byte;
 80054ec:	9a02      	ldr	r2, [sp, #8]
 80054ee:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80054f2:	f802 3b01 	strb.w	r3, [r2], #1
 80054f6:	9202      	str	r2, [sp, #8]
 80054f8:	e769      	b.n	80053ce <get_reply+0xa2>
 80054fa:	bf00      	nop
 80054fc:	200008c0 	.word	0x200008c0
 8005500:	0800b0e4 	.word	0x0800b0e4
 8005504:	0800b118 	.word	0x0800b118
 8005508:	0800b100 	.word	0x0800b100
 800550c:	0800b134 	.word	0x0800b134

08005510 <write_packet.constprop.0>:
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 8005510:	b570      	push	{r4, r5, r6, lr}
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 8005512:	6903      	ldr	r3, [r0, #16]
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 8005514:	b084      	sub	sp, #16
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 8005516:	22ef      	movs	r2, #239	; 0xef
 8005518:	f88d 2004 	strb.w	r2, [sp, #4]
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 800551c:	0e1a      	lsrs	r2, r3, #24
 800551e:	f88d 2006 	strb.w	r2, [sp, #6]
 8005522:	0c1a      	lsrs	r2, r3, #16
 8005524:	f88d 2007 	strb.w	r2, [sp, #7]
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 8005528:	0a1a      	lsrs	r2, r3, #8
 800552a:	f88d 2008 	strb.w	r2, [sp, #8]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 800552e:	2200      	movs	r2, #0
 8005530:	2501      	movs	r5, #1
 8005532:	f88d 200b 	strb.w	r2, [sp, #11]
 8005536:	2203      	movs	r2, #3
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 8005538:	4604      	mov	r4, r0
 800553a:	460e      	mov	r6, r1
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 800553c:	f88d 3009 	strb.w	r3, [sp, #9]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 8005540:	f88d 200c 	strb.w	r2, [sp, #12]
    fpm->write_func(preamble, sizeof(preamble));
 8005544:	6843      	ldr	r3, [r0, #4]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 8005546:	f88d 5005 	strb.w	r5, [sp, #5]
    fpm->write_func(preamble, sizeof(preamble));
 800554a:	a801      	add	r0, sp, #4
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 800554c:	f88d 500a 	strb.w	r5, [sp, #10]
    fpm->write_func(preamble, sizeof(preamble));
 8005550:	2109      	movs	r1, #9
 8005552:	4798      	blx	r3
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 8005554:	2204      	movs	r2, #4
        fpm->write_func(&packet[i], 1);
 8005556:	6863      	ldr	r3, [r4, #4]
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 8005558:	f8ad 2002 	strh.w	r2, [sp, #2]
        fpm->write_func(&packet[i], 1);
 800555c:	4629      	mov	r1, r5
 800555e:	4630      	mov	r0, r6
 8005560:	4798      	blx	r3
        sum += packet[i];
 8005562:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005566:	7833      	ldrb	r3, [r6, #0]
 8005568:	4413      	add	r3, r2
    fpm->write_func((uint8_t *)(&sum) + 1, 1);
 800556a:	4629      	mov	r1, r5
 800556c:	6862      	ldr	r2, [r4, #4]
        sum += packet[i];
 800556e:	f8ad 3002 	strh.w	r3, [sp, #2]
    fpm->write_func((uint8_t *)(&sum) + 1, 1);
 8005572:	f10d 0003 	add.w	r0, sp, #3
 8005576:	4790      	blx	r2
    fpm->write_func((uint8_t *)&sum, 1);
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	4629      	mov	r1, r5
 800557c:	f10d 0002 	add.w	r0, sp, #2
 8005580:	4798      	blx	r3
}
 8005582:	b004      	add	sp, #16
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	bf00      	nop

08005588 <write_packet.constprop.1>:
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 8005588:	b570      	push	{r4, r5, r6, lr}
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 800558a:	6903      	ldr	r3, [r0, #16]
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 800558c:	b084      	sub	sp, #16
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 800558e:	22ef      	movs	r2, #239	; 0xef
 8005590:	f88d 2004 	strb.w	r2, [sp, #4]
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 8005594:	0e1a      	lsrs	r2, r3, #24
 8005596:	f88d 2006 	strb.w	r2, [sp, #6]
 800559a:	0c1a      	lsrs	r2, r3, #16
 800559c:	f88d 2007 	strb.w	r2, [sp, #7]
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 80055a0:	0a1a      	lsrs	r2, r3, #8
 80055a2:	f88d 2008 	strb.w	r2, [sp, #8]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 80055a6:	2200      	movs	r2, #0
 80055a8:	2501      	movs	r5, #1
 80055aa:	f88d 200b 	strb.w	r2, [sp, #11]
 80055ae:	2204      	movs	r2, #4
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 80055b0:	4604      	mov	r4, r0
 80055b2:	460e      	mov	r6, r1
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 80055b4:	f88d 3009 	strb.w	r3, [sp, #9]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 80055b8:	f88d 200c 	strb.w	r2, [sp, #12]
    fpm->write_func(preamble, sizeof(preamble));
 80055bc:	6843      	ldr	r3, [r0, #4]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 80055be:	f88d 5005 	strb.w	r5, [sp, #5]
    fpm->write_func(preamble, sizeof(preamble));
 80055c2:	eb0d 0002 	add.w	r0, sp, r2
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 80055c6:	f88d 500a 	strb.w	r5, [sp, #10]
    fpm->write_func(preamble, sizeof(preamble));
 80055ca:	2109      	movs	r1, #9
 80055cc:	4798      	blx	r3
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 80055ce:	2205      	movs	r2, #5
        fpm->write_func(&packet[i], 1);
 80055d0:	6863      	ldr	r3, [r4, #4]
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 80055d2:	f8ad 2002 	strh.w	r2, [sp, #2]
        fpm->write_func(&packet[i], 1);
 80055d6:	4629      	mov	r1, r5
 80055d8:	4630      	mov	r0, r6
 80055da:	4798      	blx	r3
        sum += packet[i];
 80055dc:	4630      	mov	r0, r6
 80055de:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80055e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80055e6:	4413      	add	r3, r2
 80055e8:	f8ad 3002 	strh.w	r3, [sp, #2]
        fpm->write_func(&packet[i], 1);
 80055ec:	4629      	mov	r1, r5
 80055ee:	6863      	ldr	r3, [r4, #4]
 80055f0:	4798      	blx	r3
        sum += packet[i];
 80055f2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80055f6:	7873      	ldrb	r3, [r6, #1]
 80055f8:	4413      	add	r3, r2
    fpm->write_func((uint8_t *)(&sum) + 1, 1);
 80055fa:	4629      	mov	r1, r5
 80055fc:	6862      	ldr	r2, [r4, #4]
        sum += packet[i];
 80055fe:	f8ad 3002 	strh.w	r3, [sp, #2]
    fpm->write_func((uint8_t *)(&sum) + 1, 1);
 8005602:	f10d 0003 	add.w	r0, sp, #3
 8005606:	4790      	blx	r2
    fpm->write_func((uint8_t *)&sum, 1);
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	4629      	mov	r1, r5
 800560c:	f10d 0002 	add.w	r0, sp, #2
 8005610:	4798      	blx	r3
}
 8005612:	b004      	add	sp, #16
 8005614:	bd70      	pop	{r4, r5, r6, pc}
 8005616:	bf00      	nop

08005618 <write_packet.constprop.2>:
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 8005618:	b5f0      	push	{r4, r5, r6, r7, lr}
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 800561a:	6903      	ldr	r3, [r0, #16]
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 800561c:	b085      	sub	sp, #20
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 800561e:	24ef      	movs	r4, #239	; 0xef
 8005620:	f88d 4004 	strb.w	r4, [sp, #4]
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 8005624:	460c      	mov	r4, r1
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 8005626:	0c19      	lsrs	r1, r3, #16
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 8005628:	2201      	movs	r2, #1
static void write_packet(FPM * fpm, uint8_t packettype, uint8_t * packet, uint16_t len) {
 800562a:	4606      	mov	r6, r0
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 800562c:	f88d 1007 	strb.w	r1, [sp, #7]
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 8005630:	0a19      	lsrs	r1, r3, #8
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 8005632:	0e18      	lsrs	r0, r3, #24
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 8005634:	f88d 2005 	strb.w	r2, [sp, #5]
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 8005638:	f88d 1008 	strb.w	r1, [sp, #8]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 800563c:	f88d 200a 	strb.w	r2, [sp, #10]
 8005640:	2100      	movs	r1, #0
 8005642:	2207      	movs	r2, #7
                          (uint8_t)(fpm->address >> 24), (uint8_t)(fpm->address >> 16),
 8005644:	f88d 0006 	strb.w	r0, [sp, #6]
                          (uint8_t)(fpm->address >> 8), (uint8_t)(fpm->address),
 8005648:	f88d 3009 	strb.w	r3, [sp, #9]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 800564c:	f88d 100b 	strb.w	r1, [sp, #11]
    fpm->write_func(preamble, sizeof(preamble));
 8005650:	6873      	ldr	r3, [r6, #4]
    uint8_t preamble[] = {(uint8_t)(FPM_STARTCODE >> 8), (uint8_t)FPM_STARTCODE,
 8005652:	f88d 200c 	strb.w	r2, [sp, #12]
    fpm->write_func(preamble, sizeof(preamble));
 8005656:	2109      	movs	r1, #9
 8005658:	a801      	add	r0, sp, #4
 800565a:	4798      	blx	r3
    uint16_t sum = (len >> 8) + (len & 0xFF) + packettype;
 800565c:	2308      	movs	r3, #8
 800565e:	f8ad 3002 	strh.w	r3, [sp, #2]
    for (uint8_t i = 0; i < len - 2; i++) {
 8005662:	1d67      	adds	r7, r4, #5
        fpm->write_func(&packet[i], 1);
 8005664:	6873      	ldr	r3, [r6, #4]
 8005666:	4620      	mov	r0, r4
 8005668:	2101      	movs	r1, #1
 800566a:	4798      	blx	r3
        sum += packet[i];
 800566c:	7823      	ldrb	r3, [r4, #0]
 800566e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005672:	3401      	adds	r4, #1
 8005674:	4413      	add	r3, r2
    for (uint8_t i = 0; i < len - 2; i++) {
 8005676:	42a7      	cmp	r7, r4
        sum += packet[i];
 8005678:	f8ad 3002 	strh.w	r3, [sp, #2]
    for (uint8_t i = 0; i < len - 2; i++) {
 800567c:	d1f2      	bne.n	8005664 <write_packet.constprop.2+0x4c>
    fpm->write_func((uint8_t *)(&sum) + 1, 1);
 800567e:	6873      	ldr	r3, [r6, #4]
 8005680:	f10d 0003 	add.w	r0, sp, #3
 8005684:	2101      	movs	r1, #1
 8005686:	4798      	blx	r3
    fpm->write_func((uint8_t *)&sum, 1);
 8005688:	6873      	ldr	r3, [r6, #4]
 800568a:	2101      	movs	r1, #1
 800568c:	f10d 0002 	add.w	r0, sp, #2
 8005690:	4798      	blx	r3
}
 8005692:	b005      	add	sp, #20
 8005694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005696:	bf00      	nop

08005698 <fpm_get_image>:
int16_t fpm_get_image(FPM * fpm) {
 8005698:	b530      	push	{r4, r5, lr}
    fpm->buffer[0] = FPM_GETIMAGE;
 800569a:	4605      	mov	r5, r0
 800569c:	2301      	movs	r3, #1
 800569e:	f805 3f28 	strb.w	r3, [r5, #40]!
int16_t fpm_get_image(FPM * fpm) {
 80056a2:	b085      	sub	sp, #20
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 1);
 80056a4:	4629      	mov	r1, r5
int16_t fpm_get_image(FPM * fpm) {
 80056a6:	4604      	mov	r4, r0
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 1);
 80056a8:	f7ff ff32 	bl	8005510 <write_packet.constprop.0>

/* read standard ACK-reply into library fpm->buffer and
 * return packet length and confirmation code */
static int16_t read_ack_get_response(FPM * fpm, uint8_t * rc) {
    uint8_t pktid = 0;
 80056ac:	2000      	movs	r0, #0
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 80056ae:	9000      	str	r0, [sp, #0]
    uint8_t pktid = 0;
 80056b0:	f88d 000f 	strb.w	r0, [sp, #15]
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 80056b4:	f10d 030f 	add.w	r3, sp, #15
 80056b8:	2221      	movs	r2, #33	; 0x21
 80056ba:	4629      	mov	r1, r5
 80056bc:	4620      	mov	r0, r4
 80056be:	f7ff fe35 	bl	800532c <get_reply>
    
    /* most likely timed out */
    if (len < 0)
 80056c2:	2800      	cmp	r0, #0
 80056c4:	db07      	blt.n	80056d6 <fpm_get_image+0x3e>
        return len;
    
    /* wrong pkt id */
    if (pktid != FPM_ACKPACKET) {
 80056c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80056ca:	2907      	cmp	r1, #7
 80056cc:	d105      	bne.n	80056da <fpm_get_image+0x42>
        FPM_ERROR_PRINTLN("[+]Wrong PID: 0x%X", pktid);
        return FPM_READ_ERROR;
    }
    
    *rc = fpm->buffer[0];
 80056ce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (rc < 0)
 80056d2:	b140      	cbz	r0, 80056e6 <fpm_get_image+0x4e>
    return confirm_code;
 80056d4:	b218      	sxth	r0, r3
}
 80056d6:	b005      	add	sp, #20
 80056d8:	bd30      	pop	{r4, r5, pc}
        FPM_ERROR_PRINTLN("[+]Wrong PID: 0x%X", pktid);
 80056da:	4804      	ldr	r0, [pc, #16]	; (80056ec <fpm_get_image+0x54>)
 80056dc:	f004 f942 	bl	8009964 <iprintf>
        return FPM_READ_ERROR;
 80056e0:	f06f 0001 	mvn.w	r0, #1
 80056e4:	e7f7      	b.n	80056d6 <fpm_get_image+0x3e>
 80056e6:	f04f 30ff 	mov.w	r0, #4294967295
 80056ea:	e7f4      	b.n	80056d6 <fpm_get_image+0x3e>
 80056ec:	0800b14c 	.word	0x0800b14c

080056f0 <fpm_image2Tz>:
int16_t fpm_image2Tz(FPM * fpm, uint8_t slot) {
 80056f0:	b510      	push	{r4, lr}
 80056f2:	460b      	mov	r3, r1
 80056f4:	b086      	sub	sp, #24
    fpm->buffer[0] = FPM_IMAGE2TZ; 
 80056f6:	2202      	movs	r2, #2
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 2);
 80056f8:	f100 0128 	add.w	r1, r0, #40	; 0x28
    fpm->buffer[0] = FPM_IMAGE2TZ; 
 80056fc:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    fpm->buffer[1] = slot;
 8005700:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
int16_t fpm_image2Tz(FPM * fpm, uint8_t slot) {
 8005704:	4604      	mov	r4, r0
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 2);
 8005706:	9103      	str	r1, [sp, #12]
 8005708:	f7ff ff3e 	bl	8005588 <write_packet.constprop.1>
    uint8_t pktid = 0;
 800570c:	2000      	movs	r0, #0
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 800570e:	9000      	str	r0, [sp, #0]
    uint8_t pktid = 0;
 8005710:	f88d 0017 	strb.w	r0, [sp, #23]
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 8005714:	9903      	ldr	r1, [sp, #12]
 8005716:	f10d 0317 	add.w	r3, sp, #23
 800571a:	2221      	movs	r2, #33	; 0x21
 800571c:	4620      	mov	r0, r4
 800571e:	f7ff fe05 	bl	800532c <get_reply>
    if (len < 0)
 8005722:	2800      	cmp	r0, #0
 8005724:	db07      	blt.n	8005736 <fpm_image2Tz+0x46>
    if (pktid != FPM_ACKPACKET) {
 8005726:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800572a:	2907      	cmp	r1, #7
 800572c:	d105      	bne.n	800573a <fpm_image2Tz+0x4a>
    *rc = fpm->buffer[0];
 800572e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (rc < 0)
 8005732:	b140      	cbz	r0, 8005746 <fpm_image2Tz+0x56>
    return confirm_code;
 8005734:	b218      	sxth	r0, r3
}
 8005736:	b006      	add	sp, #24
 8005738:	bd10      	pop	{r4, pc}
        FPM_ERROR_PRINTLN("[+]Wrong PID: 0x%X", pktid);
 800573a:	4804      	ldr	r0, [pc, #16]	; (800574c <fpm_image2Tz+0x5c>)
 800573c:	f004 f912 	bl	8009964 <iprintf>
        return FPM_READ_ERROR;
 8005740:	f06f 0001 	mvn.w	r0, #1
 8005744:	e7f7      	b.n	8005736 <fpm_image2Tz+0x46>
 8005746:	f04f 30ff 	mov.w	r0, #4294967295
 800574a:	e7f4      	b.n	8005736 <fpm_image2Tz+0x46>
 800574c:	0800b14c 	.word	0x0800b14c

08005750 <fpm_read_params>:
int16_t fpm_read_params(FPM * fpm, FPM_System_Params * user_params) {
 8005750:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (fpm->manual_settings) {
 8005752:	7d06      	ldrb	r6, [r0, #20]
int16_t fpm_read_params(FPM * fpm, FPM_System_Params * user_params) {
 8005754:	b085      	sub	sp, #20
 8005756:	4604      	mov	r4, r0
 8005758:	460d      	mov	r5, r1
    if (fpm->manual_settings) {
 800575a:	b15e      	cbz	r6, 8005774 <fpm_read_params+0x24>
        if (user_params != NULL)
 800575c:	b139      	cbz	r1, 800576e <fpm_read_params+0x1e>
            memcpy(user_params, &fpm->sys_params, 16);
 800575e:	6981      	ldr	r1, [r0, #24]
 8005760:	69c2      	ldr	r2, [r0, #28]
 8005762:	6a03      	ldr	r3, [r0, #32]
 8005764:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8005766:	60e8      	str	r0, [r5, #12]
 8005768:	6029      	str	r1, [r5, #0]
 800576a:	606a      	str	r2, [r5, #4]
 800576c:	60ab      	str	r3, [r5, #8]
        return FPM_OK;
 800576e:	2000      	movs	r0, #0
}
 8005770:	b005      	add	sp, #20
 8005772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fpm->buffer[0] = FPM_READSYSPARAM;
 8005774:	4607      	mov	r7, r0
 8005776:	230f      	movs	r3, #15
 8005778:	f807 3f28 	strb.w	r3, [r7, #40]!
	write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 1);
 800577c:	4639      	mov	r1, r7
 800577e:	f7ff fec7 	bl	8005510 <write_packet.constprop.0>
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 8005782:	9600      	str	r6, [sp, #0]
 8005784:	f10d 030f 	add.w	r3, sp, #15
 8005788:	4639      	mov	r1, r7
 800578a:	2221      	movs	r2, #33	; 0x21
 800578c:	4620      	mov	r0, r4
    uint8_t pktid = 0;
 800578e:	f88d 600f 	strb.w	r6, [sp, #15]
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 8005792:	f7ff fdcb 	bl	800532c <get_reply>
    if (len < 0)
 8005796:	2800      	cmp	r0, #0
 8005798:	dbea      	blt.n	8005770 <fpm_read_params+0x20>
    if (pktid != FPM_ACKPACKET) {
 800579a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800579e:	2907      	cmp	r1, #7
 80057a0:	d15d      	bne.n	800585e <fpm_read_params+0x10e>
    
    /* minus confirmation code */
    return --len;
 80057a2:	3801      	subs	r0, #1
 80057a4:	b200      	sxth	r0, r0
    if (len < 0)
 80057a6:	1c42      	adds	r2, r0, #1
    *rc = fpm->buffer[0];
 80057a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (len < 0)
 80057ac:	d0e0      	beq.n	8005770 <fpm_read_params+0x20>
    if (confirm_code != FPM_OK)
 80057ae:	b113      	cbz	r3, 80057b6 <fpm_read_params+0x66>
        return confirm_code;
 80057b0:	b218      	sxth	r0, r3
}
 80057b2:	b005      	add	sp, #20
 80057b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (len != 16) {
 80057b6:	2810      	cmp	r0, #16
 80057b8:	d14a      	bne.n	8005850 <fpm_read_params+0x100>
    memcpy(&fpm->sys_params, &fpm->buffer[1], 16);
 80057ba:	f8d4 2029 	ldr.w	r2, [r4, #41]	; 0x29
 80057be:	61a2      	str	r2, [r4, #24]
        swap = *lo;
 80057c0:	7e21      	ldrb	r1, [r4, #24]
        *lo++ = *hi;
 80057c2:	7e60      	ldrb	r0, [r4, #25]
    memcpy(&fpm->sys_params, &fpm->buffer[1], 16);
 80057c4:	f8d4 202d 	ldr.w	r2, [r4, #45]	; 0x2d
 80057c8:	61e2      	str	r2, [r4, #28]
        *lo++ = *hi;
 80057ca:	7620      	strb	r0, [r4, #24]
        *hi-- = swap;
 80057cc:	7661      	strb	r1, [r4, #25]
        *lo++ = *hi;
 80057ce:	7ee0      	ldrb	r0, [r4, #27]
        swap = *lo;
 80057d0:	7ea1      	ldrb	r1, [r4, #26]
    memcpy(&fpm->sys_params, &fpm->buffer[1], 16);
 80057d2:	f8d4 2031 	ldr.w	r2, [r4, #49]	; 0x31
        *lo++ = *hi;
 80057d6:	76a0      	strb	r0, [r4, #26]
        *hi-- = swap;
 80057d8:	76e1      	strb	r1, [r4, #27]
        *lo++ = *hi;
 80057da:	7f60      	ldrb	r0, [r4, #29]
        swap = *lo;
 80057dc:	7f21      	ldrb	r1, [r4, #28]
    memcpy(&fpm->sys_params, &fpm->buffer[1], 16);
 80057de:	6222      	str	r2, [r4, #32]
        *lo++ = *hi;
 80057e0:	7720      	strb	r0, [r4, #28]
        *hi-- = swap;
 80057e2:	7761      	strb	r1, [r4, #29]
        *lo++ = *hi;
 80057e4:	7fe0      	ldrb	r0, [r4, #31]
        swap = *lo;
 80057e6:	7fa1      	ldrb	r1, [r4, #30]
    memcpy(&fpm->sys_params, &fpm->buffer[1], 16);
 80057e8:	f8d4 2035 	ldr.w	r2, [r4, #53]	; 0x35
        *lo++ = *hi;
 80057ec:	77a0      	strb	r0, [r4, #30]
        *hi-- = swap;
 80057ee:	77e1      	strb	r1, [r4, #31]
        *lo++ = *hi;
 80057f0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
        swap = *lo;
 80057f4:	f894 1020 	ldrb.w	r1, [r4, #32]
    memcpy(&fpm->sys_params, &fpm->buffer[1], 16);
 80057f8:	6262      	str	r2, [r4, #36]	; 0x24
        *lo++ = *hi;
 80057fa:	f884 0020 	strb.w	r0, [r4, #32]
        *hi-- = swap;
 80057fe:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
        *lo++ = *hi;
 8005802:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
        swap = *lo;
 8005806:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
        *hi-- = swap;
 800580a:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
        *lo++ = *hi;
 800580e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
        swap = *lo;
 8005812:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
        *lo++ = *hi;
 8005816:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800581a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
        *hi-- = swap;
 800581e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
        *lo++ = *hi;
 8005822:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
        swap = *lo;
 8005826:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
        *hi-- = swap;
 800582a:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
    memcpy(&fpm->sys_params, &fpm->buffer[1], 16);
 800582e:	f104 0218 	add.w	r2, r4, #24
        *lo++ = *hi;
 8005832:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    if (user_params != NULL)
 8005836:	2d00      	cmp	r5, #0
 8005838:	d099      	beq.n	800576e <fpm_read_params+0x1e>
        memcpy(user_params, &fpm->sys_params, 16);
 800583a:	6851      	ldr	r1, [r2, #4]
 800583c:	69a4      	ldr	r4, [r4, #24]
 800583e:	4618      	mov	r0, r3
 8005840:	6893      	ldr	r3, [r2, #8]
 8005842:	68d2      	ldr	r2, [r2, #12]
 8005844:	60ea      	str	r2, [r5, #12]
 8005846:	602c      	str	r4, [r5, #0]
 8005848:	6069      	str	r1, [r5, #4]
 800584a:	60ab      	str	r3, [r5, #8]
}
 800584c:	b005      	add	sp, #20
 800584e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FPM_ERROR_PRINTLN("[+]Unexpected params length: %d", len);
 8005850:	4601      	mov	r1, r0
 8005852:	4806      	ldr	r0, [pc, #24]	; (800586c <fpm_read_params+0x11c>)
 8005854:	f004 f886 	bl	8009964 <iprintf>
        return FPM_READ_ERROR;
 8005858:	f06f 0001 	mvn.w	r0, #1
 800585c:	e788      	b.n	8005770 <fpm_read_params+0x20>
        FPM_ERROR_PRINTLN("[+]Wrong PID: 0x%X", pktid);
 800585e:	4804      	ldr	r0, [pc, #16]	; (8005870 <fpm_read_params+0x120>)
 8005860:	f004 f880 	bl	8009964 <iprintf>
        return FPM_READ_ERROR;
 8005864:	f06f 0001 	mvn.w	r0, #1
 8005868:	e782      	b.n	8005770 <fpm_read_params+0x20>
 800586a:	bf00      	nop
 800586c:	0800b160 	.word	0x0800b160
 8005870:	0800b14c 	.word	0x0800b14c

08005874 <fpm_begin>:
uint8_t fpm_begin(FPM * fpm, fpm_millis_func _millis_func) {
 8005874:	b570      	push	{r4, r5, r6, lr}
    millis_func = _millis_func;
 8005876:	4e25      	ldr	r6, [pc, #148]	; (800590c <fpm_begin+0x98>)
uint8_t fpm_begin(FPM * fpm, fpm_millis_func _millis_func) {
 8005878:	b086      	sub	sp, #24
    millis_func = _millis_func;
 800587a:	6031      	str	r1, [r6, #0]
uint8_t fpm_begin(FPM * fpm, fpm_millis_func _millis_func) {
 800587c:	4604      	mov	r4, r0
    uint32_t start = millis_func();
 800587e:	4788      	blx	r1
 8005880:	4605      	mov	r5, r0
    while (millis_func() - start < 1000);   // 500 ms at least according to datasheet
 8005882:	6833      	ldr	r3, [r6, #0]
 8005884:	4798      	blx	r3
 8005886:	1b43      	subs	r3, r0, r5
 8005888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588c:	d3f9      	bcc.n	8005882 <fpm_begin+0xe>
    fpm->buffer[1] = (fpm->password >> 24) & 0xff; fpm->buffer[2] = (fpm->password >> 16) & 0xff;
 800588e:	68e3      	ldr	r3, [r4, #12]
    fpm->buffer[3] = (fpm->password >> 8) & 0xff; fpm->buffer[4] = fpm->password & 0xff;
 8005890:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    fpm->buffer[1] = (fpm->password >> 24) & 0xff; fpm->buffer[2] = (fpm->password >> 16) & 0xff;
 8005894:	0e1a      	lsrs	r2, r3, #24
 8005896:	0c18      	lsrs	r0, r3, #16
    fpm->buffer[0] = FPM_VERIFYPASSWORD;
 8005898:	2513      	movs	r5, #19
    fpm->buffer[1] = (fpm->password >> 24) & 0xff; fpm->buffer[2] = (fpm->password >> 16) & 0xff;
 800589a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
    fpm->buffer[3] = (fpm->password >> 8) & 0xff; fpm->buffer[4] = fpm->password & 0xff;
 800589e:	0a1a      	lsrs	r2, r3, #8
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 5);
 80058a0:	f104 0128 	add.w	r1, r4, #40	; 0x28
    fpm->buffer[0] = FPM_VERIFYPASSWORD;
 80058a4:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    fpm->buffer[1] = (fpm->password >> 24) & 0xff; fpm->buffer[2] = (fpm->password >> 16) & 0xff;
 80058a8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    fpm->buffer[3] = (fpm->password >> 8) & 0xff; fpm->buffer[4] = fpm->password & 0xff;
 80058ac:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 5);
 80058b0:	4620      	mov	r0, r4
    uint8_t pktid = 0;
 80058b2:	2500      	movs	r5, #0
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 5);
 80058b4:	9103      	str	r1, [sp, #12]
 80058b6:	f7ff feaf 	bl	8005618 <write_packet.constprop.2>
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 80058ba:	9903      	ldr	r1, [sp, #12]
 80058bc:	9500      	str	r5, [sp, #0]
 80058be:	f10d 0317 	add.w	r3, sp, #23
 80058c2:	2221      	movs	r2, #33	; 0x21
 80058c4:	4620      	mov	r0, r4
    uint8_t pktid = 0;
 80058c6:	f88d 5017 	strb.w	r5, [sp, #23]
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 80058ca:	f7ff fd2f 	bl	800532c <get_reply>
    if (len < 0)
 80058ce:	2800      	cmp	r0, #0
 80058d0:	db07      	blt.n	80058e2 <fpm_begin+0x6e>
    if (pktid != FPM_ACKPACKET) {
 80058d2:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80058d6:	2907      	cmp	r1, #7
 80058d8:	d113      	bne.n	8005902 <fpm_begin+0x8e>
    *rc = fpm->buffer[0];
 80058da:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (len < 0 || confirm_code != FPM_OK)
 80058de:	b108      	cbz	r0, 80058e4 <fpm_begin+0x70>
 80058e0:	b113      	cbz	r3, 80058e8 <fpm_begin+0x74>
        return 0;
 80058e2:	4628      	mov	r0, r5
}
 80058e4:	b006      	add	sp, #24
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
    if (!fpm->manual_settings && fpm_read_params(fpm, NULL) != FPM_OK)
 80058e8:	7d21      	ldrb	r1, [r4, #20]
 80058ea:	b111      	cbz	r1, 80058f2 <fpm_begin+0x7e>
    return 1;
 80058ec:	2001      	movs	r0, #1
}
 80058ee:	b006      	add	sp, #24
 80058f0:	bd70      	pop	{r4, r5, r6, pc}
    if (!fpm->manual_settings && fpm_read_params(fpm, NULL) != FPM_OK)
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7ff ff2c 	bl	8005750 <fpm_read_params>
        return 0;
 80058f8:	fab0 f080 	clz	r0, r0
 80058fc:	0940      	lsrs	r0, r0, #5
}
 80058fe:	b006      	add	sp, #24
 8005900:	bd70      	pop	{r4, r5, r6, pc}
        FPM_ERROR_PRINTLN("[+]Wrong PID: 0x%X", pktid);
 8005902:	4803      	ldr	r0, [pc, #12]	; (8005910 <fpm_begin+0x9c>)
 8005904:	f004 f82e 	bl	8009964 <iprintf>
 8005908:	e7eb      	b.n	80058e2 <fpm_begin+0x6e>
 800590a:	bf00      	nop
 800590c:	200008c0 	.word	0x200008c0
 8005910:	0800b14c 	.word	0x0800b14c

08005914 <fpm_search_database>:
int16_t fpm_search_database(FPM * fpm, uint16_t * finger_id, uint16_t * score, uint8_t slot) {
 8005914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fpm->buffer[1] = slot;
 8005918:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    fpm->buffer[4] = (uint8_t)(fpm->sys_params.capacity >> 8);
 800591c:	8b83      	ldrh	r3, [r0, #28]
 800591e:	ba5b      	rev16	r3, r3
int16_t fpm_search_database(FPM * fpm, uint16_t * finger_id, uint16_t * score, uint8_t slot) {
 8005920:	b084      	sub	sp, #16
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 6);
 8005922:	f100 0828 	add.w	r8, r0, #40	; 0x28
    fpm->buffer[2] = 0x00; fpm->buffer[3] = 0x00;
 8005926:	2500      	movs	r5, #0
    fpm->buffer[4] = (uint8_t)(fpm->sys_params.capacity >> 8);
 8005928:	8583      	strh	r3, [r0, #44]	; 0x2c
    fpm->buffer[0] = FPM_SEARCH;
 800592a:	2304      	movs	r3, #4
 800592c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
int16_t fpm_search_database(FPM * fpm, uint16_t * finger_id, uint16_t * score, uint8_t slot) {
 8005930:	4604      	mov	r4, r0
    fpm->buffer[2] = 0x00; fpm->buffer[3] = 0x00;
 8005932:	8545      	strh	r5, [r0, #42]	; 0x2a
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 6);
 8005934:	2306      	movs	r3, #6
int16_t fpm_search_database(FPM * fpm, uint16_t * finger_id, uint16_t * score, uint8_t slot) {
 8005936:	460f      	mov	r7, r1
 8005938:	4616      	mov	r6, r2
    write_packet(fpm, FPM_COMMANDPACKET, fpm->buffer, 6);
 800593a:	2101      	movs	r1, #1
 800593c:	4642      	mov	r2, r8
 800593e:	f7ff fca9 	bl	8005294 <write_packet>
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 8005942:	9500      	str	r5, [sp, #0]
 8005944:	4641      	mov	r1, r8
 8005946:	f10d 030f 	add.w	r3, sp, #15
 800594a:	2221      	movs	r2, #33	; 0x21
 800594c:	4620      	mov	r0, r4
    uint8_t pktid = 0;
 800594e:	f88d 500f 	strb.w	r5, [sp, #15]
    int16_t len = get_reply(fpm, fpm->buffer, FPM_BUFFER_SZ, &pktid, NULL);
 8005952:	f7ff fceb 	bl	800532c <get_reply>
    if (len < 0)
 8005956:	2800      	cmp	r0, #0
 8005958:	db0b      	blt.n	8005972 <fpm_search_database+0x5e>
    if (pktid != FPM_ACKPACKET) {
 800595a:	f89d 100f 	ldrb.w	r1, [sp, #15]
 800595e:	2907      	cmp	r1, #7
 8005960:	d11b      	bne.n	800599a <fpm_search_database+0x86>
    return --len;
 8005962:	3801      	subs	r0, #1
 8005964:	b200      	sxth	r0, r0
    if (len < 0)
 8005966:	1c42      	adds	r2, r0, #1
    *rc = fpm->buffer[0];
 8005968:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (len < 0)
 800596c:	d001      	beq.n	8005972 <fpm_search_database+0x5e>
    if (confirm_code != FPM_OK)
 800596e:	b11b      	cbz	r3, 8005978 <fpm_search_database+0x64>
        return confirm_code;
 8005970:	b218      	sxth	r0, r3
}
 8005972:	b004      	add	sp, #16
 8005974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (len != 4)
 8005978:	2804      	cmp	r0, #4
 800597a:	d10b      	bne.n	8005994 <fpm_search_database+0x80>
    *finger_id |= fpm->buffer[2];
 800597c:	f8b4 2029 	ldrh.w	r2, [r4, #41]	; 0x29
    return confirm_code;
 8005980:	4618      	mov	r0, r3
    *finger_id |= fpm->buffer[2];
 8005982:	ba53      	rev16	r3, r2
 8005984:	803b      	strh	r3, [r7, #0]
    *score |= fpm->buffer[4];
 8005986:	f8b4 302b 	ldrh.w	r3, [r4, #43]	; 0x2b
 800598a:	ba5b      	rev16	r3, r3
 800598c:	8033      	strh	r3, [r6, #0]
}
 800598e:	b004      	add	sp, #16
 8005990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return FPM_READ_ERROR;
 8005994:	f06f 0001 	mvn.w	r0, #1
 8005998:	e7eb      	b.n	8005972 <fpm_search_database+0x5e>
        FPM_ERROR_PRINTLN("[+]Wrong PID: 0x%X", pktid);
 800599a:	4803      	ldr	r0, [pc, #12]	; (80059a8 <fpm_search_database+0x94>)
 800599c:	f003 ffe2 	bl	8009964 <iprintf>
        return FPM_READ_ERROR;
 80059a0:	f06f 0001 	mvn.w	r0, #1
 80059a4:	e7e5      	b.n	8005972 <fpm_search_database+0x5e>
 80059a6:	bf00      	nop
 80059a8:	0800b14c 	.word	0x0800b14c

080059ac <uart6_avail>:
    }
}

/* UART interface for fingerprint sensor library -- using USART3 */
uint16_t uart6_avail(void) {
    return uart_avail(USART6);
 80059ac:	4801      	ldr	r0, [pc, #4]	; (80059b4 <uart6_avail+0x8>)
 80059ae:	f000 ba89 	b.w	8005ec4 <uart_avail>
 80059b2:	bf00      	nop
 80059b4:	40011400 	.word	0x40011400

080059b8 <uart6_read>:
}

uint16_t uart6_read(uint8_t * bytes, uint16_t len) {
 80059b8:	4603      	mov	r3, r0
 80059ba:	460a      	mov	r2, r1
    return uart_read(USART6, bytes, len);
 80059bc:	4801      	ldr	r0, [pc, #4]	; (80059c4 <uart6_read+0xc>)
 80059be:	4619      	mov	r1, r3
 80059c0:	f000 ba16 	b.w	8005df0 <uart_read>
 80059c4:	40011400 	.word	0x40011400

080059c8 <uart6_write>:
}

void uart6_write(uint8_t * bytes, uint16_t len) {
 80059c8:	4603      	mov	r3, r0
 80059ca:	460a      	mov	r2, r1
    uart_write(USART6, bytes, len);
 80059cc:	4801      	ldr	r0, [pc, #4]	; (80059d4 <uart6_write+0xc>)
 80059ce:	4619      	mov	r1, r3
 80059d0:	f000 b9be 	b.w	8005d50 <uart_write>
 80059d4:	40011400 	.word	0x40011400

080059d8 <r307_init>:
{
 80059d8:	b538      	push	{r3, r4, r5, lr}
	  finger.address = 0xFFFFFFFF;
 80059da:	4c15      	ldr	r4, [pc, #84]	; (8005a30 <r307_init+0x58>)
	  finger.read_func = uart6_read;
 80059dc:	4815      	ldr	r0, [pc, #84]	; (8005a34 <r307_init+0x5c>)
	  finger.avail_func = uart6_avail;
 80059de:	4d16      	ldr	r5, [pc, #88]	; (8005a38 <r307_init+0x60>)
	  finger.write_func = uart6_write;
 80059e0:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <r307_init+0x64>)
	  finger.read_func = uart6_read;
 80059e2:	6020      	str	r0, [r4, #0]
	  finger.password = 0;
 80059e4:	2300      	movs	r3, #0
	  finger.address = 0xFFFFFFFF;
 80059e6:	f04f 31ff 	mov.w	r1, #4294967295
	  finger.password = 0;
 80059ea:	e9c4 3103 	strd	r3, r1, [r4, #12]
	  if (fpm_begin(&finger, HAL_GetTick))
 80059ee:	4620      	mov	r0, r4
 80059f0:	4913      	ldr	r1, [pc, #76]	; (8005a40 <r307_init+0x68>)
	  finger.manual_settings = 0;
 80059f2:	7523      	strb	r3, [r4, #20]
	  finger.avail_func = uart6_avail;
 80059f4:	60a5      	str	r5, [r4, #8]
	  finger.write_func = uart6_write;
 80059f6:	6062      	str	r2, [r4, #4]
	  if (fpm_begin(&finger, HAL_GetTick))
 80059f8:	f7ff ff3c 	bl	8005874 <fpm_begin>
 80059fc:	b1a0      	cbz	r0, 8005a28 <r307_init+0x50>
		  fpm_read_params(&finger, &params);
 80059fe:	4d11      	ldr	r5, [pc, #68]	; (8005a44 <r307_init+0x6c>)
 8005a00:	4620      	mov	r0, r4
 8005a02:	4629      	mov	r1, r5
 8005a04:	f7ff fea4 	bl	8005750 <fpm_read_params>
		  printf("Found fingerprint sensor!\r\n");
 8005a08:	480f      	ldr	r0, [pc, #60]	; (8005a48 <r307_init+0x70>)
 8005a0a:	f004 f847 	bl	8009a9c <puts>
		  printf("Capacity: %d\r\n", params.capacity);
 8005a0e:	88a9      	ldrh	r1, [r5, #4]
 8005a10:	480e      	ldr	r0, [pc, #56]	; (8005a4c <r307_init+0x74>)
 8005a12:	f003 ffa7 	bl	8009964 <iprintf>
		  printf("Packet length: %d\r\n", fpm_packet_lengths[params.packet_len]);
 8005a16:	4b0e      	ldr	r3, [pc, #56]	; (8005a50 <r307_init+0x78>)
 8005a18:	89aa      	ldrh	r2, [r5, #12]
 8005a1a:	480e      	ldr	r0, [pc, #56]	; (8005a54 <r307_init+0x7c>)
 8005a1c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
}
 8005a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  printf("Packet length: %d\r\n", fpm_packet_lengths[params.packet_len]);
 8005a24:	f003 bf9e 	b.w	8009964 <iprintf>
		  printf("Did not find fingerprint sensor :(\r\n");
 8005a28:	480b      	ldr	r0, [pc, #44]	; (8005a58 <r307_init+0x80>)
 8005a2a:	f004 f837 	bl	8009a9c <puts>
		  while (1);
 8005a2e:	e7fe      	b.n	8005a2e <r307_init+0x56>
 8005a30:	200008c4 	.word	0x200008c4
 8005a34:	080059b9 	.word	0x080059b9
 8005a38:	080059ad 	.word	0x080059ad
 8005a3c:	080059c9 	.word	0x080059c9
 8005a40:	080020b9 	.word	0x080020b9
 8005a44:	20000914 	.word	0x20000914
 8005a48:	0800b238 	.word	0x0800b238
 8005a4c:	0800b254 	.word	0x0800b254
 8005a50:	0800b184 	.word	0x0800b184
 8005a54:	0800b264 	.word	0x0800b264
 8005a58:	0800b278 	.word	0x0800b278

08005a5c <search_database>:
{
 8005a5c:	b530      	push	{r4, r5, lr}
    printf("Waiting for valid finger\r\n");
 8005a5e:	483b      	ldr	r0, [pc, #236]	; (8005b4c <search_database+0xf0>)
        p = fpm_get_image(&finger);
 8005a60:	4c3b      	ldr	r4, [pc, #236]	; (8005b50 <search_database+0xf4>)
{
 8005a62:	b085      	sub	sp, #20
    printf("Waiting for valid finger\r\n");
 8005a64:	f004 f81a 	bl	8009a9c <puts>
        p = fpm_get_image(&finger);
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7ff fe15 	bl	8005698 <fpm_get_image>
        switch (p) {
 8005a6e:	4601      	mov	r1, r0
 8005a70:	b148      	cbz	r0, 8005a86 <search_database+0x2a>
 8005a72:	2802      	cmp	r0, #2
                printf(".");
 8005a74:	f04f 002e 	mov.w	r0, #46	; 0x2e
        switch (p) {
 8005a78:	d034      	beq.n	8005ae4 <search_database+0x88>
            printf("Error: %d\r\n", p);
 8005a7a:	4836      	ldr	r0, [pc, #216]	; (8005b54 <search_database+0xf8>)
}
 8005a7c:	b005      	add	sp, #20
 8005a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            printf("Error: %d\r\n", p);
 8005a82:	f003 bf6f 	b.w	8009964 <iprintf>
                printf("Image taken\r\n");
 8005a86:	4834      	ldr	r0, [pc, #208]	; (8005b58 <search_database+0xfc>)
 8005a88:	f004 f808 	bl	8009a9c <puts>
    p = fpm_image2Tz(&finger, 1);
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4830      	ldr	r0, [pc, #192]	; (8005b50 <search_database+0xf4>)
 8005a90:	f7ff fe2e 	bl	80056f0 <fpm_image2Tz>
    switch (p) {
 8005a94:	4601      	mov	r1, r0
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d1ef      	bne.n	8005a7a <search_database+0x1e>
            printf("Image converted\r\n");
 8005a9a:	4830      	ldr	r0, [pc, #192]	; (8005b5c <search_database+0x100>)
    while (fpm_get_image(&finger) != FPM_NOFINGER) {
 8005a9c:	4c2c      	ldr	r4, [pc, #176]	; (8005b50 <search_database+0xf4>)
            printf("Image converted\r\n");
 8005a9e:	f003 fffd 	bl	8009a9c <puts>
    p = fpm_search_database(&finger, &fid, &score, 1);
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f10d 020e 	add.w	r2, sp, #14
 8005aa8:	a903      	add	r1, sp, #12
 8005aaa:	4829      	ldr	r0, [pc, #164]	; (8005b50 <search_database+0xf4>)
 8005aac:	f7ff ff32 	bl	8005914 <fpm_search_database>
 8005ab0:	4605      	mov	r5, r0
    printf("Remove finger\r\n");
 8005ab2:	482b      	ldr	r0, [pc, #172]	; (8005b60 <search_database+0x104>)
 8005ab4:	f003 fff2 	bl	8009a9c <puts>
    while (fpm_get_image(&finger) != FPM_NOFINGER) {
 8005ab8:	e001      	b.n	8005abe <search_database+0x62>
        HAL_Delay(500);
 8005aba:	f7fc fb03 	bl	80020c4 <HAL_Delay>
    while (fpm_get_image(&finger) != FPM_NOFINGER) {
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f7ff fdea 	bl	8005698 <fpm_get_image>
 8005ac4:	2802      	cmp	r0, #2
        HAL_Delay(500);
 8005ac6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    while (fpm_get_image(&finger) != FPM_NOFINGER) {
 8005aca:	d1f6      	bne.n	8005aba <search_database+0x5e>
    printf("\r\n");
 8005acc:	4825      	ldr	r0, [pc, #148]	; (8005b64 <search_database+0x108>)
 8005ace:	f003 ffe5 	bl	8009a9c <puts>
    if (p == FPM_OK) {
 8005ad2:	b155      	cbz	r5, 8005aea <search_database+0x8e>
    else if (p == FPM_NOTFOUND) {
 8005ad4:	2d09      	cmp	r5, #9
 8005ad6:	d01e      	beq.n	8005b16 <search_database+0xba>
        printf("Error: %d\r\n", p);
 8005ad8:	481e      	ldr	r0, [pc, #120]	; (8005b54 <search_database+0xf8>)
 8005ada:	4629      	mov	r1, r5
 8005adc:	f003 ff42 	bl	8009964 <iprintf>
}
 8005ae0:	b005      	add	sp, #20
 8005ae2:	bd30      	pop	{r4, r5, pc}
                printf(".");
 8005ae4:	f003 ff56 	bl	8009994 <putchar>
    while (p != FPM_OK) {
 8005ae8:	e7be      	b.n	8005a68 <search_database+0xc>
        printf("Found a print match!\r\n");
 8005aea:	481f      	ldr	r0, [pc, #124]	; (8005b68 <search_database+0x10c>)
 8005aec:	f003 ffd6 	bl	8009a9c <puts>
        print_string(160,350,"Fingerprint Matched. Welcome",WHITE);
 8005af0:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <search_database+0x110>)
 8005af2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005af6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005afa:	20a0      	movs	r0, #160	; 0xa0
 8005afc:	f001 fc18 	bl	8007330 <print_string>
        fingerMatchFlag =1;
 8005b00:	4b1b      	ldr	r3, [pc, #108]	; (8005b70 <search_database+0x114>)
    printf("Found at ID #%d with confidence %d\r\n", fid, score);
 8005b02:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8005b06:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8005b0a:	481a      	ldr	r0, [pc, #104]	; (8005b74 <search_database+0x118>)
        fingerMatchFlag =1;
 8005b0c:	2401      	movs	r4, #1
 8005b0e:	701c      	strb	r4, [r3, #0]
    printf("Found at ID #%d with confidence %d\r\n", fid, score);
 8005b10:	f003 ff28 	bl	8009964 <iprintf>
 8005b14:	e7e4      	b.n	8005ae0 <search_database+0x84>
        printf("Did not find a match\r\n");
 8005b16:	4818      	ldr	r0, [pc, #96]	; (8005b78 <search_database+0x11c>)
 8005b18:	f003 ffc0 	bl	8009a9c <puts>
        print_string(160,350,"Fingerprint didn't Match. Please Try again !!",WHITE);
 8005b1c:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <search_database+0x120>)
 8005b1e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005b22:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8005b26:	20a0      	movs	r0, #160	; 0xa0
 8005b28:	f001 fc02 	bl	8007330 <print_string>
        HAL_Delay(1000);
 8005b2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b30:	f7fc fac8 	bl	80020c4 <HAL_Delay>
        fill_area(140, 700, 350, 380, PURPLE);
 8005b34:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <search_database+0x124>)
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005b3c:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8005b40:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005b44:	208c      	movs	r0, #140	; 0x8c
 8005b46:	f000 fb3d 	bl	80061c4 <fill_area>
        return;
 8005b4a:	e7c9      	b.n	8005ae0 <search_database+0x84>
 8005b4c:	0800b29c 	.word	0x0800b29c
 8005b50:	200008c4 	.word	0x200008c4
 8005b54:	0800b2c8 	.word	0x0800b2c8
 8005b58:	0800b2b8 	.word	0x0800b2b8
 8005b5c:	0800b2d4 	.word	0x0800b2d4
 8005b60:	0800b2e8 	.word	0x0800b2e8
 8005b64:	0800afe8 	.word	0x0800afe8
 8005b68:	0800b2f8 	.word	0x0800b2f8
 8005b6c:	0800b310 	.word	0x0800b310
 8005b70:	20000910 	.word	0x20000910
 8005b74:	0800b330 	.word	0x0800b330
 8005b78:	0800b358 	.word	0x0800b358
 8005b7c:	0800b370 	.word	0x0800b370
 8005b80:	00800010 	.word	0x00800010

08005b84 <fingerprint_match_loop>:
{
 8005b84:	b510      	push	{r4, lr}
	Set_Font(&Font12x18);
 8005b86:	480e      	ldr	r0, [pc, #56]	; (8005bc0 <fingerprint_match_loop+0x3c>)
 8005b88:	4c0e      	ldr	r4, [pc, #56]	; (8005bc4 <fingerprint_match_loop+0x40>)
{
 8005b8a:	b082      	sub	sp, #8
	Set_Font(&Font12x18);
 8005b8c:	f000 fa68 	bl	8006060 <Set_Font>
        search_database();
 8005b90:	f7ff ff64 	bl	8005a5c <search_database>
        if(fingerMatchFlag){
 8005b94:	7823      	ldrb	r3, [r4, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0fa      	beq.n	8005b90 <fingerprint_match_loop+0xc>
        	fingerMatchFlag=0;
 8005b9a:	2300      	movs	r3, #0
    HAL_Delay(1000);
 8005b9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        	fingerMatchFlag=0;
 8005ba0:	7023      	strb	r3, [r4, #0]
    HAL_Delay(1000);
 8005ba2:	f7fc fa8f 	bl	80020c4 <HAL_Delay>
    fill_area(140, 700, 350, 380, PURPLE);
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <fingerprint_match_loop+0x44>)
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005bae:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8005bb2:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005bb6:	208c      	movs	r0, #140	; 0x8c
 8005bb8:	f000 fb04 	bl	80061c4 <fill_area>
}
 8005bbc:	b002      	add	sp, #8
 8005bbe:	bd10      	pop	{r4, pc}
 8005bc0:	20000544 	.word	0x20000544
 8005bc4:	20000910 	.word	0x20000910
 8005bc8:	00800010 	.word	0x00800010

08005bcc <uart_init>:
 * This function configures the hardware resources
 * @param huart: UART handle pointer
 * @retval None
 */
void uart_init(USART_TypeDef * instance, uint32_t baud_rate)
{
 8005bcc:	b570      	push	{r4, r5, r6, lr}
    switch ((uint32_t)instance)
 8005bce:	4b5b      	ldr	r3, [pc, #364]	; (8005d3c <uart_init+0x170>)
{
 8005bd0:	b08a      	sub	sp, #40	; 0x28
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd2:	2400      	movs	r4, #0
    switch ((uint32_t)instance)
 8005bd4:	4298      	cmp	r0, r3
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005bda:	e9cd 4406 	strd	r4, r4, [sp, #24]
{
 8005bde:	4605      	mov	r5, r0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005be0:	9408      	str	r4, [sp, #32]
{
 8005be2:	460e      	mov	r6, r1
    switch ((uint32_t)instance)
 8005be4:	d066      	beq.n	8005cb4 <uart_init+0xe8>
 8005be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bea:	4298      	cmp	r0, r3
 8005bec:	d022      	beq.n	8005c34 <uart_init+0x68>
        error_handler();
 8005bee:	f7fc f893 	bl	8001d18 <error_handler>

    uart_t * handle = uart_get_handle(instance);
    UART_HandleTypeDef * huart = &(handle->huart);

    if (instance == USART1)
 8005bf2:	4b52      	ldr	r3, [pc, #328]	; (8005d3c <uart_init+0x170>)
 8005bf4:	429d      	cmp	r5, r3
 8005bf6:	d021      	beq.n	8005c3c <uart_init+0x70>

        /* USART1 interrupt Init */
        HAL_NVIC_SetPriority(USART1_IRQn, 0x3, 0);
        HAL_NVIC_EnableIRQ(USART1_IRQn);
    }
    else if (instance == USART6)
 8005bf8:	4b51      	ldr	r3, [pc, #324]	; (8005d40 <uart_init+0x174>)
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	d05c      	beq.n	8005cb8 <uart_init+0xec>
        /* USART3 interrupt Init */
        HAL_NVIC_SetPriority(USART6_IRQn, 0x3, 0);
        HAL_NVIC_EnableIRQ(USART6_IRQn);
    }

    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	68d9      	ldr	r1, [r3, #12]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_RXNE);
 8005c02:	f06f 0020 	mvn.w	r0, #32
    __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c06:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c0a:	60d9      	str	r1, [r3, #12]
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_RXNE);
 8005c0c:	6018      	str	r0, [r3, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c0e:	68d9      	ldr	r1, [r3, #12]
 8005c10:	f041 0120 	orr.w	r1, r1, #32
 8005c14:	60d9      	str	r1, [r3, #12]

    handle->tx_head = 0;
 8005c16:	2200      	movs	r2, #0
    handle->rx_head = 0;
    handle->tx_tail = 0;
    handle->rx_tail = 0;

    handle->timeout = UART_DEFAULT_TIMEOUT;
 8005c18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    handle->tx_head = 0;
 8005c1c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    handle->timeout = UART_DEFAULT_TIMEOUT;
 8005c20:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    handle->rx_head = 0;
 8005c24:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    handle->tx_tail = 0;
 8005c28:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    handle->rx_tail = 0;
 8005c2c:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
}
 8005c30:	b00a      	add	sp, #40	; 0x28
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
    if (instance == USART1)
 8005c34:	4b41      	ldr	r3, [pc, #260]	; (8005d3c <uart_init+0x170>)
    switch ((uint32_t)instance)
 8005c36:	4c43      	ldr	r4, [pc, #268]	; (8005d44 <uart_init+0x178>)
    if (instance == USART1)
 8005c38:	429d      	cmp	r5, r3
 8005c3a:	d1dd      	bne.n	8005bf8 <uart_init+0x2c>
        __HAL_RCC_USART1_CLK_ENABLE();
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8005c42:	9500      	str	r5, [sp, #0]
 8005c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c46:	4840      	ldr	r0, [pc, #256]	; (8005d48 <uart_init+0x17c>)
        __HAL_RCC_USART1_CLK_ENABLE();
 8005c48:	f042 0210 	orr.w	r2, r2, #16
 8005c4c:	645a      	str	r2, [r3, #68]	; 0x44
 8005c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c50:	f002 0210 	and.w	r2, r2, #16
 8005c54:	9200      	str	r2, [sp, #0]
 8005c56:	9a00      	ldr	r2, [sp, #0]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c58:	9501      	str	r5, [sp, #4]
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	9301      	str	r3, [sp, #4]
 8005c6a:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8005c6c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005c70:	2302      	movs	r3, #2
 8005c72:	e9cd 2304 	strd	r2, r3, [sp, #16]
        GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c76:	2307      	movs	r3, #7
 8005c78:	9308      	str	r3, [sp, #32]
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	2303      	movs	r3, #3
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c7e:	a904      	add	r1, sp, #16
        GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 8005c80:	e9cd 2306 	strd	r2, r3, [sp, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c84:	f7fc fa8e 	bl	80021a4 <HAL_GPIO_Init>
        huart->Init.Mode = UART_MODE_TX_RX;
 8005c88:	230c      	movs	r3, #12
        huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005c8a:	e9c4 6501 	strd	r6, r5, [r4, #4]
        huart->Init.Parity = UART_PARITY_NONE;
 8005c8e:	e9c4 5503 	strd	r5, r5, [r4, #12]
        huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c92:	e9c4 3505 	strd	r3, r5, [r4, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8005c96:	61e5      	str	r5, [r4, #28]
        if (HAL_UART_Init(huart) != HAL_OK)
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7fe f961 	bl	8003f60 <HAL_UART_Init>
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d145      	bne.n	8005d2e <uart_init+0x162>
        HAL_NVIC_SetPriority(USART1_IRQn, 0x3, 0);
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2103      	movs	r1, #3
 8005ca6:	2025      	movs	r0, #37	; 0x25
 8005ca8:	f7fc fa30 	bl	800210c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005cac:	2025      	movs	r0, #37	; 0x25
 8005cae:	f7fc fa6b 	bl	8002188 <HAL_NVIC_EnableIRQ>
 8005cb2:	e7a4      	b.n	8005bfe <uart_init+0x32>
    case (uint32_t)USART1: return &uart1_handle;
 8005cb4:	4c25      	ldr	r4, [pc, #148]	; (8005d4c <uart_init+0x180>)
 8005cb6:	e79c      	b.n	8005bf2 <uart_init+0x26>
        __HAL_RCC_USART6_CLK_ENABLE();
 8005cb8:	2500      	movs	r5, #0
 8005cba:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8005cbe:	9502      	str	r5, [sp, #8]
 8005cc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc2:	4821      	ldr	r0, [pc, #132]	; (8005d48 <uart_init+0x17c>)
        __HAL_RCC_USART6_CLK_ENABLE();
 8005cc4:	f042 0220 	orr.w	r2, r2, #32
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8005cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ccc:	f002 0220 	and.w	r2, r2, #32
 8005cd0:	9202      	str	r2, [sp, #8]
 8005cd2:	9a02      	ldr	r2, [sp, #8]
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cd4:	9503      	str	r5, [sp, #12]
 8005cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8005cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	9303      	str	r3, [sp, #12]
 8005ce6:	9b03      	ldr	r3, [sp, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8005ce8:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005cec:	2302      	movs	r3, #2
 8005cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
        GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	9308      	str	r3, [sp, #32]
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	2303      	movs	r3, #3
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cfa:	a904      	add	r1, sp, #16
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8005cfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d00:	f7fc fa50 	bl	80021a4 <HAL_GPIO_Init>
        huart->Init.Mode = UART_MODE_TX_RX;
 8005d04:	230c      	movs	r3, #12
        huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005d06:	e9c4 6501 	strd	r6, r5, [r4, #4]
        huart->Init.Parity = UART_PARITY_NONE;
 8005d0a:	e9c4 5503 	strd	r5, r5, [r4, #12]
        huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d0e:	e9c4 3505 	strd	r3, r5, [r4, #20]
        huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8005d12:	61e5      	str	r5, [r4, #28]
        if (HAL_UART_Init(huart) != HAL_OK)
 8005d14:	4620      	mov	r0, r4
 8005d16:	f7fe f923 	bl	8003f60 <HAL_UART_Init>
 8005d1a:	b958      	cbnz	r0, 8005d34 <uart_init+0x168>
        HAL_NVIC_SetPriority(USART6_IRQn, 0x3, 0);
 8005d1c:	2047      	movs	r0, #71	; 0x47
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2103      	movs	r1, #3
 8005d22:	f7fc f9f3 	bl	800210c <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005d26:	2047      	movs	r0, #71	; 0x47
 8005d28:	f7fc fa2e 	bl	8002188 <HAL_NVIC_EnableIRQ>
 8005d2c:	e767      	b.n	8005bfe <uart_init+0x32>
            error_handler();
 8005d2e:	f7fb fff3 	bl	8001d18 <error_handler>
 8005d32:	e7b6      	b.n	8005ca2 <uart_init+0xd6>
            error_handler();
 8005d34:	f7fb fff0 	bl	8001d18 <error_handler>
 8005d38:	e7f0      	b.n	8005d1c <uart_init+0x150>
 8005d3a:	bf00      	nop
 8005d3c:	40011000 	.word	0x40011000
 8005d40:	40011400 	.word	0x40011400
 8005d44:	200002f4 	.word	0x200002f4
 8005d48:	40020000 	.word	0x40020000
 8005d4c:	200000a4 	.word	0x200000a4

08005d50 <uart_write>:

uint16_t uart_write(USART_TypeDef * instance, const uint8_t * bytes, uint16_t len)
{
    uint16_t n = 0;

    while (len--)
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	d03c      	beq.n	8005dce <uart_write+0x7e>
{
 8005d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    switch ((uint32_t)instance)
 8005d58:	f8df a084 	ldr.w	sl, [pc, #132]	; 8005de0 <uart_write+0x90>
    case (uint32_t)USART1: return &uart1_handle;
 8005d5c:	f8df b084 	ldr.w	fp, [pc, #132]	; 8005de4 <uart_write+0x94>
    switch ((uint32_t)instance)
 8005d60:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8005de8 <uart_write+0x98>
 8005d64:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8005dec <uart_write+0x9c>
 8005d68:	1e4e      	subs	r6, r1, #1
    uint16_t n = 0;
 8005d6a:	2400      	movs	r4, #0
    switch ((uint32_t)instance)
 8005d6c:	4550      	cmp	r0, sl
 8005d6e:	d125      	bne.n	8005dbc <uart_write+0x6c>
    case (uint32_t)USART1: return &uart1_handle;
 8005d70:	4659      	mov	r1, fp

uint16_t uart_write_byte(USART_TypeDef * instance, uint8_t c)
{
    uart_t * handle = uart_get_handle(instance);

    uint16_t curr_head = handle->tx_head;
 8005d72:	f8b1 e046 	ldrh.w	lr, [r1, #70]	; 0x46
    uint16_t curr_tail = handle->tx_tail;
 8005d76:	f8b1 3048 	ldrh.w	r3, [r1, #72]	; 0x48
        if (uart_write_byte(instance, *bytes++)) n++;
 8005d7a:	f816 7f01 	ldrb.w	r7, [r6, #1]!

    /* If the buffer and the data register is empty, just write the byte
     * to the data register and be done. This shortcut helps
     * significantly improve the effective datarate at high (>
     * 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.*/
    if (curr_head == curr_tail && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE) != RESET)
 8005d7e:	680d      	ldr	r5, [r1, #0]
    uint16_t curr_head = handle->tx_head;
 8005d80:	fa1f fe8e 	uxth.w	lr, lr
    uint16_t curr_tail = handle->tx_tail;
 8005d84:	b29b      	uxth	r3, r3
    if (curr_head == curr_tail && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE) != RESET)
 8005d86:	459e      	cmp	lr, r3
 8005d88:	d01c      	beq.n	8005dc4 <uart_write+0x74>
    {
        instance->DR = c;
        return 1;
    }

    uint16_t i = (curr_head + 1) % UART_MAX_TX_SIZE;
 8005d8a:	f10e 0c01 	add.w	ip, lr, #1
 8005d8e:	fa5f fc8c 	uxtb.w	ip, ip

    /* If the output buffer is full, there's nothing for it other than to
       wait for the interrupt handler to empty it a bit */
    while (i == handle->tx_tail) {    }
 8005d92:	f8b1 3048 	ldrh.w	r3, [r1, #72]	; 0x48
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	459c      	cmp	ip, r3
 8005d9a:	d0fa      	beq.n	8005d92 <uart_write+0x42>

    handle->tx_buf[curr_head] = c;
 8005d9c:	448e      	add	lr, r1
 8005d9e:	f88e 704e 	strb.w	r7, [lr, #78]	; 0x4e
    handle->tx_head = i;
 8005da2:	f8a1 c046 	strh.w	ip, [r1, #70]	; 0x46

    __HAL_UART_ENABLE_IT(&handle->huart, UART_IT_TXE);
 8005da6:	68eb      	ldr	r3, [r5, #12]
 8005da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dac:	60eb      	str	r3, [r5, #12]
        if (uart_write_byte(instance, *bytes++)) n++;
 8005dae:	3401      	adds	r4, #1
 8005db0:	b2a4      	uxth	r4, r4
    while (len--)
 8005db2:	42a2      	cmp	r2, r4
 8005db4:	d1da      	bne.n	8005d6c <uart_write+0x1c>
}
 8005db6:	4610      	mov	r0, r2
 8005db8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((uint32_t)instance)
 8005dbc:	4548      	cmp	r0, r9
 8005dbe:	d108      	bne.n	8005dd2 <uart_write+0x82>
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	e7d6      	b.n	8005d72 <uart_write+0x22>
    if (curr_head == curr_tail && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE) != RESET)
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	d5df      	bpl.n	8005d8a <uart_write+0x3a>
        instance->DR = c;
 8005dca:	6047      	str	r7, [r0, #4]
        return 1;
 8005dcc:	e7ef      	b.n	8005dae <uart_write+0x5e>
}
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4770      	bx	lr
        error_handler();
 8005dd2:	f7fb ffa1 	bl	8001d18 <error_handler>
    uint16_t curr_head = handle->tx_head;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ddc:	deff      	udf	#255	; 0xff
 8005dde:	bf00      	nop
 8005de0:	40011000 	.word	0x40011000
 8005de4:	200000a4 	.word	0x200000a4
 8005de8:	40011400 	.word	0x40011400
 8005dec:	200002f4 	.word	0x200002f4

08005df0 <uart_read>:

    return -1;     /* -1 indicates timeout */
}

uint16_t uart_read(USART_TypeDef * instance, uint8_t * bytes, uint16_t len)
{
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	b083      	sub	sp, #12
    uint16_t count = 0;

    while (count < len) {
 8005df6:	e9cd 1200 	strd	r1, r2, [sp]
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	d052      	beq.n	8005ea4 <uart_read+0xb4>
    switch ((uint32_t)instance)
 8005dfe:	4e2d      	ldr	r6, [pc, #180]	; (8005eb4 <uart_read+0xc4>)
 8005e00:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8005ebc <uart_read+0xcc>
 8005e04:	4d2c      	ldr	r5, [pc, #176]	; (8005eb8 <uart_read+0xc8>)
    case (uint32_t)USART6: return &uart6_handle;
 8005e06:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8005ec0 <uart_read+0xd0>
 8005e0a:	4682      	mov	sl, r0
    uint16_t count = 0;
 8005e0c:	f04f 0900 	mov.w	r9, #0
 8005e10:	e01a      	b.n	8005e48 <uart_read+0x58>
    uint16_t curr_head = handle->rx_head;
 8005e12:	f8bb 004a 	ldrh.w	r0, [fp, #74]	; 0x4a
    uint16_t curr_tail = handle->rx_tail;
 8005e16:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
    uint16_t curr_head = handle->rx_head;
 8005e1a:	b280      	uxth	r0, r0
    uint16_t curr_tail = handle->rx_tail;
 8005e1c:	b29b      	uxth	r3, r3
    if (curr_head == curr_tail) {
 8005e1e:	4298      	cmp	r0, r3
 8005e20:	d028      	beq.n	8005e74 <uart_read+0x84>
        uint8_t c = handle->rx_buf[curr_tail];
 8005e22:	eb0b 0003 	add.w	r0, fp, r3
        handle->rx_tail = (uint16_t)(curr_tail + 1) % UART_MAX_RX_SIZE;
 8005e26:	3301      	adds	r3, #1
 8005e28:	b2db      	uxtb	r3, r3
        uint8_t c = handle->rx_buf[curr_tail];
 8005e2a:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
        handle->rx_tail = (uint16_t)(curr_tail + 1) % UART_MAX_RX_SIZE;
 8005e2e:	f8ab 304c 	strh.w	r3, [fp, #76]	; 0x4c
        int16_t c = uart_timed_read_byte(instance);
        if (c < 0) break;

        *bytes++ = (uint8_t)c;
 8005e32:	9b00      	ldr	r3, [sp, #0]
 8005e34:	f803 0b01 	strb.w	r0, [r3], #1
        count++;
 8005e38:	f109 0901 	add.w	r9, r9, #1
        *bytes++ = (uint8_t)c;
 8005e3c:	9300      	str	r3, [sp, #0]
    while (count < len) {
 8005e3e:	9b01      	ldr	r3, [sp, #4]
        count++;
 8005e40:	fa1f f989 	uxth.w	r9, r9
    while (count < len) {
 8005e44:	454b      	cmp	r3, r9
 8005e46:	d01c      	beq.n	8005e82 <uart_read+0x92>
    switch ((uint32_t)instance)
 8005e48:	45b2      	cmp	sl, r6
 8005e4a:	d029      	beq.n	8005ea0 <uart_read+0xb0>
 8005e4c:	45aa      	cmp	sl, r5
 8005e4e:	d025      	beq.n	8005e9c <uart_read+0xac>
        error_handler();
 8005e50:	f7fb ff62 	bl	8001d18 <error_handler>
        return 0;
 8005e54:	2700      	movs	r7, #0
    uint32_t _startMillis = HAL_GetTick();
 8005e56:	f7fc f92f 	bl	80020b8 <HAL_GetTick>
 8005e5a:	4604      	mov	r4, r0
    switch ((uint32_t)instance)
 8005e5c:	45b2      	cmp	sl, r6
 8005e5e:	d0d8      	beq.n	8005e12 <uart_read+0x22>
 8005e60:	45aa      	cmp	sl, r5
 8005e62:	d121      	bne.n	8005ea8 <uart_read+0xb8>
    uint16_t curr_head = handle->rx_head;
 8005e64:	f8b8 004a 	ldrh.w	r0, [r8, #74]	; 0x4a
    uint16_t curr_tail = handle->rx_tail;
 8005e68:	f8b8 304c 	ldrh.w	r3, [r8, #76]	; 0x4c
    uint16_t curr_head = handle->rx_head;
 8005e6c:	b280      	uxth	r0, r0
    uint16_t curr_tail = handle->rx_tail;
 8005e6e:	b29b      	uxth	r3, r3
    if (curr_head == curr_tail) {
 8005e70:	4298      	cmp	r0, r3
 8005e72:	d10a      	bne.n	8005e8a <uart_read+0x9a>
    while (HAL_GetTick() - _startMillis < handle->timeout);
 8005e74:	f7fc f920 	bl	80020b8 <HAL_GetTick>
 8005e78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e7c:	1b00      	subs	r0, r0, r4
 8005e7e:	4298      	cmp	r0, r3
 8005e80:	d3ec      	bcc.n	8005e5c <uart_read+0x6c>
    }

    return count;
}
 8005e82:	4648      	mov	r0, r9
 8005e84:	b003      	add	sp, #12
 8005e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t c = handle->rx_buf[curr_tail];
 8005e8a:	eb08 0003 	add.w	r0, r8, r3
        handle->rx_tail = (uint16_t)(curr_tail + 1) % UART_MAX_RX_SIZE;
 8005e8e:	3301      	adds	r3, #1
 8005e90:	b2db      	uxtb	r3, r3
        uint8_t c = handle->rx_buf[curr_tail];
 8005e92:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
        handle->rx_tail = (uint16_t)(curr_tail + 1) % UART_MAX_RX_SIZE;
 8005e96:	f8a8 304c 	strh.w	r3, [r8, #76]	; 0x4c
        if (c >= 0) return c;
 8005e9a:	e7ca      	b.n	8005e32 <uart_read+0x42>
    case (uint32_t)USART6: return &uart6_handle;
 8005e9c:	4647      	mov	r7, r8
 8005e9e:	e7da      	b.n	8005e56 <uart_read+0x66>
    switch ((uint32_t)instance)
 8005ea0:	465f      	mov	r7, fp
 8005ea2:	e7d8      	b.n	8005e56 <uart_read+0x66>
 8005ea4:	4691      	mov	r9, r2
    return count;
 8005ea6:	e7ec      	b.n	8005e82 <uart_read+0x92>
        error_handler();
 8005ea8:	f7fb ff36 	bl	8001d18 <error_handler>
    uint16_t curr_head = handle->rx_head;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005eb2:	deff      	udf	#255	; 0xff
 8005eb4:	40011000 	.word	0x40011000
 8005eb8:	40011400 	.word	0x40011400
 8005ebc:	200000a4 	.word	0x200000a4
 8005ec0:	200002f4 	.word	0x200002f4

08005ec4 <uart_avail>:

uint16_t uart_avail(USART_TypeDef * instance)
{
 8005ec4:	b508      	push	{r3, lr}
    switch ((uint32_t)instance)
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <uart_avail+0x30>)
 8005ec8:	4298      	cmp	r0, r3
 8005eca:	d107      	bne.n	8005edc <uart_avail+0x18>
    case (uint32_t)USART1: return &uart1_handle;
 8005ecc:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <uart_avail+0x34>)
    uart_t * handle = uart_get_handle(instance);
    return ((uint16_t)(UART_MAX_RX_SIZE + handle->rx_head - handle->rx_tail)) % UART_MAX_RX_SIZE;
 8005ece:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 8005ed2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8005ed6:	1ac0      	subs	r0, r0, r3
}
 8005ed8:	b2c0      	uxtb	r0, r0
 8005eda:	bd08      	pop	{r3, pc}
    switch ((uint32_t)instance)
 8005edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ee0:	4298      	cmp	r0, r3
 8005ee2:	d101      	bne.n	8005ee8 <uart_avail+0x24>
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <uart_avail+0x38>)
 8005ee6:	e7f2      	b.n	8005ece <uart_avail+0xa>
        error_handler();
 8005ee8:	f7fb ff16 	bl	8001d18 <error_handler>
    return ((uint16_t)(UART_MAX_RX_SIZE + handle->rx_head - handle->rx_tail)) % UART_MAX_RX_SIZE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8005ef2:	deff      	udf	#255	; 0xff
 8005ef4:	40011000 	.word	0x40011000
 8005ef8:	200000a4 	.word	0x200000a4
 8005efc:	200002f4 	.word	0x200002f4

08005f00 <USART1_IRQHandler>:
    handle->timeout = timeout;
}

static void generic_usart_handler(uart_t * handle)
{
    USART_TypeDef * instance = handle->huart.Instance;
 8005f00:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <USART1_IRQHandler+0xac>)
        }
    }
}

void USART1_IRQHandler(void)
{
 8005f02:	b410      	push	{r4}
    USART_TypeDef * instance = handle->huart.Instance;
 8005f04:	6813      	ldr	r3, [r2, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 8005f06:	68d9      	ldr	r1, [r3, #12]
 8005f08:	068c      	lsls	r4, r1, #26
{
 8005f0a:	b083      	sub	sp, #12
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 8005f0c:	d53a      	bpl.n	8005f84 <USART1_IRQHandler+0x84>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_RXNE))
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	0688      	lsls	r0, r1, #26
 8005f12:	d537      	bpl.n	8005f84 <USART1_IRQHandler+0x84>
        unsigned char c = instance->DR & 0xFF;
 8005f14:	685c      	ldr	r4, [r3, #4]
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 8005f16:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
        if (i != handle->rx_tail) {
 8005f1a:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 8005f1e:	3101      	adds	r1, #1
 8005f20:	b2c9      	uxtb	r1, r1
        if (i != handle->rx_tail) {
 8005f22:	b280      	uxth	r0, r0
 8005f24:	4281      	cmp	r1, r0
 8005f26:	d007      	beq.n	8005f38 <USART1_IRQHandler+0x38>
            handle->rx_buf[handle->rx_head] = c;
 8005f28:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
            handle->rx_head = i;
 8005f2c:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
            handle->rx_buf[handle->rx_head] = c;
 8005f30:	fa12 f180 	uxtah	r1, r2, r0
        unsigned char c = instance->DR & 0xFF;
 8005f34:	f881 414e 	strb.w	r4, [r1, #334]	; 0x14e
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 8005f38:	2100      	movs	r1, #0
 8005f3a:	9100      	str	r1, [sp, #0]
 8005f3c:	6819      	ldr	r1, [r3, #0]
 8005f3e:	9100      	str	r1, [sp, #0]
 8005f40:	6859      	ldr	r1, [r3, #4]
 8005f42:	9100      	str	r1, [sp, #0]
 8005f44:	9900      	ldr	r1, [sp, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_TXE)
 8005f46:	68d9      	ldr	r1, [r3, #12]
 8005f48:	0608      	lsls	r0, r1, #24
 8005f4a:	d517      	bpl.n	8005f7c <USART1_IRQHandler+0x7c>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE))
 8005f4c:	6819      	ldr	r1, [r3, #0]
 8005f4e:	0609      	lsls	r1, r1, #24
 8005f50:	d514      	bpl.n	8005f7c <USART1_IRQHandler+0x7c>
        unsigned char c = handle->tx_buf[handle->tx_tail];
 8005f52:	f8b2 0048 	ldrh.w	r0, [r2, #72]	; 0x48
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 8005f56:	f8b2 1048 	ldrh.w	r1, [r2, #72]	; 0x48
        unsigned char c = handle->tx_buf[handle->tx_tail];
 8005f5a:	fa12 f080 	uxtah	r0, r2, r0
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 8005f5e:	3101      	adds	r1, #1
 8005f60:	b2c9      	uxtb	r1, r1
        unsigned char c = handle->tx_buf[handle->tx_tail];
 8005f62:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 8005f66:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
        instance->DR = c;
 8005f6a:	6058      	str	r0, [r3, #4]
        if (handle->tx_head == handle->tx_tail) {
 8005f6c:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
 8005f70:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8005f74:	b289      	uxth	r1, r1
 8005f76:	b292      	uxth	r2, r2
 8005f78:	4291      	cmp	r1, r2
 8005f7a:	d011      	beq.n	8005fa0 <USART1_IRQHandler+0xa0>
    uart_t * handle = uart_get_handle(USART1);
    generic_usart_handler(handle);
}
 8005f7c:	b003      	add	sp, #12
 8005f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f82:	4770      	bx	lr
    else if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 8005f84:	68d9      	ldr	r1, [r3, #12]
 8005f86:	0689      	lsls	r1, r1, #26
 8005f88:	d5dd      	bpl.n	8005f46 <USART1_IRQHandler+0x46>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_ORE))
 8005f8a:	6819      	ldr	r1, [r3, #0]
 8005f8c:	070c      	lsls	r4, r1, #28
 8005f8e:	d5da      	bpl.n	8005f46 <USART1_IRQHandler+0x46>
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 8005f90:	2100      	movs	r1, #0
 8005f92:	9101      	str	r1, [sp, #4]
 8005f94:	6819      	ldr	r1, [r3, #0]
 8005f96:	9101      	str	r1, [sp, #4]
 8005f98:	6859      	ldr	r1, [r3, #4]
 8005f9a:	9101      	str	r1, [sp, #4]
 8005f9c:	9901      	ldr	r1, [sp, #4]
 8005f9e:	e7d2      	b.n	8005f46 <USART1_IRQHandler+0x46>
            __HAL_UART_DISABLE_IT(&handle->huart, UART_IT_TXE);
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fa6:	60da      	str	r2, [r3, #12]
}
 8005fa8:	e7e8      	b.n	8005f7c <USART1_IRQHandler+0x7c>
 8005faa:	bf00      	nop
 8005fac:	200000a4 	.word	0x200000a4

08005fb0 <USART6_IRQHandler>:
    USART_TypeDef * instance = handle->huart.Instance;
 8005fb0:	4a2a      	ldr	r2, [pc, #168]	; (800605c <USART6_IRQHandler+0xac>)

void USART6_IRQHandler(void)
{
 8005fb2:	b410      	push	{r4}
    USART_TypeDef * instance = handle->huart.Instance;
 8005fb4:	6813      	ldr	r3, [r2, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 8005fb6:	68d9      	ldr	r1, [r3, #12]
 8005fb8:	068c      	lsls	r4, r1, #26
{
 8005fba:	b083      	sub	sp, #12
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 8005fbc:	d53a      	bpl.n	8006034 <USART6_IRQHandler+0x84>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_RXNE))
 8005fbe:	6819      	ldr	r1, [r3, #0]
 8005fc0:	0688      	lsls	r0, r1, #26
 8005fc2:	d537      	bpl.n	8006034 <USART6_IRQHandler+0x84>
        unsigned char c = instance->DR & 0xFF;
 8005fc4:	685c      	ldr	r4, [r3, #4]
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 8005fc6:	f8b2 104a 	ldrh.w	r1, [r2, #74]	; 0x4a
        if (i != handle->rx_tail) {
 8005fca:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
        uint16_t i = (uint16_t)(handle->rx_head + 1) % UART_MAX_RX_SIZE;
 8005fce:	3101      	adds	r1, #1
 8005fd0:	b2c9      	uxtb	r1, r1
        if (i != handle->rx_tail) {
 8005fd2:	b280      	uxth	r0, r0
 8005fd4:	4281      	cmp	r1, r0
 8005fd6:	d007      	beq.n	8005fe8 <USART6_IRQHandler+0x38>
            handle->rx_buf[handle->rx_head] = c;
 8005fd8:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
            handle->rx_head = i;
 8005fdc:	f8a2 104a 	strh.w	r1, [r2, #74]	; 0x4a
            handle->rx_buf[handle->rx_head] = c;
 8005fe0:	fa12 f180 	uxtah	r1, r2, r0
        unsigned char c = instance->DR & 0xFF;
 8005fe4:	f881 414e 	strb.w	r4, [r1, #334]	; 0x14e
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 8005fe8:	2100      	movs	r1, #0
 8005fea:	9100      	str	r1, [sp, #0]
 8005fec:	6819      	ldr	r1, [r3, #0]
 8005fee:	9100      	str	r1, [sp, #0]
 8005ff0:	6859      	ldr	r1, [r3, #4]
 8005ff2:	9100      	str	r1, [sp, #0]
 8005ff4:	9900      	ldr	r1, [sp, #0]
    if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_TXE)
 8005ff6:	68d9      	ldr	r1, [r3, #12]
 8005ff8:	0608      	lsls	r0, r1, #24
 8005ffa:	d517      	bpl.n	800602c <USART6_IRQHandler+0x7c>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_TXE))
 8005ffc:	6819      	ldr	r1, [r3, #0]
 8005ffe:	0609      	lsls	r1, r1, #24
 8006000:	d514      	bpl.n	800602c <USART6_IRQHandler+0x7c>
        unsigned char c = handle->tx_buf[handle->tx_tail];
 8006002:	f8b2 0048 	ldrh.w	r0, [r2, #72]	; 0x48
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 8006006:	f8b2 1048 	ldrh.w	r1, [r2, #72]	; 0x48
        unsigned char c = handle->tx_buf[handle->tx_tail];
 800600a:	fa12 f080 	uxtah	r0, r2, r0
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 800600e:	3101      	adds	r1, #1
 8006010:	b2c9      	uxtb	r1, r1
        unsigned char c = handle->tx_buf[handle->tx_tail];
 8006012:	f890 004e 	ldrb.w	r0, [r0, #78]	; 0x4e
        handle->tx_tail = (handle->tx_tail + 1) % UART_MAX_TX_SIZE;
 8006016:	f8a2 1048 	strh.w	r1, [r2, #72]	; 0x48
        instance->DR = c;
 800601a:	6058      	str	r0, [r3, #4]
        if (handle->tx_head == handle->tx_tail) {
 800601c:	f8b2 1046 	ldrh.w	r1, [r2, #70]	; 0x46
 8006020:	f8b2 2048 	ldrh.w	r2, [r2, #72]	; 0x48
 8006024:	b289      	uxth	r1, r1
 8006026:	b292      	uxth	r2, r2
 8006028:	4291      	cmp	r1, r2
 800602a:	d011      	beq.n	8006050 <USART6_IRQHandler+0xa0>
    uart_t * handle = uart_get_handle(USART6);
    generic_usart_handler(handle);
}
 800602c:	b003      	add	sp, #12
 800602e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006032:	4770      	bx	lr
    else if (__HAL_UART_GET_IT_SOURCE(&handle->huart, UART_IT_RXNE)
 8006034:	68d9      	ldr	r1, [r3, #12]
 8006036:	0689      	lsls	r1, r1, #26
 8006038:	d5dd      	bpl.n	8005ff6 <USART6_IRQHandler+0x46>
            && __HAL_UART_GET_FLAG(&handle->huart, UART_FLAG_ORE))
 800603a:	6819      	ldr	r1, [r3, #0]
 800603c:	070c      	lsls	r4, r1, #28
 800603e:	d5da      	bpl.n	8005ff6 <USART6_IRQHandler+0x46>
        __HAL_UART_CLEAR_OREFLAG(&handle->huart);
 8006040:	2100      	movs	r1, #0
 8006042:	9101      	str	r1, [sp, #4]
 8006044:	6819      	ldr	r1, [r3, #0]
 8006046:	9101      	str	r1, [sp, #4]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	9101      	str	r1, [sp, #4]
 800604c:	9901      	ldr	r1, [sp, #4]
 800604e:	e7d2      	b.n	8005ff6 <USART6_IRQHandler+0x46>
            __HAL_UART_DISABLE_IT(&handle->huart, UART_IT_TXE);
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006056:	60da      	str	r2, [r3, #12]
}
 8006058:	e7e8      	b.n	800602c <USART6_IRQHandler+0x7c>
 800605a:	bf00      	nop
 800605c:	200002f4 	.word	0x200002f4

08006060 <Set_Font>:
		#include "stdbool.h"
		
		static sFONT *Current_Font;
		void Set_Font (sFONT *fonts)
		{
			Current_Font = fonts;
 8006060:	4b01      	ldr	r3, [pc, #4]	; (8006068 <Set_Font+0x8>)
 8006062:	6018      	str	r0, [r3, #0]
		}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000924 	.word	0x20000924

0800606c <set_window>:
			__asm("nop");
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
		}
		
		void set_window(u16 x1, u16 x2, u16 y1, u16 y2)
		{
 800606c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006070:	4f2e      	ldr	r7, [pc, #184]	; (800612c <set_window+0xc0>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006072:	4d2f      	ldr	r5, [pc, #188]	; (8006130 <set_window+0xc4>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006074:	4c2f      	ldr	r4, [pc, #188]	; (8006134 <set_window+0xc8>)
		{
 8006076:	469c      	mov	ip, r3
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006078:	f44f 7680 	mov.w	r6, #256	; 0x100
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800607c:	232a      	movs	r3, #42	; 0x2a
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800607e:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006082:	617b      	str	r3, [r7, #20]
		{
 8006084:	4688      	mov	r8, r1
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006086:	61ae      	str	r6, [r5, #24]
		{
 8006088:	4696      	mov	lr, r2
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800608a:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800608e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006090:	f44f 4960 	mov.w	r9, #57344	; 0xe000
			write_cmd(0x2a); 															//SET page address
			write_data((x1)>>8); 													//SET start page address=0
 8006094:	0a03      	lsrs	r3, r0, #8
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800609a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800609e:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060a2:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060a4:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060a6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060a8:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80060aa:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060ac:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80060b0:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060b2:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060b4:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060b6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060b8:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80060ba:	bf00      	nop
			write_data(x1);
			write_data((x2)>>8); 													//SET end page address=800
 80060bc:	ea4f 2018 	mov.w	r0, r8, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060c0:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060c2:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060c4:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060c6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060c8:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80060ca:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060cc:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060ce:	f8c7 8014 	str.w	r8, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060d2:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060d4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060d6:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80060d8:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80060da:	202b      	movs	r0, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060dc:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80060de:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060e0:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060e2:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80060e6:	bf00      	nop
			write_data(x2);

			write_cmd(0x2b); 															//SET column address
			write_data((y1)>>8); 													//SET start column address=0
 80060e8:	ea4f 201e 	mov.w	r0, lr, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060ec:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060f0:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80060f2:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80060f4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80060f6:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80060f8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80060fa:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80060fc:	f8c7 e014 	str.w	lr, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006100:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006102:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006104:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006106:	bf00      	nop
			write_data(y1);
			write_data((y2)>>8); 													//SET end column address=480
 8006108:	ea4f 201c 	mov.w	r0, ip, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800610c:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800610e:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006110:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006112:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006114:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006116:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006118:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800611a:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800611e:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006120:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006122:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006124:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006126:	61a3      	str	r3, [r4, #24]
			write_data(y2); 
		}
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	40020000 	.word	0x40020000
 8006130:	40020400 	.word	0x40020400
 8006134:	40020800 	.word	0x40020800

08006138 <fill_screen>:
		}
		
		void fill_screen(u32 color)
		{
			register u32 i;
			set_window(0,800,0,480);
 8006138:	2200      	movs	r2, #0
		{
 800613a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			set_window(0,800,0,480);
 800613e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006142:	4c1c      	ldr	r4, [pc, #112]	; (80061b4 <fill_screen+0x7c>)
		{
 8006144:	4680      	mov	r8, r0
			set_window(0,800,0,480);
 8006146:	f44f 7148 	mov.w	r1, #800	; 0x320
 800614a:	4610      	mov	r0, r2
 800614c:	f7ff ff8e 	bl	800606c <set_window>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006150:	4a19      	ldr	r2, [pc, #100]	; (80061b8 <fill_screen+0x80>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006152:	4b1a      	ldr	r3, [pc, #104]	; (80061bc <fill_screen+0x84>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006154:	212c      	movs	r1, #44	; 0x2c
 8006156:	6161      	str	r1, [r4, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006158:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800615c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006160:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006162:	6198      	str	r0, [r3, #24]
			__asm("nop");
 8006164:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006166:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 800616a:	6198      	str	r0, [r3, #24]
			write_data((color)>>8);
 800616c:	4814      	ldr	r0, [pc, #80]	; (80061c0 <fill_screen+0x88>)
			write_data((color)>>16);
 800616e:	ea4f 4e18 	mov.w	lr, r8, lsr #16
			write_data((color)>>8);
 8006172:	ea4f 2c18 	mov.w	ip, r8, lsr #8
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006176:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800617a:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800617e:	f44f 4520 	mov.w	r5, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006182:	f8c4 e014 	str.w	lr, [r4, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006186:	619f      	str	r7, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006188:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800618a:	619e      	str	r6, [r3, #24]
			__asm("nop");
 800618c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800618e:	619d      	str	r5, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006190:	f8c4 c014 	str.w	ip, [r4, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006194:	619f      	str	r7, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006196:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006198:	619e      	str	r6, [r3, #24]
			__asm("nop");
 800619a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800619c:	619d      	str	r5, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800619e:	f8c4 8014 	str.w	r8, [r4, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80061a2:	619f      	str	r7, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80061a4:	6191      	str	r1, [r2, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80061a6:	619e      	str	r6, [r3, #24]
			__asm("nop");
 80061a8:	bf00      	nop
			write_cmd(0x2c);
			for(i=0;i<801*481;i++)
 80061aa:	3801      	subs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80061ac:	619d      	str	r5, [r3, #24]
			for(i=0;i<801*481;i++)
 80061ae:	d1e8      	bne.n	8006182 <fill_screen+0x4a>
					add_color(color);
		}
 80061b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061b4:	40020000 	.word	0x40020000
 80061b8:	40020400 	.word	0x40020400
 80061bc:	40020800 	.word	0x40020800
 80061c0:	0005e101 	.word	0x0005e101

080061c4 <fill_area>:
		
		void fill_area(u32 sx, u32 ex, u32 sy,u32 ey,u32 color)
		{
 80061c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80061c8:	4d24      	ldr	r5, [pc, #144]	; (800625c <fill_area+0x98>)
		{
 80061ca:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80061ce:	4e24      	ldr	r6, [pc, #144]	; (8006260 <fill_area+0x9c>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80061d0:	4c24      	ldr	r4, [pc, #144]	; (8006264 <fill_area+0xa0>)
		{
 80061d2:	4683      	mov	fp, r0
 80061d4:	4689      	mov	r9, r1
 80061d6:	4692      	mov	sl, r2
 80061d8:	461f      	mov	r7, r3
			register int i;
			set_window(sx, ex, sy, ey);
 80061da:	b292      	uxth	r2, r2
 80061dc:	b29b      	uxth	r3, r3
 80061de:	b289      	uxth	r1, r1
 80061e0:	b280      	uxth	r0, r0
 80061e2:	f7ff ff43 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80061e6:	232c      	movs	r3, #44	; 0x2c
 80061e8:	616b      	str	r3, [r5, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80061ea:	f44f 7080 	mov.w	r0, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80061ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80061f2:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80061f4:	61a3      	str	r3, [r4, #24]
			__asm("nop");
 80061f6:	bf00      	nop
			write_cmd(0x2c);
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 80061f8:	3701      	adds	r7, #1
 80061fa:	eba9 090b 	sub.w	r9, r9, fp
 80061fe:	eba7 070a 	sub.w	r7, r7, sl
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006202:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 8006206:	fb09 7707 	mla	r7, r9, r7, r7
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800620a:	61a3      	str	r3, [r4, #24]
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 800620c:	b327      	cbz	r7, 8006258 <fill_area+0x94>
			write_data((color)>>16);
 800620e:	ea4f 4918 	mov.w	r9, r8, lsr #16
			write_data((color)>>8);
 8006212:	ea4f 2e18 	mov.w	lr, r8, lsr #8
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 8006216:	f04f 0c00 	mov.w	ip, #0
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800621a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800621e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006222:	f44f 4320 	mov.w	r3, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006226:	f8c5 9014 	str.w	r9, [r5, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800622a:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800622c:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800622e:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 8006230:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006232:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006234:	f8c5 e014 	str.w	lr, [r5, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006238:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800623a:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800623c:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 800623e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006240:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006242:	f8c5 8014 	str.w	r8, [r5, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006246:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006248:	61b0      	str	r0, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800624a:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 800624c:	bf00      	nop
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 800624e:	f10c 0c01 	add.w	ip, ip, #1
 8006252:	45bc      	cmp	ip, r7
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006254:	61a3      	str	r3, [r4, #24]
			for(i = 0; i < ((ex-sx+1)*(ey-sy+1)); i++)
 8006256:	d1e6      	bne.n	8006226 <fill_area+0x62>
				add_color(color);
		}
 8006258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625c:	40020000 	.word	0x40020000
 8006260:	40020400 	.word	0x40020400
 8006264:	40020800 	.word	0x40020800

08006268 <set_pixel>:
		{
				fill_screen(WHITE);
		}
		
		void set_pixel(u16 x, u16 y, u32 color)
		{
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800626c:	4e3f      	ldr	r6, [pc, #252]	; (800636c <set_pixel+0x104>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800626e:	4c40      	ldr	r4, [pc, #256]	; (8006370 <set_pixel+0x108>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006270:	232a      	movs	r3, #42	; 0x2a
 8006272:	6173      	str	r3, [r6, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006274:	4b3f      	ldr	r3, [pc, #252]	; (8006374 <set_pixel+0x10c>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006276:	f44f 7580 	mov.w	r5, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800627a:	f04f 4960 	mov.w	r9, #3758096384	; 0xe0000000
		{
 800627e:	4686      	mov	lr, r0
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006280:	61a5      	str	r5, [r4, #24]
		{
 8006282:	4608      	mov	r0, r1
 8006284:	4694      	mov	ip, r2
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006286:	f8c3 9018 	str.w	r9, [r3, #24]
			__asm("nop");
 800628a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800628c:	f44f 4860 	mov.w	r8, #57344	; 0xe000
			write_data((x1)>>8); 													//SET start page address=0
 8006290:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006298:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800629c:	f8c3 8018 	str.w	r8, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80062a0:	f8c6 a014 	str.w	sl, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80062a4:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80062a6:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80062a8:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80062aa:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80062ac:	f44f 4720 	mov.w	r7, #40960	; 0xa000
 80062b0:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80062b2:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80062b6:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80062b8:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80062ba:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80062bc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80062be:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80062c0:	f8c6 a014 	str.w	sl, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80062c4:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80062c6:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80062c8:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80062ca:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80062cc:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80062ce:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80062d2:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80062d4:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80062d6:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80062d8:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80062da:	f04f 0e2b 	mov.w	lr, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80062de:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80062e0:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80062e4:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80062e6:	f8c3 9018 	str.w	r9, [r3, #24]
			__asm("nop");
 80062ea:	bf00      	nop
			write_data((y1)>>8); 													//SET start column address=0
 80062ec:	ea4f 2e10 	mov.w	lr, r0, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80062f0:	f8c3 8018 	str.w	r8, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80062f4:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80062f8:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80062fa:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80062fc:	619a      	str	r2, [r3, #24]
			__asm("nop");
 80062fe:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006300:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006302:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006304:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006306:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006308:	619a      	str	r2, [r3, #24]
			__asm("nop");
 800630a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800630c:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800630e:	f8c6 e014 	str.w	lr, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006312:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006314:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006316:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8006318:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800631a:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800631c:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800631e:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006320:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006322:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8006324:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006326:	202c      	movs	r0, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006328:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800632a:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800632c:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800632e:	f8c3 9018 	str.w	r9, [r3, #24]
			__asm("nop");
 8006332:	bf00      	nop
			write_data((color)>>16);
 8006334:	ea4f 401c 	mov.w	r0, ip, lsr #16
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006338:	f8c3 8018 	str.w	r8, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800633c:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800633e:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006340:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006342:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8006344:	bf00      	nop
			write_data((color)>>8);
 8006346:	ea4f 201c 	mov.w	r0, ip, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800634a:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800634c:	6170      	str	r0, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800634e:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006350:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006352:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8006354:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006356:	619f      	str	r7, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006358:	f8c6 c014 	str.w	ip, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800635c:	6199      	str	r1, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800635e:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006360:	619a      	str	r2, [r3, #24]
			__asm("nop");
 8006362:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006364:	619f      	str	r7, [r3, #24]
			set_window(x, x, y, y);
			write_cmd(0x2c);														// memory write start 
			add_color(color);
		}
 8006366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636a:	bf00      	nop
 800636c:	40020000 	.word	0x40020000
 8006370:	40020400 	.word	0x40020400
 8006374:	40020800 	.word	0x40020800

08006378 <draw_hl>:
		
		
		void draw_hl(s16 x, s16 y, s16 l, u32 color)
		{
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	b087      	sub	sp, #28
			register int i;
			for (i=0; i<= l; i++)
 800637e:	2a00      	cmp	r2, #0
		{
 8006380:	9301      	str	r3, [sp, #4]
			for (i=0; i<= l; i++)
 8006382:	f2c0 808d 	blt.w	80064a0 <draw_hl+0x128>
 8006386:	461c      	mov	r4, r3
				set_pixel(x+i, y, color);
 8006388:	fa1f fb81 	uxth.w	fp, r1
			write_data((y1)>>8); 													//SET start column address=0
 800638c:	f3c1 2a07 	ubfx	sl, r1, #8, #8
				set_pixel(x+i, y, color);
 8006390:	b281      	uxth	r1, r0
 8006392:	9105      	str	r1, [sp, #20]
 8006394:	1c51      	adds	r1, r2, #1
			write_data((color)>>16);
 8006396:	4622      	mov	r2, r4
			write_data((color)>>8);
 8006398:	0a12      	lsrs	r2, r2, #8
 800639a:	9104      	str	r1, [sp, #16]
			write_data((color)>>16);
 800639c:	0c24      	lsrs	r4, r4, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800639e:	4842      	ldr	r0, [pc, #264]	; (80064a8 <draw_hl+0x130>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80063a0:	4942      	ldr	r1, [pc, #264]	; (80064ac <draw_hl+0x134>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80063a2:	4b43      	ldr	r3, [pc, #268]	; (80064b0 <draw_hl+0x138>)
			write_data((color)>>8);
 80063a4:	9203      	str	r2, [sp, #12]
			write_data((color)>>16);
 80063a6:	9402      	str	r4, [sp, #8]
			for (i=0; i<= l; i++)
 80063a8:	f04f 0c00 	mov.w	ip, #0
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80063ac:	f44f 7280 	mov.w	r2, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80063b0:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80063b4:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80063b8:	242a      	movs	r4, #42	; 0x2a
 80063ba:	6144      	str	r4, [r0, #20]
				set_pixel(x+i, y, color);
 80063bc:	9c05      	ldr	r4, [sp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80063be:	618a      	str	r2, [r1, #24]
				set_pixel(x+i, y, color);
 80063c0:	eb04 070c 	add.w	r7, r4, ip
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80063c4:	f8c3 8018 	str.w	r8, [r3, #24]
				set_pixel(x+i, y, color);
 80063c8:	b2bf      	uxth	r7, r7
			__asm("nop");
 80063ca:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80063cc:	f44f 4680 	mov.w	r6, #16384	; 0x4000
			write_data((x1)>>8); 													//SET start page address=0
 80063d0:	ea4f 2917 	mov.w	r9, r7, lsr #8
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80063d4:	f04f 4520 	mov.w	r5, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80063d8:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80063dc:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80063e0:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80063e2:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80063e4:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80063e6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80063e8:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 80063ec:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80063ee:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80063f0:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80063f2:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80063f4:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80063f6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80063f8:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80063fa:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80063fe:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006400:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006402:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006404:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006406:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006408:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800640a:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800640c:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800640e:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006410:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006412:	272b      	movs	r7, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006414:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006416:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006418:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800641a:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 800641e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006420:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006424:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006428:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800642a:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800642c:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800642e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006430:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006432:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006436:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006438:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800643a:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800643c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800643e:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006440:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006444:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006446:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006448:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800644a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800644c:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800644e:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006452:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006454:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006456:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006458:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800645a:	272c      	movs	r7, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800645c:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800645e:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006460:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006462:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 8006466:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006468:	9f02      	ldr	r7, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800646a:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800646e:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006470:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006472:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006474:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006476:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006478:	9f03      	ldr	r7, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800647a:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800647c:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800647e:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006480:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006482:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006484:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006486:	9f01      	ldr	r7, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006488:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800648a:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800648c:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800648e:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006490:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006492:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006494:	619c      	str	r4, [r3, #24]
			for (i=0; i<= l; i++)
 8006496:	9c04      	ldr	r4, [sp, #16]
 8006498:	f10c 0c01 	add.w	ip, ip, #1
 800649c:	45a4      	cmp	ip, r4
 800649e:	d18b      	bne.n	80063b8 <draw_hl+0x40>

		}
 80064a0:	b007      	add	sp, #28
 80064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a6:	bf00      	nop
 80064a8:	40020000 	.word	0x40020000
 80064ac:	40020400 	.word	0x40020400
 80064b0:	40020800 	.word	0x40020800

080064b4 <draw_vl>:
		
		void draw_vl(s16 x, s16 y, s16 l,u32 color)
		{
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	b087      	sub	sp, #28
			register int i;
			for (i=0; i<= l; i++)
 80064ba:	2a00      	cmp	r2, #0
		{
 80064bc:	9301      	str	r3, [sp, #4]
			for (i=0; i<= l; i++)
 80064be:	f2c0 808f 	blt.w	80065e0 <draw_vl+0x12c>
 80064c2:	461c      	mov	r4, r3
				set_pixel(x, y+i, color);
 80064c4:	b289      	uxth	r1, r1
 80064c6:	9105      	str	r1, [sp, #20]
 80064c8:	1c51      	adds	r1, r2, #1
			write_data((color)>>16);
 80064ca:	4622      	mov	r2, r4
			write_data((color)>>8);
 80064cc:	0a12      	lsrs	r2, r2, #8
				set_pixel(x, y+i, color);
 80064ce:	fa1f fb80 	uxth.w	fp, r0
			write_data((x1)>>8); 													//SET start page address=0
 80064d2:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80064d6:	9104      	str	r1, [sp, #16]
			write_data((color)>>16);
 80064d8:	0c24      	lsrs	r4, r4, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80064da:	4843      	ldr	r0, [pc, #268]	; (80065e8 <draw_vl+0x134>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80064dc:	4943      	ldr	r1, [pc, #268]	; (80065ec <draw_vl+0x138>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80064de:	4b44      	ldr	r3, [pc, #272]	; (80065f0 <draw_vl+0x13c>)
			write_data((color)>>8);
 80064e0:	9203      	str	r2, [sp, #12]
			write_data((color)>>16);
 80064e2:	9402      	str	r4, [sp, #8]
			for (i=0; i<= l; i++)
 80064e4:	f04f 0c00 	mov.w	ip, #0
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80064e8:	f44f 7280 	mov.w	r2, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80064ec:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80064f0:	f44f 4e60 	mov.w	lr, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80064f4:	242a      	movs	r4, #42	; 0x2a
 80064f6:	6144      	str	r4, [r0, #20]
				set_pixel(x, y+i, color);
 80064f8:	9c05      	ldr	r4, [sp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80064fa:	618a      	str	r2, [r1, #24]
				set_pixel(x, y+i, color);
 80064fc:	eb04 070c 	add.w	r7, r4, ip
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006500:	f8c3 8018 	str.w	r8, [r3, #24]
				set_pixel(x, y+i, color);
 8006504:	b2bf      	uxth	r7, r7
			__asm("nop");
 8006506:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006508:	f44f 4680 	mov.w	r6, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800650c:	f04f 4520 	mov.w	r5, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006510:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006514:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006518:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800651a:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800651c:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800651e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006520:	f44f 4420 	mov.w	r4, #40960	; 0xa000
 8006524:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006526:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800652a:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800652c:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800652e:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006530:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006532:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006534:	f8c0 a014 	str.w	sl, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006538:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800653a:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800653c:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800653e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006540:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006542:	f8c0 b014 	str.w	fp, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006546:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006548:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800654a:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800654c:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800654e:	f04f 092b 	mov.w	r9, #43	; 0x2b
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006552:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006554:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006558:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800655a:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 800655e:	bf00      	nop
			write_data((y1)>>8); 													//SET start column address=0
 8006560:	ea4f 2917 	mov.w	r9, r7, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006564:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006568:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800656c:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800656e:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006570:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006572:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006574:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006576:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006578:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800657a:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800657c:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800657e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006580:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006582:	f8c0 9014 	str.w	r9, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006586:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006588:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800658a:	619d      	str	r5, [r3, #24]
			__asm("nop");
 800658c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800658e:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006590:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006592:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006594:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006596:	619d      	str	r5, [r3, #24]
			__asm("nop");
 8006598:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800659a:	272c      	movs	r7, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800659c:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800659e:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065a0:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065a2:	f8c3 8018 	str.w	r8, [r3, #24]
			__asm("nop");
 80065a6:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065a8:	9f02      	ldr	r7, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065aa:	f8c3 e018 	str.w	lr, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065ae:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80065b0:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065b2:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065b4:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80065b6:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065b8:	9f03      	ldr	r7, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065ba:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065bc:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80065be:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065c0:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065c2:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80065c4:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065c6:	9f01      	ldr	r7, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065c8:	619c      	str	r4, [r3, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80065ca:	6147      	str	r7, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80065cc:	619e      	str	r6, [r3, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80065ce:	618a      	str	r2, [r1, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80065d0:	619d      	str	r5, [r3, #24]
			__asm("nop");
 80065d2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80065d4:	619c      	str	r4, [r3, #24]
			for (i=0; i<= l; i++)
 80065d6:	9c04      	ldr	r4, [sp, #16]
 80065d8:	f10c 0c01 	add.w	ip, ip, #1
 80065dc:	45a4      	cmp	ip, r4
 80065de:	d189      	bne.n	80064f4 <draw_vl+0x40>
		}
 80065e0:	b007      	add	sp, #28
 80065e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e6:	bf00      	nop
 80065e8:	40020000 	.word	0x40020000
 80065ec:	40020400 	.word	0x40020400
 80065f0:	40020800 	.word	0x40020800

080065f4 <draw_rect>:
		
		void draw_rect(u32 x1, u32 x2,u32 y1, u32 y2,u32 color)
		{
 80065f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	b085      	sub	sp, #20
			if (x1>x2)
 80065fa:	4288      	cmp	r0, r1
		{
 80065fc:	9303      	str	r3, [sp, #12]
			if (x1>x2)
 80065fe:	d902      	bls.n	8006606 <draw_rect+0x12>
 8006600:	4603      	mov	r3, r0
 8006602:	4608      	mov	r0, r1
 8006604:	4619      	mov	r1, r3
				swap(int, x1, x2);
			if (y1>y2)
 8006606:	9c03      	ldr	r4, [sp, #12]
 8006608:	42a2      	cmp	r2, r4
 800660a:	d902      	bls.n	8006612 <draw_rect+0x1e>
 800660c:	4613      	mov	r3, r2
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	4622      	mov	r2, r4
				swap(int, y1, y2);
			

			draw_hl(x1, y1, x2-x1,color);
 8006612:	fa1f fa81 	uxth.w	sl, r1
 8006616:	b285      	uxth	r5, r0
 8006618:	ebaa 0905 	sub.w	r9, sl, r5
 800661c:	fa0f f989 	sxth.w	r9, r9
			for (i=0; i<= l; i++)
 8006620:	f1b9 0f00 	cmp.w	r9, #0
 8006624:	f2c0 8130 	blt.w	8006888 <draw_rect+0x294>
			write_data((color)>>16);
 8006628:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800662a:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800689c <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800662e:	4f99      	ldr	r7, [pc, #612]	; (8006894 <draw_rect+0x2a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006630:	4c99      	ldr	r4, [pc, #612]	; (8006898 <draw_rect+0x2a4>)
			for (i=0; i<= l; i++)
 8006632:	9502      	str	r5, [sp, #8]
			write_data((color)>>16);
 8006634:	0c1b      	lsrs	r3, r3, #16
 8006636:	9300      	str	r3, [sp, #0]
			write_data((color)>>8);
 8006638:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800663a:	f109 0901 	add.w	r9, r9, #1
 800663e:	0a1b      	lsrs	r3, r3, #8
			draw_hl(x1, y2, x2-x1,color);
			draw_vl(x1, y1, y2-y1,color);
 8006640:	fa1f fb82 	uxth.w	fp, r2
			for (i=0; i<= l; i++)
 8006644:	ee07 aa90 	vmov	s15, sl
			write_data((color)>>8);
 8006648:	9301      	str	r3, [sp, #4]
			for (i=0; i<= l; i++)
 800664a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800664e:	464b      	mov	r3, r9
 8006650:	2600      	movs	r6, #0
 8006652:	46d9      	mov	r9, fp
 8006654:	469b      	mov	fp, r3
				set_pixel(x+i, y, color);
 8006656:	9b02      	ldr	r3, [sp, #8]
 8006658:	1999      	adds	r1, r3, r6
 800665a:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 800665c:	464a      	mov	r2, r9
 800665e:	4608      	mov	r0, r1
 8006660:	464b      	mov	r3, r9
 8006662:	f7ff fd03 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006666:	222c      	movs	r2, #44	; 0x2c
 8006668:	f8c8 2014 	str.w	r2, [r8, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800666c:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006670:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006674:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006676:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006678:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800667a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800667e:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006680:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006682:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006686:	f8c8 3014 	str.w	r3, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800668a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800668e:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006690:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006692:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006694:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006696:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800669a:	9d01      	ldr	r5, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800669c:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800669e:	f8c8 5014 	str.w	r5, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80066a2:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066a4:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066a6:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80066a8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80066aa:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80066ac:	f8c8 a014 	str.w	sl, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80066b0:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066b2:	61b9      	str	r1, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066b4:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80066b6:	bf00      	nop
			for (i=0; i<= l; i++)
 80066b8:	3601      	adds	r6, #1
 80066ba:	455e      	cmp	r6, fp
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80066bc:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 80066be:	d1ca      	bne.n	8006656 <draw_rect+0x62>
			draw_vl(x1, y1, y2-y1,color);
 80066c0:	465b      	mov	r3, fp
 80066c2:	46cb      	mov	fp, r9
 80066c4:	4699      	mov	r9, r3
 80066c6:	9d02      	ldr	r5, [sp, #8]
 80066c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80066cc:	f8cd b008 	str.w	fp, [sp, #8]
 80066d0:	46ca      	mov	sl, r9
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80066d2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800689c <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066d6:	4e6f      	ldr	r6, [pc, #444]	; (8006894 <draw_rect+0x2a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066d8:	4c6f      	ldr	r4, [pc, #444]	; (8006898 <draw_rect+0x2a4>)
			draw_vl(x1, y1, y2-y1,color);
 80066da:	f8dd b000 	ldr.w	fp, [sp]
 80066de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80066e2:	2700      	movs	r7, #0
				set_pixel(x+i, y, color);
 80066e4:	19e9      	adds	r1, r5, r7
 80066e6:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 80066e8:	461a      	mov	r2, r3
 80066ea:	4608      	mov	r0, r1
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	f7ff fcbd 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80066f2:	222c      	movs	r2, #44	; 0x2c
 80066f4:	f8c8 2014 	str.w	r2, [r8, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80066f8:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80066fc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006700:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006702:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006704:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006706:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800670a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800670e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006712:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006714:	f8c8 b014 	str.w	fp, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006718:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800671c:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800671e:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006720:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006722:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006726:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006728:	f8c8 9014 	str.w	r9, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800672c:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006730:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006732:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006734:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006738:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800673a:	f8c8 3014 	str.w	r3, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800673e:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006742:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006744:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006746:	bf00      	nop
			for (i=0; i<= l; i++)
 8006748:	3701      	adds	r7, #1
 800674a:	4557      	cmp	r7, sl
 800674c:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800674e:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8006750:	d1c8      	bne.n	80066e4 <draw_rect+0xf0>
 8006752:	ee17 aa90 	vmov	sl, s15
 8006756:	f8dd b008 	ldr.w	fp, [sp, #8]
			draw_vl(x1, y1, y2-y1,color);
 800675a:	eba3 060b 	sub.w	r6, r3, fp
 800675e:	b236      	sxth	r6, r6
			for (i=0; i<= l; i++)
 8006760:	2e00      	cmp	r6, #0
 8006762:	f2c0 808e 	blt.w	8006882 <draw_rect+0x28e>
			write_data((color)>>16);
 8006766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006768:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800689c <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800676c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8006894 <draw_rect+0x2a0>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006770:	4c49      	ldr	r4, [pc, #292]	; (8006898 <draw_rect+0x2a4>)
			write_data((color)>>16);
 8006772:	0c1b      	lsrs	r3, r3, #16
 8006774:	9300      	str	r3, [sp, #0]
			write_data((color)>>8);
 8006776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006778:	0a1b      	lsrs	r3, r3, #8
			for (i=0; i<= l; i++)
 800677a:	ee07 aa90 	vmov	s15, sl
 800677e:	3601      	adds	r6, #1
			write_data((color)>>8);
 8006780:	9302      	str	r3, [sp, #8]
			for (i=0; i<= l; i++)
 8006782:	2700      	movs	r7, #0
 8006784:	46aa      	mov	sl, r5
 8006786:	9301      	str	r3, [sp, #4]
				set_pixel(x, y+i, color);
 8006788:	eb0b 0307 	add.w	r3, fp, r7
 800678c:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 800678e:	461a      	mov	r2, r3
 8006790:	4651      	mov	r1, sl
 8006792:	4650      	mov	r0, sl
 8006794:	f7ff fc6a 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006798:	222c      	movs	r2, #44	; 0x2c
 800679a:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800679e:	f44f 7380 	mov.w	r3, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067a6:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067aa:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80067ac:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067ae:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80067b2:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067b8:	9a00      	ldr	r2, [sp, #0]
 80067ba:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067be:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067c2:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067c4:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067c8:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80067ca:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067cc:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067d0:	9d01      	ldr	r5, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067d2:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067d4:	f8c9 5014 	str.w	r5, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067d8:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067da:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067de:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80067e0:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067e4:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80067e6:	f8c9 5014 	str.w	r5, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80067ea:	61a1      	str	r1, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80067ec:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80067f0:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80067f2:	bf00      	nop
			for (i=0; i<= l; i++)
 80067f4:	3701      	adds	r7, #1
 80067f6:	42b7      	cmp	r7, r6
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80067f8:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 80067fa:	d1c5      	bne.n	8006788 <draw_rect+0x194>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80067fc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800689c <draw_rect+0x2a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006800:	4f24      	ldr	r7, [pc, #144]	; (8006894 <draw_rect+0x2a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006802:	4c25      	ldr	r4, [pc, #148]	; (8006898 <draw_rect+0x2a4>)
 8006804:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006808:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800680c:	ee17 1a90 	vmov	r1, s15
 8006810:	2500      	movs	r5, #0
				set_pixel(x, y+i, color);
 8006812:	eb0b 0305 	add.w	r3, fp, r5
 8006816:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 8006818:	461a      	mov	r2, r3
 800681a:	4608      	mov	r0, r1
 800681c:	9101      	str	r1, [sp, #4]
 800681e:	f7ff fc25 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006822:	202c      	movs	r0, #44	; 0x2c
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006824:	f44f 7380 	mov.w	r3, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006828:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800682c:	f8c8 0014 	str.w	r0, [r8, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006830:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006832:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006834:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006836:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800683a:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800683c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006840:	9a00      	ldr	r2, [sp, #0]
 8006842:	f8c8 2014 	str.w	r2, [r8, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006846:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800684a:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800684e:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006850:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006852:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006854:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006858:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800685a:	f8c8 9014 	str.w	r9, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800685e:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006862:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006864:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006866:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006868:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800686a:	f8c8 a014 	str.w	sl, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800686e:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006872:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006874:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006876:	bf00      	nop
			for (i=0; i<= l; i++)
 8006878:	3501      	adds	r5, #1
 800687a:	42b5      	cmp	r5, r6
 800687c:	9901      	ldr	r1, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800687e:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8006880:	d1c7      	bne.n	8006812 <draw_rect+0x21e>
			draw_vl(x2, y1, y2-y1,color);	
		}		
 8006882:	b005      	add	sp, #20
 8006884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			draw_vl(x1, y1, y2-y1,color);
 8006888:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800688c:	fa1f fb82 	uxth.w	fp, r2
 8006890:	e763      	b.n	800675a <draw_rect+0x166>
 8006892:	bf00      	nop
 8006894:	40020400 	.word	0x40020400
 8006898:	40020800 	.word	0x40020800
 800689c:	40020000 	.word	0x40020000

080068a0 <draw_roundrect>:

		void draw_roundrect(u32 x1, u32 x2,u32 y1, u32 y2, u32 color)
		{
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	b087      	sub	sp, #28
			if (x1>x2)
 80068a6:	4288      	cmp	r0, r1
		{
 80068a8:	9d10      	ldr	r5, [sp, #64]	; 0x40
			if (x1>x2)
 80068aa:	d902      	bls.n	80068b2 <draw_roundrect+0x12>
 80068ac:	4604      	mov	r4, r0
 80068ae:	4608      	mov	r0, r1
 80068b0:	4621      	mov	r1, r4
			{
				swap(int, x1, x2);
			}
			if (y1>y2)
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d902      	bls.n	80068bc <draw_roundrect+0x1c>
 80068b6:	4614      	mov	r4, r2
 80068b8:	461a      	mov	r2, r3
 80068ba:	4623      	mov	r3, r4
			{
				swap(int, y1, y2);
			}
			if ((x2-x1)>4 && (y2-y1)>4)
 80068bc:	1a0c      	subs	r4, r1, r0
 80068be:	2c04      	cmp	r4, #4
 80068c0:	d902      	bls.n	80068c8 <draw_roundrect+0x28>
 80068c2:	1a9c      	subs	r4, r3, r2
 80068c4:	2c04      	cmp	r4, #4
 80068c6:	d802      	bhi.n	80068ce <draw_roundrect+0x2e>
				draw_hl(x1+5, y1, x2-x1-10,color);
				draw_hl(x1+5, y2, x2-x1-10,color);
				draw_vl(x1, y1+5, y2-y1-10,color);
				draw_vl(x2, y1+5, y2-y1-10,color);
			}
		}
 80068c8:	b007      	add	sp, #28
 80068ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				set_pixel(x1+1,y1+4, color);
 80068ce:	fa1f fa82 	uxth.w	sl, r2
 80068d2:	b280      	uxth	r0, r0
 80068d4:	1c47      	adds	r7, r0, #1
 80068d6:	f10a 0604 	add.w	r6, sl, #4
				set_pixel(x2-4,y1+1, color);
 80068da:	b28a      	uxth	r2, r1
				set_pixel(x1+1,y1+4, color);
 80068dc:	b2bf      	uxth	r7, r7
 80068de:	b2b6      	uxth	r6, r6
 80068e0:	4631      	mov	r1, r6
				set_pixel(x2-4,y1+1, color);
 80068e2:	9202      	str	r2, [sp, #8]
				set_pixel(x1+1,y1+4, color);
 80068e4:	9003      	str	r0, [sp, #12]
 80068e6:	462a      	mov	r2, r5
 80068e8:	4638      	mov	r0, r7
				set_pixel(x1+1,y2-4, color);
 80068ea:	b29c      	uxth	r4, r3
				set_pixel(x1+1,y1+4, color);
 80068ec:	f7ff fcbc 	bl	8006268 <set_pixel>
				set_pixel(x1+2,y1+3, color);
 80068f0:	9803      	ldr	r0, [sp, #12]
 80068f2:	f10a 0803 	add.w	r8, sl, #3
 80068f6:	f100 0902 	add.w	r9, r0, #2
 80068fa:	fa1f f989 	uxth.w	r9, r9
 80068fe:	fa1f f888 	uxth.w	r8, r8
 8006902:	4641      	mov	r1, r8
 8006904:	4648      	mov	r0, r9
 8006906:	462a      	mov	r2, r5
 8006908:	f7ff fcae 	bl	8006268 <set_pixel>
				set_pixel(x1+3,y1+2, color);
 800690c:	9803      	ldr	r0, [sp, #12]
 800690e:	f10a 0302 	add.w	r3, sl, #2
 8006912:	f100 0b03 	add.w	fp, r0, #3
 8006916:	b29b      	uxth	r3, r3
 8006918:	fa1f fb8b 	uxth.w	fp, fp
 800691c:	4619      	mov	r1, r3
 800691e:	4658      	mov	r0, fp
 8006920:	462a      	mov	r2, r5
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	f7ff fc9f 	bl	8006268 <set_pixel>
				set_pixel(x1+4,y1+1, color);
 800692a:	9803      	ldr	r0, [sp, #12]
 800692c:	1d03      	adds	r3, r0, #4
 800692e:	b29b      	uxth	r3, r3
 8006930:	f10a 0101 	add.w	r1, sl, #1
 8006934:	4618      	mov	r0, r3
 8006936:	b289      	uxth	r1, r1
 8006938:	462a      	mov	r2, r5
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	9101      	str	r1, [sp, #4]
 800693e:	f7ff fc93 	bl	8006268 <set_pixel>
				set_pixel(x2-4,y1+1, color);
 8006942:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
 8006946:	3a04      	subs	r2, #4
 8006948:	fa1f fc82 	uxth.w	ip, r2
 800694c:	4660      	mov	r0, ip
 800694e:	462a      	mov	r2, r5
 8006950:	ee07 ca10 	vmov	s14, ip
 8006954:	f7ff fc88 	bl	8006268 <set_pixel>
				set_pixel(x2-3,y1+2, color);
 8006958:	9a02      	ldr	r2, [sp, #8]
 800695a:	3a03      	subs	r2, #3
 800695c:	fa1f fc82 	uxth.w	ip, r2
 8006960:	4660      	mov	r0, ip
 8006962:	ee17 1a90 	vmov	r1, s15
 8006966:	462a      	mov	r2, r5
 8006968:	ee07 ca90 	vmov	s15, ip
 800696c:	f7ff fc7c 	bl	8006268 <set_pixel>
				set_pixel(x2-2,y1+3, color);
 8006970:	9a02      	ldr	r2, [sp, #8]
 8006972:	4641      	mov	r1, r8
 8006974:	f1a2 0802 	sub.w	r8, r2, #2
 8006978:	fa1f f888 	uxth.w	r8, r8
 800697c:	462a      	mov	r2, r5
 800697e:	4640      	mov	r0, r8
 8006980:	f7ff fc72 	bl	8006268 <set_pixel>
				set_pixel(x2-1,y1+4, color);
 8006984:	9a02      	ldr	r2, [sp, #8]
 8006986:	4631      	mov	r1, r6
 8006988:	1e56      	subs	r6, r2, #1
 800698a:	b2b6      	uxth	r6, r6
 800698c:	462a      	mov	r2, r5
 800698e:	4630      	mov	r0, r6
 8006990:	f7ff fc6a 	bl	8006268 <set_pixel>
				set_pixel(x1+1,y2-4, color);
 8006994:	4638      	mov	r0, r7
 8006996:	1f27      	subs	r7, r4, #4
 8006998:	b2bf      	uxth	r7, r7
 800699a:	462a      	mov	r2, r5
 800699c:	4639      	mov	r1, r7
 800699e:	f7ff fc63 	bl	8006268 <set_pixel>
				set_pixel(x1+2,y2-3, color);
 80069a2:	4648      	mov	r0, r9
 80069a4:	f1a4 0903 	sub.w	r9, r4, #3
 80069a8:	fa1f f989 	uxth.w	r9, r9
 80069ac:	462a      	mov	r2, r5
 80069ae:	4649      	mov	r1, r9
 80069b0:	f7ff fc5a 	bl	8006268 <set_pixel>
				set_pixel(x1+3,y2-2, color);
 80069b4:	4658      	mov	r0, fp
 80069b6:	f1a4 0b02 	sub.w	fp, r4, #2
 80069ba:	fa1f fb8b 	uxth.w	fp, fp
 80069be:	4659      	mov	r1, fp
 80069c0:	462a      	mov	r2, r5
 80069c2:	f7ff fc51 	bl	8006268 <set_pixel>
				set_pixel(x1+4,y2-1, color);
 80069c6:	9b00      	ldr	r3, [sp, #0]
 80069c8:	1e61      	subs	r1, r4, #1
 80069ca:	4618      	mov	r0, r3
 80069cc:	b289      	uxth	r1, r1
 80069ce:	462a      	mov	r2, r5
 80069d0:	9100      	str	r1, [sp, #0]
 80069d2:	f7ff fc49 	bl	8006268 <set_pixel>
				set_pixel(x2-4,y2-1, color);
 80069d6:	9900      	ldr	r1, [sp, #0]
 80069d8:	ee17 0a10 	vmov	r0, s14
 80069dc:	462a      	mov	r2, r5
 80069de:	f7ff fc43 	bl	8006268 <set_pixel>
				set_pixel(x2-3,y2-2, color);
 80069e2:	4659      	mov	r1, fp
 80069e4:	ee17 0a90 	vmov	r0, s15
 80069e8:	462a      	mov	r2, r5
 80069ea:	f7ff fc3d 	bl	8006268 <set_pixel>
				set_pixel(x2-2,y2-3, color);
 80069ee:	462a      	mov	r2, r5
 80069f0:	4649      	mov	r1, r9
 80069f2:	4640      	mov	r0, r8
 80069f4:	f7ff fc38 	bl	8006268 <set_pixel>
				set_pixel(x2-1,y2-4, color);
 80069f8:	462a      	mov	r2, r5
 80069fa:	4630      	mov	r0, r6
 80069fc:	4639      	mov	r1, r7
 80069fe:	f7ff fc33 	bl	8006268 <set_pixel>
				draw_hl(x1+5, y1, x2-x1-10,color);
 8006a02:	9a02      	ldr	r2, [sp, #8]
 8006a04:	9803      	ldr	r0, [sp, #12]
 8006a06:	f1a2 0b0a 	sub.w	fp, r2, #10
 8006a0a:	ebab 0b00 	sub.w	fp, fp, r0
 8006a0e:	fa0f fb8b 	sxth.w	fp, fp
 8006a12:	1d43      	adds	r3, r0, #5
 8006a14:	b29b      	uxth	r3, r3
			for (i=0; i<= l; i++)
 8006a16:	f1bb 0f00 	cmp.w	fp, #0
				draw_hl(x1+5, y1, x2-x1-10,color);
 8006a1a:	9304      	str	r3, [sp, #16]
			for (i=0; i<= l; i++)
 8006a1c:	f2c0 80a0 	blt.w	8006b60 <draw_roundrect+0x2c0>
 8006a20:	f10b 0b01 	add.w	fp, fp, #1
			write_data((color)>>8);
 8006a24:	0a2b      	lsrs	r3, r5, #8
			write_data((color)>>16);
 8006a26:	0c2a      	lsrs	r2, r5, #16
			for (i=0; i<= l; i++)
 8006a28:	ee07 4a90 	vmov	s15, r4
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a2c:	f8df 926c 	ldr.w	r9, [pc, #620]	; 8006c9c <draw_roundrect+0x3fc>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a30:	f8df 8264 	ldr.w	r8, [pc, #612]	; 8006c98 <draw_roundrect+0x3f8>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a34:	4e97      	ldr	r6, [pc, #604]	; (8006c94 <draw_roundrect+0x3f4>)
			write_data((color)>>8);
 8006a36:	9300      	str	r3, [sp, #0]
			for (i=0; i<= l; i++)
 8006a38:	465c      	mov	r4, fp
 8006a3a:	f8dd b010 	ldr.w	fp, [sp, #16]
			write_data((color)>>16);
 8006a3e:	9205      	str	r2, [sp, #20]
			for (i=0; i<= l; i++)
 8006a40:	4653      	mov	r3, sl
 8006a42:	2700      	movs	r7, #0
 8006a44:	46aa      	mov	sl, r5
 8006a46:	4615      	mov	r5, r2
				set_pixel(x+i, y, color);
 8006a48:	eb0b 0107 	add.w	r1, fp, r7
 8006a4c:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4608      	mov	r0, r1
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	f7ff fb0a 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006a58:	222c      	movs	r2, #44	; 0x2c
 8006a5a:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a66:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a6a:	61b2      	str	r2, [r6, #24]
			__asm("nop");
 8006a6c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a6e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006a72:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a76:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a7a:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006a7c:	f8c9 5014 	str.w	r5, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006a80:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a84:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006a88:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006a8a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a8c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006a90:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006a92:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006a94:	f8c9 3014 	str.w	r3, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006a98:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006a9c:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006aa0:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006aa2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006aa4:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006aa6:	f8c9 a014 	str.w	sl, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006aaa:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006aae:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ab2:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006ab4:	bf00      	nop
			for (i=0; i<= l; i++)
 8006ab6:	3701      	adds	r7, #1
 8006ab8:	42a7      	cmp	r7, r4
 8006aba:	9b01      	ldr	r3, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006abc:	61b2      	str	r2, [r6, #24]
			for (i=0; i<= l; i++)
 8006abe:	d1c3      	bne.n	8006a48 <draw_roundrect+0x1a8>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006ac0:	46a3      	mov	fp, r4
 8006ac2:	ee17 4a90 	vmov	r4, s15
 8006ac6:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8006c9c <draw_roundrect+0x3fc>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006aca:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8006c98 <draw_roundrect+0x3f8>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ace:	4e71      	ldr	r6, [pc, #452]	; (8006c94 <draw_roundrect+0x3f4>)
 8006ad0:	9d05      	ldr	r5, [sp, #20]
 8006ad2:	ee07 3a90 	vmov	s15, r3
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	465c      	mov	r4, fp
 8006ada:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006ade:	2700      	movs	r7, #0
				set_pixel(x+i, y, color);
 8006ae0:	eb0b 0107 	add.w	r1, fp, r7
 8006ae4:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4608      	mov	r0, r1
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f7ff fabe 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006af0:	222c      	movs	r2, #44	; 0x2c
 8006af2:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006af6:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006afa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006afe:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b02:	61b2      	str	r2, [r6, #24]
			__asm("nop");
 8006b04:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b06:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b0a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b0e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b12:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006b14:	f8c9 5014 	str.w	r5, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b18:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b1c:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b20:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006b22:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b24:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006b28:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b2a:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006b2c:	f8c9 3014 	str.w	r3, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b30:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b34:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b38:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006b3a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b3c:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006b3e:	f8c9 a014 	str.w	sl, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006b42:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b46:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b4a:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8006b4c:	bf00      	nop
			for (i=0; i<= l; i++)
 8006b4e:	3701      	adds	r7, #1
 8006b50:	42a7      	cmp	r7, r4
 8006b52:	9b01      	ldr	r3, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006b54:	61b2      	str	r2, [r6, #24]
			for (i=0; i<= l; i++)
 8006b56:	d1c3      	bne.n	8006ae0 <draw_roundrect+0x240>
 8006b58:	4655      	mov	r5, sl
 8006b5a:	ee17 aa90 	vmov	sl, s15
 8006b5e:	461c      	mov	r4, r3
				draw_vl(x1, y1+5, y2-y1-10,color);
 8006b60:	3c0a      	subs	r4, #10
 8006b62:	eba4 040a 	sub.w	r4, r4, sl
 8006b66:	f10a 0305 	add.w	r3, sl, #5
 8006b6a:	b224      	sxth	r4, r4
 8006b6c:	b29b      	uxth	r3, r3
			for (i=0; i<= l; i++)
 8006b6e:	2c00      	cmp	r4, #0
				draw_vl(x1, y1+5, y2-y1-10,color);
 8006b70:	9300      	str	r3, [sp, #0]
			for (i=0; i<= l; i++)
 8006b72:	f6ff aea9 	blt.w	80068c8 <draw_roundrect+0x28>
			write_data((color)>>16);
 8006b76:	ea4f 4a15 	mov.w	sl, r5, lsr #16
			for (i=0; i<= l; i++)
 8006b7a:	9510      	str	r5, [sp, #64]	; 0x40
 8006b7c:	1c63      	adds	r3, r4, #1
			write_data((color)>>8);
 8006b7e:	ea4f 2b15 	mov.w	fp, r5, lsr #8
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006b82:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8006c9c <draw_roundrect+0x3fc>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006b86:	4f44      	ldr	r7, [pc, #272]	; (8006c98 <draw_roundrect+0x3f8>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006b88:	4c42      	ldr	r4, [pc, #264]	; (8006c94 <draw_roundrect+0x3f4>)
			for (i=0; i<= l; i++)
 8006b8a:	9903      	ldr	r1, [sp, #12]
 8006b8c:	4655      	mov	r5, sl
 8006b8e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8006b92:	2600      	movs	r6, #0
 8006b94:	4699      	mov	r9, r3
				set_pixel(x, y+i, color);
 8006b96:	9b00      	ldr	r3, [sp, #0]
			set_window(x, x, y, y);
 8006b98:	9101      	str	r1, [sp, #4]
 8006b9a:	4433      	add	r3, r6
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	f7ff fa63 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006ba6:	232c      	movs	r3, #44	; 0x2c
 8006ba8:	f8c8 3014 	str.w	r3, [r8, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bb4:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bb6:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006bb8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bba:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006bbe:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bc2:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bc6:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006bc8:	f8c8 5014 	str.w	r5, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006bcc:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006bd0:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bd2:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006bd4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bd6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006bda:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006bdc:	f8c8 b014 	str.w	fp, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006be0:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006be4:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006be6:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006be8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bea:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006bec:	f8c8 a014 	str.w	sl, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006bf0:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006bf4:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006bf6:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006bf8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006bfa:	4633      	mov	r3, r6
			for (i=0; i<= l; i++)
 8006bfc:	3601      	adds	r6, #1
 8006bfe:	45b1      	cmp	r9, r6
 8006c00:	9901      	ldr	r1, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c02:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8006c04:	d1c7      	bne.n	8006b96 <draw_roundrect+0x2f6>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006c06:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006c0a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8006c9c <draw_roundrect+0x3fc>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c0e:	4f22      	ldr	r7, [pc, #136]	; (8006c98 <draw_roundrect+0x3f8>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c10:	4c20      	ldr	r4, [pc, #128]	; (8006c94 <draw_roundrect+0x3f4>)
 8006c12:	9902      	ldr	r1, [sp, #8]
 8006c14:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006c18:	4699      	mov	r9, r3
 8006c1a:	2600      	movs	r6, #0
				set_pixel(x, y+i, color);
 8006c1c:	9b00      	ldr	r3, [sp, #0]
			set_window(x, x, y, y);
 8006c1e:	9101      	str	r1, [sp, #4]
 8006c20:	4433      	add	r3, r6
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	4608      	mov	r0, r1
 8006c28:	f7ff fa20 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006c2c:	232c      	movs	r3, #44	; 0x2c
 8006c2e:	f8c8 3014 	str.w	r3, [r8, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c3a:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c3c:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006c3e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c40:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006c44:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c48:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c4c:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006c4e:	f8c8 5014 	str.w	r5, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006c52:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c56:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c58:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006c5a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c5c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8006c60:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006c62:	f8c8 b014 	str.w	fp, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006c66:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c6a:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c6c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006c6e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c70:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006c72:	f8c8 a014 	str.w	sl, [r8, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006c76:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006c7a:	61bb      	str	r3, [r7, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006c7c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8006c7e:	bf00      	nop
			for (i=0; i<= l; i++)
 8006c80:	45b1      	cmp	r9, r6
 8006c82:	9901      	ldr	r1, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006c84:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8006c86:	f106 0601 	add.w	r6, r6, #1
 8006c8a:	d1c7      	bne.n	8006c1c <draw_roundrect+0x37c>
		}
 8006c8c:	b007      	add	sp, #28
 8006c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c92:	bf00      	nop
 8006c94:	40020800 	.word	0x40020800
 8006c98:	40020400 	.word	0x40020400
 8006c9c:	40020000 	.word	0x40020000

08006ca0 <fill_roundrect>:
		
		void fill_roundrect(u32 x1, u32 x2,u32 y1, u32 y2,u32 fill_color, u32 edge_color)
		{
 8006ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	b08f      	sub	sp, #60	; 0x3c
			register int i,j;
			
			for(i=0;i<5;i++)
				for(j=0;j<=i;j++)
				{
					set_pixel(x1+4-i, y1+j, edge_color);
 8006ca6:	b284      	uxth	r4, r0
 8006ca8:	9408      	str	r4, [sp, #32]
		{
 8006caa:	9c18      	ldr	r4, [sp, #96]	; 0x60
			fill_area(x1, x2, y1,y2 , fill_color);		// single color fill
 8006cac:	9400      	str	r4, [sp, #0]
					set_pixel(x1+4-i, y1+j, edge_color);
 8006cae:	b295      	uxth	r5, r2
					set_pixel(x2+i-4, y1+j, edge_color);
 8006cb0:	b28c      	uxth	r4, r1
		{
 8006cb2:	930d      	str	r3, [sp, #52]	; 0x34
					set_pixel(x1+4-i, y1+j, edge_color);
 8006cb4:	950a      	str	r5, [sp, #40]	; 0x28
					set_pixel(x2+i-4, y1+j, edge_color);
 8006cb6:	9409      	str	r4, [sp, #36]	; 0x24
			fill_area(x1, x2, y1,y2 , fill_color);		// single color fill
 8006cb8:	f7ff fa84 	bl	80061c4 <fill_area>
			for(i=0;i<5;i++)
 8006cbc:	1c6b      	adds	r3, r5, #1
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	9306      	str	r3, [sp, #24]
 8006cc2:	1dab      	adds	r3, r5, #6
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	9307      	str	r3, [sp, #28]
			write_data((color)>>16);
 8006cc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006cca:	f8df a298 	ldr.w	sl, [pc, #664]	; 8006f64 <fill_roundrect+0x2c4>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006cce:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006f68 <fill_roundrect+0x2c8>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006cd2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8006f6c <fill_roundrect+0x2cc>
			write_data((color)>>16);
 8006cd6:	0c1b      	lsrs	r3, r3, #16
 8006cd8:	9303      	str	r3, [sp, #12]
			write_data((color)>>8);
 8006cda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006cdc:	0a1b      	lsrs	r3, r3, #8
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	1d6b      	adds	r3, r5, #5
 8006ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ce4:	1b63      	subs	r3, r4, r5
 8006ce6:	930c      	str	r3, [sp, #48]	; 0x30
				for(j=0;j<=i;j++)
 8006ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cea:	9b08      	ldr	r3, [sp, #32]
 8006cec:	4413      	add	r3, r2
 8006cee:	9a06      	ldr	r2, [sp, #24]
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	ee07 3a90 	vmov	s15, r3
 8006cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006cfa:	3b05      	subs	r3, #5
 8006cfc:	4413      	add	r3, r2
 8006cfe:	fa1f fb83 	uxth.w	fp, r3
		{
 8006d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			set_window(x, x, y, y);
 8006d04:	9305      	str	r3, [sp, #20]
 8006d06:	461a      	mov	r2, r3
 8006d08:	ee17 1a90 	vmov	r1, s15
 8006d0c:	ee17 0a90 	vmov	r0, s15
 8006d10:	f7ff f9ac 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006d14:	232c      	movs	r3, #44	; 0x2c
 8006d16:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d1a:	f44f 7480 	mov.w	r4, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d22:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d26:	f8c8 3018 	str.w	r3, [r8, #24]
			__asm("nop");
 8006d2a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d2c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006d30:	f8c8 3018 	str.w	r3, [r8, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006d34:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006d38:	9b03      	ldr	r3, [sp, #12]
 8006d3a:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d3e:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006d42:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d46:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d4a:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8006d4e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d50:	f44f 4520 	mov.w	r5, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006d54:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d56:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006d5a:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006d5e:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d62:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d66:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8006d6a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006d6c:	9919      	ldr	r1, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d6e:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006d72:	f8ca 1014 	str.w	r1, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006d76:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d7a:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d7e:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8006d82:	bf00      	nop
			set_window(x, x, y, y);
 8006d84:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006d86:	f8c8 5018 	str.w	r5, [r8, #24]
			set_window(x, x, y, y);
 8006d8a:	4659      	mov	r1, fp
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4658      	mov	r0, fp
 8006d90:	f7ff f96c 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006d94:	212c      	movs	r1, #44	; 0x2c
 8006d96:	f8ca 1014 	str.w	r1, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006d9a:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006d9e:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006da2:	f8c8 1018 	str.w	r1, [r8, #24]
			__asm("nop");
 8006da6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006da8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006dac:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006dae:	f8c8 1018 	str.w	r1, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006db2:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006db6:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006dba:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006dbe:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8006dc2:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006dc4:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006dc6:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006dca:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006dce:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006dd2:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006dd6:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8006dda:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006dde:	f8c8 5018 	str.w	r5, [r8, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006de2:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006de6:	f8c8 7018 	str.w	r7, [r8, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006dea:	f8c9 4018 	str.w	r4, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006dee:	f8c8 6018 	str.w	r6, [r8, #24]
			__asm("nop");
 8006df2:	bf00      	nop
				for(j=0;j<=i;j++)
 8006df4:	9b05      	ldr	r3, [sp, #20]
 8006df6:	9a06      	ldr	r2, [sp, #24]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006df8:	f8c8 5018 	str.w	r5, [r8, #24]
				for(j=0;j<=i;j++)
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4293      	cmp	r3, r2
 8006e02:	f47f af7f 	bne.w	8006d04 <fill_roundrect+0x64>
			for(i=0;i<5;i++)
 8006e06:	9a07      	ldr	r2, [sp, #28]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	9306      	str	r3, [sp, #24]
 8006e10:	f47f af6a 	bne.w	8006ce8 <fill_roundrect+0x48>
 8006e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006e16:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8006f64 <fill_roundrect+0x2c4>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e1a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8006f68 <fill_roundrect+0x2c8>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e1e:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8006f6c <fill_roundrect+0x2cc>
 8006e22:	3b05      	subs	r3, #5
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	9307      	str	r3, [sp, #28]
				}
			for(i=0;i< 5;i++)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	9306      	str	r3, [sp, #24]
				for(j=5;j>i;j--)
 8006e2c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
				{			
					set_pixel(x1+i, y2+j-5, edge_color);
 8006e30:	9a08      	ldr	r2, [sp, #32]
					set_pixel(x2-i, y2-5+j, edge_color);
 8006e32:	9909      	ldr	r1, [sp, #36]	; 0x24
					set_pixel(x1+i, y2+j-5, edge_color);
 8006e34:	189a      	adds	r2, r3, r2
					set_pixel(x2-i, y2-5+j, edge_color);
 8006e36:	1acb      	subs	r3, r1, r3
					set_pixel(x1+i, y2+j-5, edge_color);
 8006e38:	b292      	uxth	r2, r2
					set_pixel(x2-i, y2-5+j, edge_color);
 8006e3a:	b29b      	uxth	r3, r3
					set_pixel(x1+i, y2+j-5, edge_color);
 8006e3c:	ee07 2a90 	vmov	s15, r2
					set_pixel(x2-i, y2-5+j, edge_color);
 8006e40:	ee07 3a10 	vmov	s14, r3
				for(j=5;j>i;j--)
 8006e44:	f04f 0905 	mov.w	r9, #5
					set_pixel(x1+i, y2+j-5, edge_color);
 8006e48:	9b07      	ldr	r3, [sp, #28]
 8006e4a:	444b      	add	r3, r9
 8006e4c:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 8006e4e:	461a      	mov	r2, r3
 8006e50:	ee17 1a90 	vmov	r1, s15
 8006e54:	ee17 0a90 	vmov	r0, s15
 8006e58:	9305      	str	r3, [sp, #20]
 8006e5a:	f7ff f907 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006e5e:	232c      	movs	r3, #44	; 0x2c
 8006e60:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e64:	f44f 7480 	mov.w	r4, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e6c:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e70:	f8ca 3018 	str.w	r3, [sl, #24]
			__asm("nop");
 8006e74:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006e7a:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006e7e:	f44f 4780 	mov.w	r7, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e88:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006e8c:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006e90:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006e94:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8006e98:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006e9a:	f44f 4520 	mov.w	r5, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006e9e:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ea0:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006ea4:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006ea8:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006eac:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006eb0:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8006eb4:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006eb6:	9919      	ldr	r1, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006eb8:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006ebc:	f8cb 1014 	str.w	r1, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006ec0:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ec4:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ec8:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8006ecc:	bf00      	nop
			set_window(x, x, y, y);
 8006ece:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ed0:	f8ca 5018 	str.w	r5, [sl, #24]
			set_window(x, x, y, y);
 8006ed4:	ee17 1a10 	vmov	r1, s14
 8006ed8:	ee17 0a10 	vmov	r0, s14
 8006edc:	461a      	mov	r2, r3
 8006ede:	f7ff f8c5 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006ee2:	212c      	movs	r1, #44	; 0x2c
 8006ee4:	f8cb 1014 	str.w	r1, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ee8:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006eec:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ef0:	f8ca 1018 	str.w	r1, [sl, #24]
			__asm("nop");
 8006ef4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ef6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006efa:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006efc:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f00:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006f04:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f08:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f0c:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8006f10:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f12:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f14:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f18:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006f1c:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f20:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f24:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8006f28:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f2a:	9b19      	ldr	r3, [sp, #100]	; 0x64
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f2c:	f8ca 5018 	str.w	r5, [sl, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8006f30:	f8cb 3014 	str.w	r3, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8006f34:	f8ca 7018 	str.w	r7, [sl, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006f38:	f8c8 4018 	str.w	r4, [r8, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006f3c:	f8ca 6018 	str.w	r6, [sl, #24]
			__asm("nop");
 8006f40:	bf00      	nop
				for(j=5;j>i;j--)
 8006f42:	9b06      	ldr	r3, [sp, #24]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006f44:	f8ca 5018 	str.w	r5, [sl, #24]
				for(j=5;j>i;j--)
 8006f48:	f109 39ff 	add.w	r9, r9, #4294967295
 8006f4c:	4599      	cmp	r9, r3
 8006f4e:	f73f af7b 	bgt.w	8006e48 <fill_roundrect+0x1a8>
			for(i=0;i< 5;i++)
 8006f52:	3301      	adds	r3, #1
 8006f54:	2b05      	cmp	r3, #5
 8006f56:	9306      	str	r3, [sp, #24]
 8006f58:	f47f af68 	bne.w	8006e2c <fill_roundrect+0x18c>
				} 
		}
 8006f5c:	b00f      	add	sp, #60	; 0x3c
 8006f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f62:	bf00      	nop
 8006f64:	40020000 	.word	0x40020000
 8006f68:	40020400 	.word	0x40020400
 8006f6c:	40020800 	.word	0x40020800

08006f70 <draw_line>:
				CurX++;
			}
		}
			
		void draw_line( u32 x1, u32 y1, u32 x2, u32 y2 , u32 color )
		{
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			uint8_t yLonger = 0;
			int incrementVal, endVal;
			int shortLen = y2-y1;
 8006f74:	1a5b      	subs	r3, r3, r1
			int longLen = x2-x1;
 8006f76:	1a17      	subs	r7, r2, r0
			int decInc;
			int j = 0, i = 0;

			if(ABS(shortLen) > ABS(longLen)) {
 8006f78:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8006f7c:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
 8006f80:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8006f84:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
 8006f88:	4294      	cmp	r4, r2
		{
 8006f8a:	b087      	sub	sp, #28
			if(ABS(shortLen) > ABS(longLen)) {
 8006f8c:	f340 80ad 	ble.w	80070ea <draw_line+0x17a>
 8006f90:	461a      	mov	r2, r3
				int swap = shortLen;
				shortLen = longLen;
 8006f92:	463b      	mov	r3, r7
				longLen = swap;
 8006f94:	4617      	mov	r7, r2
				yLonger = 1;
			}

			endVal = longLen;

			if(longLen < 0) {
 8006f96:	2f00      	cmp	r7, #0
				yLonger = 1;
 8006f98:	f04f 0501 	mov.w	r5, #1
			if(longLen < 0) {
 8006f9c:	f2c0 80aa 	blt.w	80070f4 <draw_line+0x184>
				incrementVal = -1;
				longLen = -longLen;
				endVal--;
			} else {
				incrementVal = 1;
				endVal++;
 8006fa0:	f107 0901 	add.w	r9, r7, #1
			}

			if(longLen == 0)
 8006fa4:	f040 80af 	bne.w	8007106 <draw_line+0x196>
 8006fa8:	f04f 0901 	mov.w	r9, #1
				incrementVal = 1;
 8006fac:	46c8      	mov	r8, r9
			else
				decInc = (shortLen << 16) / longLen;

			if(yLonger) {
				for(i = 0;i != endVal;i += incrementVal) {
					set_pixel(x1 + (j >> 16),y1 + i,color);
 8006fae:	b283      	uxth	r3, r0
			if(yLonger) {
 8006fb0:	2d00      	cmp	r5, #0
 8006fb2:	d04d      	beq.n	8007050 <draw_line+0xe0>
					set_pixel(x1 + (j >> 16),y1 + i,color);
 8006fb4:	9303      	str	r3, [sp, #12]
 8006fb6:	b28b      	uxth	r3, r1
 8006fb8:	9304      	str	r3, [sp, #16]
			write_data((color)>>16);
 8006fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006fbc:	f8df a158 	ldr.w	sl, [pc, #344]	; 8007118 <draw_line+0x1a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006fc0:	4e53      	ldr	r6, [pc, #332]	; (8007110 <draw_line+0x1a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006fc2:	4c54      	ldr	r4, [pc, #336]	; (8007114 <draw_line+0x1a4>)
			int j = 0, i = 0;
 8006fc4:	9705      	str	r7, [sp, #20]
			write_data((color)>>16);
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	9301      	str	r3, [sp, #4]
			write_data((color)>>8);
 8006fca:	9b10      	ldr	r3, [sp, #64]	; 0x40
				for(i = 0;i != endVal;i += incrementVal) {
 8006fcc:	2500      	movs	r5, #0
			write_data((color)>>8);
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	9302      	str	r3, [sp, #8]
			int j = 0, i = 0;
 8006fd2:	46ab      	mov	fp, r5
					set_pixel(x1 + (j >> 16),y1 + i,color);
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	eb03 412b 	add.w	r1, r3, fp, asr #16
 8006fda:	9b04      	ldr	r3, [sp, #16]
 8006fdc:	442b      	add	r3, r5
 8006fde:	b289      	uxth	r1, r1
 8006fe0:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	f7ff f841 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8006fea:	232c      	movs	r3, #44	; 0x2c
 8006fec:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ff0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8006ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ff8:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8006ffa:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8006ffc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8006ffe:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8007002:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007008:	9a01      	ldr	r2, [sp, #4]
 800700a:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800700e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007012:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007014:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007016:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 8007018:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800701a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800701e:	9f02      	ldr	r7, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007020:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007022:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007026:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007028:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800702a:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 800702c:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800702e:	9f10      	ldr	r7, [sp, #64]	; 0x40
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007030:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007032:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007036:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007038:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800703a:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 800703c:	bf00      	nop
					j += decInc;
 800703e:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007040:	61a2      	str	r2, [r4, #24]
				for(i = 0;i != endVal;i += incrementVal) {
 8007042:	4445      	add	r5, r8
 8007044:	454d      	cmp	r5, r9
					j += decInc;
 8007046:	449b      	add	fp, r3
				for(i = 0;i != endVal;i += incrementVal) {
 8007048:	d1c4      	bne.n	8006fd4 <draw_line+0x64>
				for(i = 0;i != endVal;i += incrementVal) {
					set_pixel(x1 + i,y1 + (j >> 16),color);
					j += decInc;
				}
			}
		} 
 800704a:	b007      	add	sp, #28
 800704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					set_pixel(x1 + (j >> 16),y1 + i,color);
 8007050:	9302      	str	r3, [sp, #8]
 8007052:	b28b      	uxth	r3, r1
 8007054:	9301      	str	r3, [sp, #4]
			write_data((color)>>16);
 8007056:	9b10      	ldr	r3, [sp, #64]	; 0x40
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007058:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007118 <draw_line+0x1a8>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800705c:	4e2c      	ldr	r6, [pc, #176]	; (8007110 <draw_line+0x1a0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800705e:	4c2d      	ldr	r4, [pc, #180]	; (8007114 <draw_line+0x1a4>)
			int j = 0, i = 0;
 8007060:	9705      	str	r7, [sp, #20]
			write_data((color)>>16);
 8007062:	0c1b      	lsrs	r3, r3, #16
 8007064:	9303      	str	r3, [sp, #12]
			write_data((color)>>8);
 8007066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	9304      	str	r3, [sp, #16]
			int j = 0, i = 0;
 800706c:	46ab      	mov	fp, r5
					set_pixel(x1 + i,y1 + (j >> 16),color);
 800706e:	9b02      	ldr	r3, [sp, #8]
 8007070:	1959      	adds	r1, r3, r5
 8007072:	9b01      	ldr	r3, [sp, #4]
 8007074:	eb03 432b 	add.w	r3, r3, fp, asr #16
 8007078:	b289      	uxth	r1, r1
 800707a:	b29b      	uxth	r3, r3
			set_window(x, x, y, y);
 800707c:	461a      	mov	r2, r3
 800707e:	4608      	mov	r0, r1
 8007080:	f7fe fff4 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007084:	232c      	movs	r3, #44	; 0x2c
 8007086:	f8ca 3014 	str.w	r3, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800708a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800708e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007092:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007094:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8007096:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007098:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800709c:	61a2      	str	r2, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800709e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80070a2:	9a03      	ldr	r2, [sp, #12]
 80070a4:	f8ca 2014 	str.w	r2, [sl, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80070a8:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80070ac:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80070ae:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80070b0:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 80070b2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80070b4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80070b8:	9f04      	ldr	r7, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80070ba:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80070bc:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80070c0:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80070c2:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80070c4:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 80070c6:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80070c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80070ca:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80070cc:	f8ca 7014 	str.w	r7, [sl, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80070d0:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80070d2:	61b3      	str	r3, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80070d4:	61a1      	str	r1, [r4, #24]
			__asm("nop");
 80070d6:	bf00      	nop
					j += decInc;
 80070d8:	9b05      	ldr	r3, [sp, #20]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80070da:	61a2      	str	r2, [r4, #24]
				for(i = 0;i != endVal;i += incrementVal) {
 80070dc:	4445      	add	r5, r8
 80070de:	454d      	cmp	r5, r9
					j += decInc;
 80070e0:	449b      	add	fp, r3
				for(i = 0;i != endVal;i += incrementVal) {
 80070e2:	d1c4      	bne.n	800706e <draw_line+0xfe>
		} 
 80070e4:	b007      	add	sp, #28
 80070e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(longLen < 0) {
 80070ea:	2f00      	cmp	r7, #0
			uint8_t yLonger = 0;
 80070ec:	f04f 0500 	mov.w	r5, #0
			if(longLen < 0) {
 80070f0:	f6bf af56 	bge.w	8006fa0 <draw_line+0x30>
				longLen = -longLen;
 80070f4:	427a      	negs	r2, r7
				endVal--;
 80070f6:	f107 39ff 	add.w	r9, r7, #4294967295
				incrementVal = -1;
 80070fa:	f04f 38ff 	mov.w	r8, #4294967295
				decInc = (shortLen << 16) / longLen;
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	fb93 f7f2 	sdiv	r7, r3, r2
 8007104:	e753      	b.n	8006fae <draw_line+0x3e>
 8007106:	463a      	mov	r2, r7
				incrementVal = 1;
 8007108:	f04f 0801 	mov.w	r8, #1
 800710c:	e7f7      	b.n	80070fe <draw_line+0x18e>
 800710e:	bf00      	nop
 8007110:	40020400 	.word	0x40020400
 8007114:	40020800 	.word	0x40020800
 8007118:	40020000 	.word	0x40020000

0800711c <fill_circle>:
		{
 800711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			D = 3 - (r << 1);
 8007120:	0056      	lsls	r6, r2, #1
		{
 8007122:	b084      	sub	sp, #16
 8007124:	4615      	mov	r5, r2
 8007126:	4682      	mov	sl, r0
 8007128:	4689      	mov	r9, r1
 800712a:	4698      	mov	r8, r3
			D = 3 - (r << 1);
 800712c:	f1c6 0603 	rsb	r6, r6, #3
			CurX = 0;
 8007130:	2400      	movs	r4, #0
				if(CurY > 0)
 8007132:	b98d      	cbnz	r5, 8007158 <fill_circle+0x3c>
				if(CurX > 0)
 8007134:	bb4c      	cbnz	r4, 800718a <fill_circle+0x6e>
				if (D < 0)
 8007136:	2e00      	cmp	r6, #0
					D += (CurX << 2) + 6;
 8007138:	f106 0106 	add.w	r1, r6, #6
					D += ((CurX - CurY) << 2) + 10;
 800713c:	eba4 0205 	sub.w	r2, r4, r5
 8007140:	f106 030a 	add.w	r3, r6, #10
				if (D < 0)
 8007144:	db3f      	blt.n	80071c6 <fill_circle+0xaa>
					CurY--;
 8007146:	3d01      	subs	r5, #1
				CurX++;
 8007148:	3401      	adds	r4, #1
			while (CurX <= CurY)
 800714a:	42a5      	cmp	r5, r4
					D += ((CurX - CurY) << 2) + 10;
 800714c:	eb03 0682 	add.w	r6, r3, r2, lsl #2
			while (CurX <= CurY)
 8007150:	d2ef      	bcs.n	8007132 <fill_circle+0x16>
		}
 8007152:	b004      	add	sp, #16
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						draw_line(x-CurX, y+CurY, x-CurX, y-CurY, color);
 8007158:	ebaa 0704 	sub.w	r7, sl, r4
 800715c:	eb09 0105 	add.w	r1, r9, r5
 8007160:	eba9 0305 	sub.w	r3, r9, r5
 8007164:	463a      	mov	r2, r7
 8007166:	4638      	mov	r0, r7
 8007168:	f8cd 8000 	str.w	r8, [sp]
 800716c:	9303      	str	r3, [sp, #12]
 800716e:	9102      	str	r1, [sp, #8]
 8007170:	f7ff fefe 	bl	8006f70 <draw_line>
						draw_line(x+CurX, y+CurY, x+CurX, y-CurY, color);
 8007174:	eb07 0244 	add.w	r2, r7, r4, lsl #1
 8007178:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800717c:	4610      	mov	r0, r2
 800717e:	f8cd 8000 	str.w	r8, [sp]
 8007182:	f7ff fef5 	bl	8006f70 <draw_line>
				if(CurX > 0)
 8007186:	2c00      	cmp	r4, #0
 8007188:	d0d5      	beq.n	8007136 <fill_circle+0x1a>
					draw_line(x-CurY, y+CurX, x-CurY, y-CurX, color);
 800718a:	ebaa 0205 	sub.w	r2, sl, r5
 800718e:	eb09 0104 	add.w	r1, r9, r4
 8007192:	eba9 0304 	sub.w	r3, r9, r4
 8007196:	4610      	mov	r0, r2
 8007198:	f8cd 8000 	str.w	r8, [sp]
 800719c:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80071a0:	f7ff fee6 	bl	8006f70 <draw_line>
					draw_line(x+CurY, y+CurX, x+CurY, y-CurX, color);
 80071a4:	eb0a 0205 	add.w	r2, sl, r5
 80071a8:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80071ac:	4610      	mov	r0, r2
 80071ae:	f8cd 8000 	str.w	r8, [sp]
 80071b2:	f7ff fedd 	bl	8006f70 <draw_line>
				if (D < 0)
 80071b6:	2e00      	cmp	r6, #0
					D += (CurX << 2) + 6;
 80071b8:	f106 0106 	add.w	r1, r6, #6
					D += ((CurX - CurY) << 2) + 10;
 80071bc:	eba4 0205 	sub.w	r2, r4, r5
 80071c0:	f106 030a 	add.w	r3, r6, #10
				if (D < 0)
 80071c4:	dabf      	bge.n	8007146 <fill_circle+0x2a>
					D += (CurX << 2) + 6;
 80071c6:	eb01 0684 	add.w	r6, r1, r4, lsl #2
				CurX++;
 80071ca:	3401      	adds	r4, #1
			while (CurX <= CurY)
 80071cc:	42ac      	cmp	r4, r5
 80071ce:	d8c0      	bhi.n	8007152 <fill_circle+0x36>
				if(CurY > 0)
 80071d0:	2d00      	cmp	r5, #0
 80071d2:	d0af      	beq.n	8007134 <fill_circle+0x18>
 80071d4:	e7c0      	b.n	8007158 <fill_circle+0x3c>
 80071d6:	bf00      	nop

080071d8 <draw_char>:
			}
			print_string(x, y, st, color);
		}

		void draw_char(uint16_t x, uint16_t y, const uint16_t *c, u32 color)
		{
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			register u32 index = 0, i = 0;

			for(index = 0; index < Current_Font->Height; index++)
 80071dc:	f8df b124 	ldr.w	fp, [pc, #292]	; 8007304 <draw_char+0x12c>
		{
 80071e0:	4699      	mov	r9, r3
 80071e2:	460b      	mov	r3, r1
			for(index = 0; index < Current_Font->Height; index++)
 80071e4:	f8db 1000 	ldr.w	r1, [fp]
		{
 80071e8:	4682      	mov	sl, r0
			for(index = 0; index < Current_Font->Height; index++)
 80071ea:	88c8      	ldrh	r0, [r1, #6]
		{
 80071ec:	b085      	sub	sp, #20
			for(index = 0; index < Current_Font->Height; index++)
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d07e      	beq.n	80072f0 <draw_char+0x118>
			write_data((color)>>16);
 80071f2:	ea4f 4019 	mov.w	r0, r9, lsr #16
 80071f6:	4617      	mov	r7, r2
 80071f8:	9000      	str	r0, [sp, #0]
			{
				for(i = 0; i < Current_Font->Width; i++)
 80071fa:	888a      	ldrh	r2, [r1, #4]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80071fc:	4e3e      	ldr	r6, [pc, #248]	; (80072f8 <draw_char+0x120>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80071fe:	4c3f      	ldr	r4, [pc, #252]	; (80072fc <draw_char+0x124>)
			write_data((color)>>8);
 8007200:	ea4f 2019 	mov.w	r0, r9, lsr #8
 8007204:	9001      	str	r0, [sp, #4]
			for(index = 0; index < Current_Font->Height; index++)
 8007206:	2000      	movs	r0, #0
 8007208:	9003      	str	r0, [sp, #12]
				for(i = 0; i < Current_Font->Width; i++)
 800720a:	2a00      	cmp	r2, #0
 800720c:	d070      	beq.n	80072f0 <draw_char+0x118>
				{
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 800720e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8007308 <draw_char+0x130>
				for(i = 0; i < Current_Font->Width; i++)
 8007212:	2500      	movs	r5, #0
 8007214:	e048      	b.n	80072a8 <draw_char+0xd0>
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 8007216:	2a0c      	cmp	r2, #12
 8007218:	d943      	bls.n	80072a2 <draw_char+0xca>
					(((c[index] & (0x1 << i)) == 0x00)&&(Current_Font->Width > 12 )))  == 0x00)
 800721a:	fa4c fc05 	asr.w	ip, ip, r5
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 800721e:	f01c 0f01 	tst.w	ip, #1
 8007222:	d03e      	beq.n	80072a2 <draw_char+0xca>
					{
						if(Current_Font->Height > 24)
 8007224:	88ca      	ldrh	r2, [r1, #6]
			set_window(x, x, y, y);
 8007226:	9302      	str	r3, [sp, #8]
						if(Current_Font->Height > 24)
 8007228:	2a18      	cmp	r2, #24
							set_pixel( x-i,y+index, color);
 800722a:	bf8c      	ite	hi
 800722c:	ebaa 0105 	subhi.w	r1, sl, r5
						else
							set_pixel( x+i,y+index, color);
 8007230:	eb0a 0105 	addls.w	r1, sl, r5
 8007234:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8007236:	461a      	mov	r2, r3
 8007238:	4608      	mov	r0, r1
 800723a:	f7fe ff17 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800723e:	4930      	ldr	r1, [pc, #192]	; (8007300 <draw_char+0x128>)
 8007240:	222c      	movs	r2, #44	; 0x2c
 8007242:	614a      	str	r2, [r1, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007244:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007248:	f44f 7280 	mov.w	r2, #256	; 0x100
 800724c:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800724e:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8007250:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007252:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007256:	9b00      	ldr	r3, [sp, #0]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007258:	61a0      	str	r0, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800725a:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800725e:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007262:	614b      	str	r3, [r1, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007264:	f8c4 e018 	str.w	lr, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007268:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800726a:	f8c4 c018 	str.w	ip, [r4, #24]
			__asm("nop");
 800726e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007270:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007274:	9b01      	ldr	r3, [sp, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007276:	61a0      	str	r0, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007278:	614b      	str	r3, [r1, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800727a:	f8c4 e018 	str.w	lr, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800727e:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007280:	f8c4 c018 	str.w	ip, [r4, #24]
			__asm("nop");
 8007284:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007286:	61a0      	str	r0, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007288:	f8c1 9014 	str.w	r9, [r1, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800728c:	f8c4 e018 	str.w	lr, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007290:	61b2      	str	r2, [r6, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007292:	f8c4 c018 	str.w	ip, [r4, #24]
			__asm("nop");
 8007296:	bf00      	nop
				for(i = 0; i < Current_Font->Width; i++)
 8007298:	f8db 1000 	ldr.w	r1, [fp]
 800729c:	9b02      	ldr	r3, [sp, #8]
 800729e:	888a      	ldrh	r2, [r1, #4]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80072a0:	61a0      	str	r0, [r4, #24]
				for(i = 0; i < Current_Font->Width; i++)
 80072a2:	3501      	adds	r5, #1
 80072a4:	42aa      	cmp	r2, r5
 80072a6:	d917      	bls.n	80072d8 <draw_char+0x100>
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 80072a8:	fba8 c002 	umull	ip, r0, r8, r2
 80072ac:	08c0      	lsrs	r0, r0, #3
 80072ae:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 80072b2:	2080      	movs	r0, #128	; 0x80
 80072b4:	fa00 f00c 	lsl.w	r0, r0, ip
 80072b8:	f8b7 c000 	ldrh.w	ip, [r7]
 80072bc:	4128      	asrs	r0, r5
 80072be:	ea10 0f0c 	tst.w	r0, ip
 80072c2:	d0a8      	beq.n	8007216 <draw_char+0x3e>
					(((c[index] & (0x1 << i)) == 0x00)&&(Current_Font->Width > 12 )))  == 0x00)
 80072c4:	fa4c fc05 	asr.w	ip, ip, r5
					if( ((((c[index] & ((0x80 << ((Current_Font->Width / 12 ) * 8 ) ) >> i)) == 0x00) && (Current_Font->Width <= 12)) ||
 80072c8:	f01c 0f01 	tst.w	ip, #1
 80072cc:	d1aa      	bne.n	8007224 <draw_char+0x4c>
					(((c[index] & (0x1 << i)) == 0x00)&&(Current_Font->Width > 12 )))  == 0x00)
 80072ce:	2a0c      	cmp	r2, #12
 80072d0:	d9a8      	bls.n	8007224 <draw_char+0x4c>
				for(i = 0; i < Current_Font->Width; i++)
 80072d2:	3501      	adds	r5, #1
 80072d4:	42aa      	cmp	r2, r5
 80072d6:	d8e7      	bhi.n	80072a8 <draw_char+0xd0>
			for(index = 0; index < Current_Font->Height; index++)
 80072d8:	9803      	ldr	r0, [sp, #12]
 80072da:	3001      	adds	r0, #1
 80072dc:	4605      	mov	r5, r0
 80072de:	9003      	str	r0, [sp, #12]
 80072e0:	88c8      	ldrh	r0, [r1, #6]
 80072e2:	4285      	cmp	r5, r0
 80072e4:	d204      	bcs.n	80072f0 <draw_char+0x118>
 80072e6:	3301      	adds	r3, #1
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	3702      	adds	r7, #2
				for(i = 0; i < Current_Font->Width; i++)
 80072ec:	2a00      	cmp	r2, #0
 80072ee:	d18e      	bne.n	800720e <draw_char+0x36>
					}
				}
			}
		}
 80072f0:	b005      	add	sp, #20
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	bf00      	nop
 80072f8:	40020400 	.word	0x40020400
 80072fc:	40020800 	.word	0x40020800
 8007300:	40020000 	.word	0x40020000
 8007304:	20000924 	.word	0x20000924
 8007308:	aaaaaaab 	.word	0xaaaaaaab

0800730c <print_char>:

		void print_char(uint16_t x, uint16_t y, uint8_t c, u32 color)
		{
 800730c:	b410      	push	{r4}
			c -= 32;
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 800730e:	4c07      	ldr	r4, [pc, #28]	; (800732c <print_char+0x20>)
 8007310:	6824      	ldr	r4, [r4, #0]
			c -= 32;
 8007312:	3a20      	subs	r2, #32
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 8007314:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8007318:	6824      	ldr	r4, [r4, #0]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	fb0c f202 	mul.w	r2, ip, r2
 8007320:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		}
 8007324:	f85d 4b04 	ldr.w	r4, [sp], #4
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 8007328:	f7ff bf56 	b.w	80071d8 <draw_char>
 800732c:	20000924 	.word	0x20000924

08007330 <print_string>:

		void print_string(uint16_t x, uint16_t y, char *ptr,u32 color)
		{
 8007330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			 register u16 refcolumn = x;
			while (*ptr != 0)
 8007334:	7814      	ldrb	r4, [r2, #0]
 8007336:	b1cc      	cbz	r4, 800736c <print_string+0x3c>
 8007338:	4699      	mov	r9, r3
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <print_string+0x40>)
 800733c:	681e      	ldr	r6, [r3, #0]
 800733e:	4617      	mov	r7, r2
 8007340:	4605      	mov	r5, r0
 8007342:	4688      	mov	r8, r1
 8007344:	88f3      	ldrh	r3, [r6, #6]
 8007346:	6832      	ldr	r2, [r6, #0]
			c -= 32;
 8007348:	3c20      	subs	r4, #32
			draw_char(x, y, &Current_Font->table[c * Current_Font->Height], color);
 800734a:	b2e4      	uxtb	r4, r4
 800734c:	fb03 f404 	mul.w	r4, r3, r4
 8007350:	4628      	mov	r0, r5
 8007352:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 8007356:	464b      	mov	r3, r9
 8007358:	4641      	mov	r1, r8
 800735a:	f7ff ff3d 	bl	80071d8 <draw_char>
			{
				/* Display one character on LCD */
				print_char(x,y, *ptr, color);
				/* Decrement the column position by 16 */
				refcolumn += Current_Font->Width;
 800735e:	88b0      	ldrh	r0, [r6, #4]
			while (*ptr != 0)
 8007360:	f817 4f01 	ldrb.w	r4, [r7, #1]!
				refcolumn += Current_Font->Width;
 8007364:	4428      	add	r0, r5
 8007366:	b285      	uxth	r5, r0
			while (*ptr != 0)
 8007368:	2c00      	cmp	r4, #0
 800736a:	d1eb      	bne.n	8007344 <print_string+0x14>
				x += Current_Font->Width;
				/* Point on the next character */
				ptr++;
			}
		}
 800736c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007370:	20000924 	.word	0x20000924

08007374 <print_image>:
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
		void print_image(u32 x, u32 y, u32 x_res, u32 y_res,const u32 *ptr_image)
		{
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	4616      	mov	r6, r2
			register u32 cnt =0;
			set_window(x,x + x_res-1, y,y + y_res-1);
 800737a:	b280      	uxth	r0, r0
 800737c:	b28a      	uxth	r2, r1
		{
 800737e:	4699      	mov	r9, r3
			set_window(x,x + x_res-1, y,y + y_res-1);
 8007380:	1e71      	subs	r1, r6, #1
 8007382:	3b01      	subs	r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	4401      	add	r1, r0
 8007388:	b29b      	uxth	r3, r3
 800738a:	b289      	uxth	r1, r1
		{
 800738c:	9f08      	ldr	r7, [sp, #32]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800738e:	4c20      	ldr	r4, [pc, #128]	; (8007410 <print_image+0x9c>)
			set_window(x,x + x_res-1, y,y + y_res-1);
 8007390:	f7fe fe6c 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007394:	481f      	ldr	r0, [pc, #124]	; (8007414 <print_image+0xa0>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007396:	4920      	ldr	r1, [pc, #128]	; (8007418 <print_image+0xa4>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007398:	232c      	movs	r3, #44	; 0x2c
 800739a:	6143      	str	r3, [r0, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800739c:	f44f 7580 	mov.w	r5, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80073a4:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073a6:	618b      	str	r3, [r1, #24]
			__asm("nop");
 80073a8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			write_cmd(0x2c);
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 80073ae:	fb09 f906 	mul.w	r9, r9, r6
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073b2:	618b      	str	r3, [r1, #24]
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 80073b4:	f1b9 0f00 	cmp.w	r9, #0
 80073b8:	d028      	beq.n	800740c <print_image+0x98>
 80073ba:	f04f 0e00 	mov.w	lr, #0
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80073be:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073c2:	f04f 4620 	mov.w	r6, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073c6:	f44f 4220 	mov.w	r2, #40960	; 0xa000
			{
				add_color(*(ptr_image));
 80073ca:	f857 3b04 	ldr.w	r3, [r7], #4
			write_data((color)>>16);
 80073ce:	ea4f 4813 	mov.w	r8, r3, lsr #16
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80073d2:	f8c0 8014 	str.w	r8, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80073d6:	f8c1 c018 	str.w	ip, [r1, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80073da:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073dc:	618e      	str	r6, [r1, #24]
			__asm("nop");
 80073de:	bf00      	nop
			write_data((color)>>8);
 80073e0:	ea4f 2813 	mov.w	r8, r3, lsr #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073e4:	618a      	str	r2, [r1, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80073e6:	f8c0 8014 	str.w	r8, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80073ea:	f8c1 c018 	str.w	ip, [r1, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80073ee:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073f0:	618e      	str	r6, [r1, #24]
			__asm("nop");
 80073f2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80073f4:	618a      	str	r2, [r1, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80073f6:	6143      	str	r3, [r0, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80073f8:	f8c1 c018 	str.w	ip, [r1, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80073fc:	61a5      	str	r5, [r4, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80073fe:	618e      	str	r6, [r1, #24]
			__asm("nop");
 8007400:	bf00      	nop
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 8007402:	f10e 0e01 	add.w	lr, lr, #1
 8007406:	45ce      	cmp	lr, r9
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007408:	618a      	str	r2, [r1, #24]
			for(cnt = 0; cnt < (x_res * y_res) ; cnt++)
 800740a:	d1de      	bne.n	80073ca <print_image+0x56>
				ptr_image++;
			}
		}
 800740c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007410:	40020400 	.word	0x40020400
 8007414:	40020000 	.word	0x40020000
 8007418:	40020800 	.word	0x40020800

0800741c <ssd1963_setup>:
			
// @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@		
		void ssd1963_setup (void)
		{
 800741c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RST << 16;
 8007420:	4dc1      	ldr	r5, [pc, #772]	; (8007728 <ssd1963_setup+0x30c>)
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007422:	4fc2      	ldr	r7, [pc, #776]	; (800772c <ssd1963_setup+0x310>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007424:	4cc2      	ldr	r4, [pc, #776]	; (8007730 <ssd1963_setup+0x314>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RST << 16;
 8007426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800742a:	61ab      	str	r3, [r5, #24]
			HAL_Delay(10);
 800742c:	200a      	movs	r0, #10
 800742e:	f7fa fe49 	bl	80020c4 <HAL_Delay>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RST;
 8007432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007436:	61ab      	str	r3, [r5, #24]
			HAL_Delay(10);
 8007438:	200a      	movs	r0, #10
 800743a:	f7fa fe43 	bl	80020c4 <HAL_Delay>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800743e:	f44f 7680 	mov.w	r6, #256	; 0x100
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007442:	23e2      	movs	r3, #226	; 0xe2
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007444:	f04f 4a60 	mov.w	sl, #3758096384	; 0xe0000000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007448:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800744a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800744c:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007450:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007452:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007456:	61a3      	str	r3, [r4, #24]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007458:	f44f 4980 	mov.w	r9, #16384	; 0x4000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800745c:	231e      	movs	r3, #30
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800745e:	f04f 4b20 	mov.w	fp, #2684354560	; 0xa0000000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007462:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007464:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007468:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800746a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800746e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007470:	f44f 4820 	mov.w	r8, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007474:	2102      	movs	r1, #2
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007476:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800747a:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800747c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007480:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007482:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007486:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007488:	2054      	movs	r0, #84	; 0x54
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800748a:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800748e:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007490:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007494:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007496:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800749a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800749c:	23e0      	movs	r3, #224	; 0xe0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800749e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80074a2:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074a4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074a6:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80074aa:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074ac:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80074b0:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074b2:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80074b4:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80074b6:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074ba:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074bc:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80074c0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074c2:	f8c4 8018 	str.w	r8, [r4, #24]
				write_data(0x1E);	    											//N=0x36 for 6.5M, 0x23 for 10M crystal
				write_data(0x02);
				write_data(0x54);
			write_cmd(0xE0);														// PLL enable
				write_data(0x01);
				HAL_Delay(1);
 80074c6:	f7fa fdfd 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80074ca:	23e0      	movs	r3, #224	; 0xe0
 80074cc:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074ce:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074d0:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80074d4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80074da:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80074dc:	2303      	movs	r3, #3
 80074de:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80074e0:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074e4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074e6:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80074ea:	bf00      	nop
			write_cmd(0xE0);
				write_data(0x03);
				HAL_Delay(1);
 80074ec:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80074ee:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 80074f2:	f7fa fde7 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80074f6:	2001      	movs	r0, #1
 80074f8:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80074fa:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80074fc:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007500:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007502:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007506:	61a3      	str	r3, [r4, #24]
			write_cmd(0x01);														// software reset
				HAL_Delay(1);
 8007508:	f7fa fddc 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800750c:	23e6      	movs	r3, #230	; 0xe6
 800750e:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007510:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007512:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007516:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007518:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800751c:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800751e:	2303      	movs	r3, #3
 8007520:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007522:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007526:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007528:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800752c:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800752e:	23ff      	movs	r3, #255	; 0xff
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007530:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007534:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007536:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800753a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800753c:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007540:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007542:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007546:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007548:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800754c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800754e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007552:	bf00      	nop
			write_cmd(0xE6);														//PLL setting for PCLK, depends on resolution
				write_data(0x03);
				write_data(0xFF);
				write_data(0xFF);
				HAL_Delay(1);
 8007554:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007556:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 800755a:	f7fa fdb3 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800755e:	23b0      	movs	r3, #176	; 0xb0
 8007560:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007562:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007564:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007568:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800756a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800756e:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007570:	2320      	movs	r3, #32
 8007572:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007574:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007578:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800757a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800757e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007580:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007582:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007586:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007588:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800758c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800758e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007592:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007594:	2303      	movs	r3, #3
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007596:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800759a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800759c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80075a0:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80075a2:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80075a6:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80075a8:	231f      	movs	r3, #31
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80075aa:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80075ae:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80075b0:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80075b4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80075b6:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80075ba:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80075bc:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80075be:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80075c2:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80075c4:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80075c8:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80075ca:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80075ce:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80075d0:	23df      	movs	r3, #223	; 0xdf
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80075d2:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80075d6:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80075d8:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80075dc:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80075de:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80075e2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80075e4:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80075e8:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80075ea:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80075ee:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80075f0:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80075f4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80075f6:	f8c4 8018 	str.w	r8, [r4, #24]
				write_data(0x03);														//Set HDP	799
				write_data(0x1F);
				write_data(0x01);														//Set VDP	479
				write_data(0xDF);
				write_data(0x00);
				HAL_Delay(1);
 80075fa:	f7fa fd63 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80075fe:	23b4      	movs	r3, #180	; 0xb4
 8007600:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007602:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007604:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007608:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800760a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800760e:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007610:	2303      	movs	r3, #3
 8007612:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007614:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007618:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800761a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800761e:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007620:	23a0      	movs	r3, #160	; 0xa0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007622:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007626:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007628:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800762c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800762e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007632:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007634:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007636:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800763a:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800763c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007640:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007642:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007646:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007648:	232e      	movs	r3, #46	; 0x2e
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800764a:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800764e:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007650:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007654:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007656:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800765a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800765c:	2330      	movs	r3, #48	; 0x30
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800765e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007662:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007664:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007668:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800766a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800766e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007670:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007674:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007676:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800767a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800767c:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007680:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007682:	230f      	movs	r3, #15
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007684:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007688:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800768a:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800768e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007690:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007694:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007696:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800769a:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800769c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80076a0:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80076a2:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80076a6:	bf00      	nop
				write_data(0x2E);
				write_data(0x30);														//Set HPW	48
				write_data(0x00);														//Set LPS	15
				write_data(0x0F);
				write_data(0x00);
				HAL_Delay(1);
 80076a8:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80076aa:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 80076ae:	f7fa fd09 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80076b2:	23b6      	movs	r3, #182	; 0xb6
 80076b4:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80076b6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80076b8:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80076bc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80076be:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80076c2:	2102      	movs	r1, #2
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80076c4:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80076c6:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80076c8:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80076cc:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80076ce:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80076d2:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80076d4:	230d      	movs	r3, #13
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80076d6:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80076da:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80076dc:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80076e0:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80076e2:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80076e6:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80076e8:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80076ea:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80076ee:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80076f0:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80076f4:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80076f6:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80076fa:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80076fc:	2110      	movs	r1, #16
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80076fe:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007702:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007704:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007708:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800770a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800770e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007710:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007714:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007716:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800771a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800771c:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007720:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007722:	f8c4 8018 	str.w	r8, [r4, #24]
 8007726:	e005      	b.n	8007734 <ssd1963_setup+0x318>
 8007728:	40020400 	.word	0x40020400
 800772c:	40020000 	.word	0x40020000
 8007730:	40020800 	.word	0x40020800
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007734:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007736:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800773a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800773c:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007740:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007742:	2308      	movs	r3, #8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007744:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007748:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800774a:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800774e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007750:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007754:	bf00      	nop
				write_data(0x00);														//Set VPS	16
				write_data(0x10);
				write_data(0x10);														//Set VPW	16
				write_data(0x00);														//Set FPS	8
				write_data(0x08);
				HAL_Delay(1);
 8007756:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007758:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 800775c:	f7fa fcb2 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007760:	23ba      	movs	r3, #186	; 0xba
 8007762:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007764:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007766:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800776a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800776c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007770:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007772:	230f      	movs	r3, #15
 8007774:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007776:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800777a:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800777c:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007780:	bf00      	nop
			write_cmd(0xBA);
				write_data(0x0F);														//GPIO[3:0] out 1
				HAL_Delay(1);
 8007782:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007784:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 8007788:	f7fa fc9c 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800778c:	21b8      	movs	r1, #184	; 0xb8
 800778e:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007790:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007792:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007796:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007798:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800779c:	f04f 0c07 	mov.w	ip, #7
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80077a0:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80077a2:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80077a6:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80077aa:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80077ac:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80077b0:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80077b2:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80077b4:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80077b8:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80077ba:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80077be:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80077c0:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80077c4:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80077c6:	f8c4 8018 	str.w	r8, [r4, #24]
			write_cmd(0xB8);
				write_data(0x07);	   											 //GPIO3=input, GPIO[2:0]=output
				write_data(0x01);														//GPIO0 normal
				HAL_Delay(1);
 80077ca:	f7fa fc7b 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80077ce:	f04f 0c36 	mov.w	ip, #54	; 0x36
 80077d2:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80077d6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80077d8:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80077dc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80077de:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80077e2:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80077e4:	2308      	movs	r3, #8
 80077e6:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80077e8:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80077ec:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80077ee:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80077f2:	bf00      	nop
			write_cmd(0x36);														//rotation
				write_data(0x08);		//write_data(0x2A);
				HAL_Delay(1);
 80077f4:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80077f6:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 80077fa:	f7fa fc63 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80077fe:	23f0      	movs	r3, #240	; 0xf0
 8007800:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007802:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007804:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007808:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800780a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800780e:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007810:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007812:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007814:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007818:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800781a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800781e:	bf00      	nop
			
			write_cmd(0xF0);														//pixel data interface
				write_data(0x00);
				HAL_Delay(1);
 8007820:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007822:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 8007826:	f7fa fc4d 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800782a:	21b8      	movs	r1, #184	; 0xb8
 800782c:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800782e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007830:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007834:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007836:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800783a:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800783c:	230f      	movs	r3, #15
 800783e:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007840:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007844:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007846:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800784a:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800784c:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800784e:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007852:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007854:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007858:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800785a:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 800785e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007860:	f8c4 8018 	str.w	r8, [r4, #24]
			write_cmd(0xB8);
				write_data(0x0f);   											 //GPIO is controlled by host GPIO[3:0]=output   GPIO[0]=1  LCD ON  GPIO[0]=1  LCD OFF 
				write_data(0x01);   											 //GPIO0 normal
				HAL_Delay(1);
 8007864:	f7fa fc2e 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007868:	23ba      	movs	r3, #186	; 0xba
 800786a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800786c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800786e:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007872:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007874:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007878:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800787a:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800787c:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800787e:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007882:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007884:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007888:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800788a:	f8c4 8018 	str.w	r8, [r4, #24]
			write_cmd(0xBA);
				write_data(0x01);    												//GPIO[0] out 1 --- LCD display on/off control PIN
				HAL_Delay(1);
 800788e:	f7fa fc19 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007892:	2129      	movs	r1, #41	; 0x29
 8007894:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007896:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007898:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800789c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800789e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80078a2:	f04f 0cbe 	mov.w	ip, #190	; 0xbe
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80078a6:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80078a8:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80078ac:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80078ae:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 80078b2:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80078b4:	f04f 0c06 	mov.w	ip, #6
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80078b8:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80078ba:	f8c7 c014 	str.w	ip, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80078be:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80078c2:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80078c4:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80078c8:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80078ca:	23f0      	movs	r3, #240	; 0xf0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80078cc:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80078d0:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80078d2:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80078d6:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80078d8:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80078dc:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80078de:	2200      	movs	r2, #0
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80078e0:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80078e4:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80078e6:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80078ea:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80078ec:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 80078f0:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80078f2:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80078f6:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80078f8:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80078fc:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80078fe:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007902:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007904:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007908:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800790a:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800790e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007910:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007914:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007916:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800791a:	617a      	str	r2, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800791c:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007920:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007922:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007926:	bf00      	nop
				write_data(0xf0);
				write_data(0x00);
				write_data(0xf0);
				write_data(0x00);
				write_data(0x00);
				HAL_Delay(1);
 8007928:	2001      	movs	r0, #1
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800792a:	f8c4 8018 	str.w	r8, [r4, #24]
				HAL_Delay(1);
 800792e:	f7fa fbc9 	bl	80020c4 <HAL_Delay>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007932:	20d0      	movs	r0, #208	; 0xd0
 8007934:	6178      	str	r0, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007936:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007938:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 800793c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800793e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007942:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007944:	230d      	movs	r3, #13
 8007946:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007948:	f8c4 9018 	str.w	r9, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800794c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800794e:	f8c4 b018 	str.w	fp, [r4, #24]
			__asm("nop");
 8007952:	bf00      	nop
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007954:	232c      	movs	r3, #44	; 0x2c
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007956:	f8c4 8018 	str.w	r8, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800795a:	617b      	str	r3, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800795c:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800795e:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007962:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007964:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007968:	2129      	movs	r1, #41	; 0x29
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800796a:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800796c:	6179      	str	r1, [r7, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800796e:	61ae      	str	r6, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007970:	f8c4 a018 	str.w	sl, [r4, #24]
			__asm("nop");
 8007974:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007976:	61a3      	str	r3, [r4, #24]
			write_cmd(0xd0); 
				write_data(0x0d);	
			write_cmd(0x2C); 
			write_cmd(0x29);
		}	
 8007978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800797c <symbol>:
				fill_area(390,500,200,290, BLACK);		
			}	
		}

		void symbol (u32 x, u32 y,s8 sym, u32 color)
		{
 800797c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if(sym == '+')
 8007980:	2a2b      	cmp	r2, #43	; 0x2b
		{
 8007982:	b087      	sub	sp, #28
 8007984:	4606      	mov	r6, r0
 8007986:	461c      	mov	r4, r3
 8007988:	460d      	mov	r5, r1
			if(sym == '+')
 800798a:	f000 8123 	beq.w	8007bd4 <symbol+0x258>
				draw_vl(x+8,y-7,16,color);
				draw_vl(x+9,y-7,16,color);
				draw_vl(x+6,y-7,16,color);
				draw_vl(x+7,y-7,16,color);
			}	
			if(sym == '-')
 800798e:	2a2d      	cmp	r2, #45	; 0x2d
 8007990:	f040 80f2 	bne.w	8007b78 <symbol+0x1fc>
				set_pixel(x+i, y, color);
 8007994:	b286      	uxth	r6, r0
			write_data((color)>>16);
 8007996:	0c1a      	lsrs	r2, r3, #16
			write_data((color)>>8);
 8007998:	ea4f 2a13 	mov.w	sl, r3, lsr #8
				set_pixel(x+i, y, color);
 800799c:	b28d      	uxth	r5, r1
 800799e:	f106 0810 	add.w	r8, r6, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80079a2:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007bd0 <symbol+0x254>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80079a6:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007bcc <symbol+0x250>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80079aa:	4f87      	ldr	r7, [pc, #540]	; (8007bc8 <symbol+0x24c>)
				set_pixel(x+i, y, color);
 80079ac:	9604      	str	r6, [sp, #16]
 80079ae:	462b      	mov	r3, r5
			write_data((color)>>16);
 80079b0:	9203      	str	r2, [sp, #12]
				set_pixel(x+i, y, color);
 80079b2:	4635      	mov	r5, r6
 80079b4:	fa1f f888 	uxth.w	r8, r8
 80079b8:	4656      	mov	r6, sl
 80079ba:	46a2      	mov	sl, r4
 80079bc:	4614      	mov	r4, r2
			set_window(x, x, y, y);
 80079be:	461a      	mov	r2, r3
 80079c0:	4629      	mov	r1, r5
 80079c2:	4628      	mov	r0, r5
 80079c4:	9302      	str	r3, [sp, #8]
 80079c6:	f7fe fb51 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80079ca:	222c      	movs	r2, #44	; 0x2c
 80079cc:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80079d0:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80079d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80079d8:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80079dc:	61ba      	str	r2, [r7, #24]
			__asm("nop");
 80079de:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80079e0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80079e4:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80079e8:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80079ec:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80079ee:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80079f2:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80079f6:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80079fa:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 80079fc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80079fe:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007a02:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007a04:	f8cb 6014 	str.w	r6, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007a08:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007a0c:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007a10:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007a12:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007a14:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007a16:	f8cb a014 	str.w	sl, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007a1a:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007a1e:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007a22:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007a24:	bf00      	nop
			for (i=0; i<= l; i++)
 8007a26:	3501      	adds	r5, #1
 8007a28:	b2ad      	uxth	r5, r5
 8007a2a:	4545      	cmp	r5, r8
 8007a2c:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007a2e:	61ba      	str	r2, [r7, #24]
			for (i=0; i<= l; i++)
 8007a30:	d1c5      	bne.n	80079be <symbol+0x42>
			{	
				draw_hl(x,y,15,color);
				draw_hl(x,y+1,15,color);
 8007a32:	4654      	mov	r4, sl
 8007a34:	46b2      	mov	sl, r6
 8007a36:	9e04      	ldr	r6, [sp, #16]
 8007a38:	f103 0901 	add.w	r9, r3, #1
 8007a3c:	461d      	mov	r5, r3
 8007a3e:	fa1f f989 	uxth.w	r9, r9
 8007a42:	4637      	mov	r7, r6
				set_pixel(x+i, y, color);
 8007a44:	4638      	mov	r0, r7
			for (i=0; i<= l; i++)
 8007a46:	3701      	adds	r7, #1
				set_pixel(x+i, y, color);
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4649      	mov	r1, r9
			for (i=0; i<= l; i++)
 8007a4c:	b2bf      	uxth	r7, r7
				set_pixel(x+i, y, color);
 8007a4e:	f7fe fc0b 	bl	8006268 <set_pixel>
			for (i=0; i<= l; i++)
 8007a52:	45b8      	cmp	r8, r7
 8007a54:	d1f6      	bne.n	8007a44 <symbol+0xc8>
				draw_hl(x,y+2,15,color);
 8007a56:	1cab      	adds	r3, r5, #2
 8007a58:	4631      	mov	r1, r6
 8007a5a:	9604      	str	r6, [sp, #16]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007a5c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007bd0 <symbol+0x254>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007a60:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8007bcc <symbol+0x250>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007a64:	4f58      	ldr	r7, [pc, #352]	; (8007bc8 <symbol+0x24c>)
				draw_hl(x,y+2,15,color);
 8007a66:	4656      	mov	r6, sl
 8007a68:	46a2      	mov	sl, r4
 8007a6a:	9c03      	ldr	r4, [sp, #12]
 8007a6c:	ee07 5a90 	vmov	s15, r5
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	460d      	mov	r5, r1
			set_window(x, x, y, y);
 8007a74:	461a      	mov	r2, r3
 8007a76:	4629      	mov	r1, r5
 8007a78:	4628      	mov	r0, r5
 8007a7a:	9302      	str	r3, [sp, #8]
 8007a7c:	f7fe faf6 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007a80:	222c      	movs	r2, #44	; 0x2c
 8007a82:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007a86:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007a8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007a8e:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007a92:	61ba      	str	r2, [r7, #24]
			__asm("nop");
 8007a94:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007a96:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007a9a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007a9e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007aa2:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007aa4:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007aa8:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007aac:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007ab0:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007ab2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007ab4:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007ab8:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007aba:	f8cb 6014 	str.w	r6, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007abe:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007ac2:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007ac6:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007ac8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007aca:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007acc:	f8cb a014 	str.w	sl, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007ad0:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007ad4:	f8c9 1018 	str.w	r1, [r9, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007ad8:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007ada:	bf00      	nop
			for (i=0; i<= l; i++)
 8007adc:	1c69      	adds	r1, r5, #1
 8007ade:	b28d      	uxth	r5, r1
 8007ae0:	45a8      	cmp	r8, r5
 8007ae2:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007ae4:	61ba      	str	r2, [r7, #24]
			for (i=0; i<= l; i++)
 8007ae6:	d1c5      	bne.n	8007a74 <symbol+0xf8>
				draw_hl(x,y+3,15,color);
 8007ae8:	ee17 5a90 	vmov	r5, s15
 8007aec:	3503      	adds	r5, #3
 8007aee:	4654      	mov	r4, sl
 8007af0:	fa1f fb85 	uxth.w	fp, r5
 8007af4:	46b2      	mov	sl, r6
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007af6:	465b      	mov	r3, fp
				draw_hl(x,y+3,15,color);
 8007af8:	9e04      	ldr	r6, [sp, #16]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007afa:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8007bd0 <symbol+0x254>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007afe:	4d33      	ldr	r5, [pc, #204]	; (8007bcc <symbol+0x250>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007b00:	4f31      	ldr	r7, [pc, #196]	; (8007bc8 <symbol+0x24c>)
 8007b02:	46a3      	mov	fp, r4
 8007b04:	9c03      	ldr	r4, [sp, #12]
			set_window(x, x, y, y);
 8007b06:	9302      	str	r3, [sp, #8]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7fe faad 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007b12:	222c      	movs	r2, #44	; 0x2c
 8007b14:	f8c9 2014 	str.w	r2, [r9, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007b18:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007b1c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007b20:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007b22:	61ba      	str	r2, [r7, #24]
			__asm("nop");
 8007b24:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007b26:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007b2a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007b2e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007b32:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007b34:	f8c9 4014 	str.w	r4, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007b38:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007b3c:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007b3e:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007b40:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007b42:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007b46:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007b48:	f8c9 a014 	str.w	sl, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007b4c:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007b50:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007b52:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007b54:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007b56:	61ba      	str	r2, [r7, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007b58:	f8c9 b014 	str.w	fp, [r9, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007b5c:	f8c7 c018 	str.w	ip, [r7, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007b60:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007b62:	61b8      	str	r0, [r7, #24]
			__asm("nop");
 8007b64:	bf00      	nop
			for (i=0; i<= l; i++)
 8007b66:	3601      	adds	r6, #1
 8007b68:	b2b6      	uxth	r6, r6
 8007b6a:	45b0      	cmp	r8, r6
 8007b6c:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007b6e:	61ba      	str	r2, [r7, #24]
			for (i=0; i<= l; i++)
 8007b70:	d1c9      	bne.n	8007b06 <symbol+0x18a>
				draw_line(x, y+2, x-7, y+9, color);
				draw_line(x, y+3, x-6, y+9, color);
			}
			
			
		}
 8007b72:	b007      	add	sp, #28
 8007b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(sym == 'D')
 8007b78:	2a44      	cmp	r2, #68	; 0x44
 8007b7a:	f040 81d6 	bne.w	8007f2a <symbol+0x5ae>
 8007b7e:	351e      	adds	r5, #30
 8007b80:	ea4f 0940 	mov.w	r9, r0, lsl #1
 8007b84:	eba5 0a00 	sub.w	sl, r5, r0
					fill_area(x-10+i,x+5,y+20,y+20+i,color);
 8007b88:	f100 0805 	add.w	r8, r0, #5
 8007b8c:	f101 0714 	add.w	r7, r1, #20
 8007b90:	f109 090a 	add.w	r9, r9, #10
 8007b94:	f1a0 0509 	sub.w	r5, r0, #9
 8007b98:	3606      	adds	r6, #6
 8007b9a:	eb0a 0305 	add.w	r3, sl, r5
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	463a      	mov	r2, r7
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	9400      	str	r4, [sp, #0]
 8007ba6:	9302      	str	r3, [sp, #8]
 8007ba8:	f7fe fb0c 	bl	80061c4 <fill_area>
					fill_area(x+5,x+20-i,y+20,y+20+i,color);
 8007bac:	eba9 0105 	sub.w	r1, r9, r5
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	9400      	str	r4, [sp, #0]
 8007bb4:	463a      	mov	r2, r7
 8007bb6:	4640      	mov	r0, r8
				for(int i=1; i<=15; i++)
 8007bb8:	3501      	adds	r5, #1
					fill_area(x+5,x+20-i,y+20,y+20+i,color);
 8007bba:	f7fe fb03 	bl	80061c4 <fill_area>
				for(int i=1; i<=15; i++)
 8007bbe:	42b5      	cmp	r5, r6
 8007bc0:	d1eb      	bne.n	8007b9a <symbol+0x21e>
		}
 8007bc2:	b007      	add	sp, #28
 8007bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc8:	40020800 	.word	0x40020800
 8007bcc:	40020400 	.word	0x40020400
 8007bd0:	40020000 	.word	0x40020000
				set_pixel(x+i, y, color);
 8007bd4:	b281      	uxth	r1, r0
 8007bd6:	b2ad      	uxth	r5, r5
 8007bd8:	f101 0910 	add.w	r9, r1, #16
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007bdc:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 8007ea4 <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007be0:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8007ea8 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007be4:	4eae      	ldr	r6, [pc, #696]	; (8007ea0 <symbol+0x524>)
				set_pixel(x+i, y, color);
 8007be6:	9104      	str	r1, [sp, #16]
			write_data((color)>>16);
 8007be8:	0c1f      	lsrs	r7, r3, #16
			write_data((color)>>8);
 8007bea:	ea4f 2813 	mov.w	r8, r3, lsr #8
 8007bee:	fa1f f989 	uxth.w	r9, r9
				set_pixel(x+i, y, color);
 8007bf2:	462b      	mov	r3, r5
 8007bf4:	4625      	mov	r5, r4
 8007bf6:	460c      	mov	r4, r1
			set_window(x, x, y, y);
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	9302      	str	r3, [sp, #8]
 8007c00:	f7fe fa34 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007c04:	222c      	movs	r2, #44	; 0x2c
 8007c06:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007c0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007c12:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007c16:	61b2      	str	r2, [r6, #24]
			__asm("nop");
 8007c18:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007c1a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007c1e:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007c22:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007c26:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007c28:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007c2c:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007c30:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007c34:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007c36:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007c38:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007c3c:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007c3e:	f8cb 8014 	str.w	r8, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007c42:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007c46:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007c4a:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007c4c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007c4e:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007c50:	f8cb 5014 	str.w	r5, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007c54:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007c58:	f8ca 1018 	str.w	r1, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007c5c:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007c5e:	bf00      	nop
			for (i=0; i<= l; i++)
 8007c60:	3401      	adds	r4, #1
 8007c62:	b2a4      	uxth	r4, r4
 8007c64:	454c      	cmp	r4, r9
 8007c66:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007c68:	61b2      	str	r2, [r6, #24]
			for (i=0; i<= l; i++)
 8007c6a:	d1c5      	bne.n	8007bf8 <symbol+0x27c>
				draw_hl(x,y+1,15,color);
 8007c6c:	f103 0a01 	add.w	sl, r3, #1
 8007c70:	9e04      	ldr	r6, [sp, #16]
 8007c72:	462c      	mov	r4, r5
 8007c74:	fa1f fa8a 	uxth.w	sl, sl
 8007c78:	461d      	mov	r5, r3
				set_pixel(x+i, y, color);
 8007c7a:	4630      	mov	r0, r6
			for (i=0; i<= l; i++)
 8007c7c:	3601      	adds	r6, #1
				set_pixel(x+i, y, color);
 8007c7e:	4622      	mov	r2, r4
 8007c80:	4651      	mov	r1, sl
			for (i=0; i<= l; i++)
 8007c82:	b2b6      	uxth	r6, r6
				set_pixel(x+i, y, color);
 8007c84:	f7fe faf0 	bl	8006268 <set_pixel>
			for (i=0; i<= l; i++)
 8007c88:	454e      	cmp	r6, r9
 8007c8a:	d1f6      	bne.n	8007c7a <symbol+0x2fe>
				draw_hl(x,y+2,15,color);
 8007c8c:	f105 0a02 	add.w	sl, r5, #2
 8007c90:	9e04      	ldr	r6, [sp, #16]
 8007c92:	fa1f fa8a 	uxth.w	sl, sl
				set_pixel(x+i, y, color);
 8007c96:	4630      	mov	r0, r6
			for (i=0; i<= l; i++)
 8007c98:	3601      	adds	r6, #1
				set_pixel(x+i, y, color);
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4651      	mov	r1, sl
			for (i=0; i<= l; i++)
 8007c9e:	b2b6      	uxth	r6, r6
				set_pixel(x+i, y, color);
 8007ca0:	f7fe fae2 	bl	8006268 <set_pixel>
			for (i=0; i<= l; i++)
 8007ca4:	454e      	cmp	r6, r9
 8007ca6:	d1f6      	bne.n	8007c96 <symbol+0x31a>
				draw_hl(x,y+3,15,color);
 8007ca8:	f105 0a03 	add.w	sl, r5, #3
 8007cac:	9e04      	ldr	r6, [sp, #16]
 8007cae:	fa1f fa8a 	uxth.w	sl, sl
				set_pixel(x+i, y, color);
 8007cb2:	4630      	mov	r0, r6
			for (i=0; i<= l; i++)
 8007cb4:	3601      	adds	r6, #1
				set_pixel(x+i, y, color);
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	4651      	mov	r1, sl
			for (i=0; i<= l; i++)
 8007cba:	b2b6      	uxth	r6, r6
				set_pixel(x+i, y, color);
 8007cbc:	f7fe fad4 	bl	8006268 <set_pixel>
			for (i=0; i<= l; i++)
 8007cc0:	454e      	cmp	r6, r9
 8007cc2:	d1f6      	bne.n	8007cb2 <symbol+0x336>
				draw_vl(x+8,y-7,16,color);
 8007cc4:	9b04      	ldr	r3, [sp, #16]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007cc6:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8007ea4 <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007cca:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 8007ea8 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007cce:	4e74      	ldr	r6, [pc, #464]	; (8007ea0 <symbol+0x524>)
				draw_vl(x+8,y-7,16,color);
 8007cd0:	f1a5 0907 	sub.w	r9, r5, #7
 8007cd4:	fa1f f989 	uxth.w	r9, r9
 8007cd8:	f103 0108 	add.w	r1, r3, #8
 8007cdc:	350a      	adds	r5, #10
 8007cde:	464b      	mov	r3, r9
 8007ce0:	b289      	uxth	r1, r1
 8007ce2:	e9cd 8402 	strd	r8, r4, [sp, #8]
 8007ce6:	f8cd 9014 	str.w	r9, [sp, #20]
 8007cea:	b2ad      	uxth	r5, r5
 8007cec:	4689      	mov	r9, r1
 8007cee:	4698      	mov	r8, r3
			set_window(x, x, y, y);
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	4648      	mov	r0, r9
 8007cf4:	4643      	mov	r3, r8
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	f7fe f9b8 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007cfc:	222c      	movs	r2, #44	; 0x2c
 8007cfe:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d02:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d0a:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d0e:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007d10:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007d12:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007d16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d1a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007d1e:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007d20:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007d24:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007d26:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d2a:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007d2c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007d2e:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007d32:	9c02      	ldr	r4, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007d34:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007d36:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007d3a:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007d3c:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d40:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007d42:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007d44:	9c03      	ldr	r4, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007d46:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007d48:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007d4c:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007d4e:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d52:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007d54:	bf00      	nop
			for (i=0; i<= l; i++)
 8007d56:	f108 0301 	add.w	r3, r8, #1
 8007d5a:	fa1f f883 	uxth.w	r8, r3
 8007d5e:	4545      	cmp	r5, r8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007d60:	61b0      	str	r0, [r6, #24]
			for (i=0; i<= l; i++)
 8007d62:	d1c5      	bne.n	8007cf0 <symbol+0x374>
				draw_vl(x+9,y-7,16,color);
 8007d64:	e9dd 3904 	ldrd	r3, r9, [sp, #16]
 8007d68:	f103 0109 	add.w	r1, r3, #9
 8007d6c:	b289      	uxth	r1, r1
 8007d6e:	464b      	mov	r3, r9
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007d70:	f8df b130 	ldr.w	fp, [pc, #304]	; 8007ea4 <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007d74:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007ea8 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d78:	4e49      	ldr	r6, [pc, #292]	; (8007ea0 <symbol+0x524>)
				draw_vl(x+9,y-7,16,color);
 8007d7a:	4689      	mov	r9, r1
 8007d7c:	4698      	mov	r8, r3
			set_window(x, x, y, y);
 8007d7e:	4642      	mov	r2, r8
 8007d80:	4648      	mov	r0, r9
 8007d82:	4643      	mov	r3, r8
 8007d84:	4649      	mov	r1, r9
 8007d86:	f7fe f971 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007d8a:	222c      	movs	r2, #44	; 0x2c
 8007d8c:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d90:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d98:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007d9c:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007d9e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007da0:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007da8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007dac:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007dae:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007db2:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007db4:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007db8:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007dba:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007dbc:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007dc0:	9c02      	ldr	r4, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007dc2:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007dc4:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007dc8:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007dca:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007dce:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007dd0:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007dd2:	9c03      	ldr	r4, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007dd4:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007dd6:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007dda:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007ddc:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007de0:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007de2:	bf00      	nop
			for (i=0; i<= l; i++)
 8007de4:	f108 0301 	add.w	r3, r8, #1
 8007de8:	fa1f f883 	uxth.w	r8, r3
 8007dec:	4545      	cmp	r5, r8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007dee:	61b0      	str	r0, [r6, #24]
			for (i=0; i<= l; i++)
 8007df0:	d1c5      	bne.n	8007d7e <symbol+0x402>
				draw_vl(x+6,y-7,16,color);
 8007df2:	e9dd 3904 	ldrd	r3, r9, [sp, #16]
 8007df6:	1d99      	adds	r1, r3, #6
 8007df8:	b289      	uxth	r1, r1
 8007dfa:	464b      	mov	r3, r9
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007dfc:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8007ea4 <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007e00:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8007ea8 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e04:	4e26      	ldr	r6, [pc, #152]	; (8007ea0 <symbol+0x524>)
				draw_vl(x+6,y-7,16,color);
 8007e06:	4689      	mov	r9, r1
 8007e08:	4698      	mov	r8, r3
			set_window(x, x, y, y);
 8007e0a:	4642      	mov	r2, r8
 8007e0c:	4648      	mov	r0, r9
 8007e0e:	4643      	mov	r3, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7fe f92b 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007e16:	222c      	movs	r2, #44	; 0x2c
 8007e18:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e1c:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007e20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e24:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e28:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007e2a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007e2c:	f44f 4060 	mov.w	r0, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007e30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e34:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007e38:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007e3a:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007e3e:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007e40:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e44:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007e46:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007e48:	f44f 4020 	mov.w	r0, #40960	; 0xa000
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007e4c:	9c02      	ldr	r4, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007e4e:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007e50:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007e54:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007e56:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e5a:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007e5c:	bf00      	nop
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007e5e:	9c03      	ldr	r4, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007e60:	61b0      	str	r0, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007e62:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007e66:	61b1      	str	r1, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007e68:	f8ca 2018 	str.w	r2, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e6c:	61b3      	str	r3, [r6, #24]
			__asm("nop");
 8007e6e:	bf00      	nop
			for (i=0; i<= l; i++)
 8007e70:	f108 0301 	add.w	r3, r8, #1
 8007e74:	fa1f f883 	uxth.w	r8, r3
 8007e78:	4545      	cmp	r5, r8
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007e7a:	61b0      	str	r0, [r6, #24]
			for (i=0; i<= l; i++)
 8007e7c:	d1c5      	bne.n	8007e0a <symbol+0x48e>
				draw_vl(x+7,y-7,16,color);
 8007e7e:	e9dd 8402 	ldrd	r8, r4, [sp, #8]
 8007e82:	9904      	ldr	r1, [sp, #16]
 8007e84:	f8dd 9014 	ldr.w	r9, [sp, #20]
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007e88:	f8df b018 	ldr.w	fp, [pc, #24]	; 8007ea4 <symbol+0x528>
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007e8c:	f8df a018 	ldr.w	sl, [pc, #24]	; 8007ea8 <symbol+0x52c>
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e90:	4e03      	ldr	r6, [pc, #12]	; (8007ea0 <symbol+0x524>)
 8007e92:	4623      	mov	r3, r4
				draw_vl(x+7,y-7,16,color);
 8007e94:	3107      	adds	r1, #7
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e96:	4644      	mov	r4, r8
				draw_vl(x+7,y-7,16,color);
 8007e98:	b289      	uxth	r1, r1
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007e9a:	4698      	mov	r8, r3
 8007e9c:	e006      	b.n	8007eac <symbol+0x530>
 8007e9e:	bf00      	nop
 8007ea0:	40020800 	.word	0x40020800
 8007ea4:	40020000 	.word	0x40020000
 8007ea8:	40020400 	.word	0x40020400
			set_window(x, x, y, y);
 8007eac:	464b      	mov	r3, r9
 8007eae:	464a      	mov	r2, r9
 8007eb0:	4608      	mov	r0, r1
 8007eb2:	9102      	str	r1, [sp, #8]
 8007eb4:	f7fe f8da 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8007eb8:	222c      	movs	r2, #44	; 0x2c
 8007eba:	f8cb 2014 	str.w	r2, [fp, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007ec2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007ec6:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007eca:	61b2      	str	r2, [r6, #24]
			__asm("nop");
 8007ecc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007ece:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007ed2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007ed6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007eda:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007edc:	f8cb 7014 	str.w	r7, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007ee0:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007ee4:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007ee8:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007eea:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007eec:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8007ef0:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007ef2:	f8cb 4014 	str.w	r4, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007ef6:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007efa:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007efe:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007f00:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007f02:	61b2      	str	r2, [r6, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8007f04:	f8cb 8014 	str.w	r8, [fp, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8007f08:	f8c6 c018 	str.w	ip, [r6, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8007f0c:	f8ca 3018 	str.w	r3, [sl, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8007f10:	61b0      	str	r0, [r6, #24]
			__asm("nop");
 8007f12:	bf00      	nop
			for (i=0; i<= l; i++)
 8007f14:	f109 0901 	add.w	r9, r9, #1
 8007f18:	fa1f f989 	uxth.w	r9, r9
 8007f1c:	454d      	cmp	r5, r9
 8007f1e:	9902      	ldr	r1, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8007f20:	61b2      	str	r2, [r6, #24]
			for (i=0; i<= l; i++)
 8007f22:	d1c3      	bne.n	8007eac <symbol+0x530>
		}
 8007f24:	b007      	add	sp, #28
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(sym == '<')   /// for LEFT Arrow  symbol
 8007f2a:	2a3c      	cmp	r2, #60	; 0x3c
 8007f2c:	d144      	bne.n	8007fb8 <symbol+0x63c>
				draw_line(x, y, x+9, y-9, color);
 8007f2e:	f100 0709 	add.w	r7, r0, #9
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	463a      	mov	r2, r7
 8007f36:	f1a1 0309 	sub.w	r3, r1, #9
				draw_line(x+1, y, x+9, y-8, color);
 8007f3a:	f106 0a01 	add.w	sl, r6, #1
				draw_line(x, y, x+9, y-9, color);
 8007f3e:	f7ff f817 	bl	8006f70 <draw_line>
				draw_line(x+2, y, x+9, y-7, color);
 8007f42:	f106 0902 	add.w	r9, r6, #2
				draw_line(x+1, y, x+9, y-8, color);
 8007f46:	f1a5 0308 	sub.w	r3, r5, #8
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4650      	mov	r0, sl
 8007f50:	9400      	str	r4, [sp, #0]
 8007f52:	f7ff f80d 	bl	8006f70 <draw_line>
				draw_line(x+2, y, x+9, y-7, color);
 8007f56:	9400      	str	r4, [sp, #0]
 8007f58:	1feb      	subs	r3, r5, #7
 8007f5a:	463a      	mov	r2, r7
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	4648      	mov	r0, r9
 8007f60:	f7ff f806 	bl	8006f70 <draw_line>
				draw_line(x+3, y, x+9, y-6, color);
 8007f64:	f106 0803 	add.w	r8, r6, #3
 8007f68:	9400      	str	r4, [sp, #0]
				draw_line(x-3, y, x-9, y-6, color);
 8007f6a:	1fab      	subs	r3, r5, #6
 8007f6c:	463a      	mov	r2, r7
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4640      	mov	r0, r8
 8007f72:	f7fe fffd 	bl	8006f70 <draw_line>
				draw_line(x, y, x-9, y+9, color);
 8007f76:	4630      	mov	r0, r6
 8007f78:	f105 0309 	add.w	r3, r5, #9
 8007f7c:	463a      	mov	r2, r7
 8007f7e:	4629      	mov	r1, r5
 8007f80:	9400      	str	r4, [sp, #0]
 8007f82:	f7fe fff5 	bl	8006f70 <draw_line>
				draw_line(x-1, y, x-9, y+8, color);
 8007f86:	4650      	mov	r0, sl
 8007f88:	f105 0308 	add.w	r3, r5, #8
 8007f8c:	463a      	mov	r2, r7
 8007f8e:	4629      	mov	r1, r5
 8007f90:	9400      	str	r4, [sp, #0]
 8007f92:	f7fe ffed 	bl	8006f70 <draw_line>
				draw_line(x-2, y, x-9, y+7, color);
 8007f96:	4648      	mov	r0, r9
 8007f98:	1deb      	adds	r3, r5, #7
 8007f9a:	463a      	mov	r2, r7
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	9400      	str	r4, [sp, #0]
 8007fa0:	f7fe ffe6 	bl	8006f70 <draw_line>
				draw_line(x-3, y, x-9, y+6, color);
 8007fa4:	9400      	str	r4, [sp, #0]
 8007fa6:	1dab      	adds	r3, r5, #6
 8007fa8:	463a      	mov	r2, r7
 8007faa:	4629      	mov	r1, r5
 8007fac:	4640      	mov	r0, r8
 8007fae:	f7fe ffdf 	bl	8006f70 <draw_line>
		}
 8007fb2:	b007      	add	sp, #28
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(sym == '>')   /// for RIGHT Arrow  symbol
 8007fb8:	2a3e      	cmp	r2, #62	; 0x3e
 8007fba:	d11e      	bne.n	8007ffa <symbol+0x67e>
        draw_line(x, y, x-9, y-9, color);
 8007fbc:	f1a0 0709 	sub.w	r7, r0, #9
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	f1a1 0309 	sub.w	r3, r1, #9
				draw_line(x-1, y, x-9, y-8, color);
 8007fc8:	f106 3aff 	add.w	sl, r6, #4294967295
        draw_line(x, y, x-9, y-9, color);
 8007fcc:	f7fe ffd0 	bl	8006f70 <draw_line>
				draw_line(x-2, y, x-9, y-7, color);
 8007fd0:	f1a6 0902 	sub.w	r9, r6, #2
				draw_line(x-1, y, x-9, y-8, color);
 8007fd4:	f1a5 0308 	sub.w	r3, r5, #8
 8007fd8:	463a      	mov	r2, r7
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4650      	mov	r0, sl
 8007fde:	9400      	str	r4, [sp, #0]
 8007fe0:	f7fe ffc6 	bl	8006f70 <draw_line>
				draw_line(x-2, y, x-9, y-7, color);
 8007fe4:	9400      	str	r4, [sp, #0]
 8007fe6:	1feb      	subs	r3, r5, #7
 8007fe8:	463a      	mov	r2, r7
 8007fea:	4629      	mov	r1, r5
 8007fec:	4648      	mov	r0, r9
 8007fee:	f7fe ffbf 	bl	8006f70 <draw_line>
				draw_line(x-3, y, x-9, y-6, color);
 8007ff2:	f1a6 0803 	sub.w	r8, r6, #3
 8007ff6:	9400      	str	r4, [sp, #0]
 8007ff8:	e7b7      	b.n	8007f6a <symbol+0x5ee>
			if(sym == '^')   /// for UP Arrow  symbol
 8007ffa:	2a5e      	cmp	r2, #94	; 0x5e
 8007ffc:	f47f adb9 	bne.w	8007b72 <symbol+0x1f6>
        draw_line(x, y, x+9, y+9, color);
 8008000:	f101 0709 	add.w	r7, r1, #9
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	f100 0209 	add.w	r2, r0, #9
 800800a:	463b      	mov	r3, r7
				draw_line(x, y+1, x+8, y+9, color);
 800800c:	f105 0a01 	add.w	sl, r5, #1
        draw_line(x, y, x+9, y+9, color);
 8008010:	f7fe ffae 	bl	8006f70 <draw_line>
				draw_line(x, y+2, x+7, y+9, color);
 8008014:	f105 0902 	add.w	r9, r5, #2
				draw_line(x, y+1, x+8, y+9, color);
 8008018:	463b      	mov	r3, r7
 800801a:	f106 0208 	add.w	r2, r6, #8
 800801e:	4651      	mov	r1, sl
 8008020:	4630      	mov	r0, r6
 8008022:	9400      	str	r4, [sp, #0]
 8008024:	f7fe ffa4 	bl	8006f70 <draw_line>
				draw_line(x, y+3, x+6, y+9, color);
 8008028:	f105 0803 	add.w	r8, r5, #3
				draw_line(x, y+2, x+7, y+9, color);
 800802c:	463b      	mov	r3, r7
 800802e:	1df2      	adds	r2, r6, #7
 8008030:	4649      	mov	r1, r9
 8008032:	4630      	mov	r0, r6
 8008034:	9400      	str	r4, [sp, #0]
 8008036:	f7fe ff9b 	bl	8006f70 <draw_line>
				draw_line(x, y+3, x+6, y+9, color);
 800803a:	463b      	mov	r3, r7
 800803c:	1db2      	adds	r2, r6, #6
 800803e:	4641      	mov	r1, r8
 8008040:	4630      	mov	r0, r6
 8008042:	9400      	str	r4, [sp, #0]
 8008044:	f7fe ff94 	bl	8006f70 <draw_line>
				draw_line(x, y, x-9, y+9, color);
 8008048:	4629      	mov	r1, r5
 800804a:	463b      	mov	r3, r7
 800804c:	f1a6 0209 	sub.w	r2, r6, #9
 8008050:	4630      	mov	r0, r6
 8008052:	9400      	str	r4, [sp, #0]
 8008054:	f7fe ff8c 	bl	8006f70 <draw_line>
				draw_line(x, y+1, x-8, y+9, color);
 8008058:	4651      	mov	r1, sl
 800805a:	463b      	mov	r3, r7
 800805c:	f1a6 0208 	sub.w	r2, r6, #8
 8008060:	4630      	mov	r0, r6
 8008062:	9400      	str	r4, [sp, #0]
 8008064:	f7fe ff84 	bl	8006f70 <draw_line>
				draw_line(x, y+2, x-7, y+9, color);
 8008068:	4649      	mov	r1, r9
 800806a:	463b      	mov	r3, r7
 800806c:	1ff2      	subs	r2, r6, #7
 800806e:	4630      	mov	r0, r6
 8008070:	9400      	str	r4, [sp, #0]
 8008072:	f7fe ff7d 	bl	8006f70 <draw_line>
				draw_line(x, y+3, x-6, y+9, color);
 8008076:	9400      	str	r4, [sp, #0]
 8008078:	463b      	mov	r3, r7
 800807a:	1fb2      	subs	r2, r6, #6
 800807c:	4641      	mov	r1, r8
 800807e:	4630      	mov	r0, r6
 8008080:	f7fe ff76 	bl	8006f70 <draw_line>
		}
 8008084:	e575      	b.n	8007b72 <symbol+0x1f6>
 8008086:	bf00      	nop

08008088 <fill_roundrect2>:
			draw_roundrect(x,x+len,y,y+15,color);
			fill_area(x+2,x+len-2,y+2,y+13,0x00627d);
		}
			
void fill_roundrect2(u32 x1,u32 x2,u32 y1,u32 y2,u32 fill_color)
{
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	b08b      	sub	sp, #44	; 0x2c
 800808e:	461c      	mov	r4, r3
 8008090:	9306      	str	r3, [sp, #24]
	if ((x2-x1)>4 && (y2-y1)>4)
 8008092:	1a0b      	subs	r3, r1, r0
 8008094:	2b04      	cmp	r3, #4
 8008096:	f240 813b 	bls.w	8008310 <fill_roundrect2+0x288>
 800809a:	1aa3      	subs	r3, r4, r2
 800809c:	2b04      	cmp	r3, #4
 800809e:	f240 8137 	bls.w	8008310 <fill_roundrect2+0x288>
			case 0:
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
				draw_hl(x1+2, y2-i, x2-x1-4,fill_color);
				break;
			case 1:
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 80080a2:	b280      	uxth	r0, r0
		for (int i=0; i<((y2-y1)/2)+1; i++)
 80080a4:	085b      	lsrs	r3, r3, #1
 80080a6:	3301      	adds	r3, #1
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 80080a8:	1a09      	subs	r1, r1, r0
 80080aa:	b289      	uxth	r1, r1
		for (int i=0; i<((y2-y1)/2)+1; i++)
 80080ac:	9309      	str	r3, [sp, #36]	; 0x24
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 80080ae:	b293      	uxth	r3, r2
 80080b0:	ee07 3a90 	vmov	s15, r3
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 80080b4:	1e8b      	subs	r3, r1, #2
			for (i=0; i<= l; i++)
 80080b6:	b21b      	sxth	r3, r3
 80080b8:	9303      	str	r3, [sp, #12]
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 80080ba:	1f0b      	subs	r3, r1, #4
			for (i=0; i<= l; i++)
 80080bc:	b21b      	sxth	r3, r3
 80080be:	9302      	str	r3, [sp, #8]
				draw_hl(x1+1, y2-i, x2-x1-2,fill_color);
				break;
			default:
				draw_hl(x1, y1+i, x2-x1,fill_color);
 80080c0:	b20b      	sxth	r3, r1
 80080c2:	9307      	str	r3, [sp, #28]
			write_data((color)>>16);
 80080c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80080c6:	4e94      	ldr	r6, [pc, #592]	; (8008318 <fill_roundrect2+0x290>)
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80080c8:	4d94      	ldr	r5, [pc, #592]	; (800831c <fill_roundrect2+0x294>)
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80080ca:	4c95      	ldr	r4, [pc, #596]	; (8008320 <fill_roundrect2+0x298>)
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 80080cc:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 80080d0:	9001      	str	r0, [sp, #4]
			write_data((color)>>16);
 80080d2:	ea4f 4813 	mov.w	r8, r3, lsr #16
			write_data((color)>>8);
 80080d6:	0a1f      	lsrs	r7, r3, #8
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 80080d8:	2300      	movs	r3, #0
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	463b      	mov	r3, r7
 80080de:	4647      	mov	r7, r8
 80080e0:	4698      	mov	r8, r3
 80080e2:	9b05      	ldr	r3, [sp, #20]
			switch(i)
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 8092 	beq.w	800820e <fill_roundrect2+0x186>
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	f000 811a 	beq.w	8008324 <fill_roundrect2+0x29c>
				draw_hl(x1, y1+i, x2-x1,fill_color);
 80080f0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80080f4:	9308      	str	r3, [sp, #32]
 80080f6:	ee17 2a90 	vmov	r2, s15
 80080fa:	4413      	add	r3, r2
			for (i=0; i<= l; i++)
 80080fc:	9a07      	ldr	r2, [sp, #28]
 80080fe:	2a00      	cmp	r2, #0
				draw_hl(x1, y1+i, x2-x1,fill_color);
 8008100:	b29b      	uxth	r3, r3
			for (i=0; i<= l; i++)
 8008102:	db77      	blt.n	80081f4 <fill_roundrect2+0x16c>
 8008104:	f102 0b01 	add.w	fp, r2, #1
 8008108:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 800810c:	9a01      	ldr	r2, [sp, #4]
			set_window(x, x, y, y);
 800810e:	9304      	str	r3, [sp, #16]
				set_pixel(x+i, y, color);
 8008110:	eb02 010a 	add.w	r1, r2, sl
 8008114:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8008116:	461a      	mov	r2, r3
 8008118:	4608      	mov	r0, r1
 800811a:	f7fd ffa7 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 800811e:	222c      	movs	r2, #44	; 0x2c
 8008120:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008122:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008126:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800812a:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800812c:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 800812e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008130:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008134:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008138:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 800813c:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800813e:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008140:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008144:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008146:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8008148:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800814a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800814e:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008150:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008154:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008158:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800815a:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800815c:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800815e:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008160:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008164:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008168:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800816a:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800816c:	bf00      	nop
			for (i=0; i<= l; i++)
 800816e:	f10a 0a01 	add.w	sl, sl, #1
 8008172:	45da      	cmp	sl, fp
 8008174:	9b04      	ldr	r3, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008176:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8008178:	d1c8      	bne.n	800810c <fill_roundrect2+0x84>
				draw_hl(x1, y2-i, x2-x1,fill_color);
 800817a:	9b06      	ldr	r3, [sp, #24]
 800817c:	9a08      	ldr	r2, [sp, #32]
 800817e:	1a9a      	subs	r2, r3, r2
 8008180:	b292      	uxth	r2, r2
 8008182:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 8008186:	9b01      	ldr	r3, [sp, #4]
			set_window(x, x, y, y);
 8008188:	9204      	str	r2, [sp, #16]
				set_pixel(x+i, y, color);
 800818a:	eb03 010a 	add.w	r1, r3, sl
 800818e:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 8008190:	4613      	mov	r3, r2
 8008192:	4608      	mov	r0, r1
 8008194:	f7fd ff6a 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8008198:	232c      	movs	r3, #44	; 0x2c
 800819a:	6173      	str	r3, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800819c:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80081a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80081a4:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80081a6:	61a3      	str	r3, [r4, #24]
			__asm("nop");
 80081a8:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80081aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80081ae:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80081b2:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80081b6:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80081b8:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80081ba:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80081be:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80081c0:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80081c2:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80081c4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80081c8:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80081ca:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80081ce:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80081d2:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80081d4:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80081d6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80081d8:	61a3      	str	r3, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80081da:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80081de:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80081e2:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80081e4:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80081e6:	bf00      	nop
			for (i=0; i<= l; i++)
 80081e8:	f10a 0a01 	add.w	sl, sl, #1
 80081ec:	45da      	cmp	sl, fp
 80081ee:	9a04      	ldr	r2, [sp, #16]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80081f0:	61a3      	str	r3, [r4, #24]
			for (i=0; i<= l; i++)
 80081f2:	d1c8      	bne.n	8008186 <fill_roundrect2+0xfe>
		for (int i=0; i<((y2-y1)/2)+1; i++)
 80081f4:	9b05      	ldr	r3, [sp, #20]
 80081f6:	f103 0a01 	add.w	sl, r3, #1
 80081fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fc:	459a      	cmp	sl, r3
 80081fe:	f080 8087 	bcs.w	8008310 <fill_roundrect2+0x288>
 8008202:	4653      	mov	r3, sl
			switch(i)
 8008204:	f8cd a014 	str.w	sl, [sp, #20]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f47f af6e 	bne.w	80080ea <fill_roundrect2+0x62>
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	f103 0b02 	add.w	fp, r3, #2
			for (i=0; i<= l; i++)
 8008214:	9b02      	ldr	r3, [sp, #8]
 8008216:	2b00      	cmp	r3, #0
				draw_hl(x1+2, y1+i, x2-x1-4,fill_color);
 8008218:	fa1f fb8b 	uxth.w	fp, fp
			for (i=0; i<= l; i++)
 800821c:	db75      	blt.n	800830a <fill_roundrect2+0x282>
 800821e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8008222:	ee17 3a90 	vmov	r3, s15
				set_pixel(x+i, y, color);
 8008226:	eb0b 010a 	add.w	r1, fp, sl
 800822a:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 800822c:	461a      	mov	r2, r3
 800822e:	4608      	mov	r0, r1
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	f7fd ff1b 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8008236:	222c      	movs	r2, #44	; 0x2c
 8008238:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800823a:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800823e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008242:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008244:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8008246:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008248:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800824c:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008250:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008254:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008256:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008258:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800825c:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800825e:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8008260:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008262:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8008266:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008268:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800826c:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008270:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008272:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8008274:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008276:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008278:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800827c:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008280:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008282:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8008284:	bf00      	nop
			for (i=0; i<= l; i++)
 8008286:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008288:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 800828a:	f10a 0a01 	add.w	sl, sl, #1
 800828e:	459a      	cmp	sl, r3
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	ddc8      	ble.n	8008226 <fill_roundrect2+0x19e>
				draw_hl(x1+2, y2-i, x2-x1-4,fill_color);
 8008294:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8008298:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 800829c:	eb0b 010a 	add.w	r1, fp, sl
 80082a0:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 80082a2:	461a      	mov	r2, r3
 80082a4:	4608      	mov	r0, r1
 80082a6:	9304      	str	r3, [sp, #16]
 80082a8:	f7fd fee0 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80082ac:	222c      	movs	r2, #44	; 0x2c
 80082ae:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80082b0:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80082b4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80082b8:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80082ba:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80082bc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80082be:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80082c2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80082c6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80082ca:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80082cc:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80082ce:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80082d2:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80082d4:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80082d6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80082d8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80082dc:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80082de:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80082e2:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80082e6:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80082e8:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80082ea:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80082ec:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80082ee:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80082f2:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80082f6:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80082f8:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80082fa:	bf00      	nop
			for (i=0; i<= l; i++)
 80082fc:	9b02      	ldr	r3, [sp, #8]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80082fe:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8008300:	f10a 0a01 	add.w	sl, sl, #1
 8008304:	459a      	cmp	sl, r3
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	ddc8      	ble.n	800829c <fill_roundrect2+0x214>
 800830a:	f04f 0a01 	mov.w	sl, #1
 800830e:	e778      	b.n	8008202 <fill_roundrect2+0x17a>
			}
		}
	}
}
 8008310:	b00b      	add	sp, #44	; 0x2c
 8008312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008316:	bf00      	nop
 8008318:	40020000 	.word	0x40020000
 800831c:	40020400 	.word	0x40020400
 8008320:	40020800 	.word	0x40020800
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 8008324:	9b01      	ldr	r3, [sp, #4]
			for (i=0; i<= l; i++)
 8008326:	9a03      	ldr	r2, [sp, #12]
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 8008328:	f103 0b01 	add.w	fp, r3, #1
 800832c:	ee17 3a90 	vmov	r3, s15
			for (i=0; i<= l; i++)
 8008330:	2a00      	cmp	r2, #0
				draw_hl(x1+1, y1+i, x2-x1-2,fill_color);
 8008332:	f103 0301 	add.w	r3, r3, #1
 8008336:	fa1f fb8b 	uxth.w	fp, fp
 800833a:	b29b      	uxth	r3, r3
			for (i=0; i<= l; i++)
 800833c:	bfa8      	it	ge
 800833e:	f04f 0a00 	movge.w	sl, #0
 8008342:	db72      	blt.n	800842a <fill_roundrect2+0x3a2>
				set_pixel(x+i, y, color);
 8008344:	eb0b 010a 	add.w	r1, fp, sl
 8008348:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 800834a:	461a      	mov	r2, r3
 800834c:	4608      	mov	r0, r1
 800834e:	9304      	str	r3, [sp, #16]
 8008350:	f7fd fe8c 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 8008354:	222c      	movs	r2, #44	; 0x2c
 8008356:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008358:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800835c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008360:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008362:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 8008364:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008366:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800836a:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800836e:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008372:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008374:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008376:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800837a:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 800837c:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800837e:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008380:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8008384:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008386:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800838a:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800838e:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008390:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 8008392:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 8008394:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 8008396:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 800839a:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 800839e:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80083a0:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80083a2:	bf00      	nop
			for (i=0; i<= l; i++)
 80083a4:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80083a6:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 80083a8:	f10a 0a01 	add.w	sl, sl, #1
 80083ac:	459a      	cmp	sl, r3
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	ddc8      	ble.n	8008344 <fill_roundrect2+0x2bc>
				draw_hl(x1+1, y2-i, x2-x1-2,fill_color);
 80083b2:	9b06      	ldr	r3, [sp, #24]
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f04f 0a00 	mov.w	sl, #0
				set_pixel(x+i, y, color);
 80083bc:	eb0b 010a 	add.w	r1, fp, sl
 80083c0:	b289      	uxth	r1, r1
			set_window(x, x, y, y);
 80083c2:	461a      	mov	r2, r3
 80083c4:	4608      	mov	r0, r1
 80083c6:	9304      	str	r3, [sp, #16]
 80083c8:	f7fd fe50 	bl	800606c <set_window>
			SSD1963_DATAPORT->ODR  = commandToWrite;
 80083cc:	222c      	movs	r2, #44	; 0x2c
 80083ce:	6172      	str	r2, [r6, #20]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80083d0:	f44f 7180 	mov.w	r1, #256	; 0x100
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80083d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80083d8:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80083da:	61a2      	str	r2, [r4, #24]
			__asm("nop");
 80083dc:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80083de:	f44f 4260 	mov.w	r2, #57344	; 0xe000
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80083e2:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80083e6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_RS | SSD1963_PIN_CS | SSD1963_PIN_WR);
 80083ea:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80083ec:	6177      	str	r7, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 80083ee:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 80083f2:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 80083f4:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 80083f6:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 80083f8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80083fc:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 80083fe:	f8c6 8014 	str.w	r8, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008402:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008406:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008408:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800840a:	bf00      	nop
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800840c:	61a2      	str	r2, [r4, #24]
			SSD1963_DATAPORT->ODR  = dataToWrite;
 800840e:	f8c6 9014 	str.w	r9, [r6, #20]
			SSD1963_CTRLPORT1->BSRR = SSD1963_PIN_RS;
 8008412:	f8c4 c018 	str.w	ip, [r4, #24]
			SSD1963_CTRLPORT2->BSRR = SSD1963_PIN_RD;
 8008416:	61a9      	str	r1, [r5, #24]
			SSD1963_CTRLPORT1->BSRR  = (SSD1963_PIN_CS | SSD1963_PIN_WR)<<16;
 8008418:	61a0      	str	r0, [r4, #24]
			__asm("nop");
 800841a:	bf00      	nop
			for (i=0; i<= l; i++)
 800841c:	9b03      	ldr	r3, [sp, #12]
			SSD1963_CTRLPORT1->BSRR = (SSD1963_PIN_CS | SSD1963_PIN_WR);
 800841e:	61a2      	str	r2, [r4, #24]
			for (i=0; i<= l; i++)
 8008420:	f10a 0a01 	add.w	sl, sl, #1
 8008424:	459a      	cmp	sl, r3
 8008426:	9b04      	ldr	r3, [sp, #16]
 8008428:	ddc8      	ble.n	80083bc <fill_roundrect2+0x334>
 800842a:	f04f 0a02 	mov.w	sl, #2
 800842e:	e6e8      	b.n	8008202 <fill_roundrect2+0x17a>

08008430 <symbol_dwn_Arrow>:
   fill_circle(x, y, size, circle_colour);
	 fill_RightTriangle( x-(button_size/6),  y-(button_size/2),  button_size,  Button_colour );
 }

void symbol_dwn_Arrow (u32 x, u32 y, u32 color)   /// for DOWN Arrow  symbol
{
 8008430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008434:	b082      	sub	sp, #8
		draw_line(x, y, x+9, y-9, color);
 8008436:	f1a1 0609 	sub.w	r6, r1, #9
{
 800843a:	460f      	mov	r7, r1
 800843c:	4604      	mov	r4, r0
 800843e:	4615      	mov	r5, r2
		draw_line(x, y, x+9, y-9, color);
 8008440:	9200      	str	r2, [sp, #0]
 8008442:	4633      	mov	r3, r6
 8008444:	f100 0209 	add.w	r2, r0, #9
		draw_line(x, y-1, x+8, y-9, color);
 8008448:	f107 3aff 	add.w	sl, r7, #4294967295
		draw_line(x, y, x+9, y-9, color);
 800844c:	f7fe fd90 	bl	8006f70 <draw_line>
		draw_line(x, y-2, x+7, y-9, color);
 8008450:	f1a7 0902 	sub.w	r9, r7, #2
		draw_line(x, y-1, x+8, y-9, color);
 8008454:	4633      	mov	r3, r6
 8008456:	f104 0208 	add.w	r2, r4, #8
 800845a:	4651      	mov	r1, sl
 800845c:	4620      	mov	r0, r4
 800845e:	9500      	str	r5, [sp, #0]
 8008460:	f7fe fd86 	bl	8006f70 <draw_line>
		draw_line(x, y-3, x+6, y-9, color);
 8008464:	f1a7 0803 	sub.w	r8, r7, #3
		draw_line(x, y-2, x+7, y-9, color);
 8008468:	4633      	mov	r3, r6
 800846a:	1de2      	adds	r2, r4, #7
 800846c:	4649      	mov	r1, r9
 800846e:	4620      	mov	r0, r4
 8008470:	9500      	str	r5, [sp, #0]
 8008472:	f7fe fd7d 	bl	8006f70 <draw_line>
		draw_line(x, y-3, x+6, y-9, color);
 8008476:	4633      	mov	r3, r6
 8008478:	1da2      	adds	r2, r4, #6
 800847a:	4641      	mov	r1, r8
 800847c:	4620      	mov	r0, r4
 800847e:	9500      	str	r5, [sp, #0]
 8008480:	f7fe fd76 	bl	8006f70 <draw_line>

		draw_line(x, y, x-9, y-9, color);
 8008484:	4639      	mov	r1, r7
 8008486:	4633      	mov	r3, r6
 8008488:	f1a4 0209 	sub.w	r2, r4, #9
 800848c:	4620      	mov	r0, r4
 800848e:	9500      	str	r5, [sp, #0]
 8008490:	f7fe fd6e 	bl	8006f70 <draw_line>
		draw_line(x, y-1, x-8, y-9, color);
 8008494:	4651      	mov	r1, sl
 8008496:	4633      	mov	r3, r6
 8008498:	f1a4 0208 	sub.w	r2, r4, #8
 800849c:	4620      	mov	r0, r4
 800849e:	9500      	str	r5, [sp, #0]
 80084a0:	f7fe fd66 	bl	8006f70 <draw_line>
		draw_line(x, y-2, x-7, y-9, color);
 80084a4:	4649      	mov	r1, r9
 80084a6:	4633      	mov	r3, r6
 80084a8:	1fe2      	subs	r2, r4, #7
 80084aa:	4620      	mov	r0, r4
 80084ac:	9500      	str	r5, [sp, #0]
 80084ae:	f7fe fd5f 	bl	8006f70 <draw_line>
		draw_line(x, y-3, x-6, y-9, color);
 80084b2:	9500      	str	r5, [sp, #0]
 80084b4:	4633      	mov	r3, r6
 80084b6:	1fa2      	subs	r2, r4, #6
 80084b8:	4641      	mov	r1, r8
 80084ba:	4620      	mov	r0, r4
 80084bc:	f7fe fd58 	bl	8006f70 <draw_line>
}
 80084c0:	b002      	add	sp, #8
 80084c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c6:	bf00      	nop

080084c8 <Front_screen>:

//########################   FRONT_SCREEN  ###################################


void Front_screen(void)
{
 80084c8:	b500      	push	{lr}
	Set_Font(&Font16x26);
 80084ca:	4809      	ldr	r0, [pc, #36]	; (80084f0 <Front_screen+0x28>)
{
 80084cc:	b083      	sub	sp, #12
	Set_Font(&Font16x26);
 80084ce:	f7fd fdc7 	bl	8006060 <Set_Font>
	fill_screen(PURPLE);
 80084d2:	4808      	ldr	r0, [pc, #32]	; (80084f4 <Front_screen+0x2c>)
 80084d4:	f7fd fe30 	bl	8006138 <fill_screen>
	//print_string(360,250,"09:00 AM",WHITE);
	//print_string(350,300,"24/01/2023",WHITE);
	print_image(355,180,87,120,thumb);
 80084d8:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <Front_screen+0x30>)
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2257      	movs	r2, #87	; 0x57
 80084de:	2378      	movs	r3, #120	; 0x78
 80084e0:	21b4      	movs	r1, #180	; 0xb4
 80084e2:	f240 1063 	movw	r0, #355	; 0x163
 80084e6:	f7fe ff45 	bl	8007374 <print_image>
}
 80084ea:	b003      	add	sp, #12
 80084ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80084f0:	20000554 	.word	0x20000554
 80084f4:	00800010 	.word	0x00800010
 80084f8:	0801e158 	.word	0x0801e158

080084fc <Admin_screen>:

//########################   ADMIN_SCREEN  ########################################

void Admin_screen(void)
{
 80084fc:	b510      	push	{r4, lr}
	Set_Font(&Font16x26);
 80084fe:	4843      	ldr	r0, [pc, #268]	; (800860c <Admin_screen+0x110>)
//	draw_vl(400,50,380,BLUE);
//	draw_hl(50,240,700,BLUE);

	Set_Font(&Font12x18);
	fill_circle(250,145,60,RED);
	print_image(225,115,48,60,user_management);
 8008500:	4c43      	ldr	r4, [pc, #268]	; (8008610 <Admin_screen+0x114>)
{
 8008502:	b082      	sub	sp, #8
	Set_Font(&Font16x26);
 8008504:	f7fd fdac 	bl	8006060 <Set_Font>
	fill_screen(PURPLE);
 8008508:	4842      	ldr	r0, [pc, #264]	; (8008614 <Admin_screen+0x118>)
 800850a:	f7fd fe15 	bl	8006138 <fill_screen>
	print_string(150,20,"RFID BASED ATTENDANCE MANAGEMENT",WHITE);
 800850e:	4a42      	ldr	r2, [pc, #264]	; (8008618 <Admin_screen+0x11c>)
 8008510:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008514:	2114      	movs	r1, #20
 8008516:	2096      	movs	r0, #150	; 0x96
 8008518:	f7fe ff0a 	bl	8007330 <print_string>
	Set_Font(&Font12x18);
 800851c:	483f      	ldr	r0, [pc, #252]	; (800861c <Admin_screen+0x120>)
 800851e:	f7fd fd9f 	bl	8006060 <Set_Font>
	fill_circle(250,145,60,RED);
 8008522:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8008526:	223c      	movs	r2, #60	; 0x3c
 8008528:	2191      	movs	r1, #145	; 0x91
 800852a:	20fa      	movs	r0, #250	; 0xfa
 800852c:	f7fe fdf6 	bl	800711c <fill_circle>
	print_image(225,115,48,60,user_management);
 8008530:	9400      	str	r4, [sp, #0]
 8008532:	233c      	movs	r3, #60	; 0x3c
 8008534:	2230      	movs	r2, #48	; 0x30
 8008536:	2173      	movs	r1, #115	; 0x73
 8008538:	20e1      	movs	r0, #225	; 0xe1
 800853a:	f7fe ff1b 	bl	8007374 <print_image>
	print_string(230,218,"USER",WHITE);
 800853e:	4a38      	ldr	r2, [pc, #224]	; (8008620 <Admin_screen+0x124>)
	print_string(200,238,"MANAGEMENT",WHITE);

	fill_circle(550,145,60,RED);
	print_image(515,118,60,55,attendance_search);
 8008540:	4c38      	ldr	r4, [pc, #224]	; (8008624 <Admin_screen+0x128>)
	print_string(230,218,"USER",WHITE);
 8008542:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008546:	21da      	movs	r1, #218	; 0xda
 8008548:	20e6      	movs	r0, #230	; 0xe6
 800854a:	f7fe fef1 	bl	8007330 <print_string>
	print_string(200,238,"MANAGEMENT",WHITE);
 800854e:	4a36      	ldr	r2, [pc, #216]	; (8008628 <Admin_screen+0x12c>)
 8008550:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008554:	21ee      	movs	r1, #238	; 0xee
 8008556:	20c8      	movs	r0, #200	; 0xc8
 8008558:	f7fe feea 	bl	8007330 <print_string>
	fill_circle(550,145,60,RED);
 800855c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8008560:	223c      	movs	r2, #60	; 0x3c
 8008562:	2191      	movs	r1, #145	; 0x91
 8008564:	f240 2026 	movw	r0, #550	; 0x226
 8008568:	f7fe fdd8 	bl	800711c <fill_circle>
	print_image(515,118,60,55,attendance_search);
 800856c:	9400      	str	r4, [sp, #0]
 800856e:	2337      	movs	r3, #55	; 0x37
 8008570:	223c      	movs	r2, #60	; 0x3c
 8008572:	2176      	movs	r1, #118	; 0x76
 8008574:	f240 2003 	movw	r0, #515	; 0x203
 8008578:	f7fe fefc 	bl	8007374 <print_image>
	print_string(515,218,"SEARCH",WHITE);
 800857c:	4a2b      	ldr	r2, [pc, #172]	; (800862c <Admin_screen+0x130>)
	print_string(490,238,"ATTENDANCE",WHITE);


	fill_circle(550,335,60,RED);
	print_image(520,305,60,60,setting);
 800857e:	4c2c      	ldr	r4, [pc, #176]	; (8008630 <Admin_screen+0x134>)
	print_string(515,218,"SEARCH",WHITE);
 8008580:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008584:	21da      	movs	r1, #218	; 0xda
 8008586:	f240 2003 	movw	r0, #515	; 0x203
 800858a:	f7fe fed1 	bl	8007330 <print_string>
	print_string(490,238,"ATTENDANCE",WHITE);
 800858e:	4a29      	ldr	r2, [pc, #164]	; (8008634 <Admin_screen+0x138>)
 8008590:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008594:	21ee      	movs	r1, #238	; 0xee
 8008596:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 800859a:	f7fe fec9 	bl	8007330 <print_string>
	fill_circle(550,335,60,RED);
 800859e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80085a2:	223c      	movs	r2, #60	; 0x3c
 80085a4:	f240 114f 	movw	r1, #335	; 0x14f
 80085a8:	f240 2026 	movw	r0, #550	; 0x226
 80085ac:	f7fe fdb6 	bl	800711c <fill_circle>
	print_image(520,305,60,60,setting);
 80085b0:	233c      	movs	r3, #60	; 0x3c
 80085b2:	461a      	mov	r2, r3
 80085b4:	9400      	str	r4, [sp, #0]
 80085b6:	f240 1131 	movw	r1, #305	; 0x131
 80085ba:	f44f 7002 	mov.w	r0, #520	; 0x208
 80085be:	f7fe fed9 	bl	8007374 <print_image>
	print_string(510,408,"SETTING",WHITE);
 80085c2:	4a1d      	ldr	r2, [pc, #116]	; (8008638 <Admin_screen+0x13c>)
	//draw_roundrect(505,578,288,365,BLACK);

	fill_circle(250,335,60,RED);
	print_image(220,305,60,60,user_role);
 80085c4:	4c1d      	ldr	r4, [pc, #116]	; (800863c <Admin_screen+0x140>)
	print_string(510,408,"SETTING",WHITE);
 80085c6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80085ca:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80085ce:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
 80085d2:	f7fe fead 	bl	8007330 <print_string>
	fill_circle(250,335,60,RED);
 80085d6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80085da:	223c      	movs	r2, #60	; 0x3c
 80085dc:	f240 114f 	movw	r1, #335	; 0x14f
 80085e0:	20fa      	movs	r0, #250	; 0xfa
 80085e2:	f7fe fd9b 	bl	800711c <fill_circle>
	print_image(220,305,60,60,user_role);
 80085e6:	233c      	movs	r3, #60	; 0x3c
 80085e8:	461a      	mov	r2, r3
 80085ea:	f240 1131 	movw	r1, #305	; 0x131
 80085ee:	20dc      	movs	r0, #220	; 0xdc
 80085f0:	9400      	str	r4, [sp, #0]
 80085f2:	f7fe febf 	bl	8007374 <print_image>
	print_string(200,408,"USER ROLE",WHITE);
 80085f6:	4a12      	ldr	r2, [pc, #72]	; (8008640 <Admin_screen+0x144>)
 80085f8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80085fc:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8008600:	20c8      	movs	r0, #200	; 0xc8
}
 8008602:	b002      	add	sp, #8
 8008604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	print_string(200,408,"USER ROLE",WHITE);
 8008608:	f7fe be92 	b.w	8007330 <print_string>
 800860c:	20000554 	.word	0x20000554
 8008610:	08028478 	.word	0x08028478
 8008614:	00800010 	.word	0x00800010
 8008618:	0800e618 	.word	0x0800e618
 800861c:	20000544 	.word	0x20000544
 8008620:	0800e680 	.word	0x0800e680
 8008624:	08010d78 	.word	0x08010d78
 8008628:	0800e63c 	.word	0x0800e63c
 800862c:	0800e648 	.word	0x0800e648
 8008630:	0801a918 	.word	0x0801a918
 8008634:	0800e650 	.word	0x0800e650
 8008638:	0800e65c 	.word	0x0800e65c
 800863c:	0802b178 	.word	0x0802b178
 8008640:	0800e664 	.word	0x0800e664

08008644 <User_Management>:

//########################   USER MANAGEMENT   ####################################

void User_Management(void)
{
 8008644:	b530      	push	{r4, r5, lr}
 8008646:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
	fill_area(100,800,0,480,PURPLE);
 8008648:	4c39      	ldr	r4, [pc, #228]	; (8008730 <User_Management+0xec>)
	Set_Font(&Font12x18);
 800864a:	483a      	ldr	r0, [pc, #232]	; (8008734 <User_Management+0xf0>)
	fill_area(70,720,121,439,PURPLE);

	fill_roundrect(250,580,115,195,0xff1a1a,PURPLE);
 800864c:	4d3a      	ldr	r5, [pc, #232]	; (8008738 <User_Management+0xf4>)
	Set_Font(&Font12x18);
 800864e:	f7fd fd07 	bl	8006060 <Set_Font>
	fill_area(100,800,0,480,PURPLE);
 8008652:	9400      	str	r4, [sp, #0]
 8008654:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008658:	2200      	movs	r2, #0
 800865a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800865e:	2064      	movs	r0, #100	; 0x64
 8008660:	f7fd fdb0 	bl	80061c4 <fill_area>
	fill_area(70,720,121,439,PURPLE);
 8008664:	9400      	str	r4, [sp, #0]
 8008666:	f240 13b7 	movw	r3, #439	; 0x1b7
 800866a:	2279      	movs	r2, #121	; 0x79
 800866c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8008670:	2046      	movs	r0, #70	; 0x46
 8008672:	f7fd fda7 	bl	80061c4 <fill_area>
	fill_roundrect(250,580,115,195,0xff1a1a,PURPLE);
 8008676:	e9cd 5400 	strd	r5, r4, [sp]
 800867a:	2273      	movs	r2, #115	; 0x73
 800867c:	f44f 7111 	mov.w	r1, #580	; 0x244
 8008680:	20fa      	movs	r0, #250	; 0xfa
 8008682:	23c3      	movs	r3, #195	; 0xc3
 8008684:	f7fe fb0c 	bl	8006ca0 <fill_roundrect>
	fill_circle(250,155,77,PURPLE);
 8008688:	4623      	mov	r3, r4
 800868a:	224d      	movs	r2, #77	; 0x4d
 800868c:	219b      	movs	r1, #155	; 0x9b
 800868e:	20fa      	movs	r0, #250	; 0xfa
 8008690:	f7fe fd44 	bl	800711c <fill_circle>
	fill_circle(250,155,60,RED);
 8008694:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8008698:	223c      	movs	r2, #60	; 0x3c
 800869a:	219b      	movs	r1, #155	; 0x9b
 800869c:	20fa      	movs	r0, #250	; 0xfa
 800869e:	f7fe fd3d 	bl	800711c <fill_circle>
	print_string(400,145,"NEW USER",WHITE);
 80086a2:	4a26      	ldr	r2, [pc, #152]	; (800873c <User_Management+0xf8>)
 80086a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80086a8:	2191      	movs	r1, #145	; 0x91
 80086aa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80086ae:	f7fe fe3f 	bl	8007330 <print_string>
	print_image(220,125,60,51,new_user);
 80086b2:	4923      	ldr	r1, [pc, #140]	; (8008740 <User_Management+0xfc>)
 80086b4:	9100      	str	r1, [sp, #0]
 80086b6:	2333      	movs	r3, #51	; 0x33
 80086b8:	223c      	movs	r2, #60	; 0x3c
 80086ba:	217d      	movs	r1, #125	; 0x7d
 80086bc:	20dc      	movs	r0, #220	; 0xdc
 80086be:	f7fe fe59 	bl	8007374 <print_image>

	fill_roundrect(250,580,280,360,0xff1a1a,PURPLE);
 80086c2:	e9cd 5400 	strd	r5, r4, [sp]
 80086c6:	f44f 728c 	mov.w	r2, #280	; 0x118
 80086ca:	f44f 7111 	mov.w	r1, #580	; 0x244
 80086ce:	20fa      	movs	r0, #250	; 0xfa
 80086d0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80086d4:	f7fe fae4 	bl	8006ca0 <fill_roundrect>
	fill_circle(250,320,77,PURPLE);
 80086d8:	4623      	mov	r3, r4
 80086da:	224d      	movs	r2, #77	; 0x4d
 80086dc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086e0:	20fa      	movs	r0, #250	; 0xfa
 80086e2:	f7fe fd1b 	bl	800711c <fill_circle>
	fill_circle(250,320,60,RED);
 80086e6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80086ea:	223c      	movs	r2, #60	; 0x3c
 80086ec:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086f0:	20fa      	movs	r0, #250	; 0xfa
 80086f2:	f7fe fd13 	bl	800711c <fill_circle>
	print_string(400,310,"ALL USER",WHITE);
	print_image(215,300,70,35,all_user);
 80086f6:	4c13      	ldr	r4, [pc, #76]	; (8008744 <User_Management+0x100>)
	print_string(400,310,"ALL USER",WHITE);
 80086f8:	4a13      	ldr	r2, [pc, #76]	; (8008748 <User_Management+0x104>)
 80086fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80086fe:	f44f 719b 	mov.w	r1, #310	; 0x136
 8008702:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008706:	f7fe fe13 	bl	8007330 <print_string>
	print_image(215,300,70,35,all_user);
 800870a:	2323      	movs	r3, #35	; 0x23
 800870c:	2246      	movs	r2, #70	; 0x46
 800870e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8008712:	20d7      	movs	r0, #215	; 0xd7
 8008714:	9400      	str	r4, [sp, #0]
 8008716:	f7fe fe2d 	bl	8007374 <print_image>
//	draw_line(115+x,30+y,115+x,60+y,WHITE);
//	fill_roundrect(15,90,40,88,0xcedcfd,PURPLE);
//	fill_roundrect(18,87,43,85,0xfffafa,0xcedcfd);
//	Set_Font(&Font12x18);
//	print_string(30,54,"BACK",0x737373);
	print_image(10,10,60,60,back);
 800871a:	233c      	movs	r3, #60	; 0x3c
 800871c:	210a      	movs	r1, #10
 800871e:	4a0b      	ldr	r2, [pc, #44]	; (800874c <User_Management+0x108>)
 8008720:	9200      	str	r2, [sp, #0]
 8008722:	4608      	mov	r0, r1
 8008724:	461a      	mov	r2, r3
 8008726:	f7fe fe25 	bl	8007374 <print_image>
}
 800872a:	b003      	add	sp, #12
 800872c:	bd30      	pop	{r4, r5, pc}
 800872e:	bf00      	nop
 8008730:	00800010 	.word	0x00800010
 8008734:	20000544 	.word	0x20000544
 8008738:	00ff1a1a 	.word	0x00ff1a1a
 800873c:	0800e670 	.word	0x0800e670
 8008740:	08017948 	.word	0x08017948
 8008744:	0800e730 	.word	0x0800e730
 8008748:	0800e67c 	.word	0x0800e67c
 800874c:	08014108 	.word	0x08014108

08008750 <NewUser_Name>:
{
 8008750:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 8008752:	481e      	ldr	r0, [pc, #120]	; (80087cc <NewUser_Name+0x7c>)
		fill_roundrect(197,503,69,135,0xcedcfd,0xfffafa);
 8008754:	4c1e      	ldr	r4, [pc, #120]	; (80087d0 <NewUser_Name+0x80>)
		fill_roundrect(200+x,500+x,72+y,132+y,0xe7eefe,0xcedcfd);
 8008756:	4d1f      	ldr	r5, [pc, #124]	; (80087d4 <NewUser_Name+0x84>)
{
 8008758:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 800875a:	f7fd fc81 	bl	8006060 <Set_Font>
		fill_roundrect(197,503,69,135,0xcedcfd,0xfffafa);
 800875e:	481e      	ldr	r0, [pc, #120]	; (80087d8 <NewUser_Name+0x88>)
 8008760:	2387      	movs	r3, #135	; 0x87
 8008762:	e9cd 4000 	strd	r4, r0, [sp]
 8008766:	2245      	movs	r2, #69	; 0x45
 8008768:	f240 11f7 	movw	r1, #503	; 0x1f7
 800876c:	20c5      	movs	r0, #197	; 0xc5
 800876e:	f7fe fa97 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(200+x,500+x,72+y,132+y,0xe7eefe,0xcedcfd);
 8008772:	e9cd 5400 	strd	r5, r4, [sp]
 8008776:	2384      	movs	r3, #132	; 0x84
 8008778:	2248      	movs	r2, #72	; 0x48
 800877a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800877e:	20c8      	movs	r0, #200	; 0xc8
 8008780:	f7fe fa8e 	bl	8006ca0 <fill_roundrect>
		print_string(218+x,65+y,"Name",0x737373);
 8008784:	4c15      	ldr	r4, [pc, #84]	; (80087dc <NewUser_Name+0x8c>)
		fill_roundrect(210+x,280+x,62+y,82+y,WHITE,WHITE);
 8008786:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800878a:	e9cd 0000 	strd	r0, r0, [sp]
 800878e:	2352      	movs	r3, #82	; 0x52
 8008790:	223e      	movs	r2, #62	; 0x3e
 8008792:	f44f 718c 	mov.w	r1, #280	; 0x118
 8008796:	20d2      	movs	r0, #210	; 0xd2
 8008798:	f7fe fa82 	bl	8006ca0 <fill_roundrect>
		print_string(218+x,65+y,"Name",0x737373);
 800879c:	4623      	mov	r3, r4
 800879e:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <NewUser_Name+0x90>)
 80087a0:	2141      	movs	r1, #65	; 0x41
 80087a2:	20da      	movs	r0, #218	; 0xda
 80087a4:	f7fe fdc4 	bl	8007330 <print_string>
		fill_area(210,400,80,120,0xe7eefe);
 80087a8:	2250      	movs	r2, #80	; 0x50
 80087aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80087ae:	20d2      	movs	r0, #210	; 0xd2
 80087b0:	9500      	str	r5, [sp, #0]
 80087b2:	2378      	movs	r3, #120	; 0x78
 80087b4:	f7fd fd06 	bl	80061c4 <fill_area>
		print_string(220,90,emp_name,0x737373);
 80087b8:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <NewUser_Name+0x94>)
 80087ba:	4623      	mov	r3, r4
 80087bc:	215a      	movs	r1, #90	; 0x5a
 80087be:	20dc      	movs	r0, #220	; 0xdc
}
 80087c0:	b003      	add	sp, #12
 80087c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(220,90,emp_name,0x737373);
 80087c6:	f7fe bdb3 	b.w	8007330 <print_string>
 80087ca:	bf00      	nop
 80087cc:	20000544 	.word	0x20000544
 80087d0:	00cedcfd 	.word	0x00cedcfd
 80087d4:	00e7eefe 	.word	0x00e7eefe
 80087d8:	00fffafa 	.word	0x00fffafa
 80087dc:	00737373 	.word	0x00737373
 80087e0:	0800e688 	.word	0x0800e688
 80087e4:	200005fc 	.word	0x200005fc

080087e8 <NewUser_Desig>:
{
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	4604      	mov	r4, r0
 80087ee:	b085      	sub	sp, #20
	Set_Font(&Font12x18);
 80087f0:	4834      	ldr	r0, [pc, #208]	; (80088c4 <NewUser_Desig+0xdc>)
		fill_roundrect(x1+197,x2+503,y1+161,y2+227,0xcedcfd,0xfffafa);
 80087f2:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80088d8 <NewUser_Desig+0xf0>
		fill_roundrect(x1+200,x2+500,y1+164,y2+224,0xe7eefe,0xcedcfd);
 80087f6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80088dc <NewUser_Desig+0xf4>
{
 80087fa:	4616      	mov	r6, r2
 80087fc:	460d      	mov	r5, r1
 80087fe:	461f      	mov	r7, r3
	Set_Font(&Font12x18);
 8008800:	f7fd fc2e 	bl	8006060 <Set_Font>
		fill_roundrect(x1+197,x2+503,y1+161,y2+227,0xcedcfd,0xfffafa);
 8008804:	4b30      	ldr	r3, [pc, #192]	; (80088c8 <NewUser_Desig+0xe0>)
 8008806:	f106 0ba1 	add.w	fp, r6, #161	; 0xa1
 800880a:	e9cd 9300 	strd	r9, r3, [sp]
 800880e:	465a      	mov	r2, fp
 8008810:	f107 03e3 	add.w	r3, r7, #227	; 0xe3
 8008814:	f205 11f7 	addw	r1, r5, #503	; 0x1f7
 8008818:	f104 00c5 	add.w	r0, r4, #197	; 0xc5
 800881c:	f7fe fa40 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(x1+200,x2+500,y1+164,y2+224,0xe7eefe,0xcedcfd);
 8008820:	e9cd 8900 	strd	r8, r9, [sp]
 8008824:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8008828:	f106 02a4 	add.w	r2, r6, #164	; 0xa4
 800882c:	f505 71fa 	add.w	r1, r5, #500	; 0x1f4
 8008830:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8008834:	f7fe fa34 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(210+x1,290+x2,154+y1,174+y2,WHITE,WHITE);
 8008838:	f104 0ad2 	add.w	sl, r4, #210	; 0xd2
 800883c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008840:	e9cd 3300 	strd	r3, r3, [sp]
 8008844:	f106 029a 	add.w	r2, r6, #154	; 0x9a
 8008848:	f107 03ae 	add.w	r3, r7, #174	; 0xae
 800884c:	f505 7191 	add.w	r1, r5, #290	; 0x122
 8008850:	4650      	mov	r0, sl
 8008852:	f7fe fa25 	bl	8006ca0 <fill_roundrect>
		print_string(218+x1,155+y1,"Desig.",0x737373);
 8008856:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80088e0 <NewUser_Desig+0xf8>
 800885a:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <NewUser_Desig+0xe4>)
 800885c:	b2a3      	uxth	r3, r4
 800885e:	f106 019b 	add.w	r1, r6, #155	; 0x9b
 8008862:	f103 00da 	add.w	r0, r3, #218	; 0xda
		symbol(470+x1,168+y1,'D',0x999999);
 8008866:	f504 74eb 	add.w	r4, r4, #470	; 0x1d6
		print_string(218+x1,155+y1,"Desig.",0x737373);
 800886a:	9303      	str	r3, [sp, #12]
 800886c:	b289      	uxth	r1, r1
 800886e:	464b      	mov	r3, r9
 8008870:	b280      	uxth	r0, r0
 8008872:	f7fe fd5d 	bl	8007330 <print_string>
		symbol(470+x1,168+y1,'D',0x999999);
 8008876:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 800887a:	4620      	mov	r0, r4
 800887c:	4b14      	ldr	r3, [pc, #80]	; (80088d0 <NewUser_Desig+0xe8>)
 800887e:	2244      	movs	r2, #68	; 0x44
 8008880:	f7ff f87c 	bl	800797c <symbol>
		symbol(470+x1,161+y1,'D',0xe7eefe);
 8008884:	4643      	mov	r3, r8
 8008886:	4659      	mov	r1, fp
 8008888:	4620      	mov	r0, r4
 800888a:	2244      	movs	r2, #68	; 0x44
 800888c:	f7ff f876 	bl	800797c <symbol>
		fill_area(210+x1,400+x2,180+y1,210+y2,0xe7eefe);
 8008890:	f107 03d2 	add.w	r3, r7, #210	; 0xd2
 8008894:	f106 02b4 	add.w	r2, r6, #180	; 0xb4
 8008898:	4650      	mov	r0, sl
 800889a:	f505 71c8 	add.w	r1, r5, #400	; 0x190
 800889e:	f8cd 8000 	str.w	r8, [sp]
 80088a2:	f7fd fc8f 	bl	80061c4 <fill_area>
		print_string(220+x1,190+x2,desgn_ptr,0x737373);
 80088a6:	9a03      	ldr	r2, [sp, #12]
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <NewUser_Desig+0xec>)
 80088aa:	f105 01be 	add.w	r1, r5, #190	; 0xbe
 80088ae:	f102 00dc 	add.w	r0, r2, #220	; 0xdc
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	b289      	uxth	r1, r1
 80088b6:	464b      	mov	r3, r9
 80088b8:	b280      	uxth	r0, r0
}
 80088ba:	b005      	add	sp, #20
 80088bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		print_string(220+x1,190+x2,desgn_ptr,0x737373);
 80088c0:	f7fe bd36 	b.w	8007330 <print_string>
 80088c4:	20000544 	.word	0x20000544
 80088c8:	00fffafa 	.word	0x00fffafa
 80088cc:	0800e690 	.word	0x0800e690
 80088d0:	00999999 	.word	0x00999999
 80088d4:	20000024 	.word	0x20000024
 80088d8:	00cedcfd 	.word	0x00cedcfd
 80088dc:	00e7eefe 	.word	0x00e7eefe
 80088e0:	00737373 	.word	0x00737373

080088e4 <NewUser_Role>:
{
 80088e4:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 80088e6:	482a      	ldr	r0, [pc, #168]	; (8008990 <NewUser_Role+0xac>)
		fill_roundrect(197,503,253,319,0xcedcfd,0xfffafa);
 80088e8:	4d2a      	ldr	r5, [pc, #168]	; (8008994 <NewUser_Role+0xb0>)
		fill_roundrect(200+x,500+x,256+y,316+y,0xe7eefe,0xcedcfd);
 80088ea:	4c2b      	ldr	r4, [pc, #172]	; (8008998 <NewUser_Role+0xb4>)
{
 80088ec:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 80088ee:	f7fd fbb7 	bl	8006060 <Set_Font>
		fill_roundrect(197,503,253,319,0xcedcfd,0xfffafa);
 80088f2:	482a      	ldr	r0, [pc, #168]	; (800899c <NewUser_Role+0xb8>)
 80088f4:	f240 133f 	movw	r3, #319	; 0x13f
 80088f8:	e9cd 5000 	strd	r5, r0, [sp]
 80088fc:	22fd      	movs	r2, #253	; 0xfd
 80088fe:	f240 11f7 	movw	r1, #503	; 0x1f7
 8008902:	20c5      	movs	r0, #197	; 0xc5
 8008904:	f7fe f9cc 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(200+x,500+x,256+y,316+y,0xe7eefe,0xcedcfd);
 8008908:	e9cd 4500 	strd	r4, r5, [sp]
 800890c:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8008910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008914:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008918:	20c8      	movs	r0, #200	; 0xc8
 800891a:	f7fe f9c1 	bl	8006ca0 <fill_roundrect>
		print_string(218+x,251+y,"Role",0x737373);
 800891e:	4d20      	ldr	r5, [pc, #128]	; (80089a0 <NewUser_Role+0xbc>)
		fill_roundrect(210+x,280+x,246+y,266+y,WHITE,WHITE);
 8008920:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008924:	e9cd 0000 	strd	r0, r0, [sp]
 8008928:	f44f 7385 	mov.w	r3, #266	; 0x10a
 800892c:	22f6      	movs	r2, #246	; 0xf6
 800892e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8008932:	20d2      	movs	r0, #210	; 0xd2
 8008934:	f7fe f9b4 	bl	8006ca0 <fill_roundrect>
		print_string(218+x,251+y,"Role",0x737373);
 8008938:	462b      	mov	r3, r5
 800893a:	4a1a      	ldr	r2, [pc, #104]	; (80089a4 <NewUser_Role+0xc0>)
 800893c:	21fb      	movs	r1, #251	; 0xfb
 800893e:	20da      	movs	r0, #218	; 0xda
 8008940:	f7fe fcf6 	bl	8007330 <print_string>
		symbol(470,264,'D',0x999999);
 8008944:	4b18      	ldr	r3, [pc, #96]	; (80089a8 <NewUser_Role+0xc4>)
 8008946:	2244      	movs	r2, #68	; 0x44
 8008948:	f44f 7184 	mov.w	r1, #264	; 0x108
 800894c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8008950:	f7ff f814 	bl	800797c <symbol>
	symbol(470,257,'D',0xe7eefe);
 8008954:	4623      	mov	r3, r4
 8008956:	2244      	movs	r2, #68	; 0x44
 8008958:	f240 1101 	movw	r1, #257	; 0x101
 800895c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8008960:	f7ff f80c 	bl	800797c <symbol>
		fill_area(210,400,270,310,0xe7eefe);
 8008964:	f44f 739b 	mov.w	r3, #310	; 0x136
 8008968:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800896c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8008970:	9400      	str	r4, [sp, #0]
 8008972:	20d2      	movs	r0, #210	; 0xd2
 8008974:	f7fd fc26 	bl	80061c4 <fill_area>
		print_string(220,280,role_ptr,0x737373);
 8008978:	4a0c      	ldr	r2, [pc, #48]	; (80089ac <NewUser_Role+0xc8>)
 800897a:	6812      	ldr	r2, [r2, #0]
 800897c:	462b      	mov	r3, r5
 800897e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8008982:	20dc      	movs	r0, #220	; 0xdc
}
 8008984:	b003      	add	sp, #12
 8008986:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(220,280,role_ptr,0x737373);
 800898a:	f7fe bcd1 	b.w	8007330 <print_string>
 800898e:	bf00      	nop
 8008990:	20000544 	.word	0x20000544
 8008994:	00cedcfd 	.word	0x00cedcfd
 8008998:	00e7eefe 	.word	0x00e7eefe
 800899c:	00fffafa 	.word	0x00fffafa
 80089a0:	00737373 	.word	0x00737373
 80089a4:	0800e698 	.word	0x0800e698
 80089a8:	00999999 	.word	0x00999999
 80089ac:	20000074 	.word	0x20000074

080089b0 <NewUser_Card>:
{
 80089b0:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 80089b2:	482b      	ldr	r0, [pc, #172]	; (8008a60 <NewUser_Card+0xb0>)
		fill_roundrect(197,503,345,411,0xcedcfd,0xfffafa);
 80089b4:	4d2b      	ldr	r5, [pc, #172]	; (8008a64 <NewUser_Card+0xb4>)
		fill_roundrect(200+x,500+x,348+y,408+y,0xe7eefe,0xcedcfd);
 80089b6:	4c2c      	ldr	r4, [pc, #176]	; (8008a68 <NewUser_Card+0xb8>)
{
 80089b8:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 80089ba:	f7fd fb51 	bl	8006060 <Set_Font>
		fill_roundrect(197,503,345,411,0xcedcfd,0xfffafa);
 80089be:	482b      	ldr	r0, [pc, #172]	; (8008a6c <NewUser_Card+0xbc>)
 80089c0:	f240 139b 	movw	r3, #411	; 0x19b
 80089c4:	e9cd 5000 	strd	r5, r0, [sp]
 80089c8:	f240 1259 	movw	r2, #345	; 0x159
 80089cc:	f240 11f7 	movw	r1, #503	; 0x1f7
 80089d0:	20c5      	movs	r0, #197	; 0xc5
 80089d2:	f7fe f965 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(200+x,500+x,348+y,408+y,0xe7eefe,0xcedcfd);
 80089d6:	e9cd 4500 	strd	r4, r5, [sp]
 80089da:	f44f 73cc 	mov.w	r3, #408	; 0x198
 80089de:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 80089e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80089e6:	20c8      	movs	r0, #200	; 0xc8
 80089e8:	f7fe f95a 	bl	8006ca0 <fill_roundrect>
		print_string(218+x,340+y,"Card/Thumb",0x737373);
 80089ec:	4d20      	ldr	r5, [pc, #128]	; (8008a70 <NewUser_Card+0xc0>)
		fill_roundrect(210+x,340+x,338+y,358+y,WHITE,WHITE);
 80089ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80089f2:	e9cd 0000 	strd	r0, r0, [sp]
 80089f6:	f44f 73b3 	mov.w	r3, #358	; 0x166
 80089fa:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80089fe:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8008a02:	20d2      	movs	r0, #210	; 0xd2
 8008a04:	f7fe f94c 	bl	8006ca0 <fill_roundrect>
		print_string(218+x,340+y,"Card/Thumb",0x737373);
 8008a08:	462b      	mov	r3, r5
 8008a0a:	4a1a      	ldr	r2, [pc, #104]	; (8008a74 <NewUser_Card+0xc4>)
 8008a0c:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8008a10:	20da      	movs	r0, #218	; 0xda
 8008a12:	f7fe fc8d 	bl	8007330 <print_string>
		symbol(470,353,'D',0x999999);
 8008a16:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <NewUser_Card+0xc8>)
 8008a18:	2244      	movs	r2, #68	; 0x44
 8008a1a:	f240 1161 	movw	r1, #353	; 0x161
 8008a1e:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8008a22:	f7fe ffab 	bl	800797c <symbol>
	symbol(470,346,'D',0xe7eefe);
 8008a26:	4623      	mov	r3, r4
 8008a28:	2244      	movs	r2, #68	; 0x44
 8008a2a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8008a2e:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8008a32:	f7fe ffa3 	bl	800797c <symbol>
		fill_area(210,400,370,400,0xe7eefe);
 8008a36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8008a40:	9400      	str	r4, [sp, #0]
 8008a42:	20d2      	movs	r0, #210	; 0xd2
 8008a44:	f7fd fbbe 	bl	80061c4 <fill_area>
		print_string(220,375,card_ptr,0x737373);
 8008a48:	4a0c      	ldr	r2, [pc, #48]	; (8008a7c <NewUser_Card+0xcc>)
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	f240 1177 	movw	r1, #375	; 0x177
 8008a52:	20dc      	movs	r0, #220	; 0xdc
}
 8008a54:	b003      	add	sp, #12
 8008a56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(220,375,card_ptr,0x737373);
 8008a5a:	f7fe bc69 	b.w	8007330 <print_string>
 8008a5e:	bf00      	nop
 8008a60:	20000544 	.word	0x20000544
 8008a64:	00cedcfd 	.word	0x00cedcfd
 8008a68:	00e7eefe 	.word	0x00e7eefe
 8008a6c:	00fffafa 	.word	0x00fffafa
 8008a70:	00737373 	.word	0x00737373
 8008a74:	0800e6a0 	.word	0x0800e6a0
 8008a78:	00999999 	.word	0x00999999
 8008a7c:	20000000 	.word	0x20000000

08008a80 <NewEntry_page>:
{
 8008a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Set_Font(&Font12x18);
 8008a84:	4e3d      	ldr	r6, [pc, #244]	; (8008b7c <NewEntry_page+0xfc>)
	fill_roundrect(100+x,700+x,40+y,440+y,0xcccccc,PURPLE);
 8008a86:	4c3e      	ldr	r4, [pc, #248]	; (8008b80 <NewEntry_page+0x100>)
	fill_roundrect(104+x,696+x,44+y,436+y,0xfffafa,0xcccccc);
 8008a88:	4d3e      	ldr	r5, [pc, #248]	; (8008b84 <NewEntry_page+0x104>)
	fill_roundrect(550,650,72,132,0xe7eefe,0xcedcfd);
 8008a8a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8008b98 <NewEntry_page+0x118>
	print_string(565+x,65+y,"Emp.ID",0x737373);
 8008a8e:	4f3e      	ldr	r7, [pc, #248]	; (8008b88 <NewEntry_page+0x108>)
{
 8008a90:	b082      	sub	sp, #8
	Set_Font(&Font12x18);
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7fd fae4 	bl	8006060 <Set_Font>
	fill_roundrect(100+x,700+x,40+y,440+y,0xcccccc,PURPLE);
 8008a98:	4b3c      	ldr	r3, [pc, #240]	; (8008b8c <NewEntry_page+0x10c>)
 8008a9a:	2228      	movs	r2, #40	; 0x28
 8008a9c:	e9cd 4300 	strd	r4, r3, [sp]
 8008aa0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8008aa4:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 8008aa8:	2064      	movs	r0, #100	; 0x64
 8008aaa:	f7fe f8f9 	bl	8006ca0 <fill_roundrect>
	fill_roundrect(104+x,696+x,44+y,436+y,0xfffafa,0xcccccc);
 8008aae:	e9cd 5400 	strd	r5, r4, [sp]
	fill_roundrect(547,653,69,135,0xcedcfd,0xfffafa);
 8008ab2:	f504 3404 	add.w	r4, r4, #135168	; 0x21000
 8008ab6:	3431      	adds	r4, #49	; 0x31
	fill_roundrect(104+x,696+x,44+y,436+y,0xfffafa,0xcccccc);
 8008ab8:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8008abc:	222c      	movs	r2, #44	; 0x2c
 8008abe:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8008ac2:	2068      	movs	r0, #104	; 0x68
 8008ac4:	f7fe f8ec 	bl	8006ca0 <fill_roundrect>
	fill_roundrect(547,653,69,135,0xcedcfd,0xfffafa);
 8008ac8:	e9cd 4500 	strd	r4, r5, [sp]
 8008acc:	2387      	movs	r3, #135	; 0x87
 8008ace:	2245      	movs	r2, #69	; 0x45
 8008ad0:	f240 218d 	movw	r1, #653	; 0x28d
 8008ad4:	f240 2023 	movw	r0, #547	; 0x223
 8008ad8:	f7fe f8e2 	bl	8006ca0 <fill_roundrect>
	fill_roundrect(550,650,72,132,0xe7eefe,0xcedcfd);
 8008adc:	e9cd 8400 	strd	r8, r4, [sp]
 8008ae0:	2384      	movs	r3, #132	; 0x84
 8008ae2:	2248      	movs	r2, #72	; 0x48
 8008ae4:	f240 218a 	movw	r1, #650	; 0x28a
 8008ae8:	f240 2026 	movw	r0, #550	; 0x226
 8008aec:	f7fe f8d8 	bl	8006ca0 <fill_roundrect>
	fill_roundrect(560,640,62,82,WHITE,WHITE);
 8008af0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008af4:	e9cd 3300 	strd	r3, r3, [sp]
 8008af8:	223e      	movs	r2, #62	; 0x3e
 8008afa:	2352      	movs	r3, #82	; 0x52
 8008afc:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008b00:	f44f 700c 	mov.w	r0, #560	; 0x230
 8008b04:	f7fe f8cc 	bl	8006ca0 <fill_roundrect>
	print_string(565+x,65+y,"Emp.ID",0x737373);
 8008b08:	463b      	mov	r3, r7
 8008b0a:	4a21      	ldr	r2, [pc, #132]	; (8008b90 <NewEntry_page+0x110>)
 8008b0c:	2141      	movs	r1, #65	; 0x41
 8008b0e:	f240 2035 	movw	r0, #565	; 0x235
 8008b12:	f7fe fc0d 	bl	8007330 <print_string>
	fill_roundrect(547,653,345,411,0xcedcfd,0xfffafa);
 8008b16:	e9cd 4500 	strd	r4, r5, [sp]
 8008b1a:	f240 139b 	movw	r3, #411	; 0x19b
 8008b1e:	f240 1259 	movw	r2, #345	; 0x159
 8008b22:	f240 218d 	movw	r1, #653	; 0x28d
 8008b26:	f240 2023 	movw	r0, #547	; 0x223
 8008b2a:	f7fe f8b9 	bl	8006ca0 <fill_roundrect>
	fill_roundrect(550,650,348,408,0xe7eefe,0xcedcfd);
 8008b2e:	e9cd 8400 	strd	r8, r4, [sp]
 8008b32:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8008b36:	f240 218a 	movw	r1, #650	; 0x28a
 8008b3a:	f240 2026 	movw	r0, #550	; 0x226
 8008b3e:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8008b42:	f7fe f8ad 	bl	8006ca0 <fill_roundrect>
	print_string(573+x,370+y,"SCAN",0x737373);
 8008b46:	463b      	mov	r3, r7
 8008b48:	4a12      	ldr	r2, [pc, #72]	; (8008b94 <NewEntry_page+0x114>)
 8008b4a:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8008b4e:	f240 203d 	movw	r0, #573	; 0x23d
 8008b52:	f7fe fbed 	bl	8007330 <print_string>
		Set_Font(&Font12x18);
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7fd fa82 	bl	8006060 <Set_Font>
	NewUser_Name();
 8008b5c:	f7ff fdf8 	bl	8008750 <NewUser_Name>
	NewUser_Desig(0,0,0,0);
 8008b60:	2300      	movs	r3, #0
 8008b62:	461a      	mov	r2, r3
 8008b64:	4619      	mov	r1, r3
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fe3e 	bl	80087e8 <NewUser_Desig>
	NewUser_Role();
 8008b6c:	f7ff feba 	bl	80088e4 <NewUser_Role>
}
 8008b70:	b002      	add	sp, #8
 8008b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	NewUser_Card();
 8008b76:	f7ff bf1b 	b.w	80089b0 <NewUser_Card>
 8008b7a:	bf00      	nop
 8008b7c:	20000544 	.word	0x20000544
 8008b80:	00cccccc 	.word	0x00cccccc
 8008b84:	00fffafa 	.word	0x00fffafa
 8008b88:	00737373 	.word	0x00737373
 8008b8c:	00800010 	.word	0x00800010
 8008b90:	0800e6ac 	.word	0x0800e6ac
 8008b94:	0800e6b4 	.word	0x0800e6b4
 8008b98:	00e7eefe 	.word	0x00e7eefe

08008b9c <PageKeyPad>:


//########################   KEYPAD_PAGE   ########################################

void PageKeyPad(void)
{
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		//Set_Font(&Font12x18);
		Set_Font(&Font16x24);
 8008ba0:	488c      	ldr	r0, [pc, #560]	; (8008dd4 <PageKeyPad+0x238>)
{
 8008ba2:	b087      	sub	sp, #28
		Set_Font(&Font16x24);
 8008ba4:	f7fd fa5c 	bl	8006060 <Set_Font>
		int x=0,x1=0,y=31,y1=0,k=0;
		//draw_roundrect(104,696,228,462,BLUE);
		fill_roundrect(100,700,230,472,PURPLE,PURPLE);
 8008ba8:	4b8b      	ldr	r3, [pc, #556]	; (8008dd8 <PageKeyPad+0x23c>)
 8008baa:	22e6      	movs	r2, #230	; 0xe6
 8008bac:	e9cd 3300 	strd	r3, r3, [sp]
 8008bb0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8008bb4:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8008bb8:	2064      	movs	r0, #100	; 0x64
 8008bba:	f7fe f871 	bl	8006ca0 <fill_roundrect>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9304      	str	r3, [sp, #16]
 8008bc2:	f04f 09ec 	mov.w	r9, #236	; 0xec
		int x=0,x1=0,y=31,y1=0,k=0;
 8008bc6:	461f      	mov	r7, r3
 8008bc8:	9305      	str	r3, [sp, #20]
		for(int i=0; i<3; i++)
		{
			x1+=30*i;
			for(int j=0; j<=9-(i*2-k); j++)
 8008bca:	9804      	ldr	r0, [sp, #16]
			x1+=30*i;
 8008bcc:	9905      	ldr	r1, [sp, #20]
			for(int j=0; j<=9-(i*2-k); j++)
 8008bce:	1bc3      	subs	r3, r0, r7
			x1+=30*i;
 8008bd0:	ebc0 1200 	rsb	r2, r0, r0, lsl #4
 8008bd4:	4411      	add	r1, r2
			for(int j=0; j<=9-(i*2-k); j++)
 8008bd6:	f1c3 0309 	rsb	r3, r3, #9
 8008bda:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8008bde:	f101 02a5 	add.w	r2, r1, #165	; 0xa5
 8008be2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008be6:	9303      	str	r3, [sp, #12]
 8008be8:	4b7c      	ldr	r3, [pc, #496]	; (8008ddc <PageKeyPad+0x240>)
			x1+=30*i;
 8008bea:	9105      	str	r1, [sp, #20]
			for(int j=0; j<=9-(i*2-k); j++)
 8008bec:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8008bf0:	195e      	adds	r6, r3, r5
 8008bf2:	4b7b      	ldr	r3, [pc, #492]	; (8008de0 <PageKeyPad+0x244>)

				if(UC_FLAG)
				{
					if(NUM_FLAG)
					{
						print_char(x1+130+x,y1+220+y,symbol_key[i][j],BTN_COLOR);
 8008bf4:	f109 070f 	add.w	r7, r9, #15
 8008bf8:	b2bf      	uxth	r7, r7
 8008bfa:	f109 0b32 	add.w	fp, r9, #50	; 0x32
 8008bfe:	f109 0a02 	add.w	sl, r9, #2
 8008c02:	f109 0830 	add.w	r8, r9, #48	; 0x30
				fill_roundrect(x1+105+x,x1+155+x,y1+205+y,y1+255+y,0xcccccc,PURPLE);
 8008c06:	f101 0469 	add.w	r4, r1, #105	; 0x69
 8008c0a:	441d      	add	r5, r3
 8008c0c:	e013      	b.n	8008c36 <PageKeyPad+0x9a>
					if(NUM_FLAG)
 8008c0e:	4b75      	ldr	r3, [pc, #468]	; (8008de4 <PageKeyPad+0x248>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
						print_char(x1+130+x,y1+220+y,symbol_key[i][j],BTN_COLOR);
 8008c12:	f104 0019 	add.w	r0, r4, #25
 8008c16:	b280      	uxth	r0, r0
					if(NUM_FLAG)
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d132      	bne.n	8008c82 <PageKeyPad+0xe6>
					}
					else
					{
						print_char(x1+130+x,y1+220+y,char_key[i][j],BTN_COLOR);
 8008c1c:	4b72      	ldr	r3, [pc, #456]	; (8008de8 <PageKeyPad+0x24c>)
 8008c1e:	7832      	ldrb	r2, [r6, #0]
 8008c20:	4639      	mov	r1, r7
 8008c22:	f7fe fb73 	bl	800730c <print_char>
			for(int j=0; j<=9-(i*2-k); j++)
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	343c      	adds	r4, #60	; 0x3c
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	f106 0601 	add.w	r6, r6, #1
 8008c30:	f105 0501 	add.w	r5, r5, #1
 8008c34:	d02b      	beq.n	8008c8e <PageKeyPad+0xf2>
				fill_roundrect(x1+105+x,x1+155+x,y1+205+y,y1+255+y,0xcccccc,PURPLE);
 8008c36:	4a6d      	ldr	r2, [pc, #436]	; (8008dec <PageKeyPad+0x250>)
 8008c38:	4867      	ldr	r0, [pc, #412]	; (8008dd8 <PageKeyPad+0x23c>)
 8008c3a:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8008c3e:	e9cd 2000 	strd	r2, r0, [sp]
 8008c42:	465b      	mov	r3, fp
 8008c44:	4620      	mov	r0, r4
 8008c46:	464a      	mov	r2, r9
 8008c48:	f7fe f82a 	bl	8006ca0 <fill_roundrect>
				fill_roundrect(x1+107+x,x1+153+x,y1+207+y,y1+253+y,KEYPAD_COLOR ,0xcccccc);
 8008c4c:	4b68      	ldr	r3, [pc, #416]	; (8008df0 <PageKeyPad+0x254>)
 8008c4e:	4a67      	ldr	r2, [pc, #412]	; (8008dec <PageKeyPad+0x250>)
 8008c50:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8008c54:	e9cd 3200 	strd	r3, r2, [sp]
 8008c58:	1ca0      	adds	r0, r4, #2
 8008c5a:	4643      	mov	r3, r8
 8008c5c:	4652      	mov	r2, sl
 8008c5e:	f7fe f81f 	bl	8006ca0 <fill_roundrect>
				if(UC_FLAG)
 8008c62:	4b64      	ldr	r3, [pc, #400]	; (8008df4 <PageKeyPad+0x258>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1d1      	bne.n	8008c0e <PageKeyPad+0x72>
					}
				}
				else
				{
					if(NUM_FLAG)
 8008c6a:	4b5e      	ldr	r3, [pc, #376]	; (8008de4 <PageKeyPad+0x248>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
					{
						print_char(x1+130+x,y1+220+y,symbol_key[i][j],BTN_COLOR);
 8008c6e:	f104 0019 	add.w	r0, r4, #25
 8008c72:	b280      	uxth	r0, r0
					if(NUM_FLAG)
 8008c74:	b92b      	cbnz	r3, 8008c82 <PageKeyPad+0xe6>
					}
					else
					{
						print_char(x1+130+x,y1+220+y,char_key[i][j],BTN_COLOR);
 8008c76:	7832      	ldrb	r2, [r6, #0]
 8008c78:	4b5b      	ldr	r3, [pc, #364]	; (8008de8 <PageKeyPad+0x24c>)
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7fe fb46 	bl	800730c <print_char>
 8008c80:	e7d1      	b.n	8008c26 <PageKeyPad+0x8a>
						print_char(x1+130+x,y1+220+y,symbol_key[i][j],BTN_COLOR);
 8008c82:	4b59      	ldr	r3, [pc, #356]	; (8008de8 <PageKeyPad+0x24c>)
 8008c84:	782a      	ldrb	r2, [r5, #0]
 8008c86:	4639      	mov	r1, r7
 8008c88:	f7fe fb40 	bl	800730c <print_char>
 8008c8c:	e7cb      	b.n	8008c26 <PageKeyPad+0x8a>
		for(int i=0; i<3; i++)
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	f109 093c 	add.w	r9, r9, #60	; 0x3c
 8008c94:	3302      	adds	r3, #2
 8008c96:	f5b9 7fd0 	cmp.w	r9, #416	; 0x1a0
 8008c9a:	9304      	str	r3, [sp, #16]
					}
				}
				x+=60;
			}
			x=0;
			k=1;
 8008c9c:	f04f 0701 	mov.w	r7, #1
		for(int i=0; i<3; i++)
 8008ca0:	d193      	bne.n	8008bca <PageKeyPad+0x2e>
			y1+=60;
		}
		fill_roundrect(105,185,325+y,375+y,0xcccccc,PURPLE);
 8008ca2:	4c52      	ldr	r4, [pc, #328]	; (8008dec <PageKeyPad+0x250>)
 8008ca4:	4e4c      	ldr	r6, [pc, #304]	; (8008dd8 <PageKeyPad+0x23c>)
		fill_roundrect(107,183,327+y,373+y,KEYPAD_COLOR,0xcccccc); // Caps
 8008ca6:	4d52      	ldr	r5, [pc, #328]	; (8008df0 <PageKeyPad+0x254>)
		fill_roundrect(105,185,325+y,375+y,0xcccccc,PURPLE);
 8008ca8:	e9cd 4600 	strd	r4, r6, [sp]
 8008cac:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8008cb0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008cb4:	21b9      	movs	r1, #185	; 0xb9
 8008cb6:	2069      	movs	r0, #105	; 0x69
 8008cb8:	f7fd fff2 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(107,183,327+y,373+y,KEYPAD_COLOR,0xcccccc); // Caps
 8008cbc:	e9cd 5400 	strd	r5, r4, [sp]
 8008cc0:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8008cc4:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8008cc8:	21b7      	movs	r1, #183	; 0xb7
 8008cca:	206b      	movs	r0, #107	; 0x6b
 8008ccc:	f7fd ffe8 	bl	8006ca0 <fill_roundrect>
		print_string(120,340+y,"Caps",BTN_COLOR);
 8008cd0:	4b45      	ldr	r3, [pc, #276]	; (8008de8 <PageKeyPad+0x24c>)
 8008cd2:	4a49      	ldr	r2, [pc, #292]	; (8008df8 <PageKeyPad+0x25c>)
 8008cd4:	f240 1173 	movw	r1, #371	; 0x173
 8008cd8:	2078      	movs	r0, #120	; 0x78
 8008cda:	f7fe fb29 	bl	8007330 <print_string>

		fill_roundrect(105,245,385+y,435+y,0xcccccc,PURPLE);
 8008cde:	464a      	mov	r2, r9
 8008ce0:	e9cd 4600 	strd	r4, r6, [sp]
 8008ce4:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8008ce8:	21f5      	movs	r1, #245	; 0xf5
 8008cea:	2069      	movs	r0, #105	; 0x69
 8008cec:	f7fd ffd8 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(107,243,387+y,433+y,KEYPAD_COLOR,0xcccccc);	//Num
 8008cf0:	e9cd 5400 	strd	r5, r4, [sp]
 8008cf4:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8008cf8:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8008cfc:	21f3      	movs	r1, #243	; 0xf3
 8008cfe:	206b      	movs	r0, #107	; 0x6b
 8008d00:	f7fd ffce 	bl	8006ca0 <fill_roundrect>
		print_string(150,400+y,"Num",BTN_COLOR);
 8008d04:	4b38      	ldr	r3, [pc, #224]	; (8008de8 <PageKeyPad+0x24c>)
 8008d06:	4a3d      	ldr	r2, [pc, #244]	; (8008dfc <PageKeyPad+0x260>)
 8008d08:	f240 11af 	movw	r1, #431	; 0x1af
 8008d0c:	2096      	movs	r0, #150	; 0x96
 8008d0e:	f7fe fb0f 	bl	8007330 <print_string>

		fill_roundrect(555,695,385+y,435+y,0xcccccc,PURPLE);
 8008d12:	464a      	mov	r2, r9
 8008d14:	e9cd 4600 	strd	r4, r6, [sp]
 8008d18:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8008d1c:	f240 21b7 	movw	r1, #695	; 0x2b7
 8008d20:	f240 202b 	movw	r0, #555	; 0x22b
 8008d24:	f7fd ffbc 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(557,693,387+y,433+y,KEYPAD_COLOR,0xcccccc);  // keypad DOWN.
 8008d28:	e9cd 5400 	strd	r5, r4, [sp]
 8008d2c:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8008d30:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8008d34:	f240 21b5 	movw	r1, #693	; 0x2b5
 8008d38:	f240 202d 	movw	r0, #557	; 0x22d
 8008d3c:	f7fd ffb0 	bl	8006ca0 <fill_roundrect>
		symbol(620,390+y,'D',BTN_COLOR); //DOWN ARROW.
 8008d40:	4b29      	ldr	r3, [pc, #164]	; (8008de8 <PageKeyPad+0x24c>)
 8008d42:	2244      	movs	r2, #68	; 0x44
 8008d44:	f240 11a5 	movw	r1, #421	; 0x1a5
 8008d48:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8008d4c:	f7fe fe16 	bl	800797c <symbol>


		fill_roundrect(255,545,385+y,435+y,0xcccccc,PURPLE);
 8008d50:	464a      	mov	r2, r9
 8008d52:	e9cd 4600 	strd	r4, r6, [sp]
 8008d56:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8008d5a:	f240 2121 	movw	r1, #545	; 0x221
 8008d5e:	20ff      	movs	r0, #255	; 0xff
 8008d60:	f7fd ff9e 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(257,543,387+y,433+y,KEYPAD_COLOR,0xcccccc); // space
 8008d64:	e9cd 5400 	strd	r5, r4, [sp]
 8008d68:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
 8008d6c:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
 8008d70:	f240 211f 	movw	r1, #543	; 0x21f
 8008d74:	f240 1001 	movw	r0, #257	; 0x101
 8008d78:	f7fd ff92 	bl	8006ca0 <fill_roundrect>
		print_string(360,400+y,"Space",BTN_COLOR);
 8008d7c:	4b1a      	ldr	r3, [pc, #104]	; (8008de8 <PageKeyPad+0x24c>)
 8008d7e:	4a20      	ldr	r2, [pc, #128]	; (8008e00 <PageKeyPad+0x264>)
 8008d80:	f240 11af 	movw	r1, #431	; 0x1af
 8008d84:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8008d88:	f7fe fad2 	bl	8007330 <print_string>

		fill_roundrect(615,695,325+y,375+y,0xcccccc,PURPLE);
 8008d8c:	e9cd 4600 	strd	r4, r6, [sp]
 8008d90:	f44f 73cb 	mov.w	r3, #406	; 0x196
 8008d94:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008d98:	f240 21b7 	movw	r1, #695	; 0x2b7
 8008d9c:	f240 2067 	movw	r0, #615	; 0x267
 8008da0:	f7fd ff7e 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(617,693,327+y,373+y,KEYPAD_COLOR,0xcccccc); // BackSpace
 8008da4:	e9cd 5400 	strd	r5, r4, [sp]
 8008da8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8008dac:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8008db0:	f240 21b5 	movw	r1, #693	; 0x2b5
 8008db4:	f240 2069 	movw	r0, #617	; 0x269
 8008db8:	f7fd ff72 	bl	8006ca0 <fill_roundrect>
		print_string(625,340+y,"Back",BTN_COLOR);
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <PageKeyPad+0x24c>)
 8008dbe:	4a11      	ldr	r2, [pc, #68]	; (8008e04 <PageKeyPad+0x268>)
 8008dc0:	f240 1173 	movw	r1, #371	; 0x173
 8008dc4:	f240 2071 	movw	r0, #625	; 0x271
		x1=0;
		y=0;
		y1=0;
		k=0;
	//Set_Font(&Font12x18);
}
 8008dc8:	b007      	add	sp, #28
 8008dca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		print_string(625,340+y,"Back",BTN_COLOR);
 8008dce:	f7fe baaf 	b.w	8007330 <print_string>
 8008dd2:	bf00      	nop
 8008dd4:	2000054c 	.word	0x2000054c
 8008dd8:	00800010 	.word	0x00800010
 8008ddc:	20000004 	.word	0x20000004
 8008de0:	20000078 	.word	0x20000078
 8008de4:	200005dc 	.word	0x200005dc
 8008de8:	00b30015 	.word	0x00b30015
 8008dec:	00cccccc 	.word	0x00cccccc
 8008df0:	00d9d9d9 	.word	0x00d9d9d9
 8008df4:	200005dd 	.word	0x200005dd
 8008df8:	0800e6bc 	.word	0x0800e6bc
 8008dfc:	0800e6c4 	.word	0x0800e6c4
 8008e00:	0800e6c8 	.word	0x0800e6c8
 8008e04:	0800e6d0 	.word	0x0800e6d0

08008e08 <dropdown>:

//###############################    DROPDOWN ROLE   ######################################
void dropdown(char *dpdown [], u32 NumOfBox,s16 x1, s16 x2, s16 y1)
{
 8008e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e0c:	ed2d 8b02 	vpush	{d8}
 8008e10:	b085      	sub	sp, #20
  int y=0;
	//fill_area(197,503,234,430,WHITE);

	for(idx=0; idx<NumOfBox;idx++)
 8008e12:	4e27      	ldr	r6, [pc, #156]	; (8008eb0 <dropdown+0xa8>)
{
 8008e14:	9003      	str	r0, [sp, #12]
	for(idx=0; idx<NumOfBox;idx++)
 8008e16:	2000      	movs	r0, #0
{
 8008e18:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
	for(idx=0; idx<NumOfBox;idx++)
 8008e1c:	7030      	strb	r0, [r6, #0]
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d041      	beq.n	8008ea6 <dropdown+0x9e>
 8008e22:	f105 04f6 	add.w	r4, r5, #246	; 0xf6
	{
		//fill_roundrect(197,503,y1+234+y,y1+280+y,0xb3b3b3,0xb3b3b3);
		//Set_Font(&Font16x24);
		if(active_role == idx)
		{
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8008e26:	f203 17f7 	addw	r7, r3, #503	; 0x1f7
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8008e2a:	f102 0bd7 	add.w	fp, r2, #215	; 0xd7
		}
		else
		{
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0xe6e6e6,0xe6e6e6);
			print_string(265-50+x1 ,y1+246+y,(*(dpdown+idx)),0x999999);
 8008e2e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008ebc <dropdown+0xb4>
 8008e32:	ee08 7a10 	vmov	s16, r7
 8008e36:	468a      	mov	sl, r1
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8008e38:	f102 08c5 	add.w	r8, r2, #197	; 0xc5
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8008e3c:	fa1f fb8b 	uxth.w	fp, fp
 8008e40:	b2a4      	uxth	r4, r4
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8008e42:	35ea      	adds	r5, #234	; 0xea
 8008e44:	e017      	b.n	8008e76 <dropdown+0x6e>
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0xe6e6e6,0xe6e6e6);
 8008e46:	481b      	ldr	r0, [pc, #108]	; (8008eb4 <dropdown+0xac>)
 8008e48:	e9cd 0000 	strd	r0, r0, [sp]
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	f7fd ff27 	bl	8006ca0 <fill_roundrect>
			print_string(265-50+x1 ,y1+246+y,(*(dpdown+idx)),0x999999);
 8008e52:	7833      	ldrb	r3, [r6, #0]
 8008e54:	9a03      	ldr	r2, [sp, #12]
	for(idx=0; idx<NumOfBox;idx++)
 8008e56:	3528      	adds	r5, #40	; 0x28
			print_string(265-50+x1 ,y1+246+y,(*(dpdown+idx)),0x999999);
 8008e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	464b      	mov	r3, r9
 8008e60:	4658      	mov	r0, fp
 8008e62:	f7fe fa65 	bl	8007330 <print_string>
	for(idx=0; idx<NumOfBox;idx++)
 8008e66:	7830      	ldrb	r0, [r6, #0]
 8008e68:	3001      	adds	r0, #1
 8008e6a:	b2c0      	uxtb	r0, r0
 8008e6c:	3428      	adds	r4, #40	; 0x28
 8008e6e:	4550      	cmp	r0, sl
 8008e70:	7030      	strb	r0, [r6, #0]
 8008e72:	b2a4      	uxth	r4, r4
 8008e74:	d217      	bcs.n	8008ea6 <dropdown+0x9e>
		if(active_role == idx)
 8008e76:	4f10      	ldr	r7, [pc, #64]	; (8008eb8 <dropdown+0xb0>)
 8008e78:	f897 c000 	ldrb.w	ip, [r7]
 8008e7c:	4584      	cmp	ip, r0
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0xe6e6e6,0xe6e6e6);
 8008e7e:	ee18 1a10 	vmov	r1, s16
 8008e82:	f105 032e 	add.w	r3, r5, #46	; 0x2e
 8008e86:	462a      	mov	r2, r5
		if(active_role == idx)
 8008e88:	d1dd      	bne.n	8008e46 <dropdown+0x3e>
			fill_roundrect(197+x1,503+x2,y1+234+y,y1+280+y,0x999999,0x999999);  //b3b3b3
 8008e8a:	e9cd 9900 	strd	r9, r9, [sp]
 8008e8e:	4640      	mov	r0, r8
 8008e90:	f7fd ff06 	bl	8006ca0 <fill_roundrect>
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8008e94:	7833      	ldrb	r3, [r6, #0]
 8008e96:	9a03      	ldr	r2, [sp, #12]
	for(idx=0; idx<NumOfBox;idx++)
 8008e98:	3528      	adds	r5, #40	; 0x28
			print_string(265-50+x1,y1+246+y,(*(dpdown+idx)),WHITE);
 8008e9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008ea4:	e7dc      	b.n	8008e60 <dropdown+0x58>
		 y+=40;

	}

	NumOfBox = 0;
}
 8008ea6:	b005      	add	sp, #20
 8008ea8:	ecbd 8b02 	vpop	{d8}
 8008eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb0:	20000670 	.word	0x20000670
 8008eb4:	00e6e6e6 	.word	0x00e6e6e6
 8008eb8:	200005de 	.word	0x200005de
 8008ebc:	00999999 	.word	0x00999999

08008ec0 <attendence_search>:
}

//#######################################    SEARCH ATTENDANCE   ###########################################

void attendence_search(void)
{
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	b084      	sub	sp, #16
 	uint8_t table_y = 22;
	//fill_screen(PURPLE);
	fill_area(100,700,0,480,PURPLE);
 8008ec4:	4e9f      	ldr	r6, [pc, #636]	; (8009144 <attendence_search+0x284>)
	//fill_area(0,800,0,70+10,0x74c69d);
	//fill_roundrect(130,530,25,75,0x9900ff, 0x74c69d);
	fill_roundrect(190,590,36,84,0xcedcfd,PURPLE);	//   Search box
 8008ec6:	4da0      	ldr	r5, [pc, #640]	; (8009148 <attendence_search+0x288>)
	fill_area(100,700,0,480,PURPLE);
 8008ec8:	9600      	str	r6, [sp, #0]
 8008eca:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8008ed4:	2064      	movs	r0, #100	; 0x64
 8008ed6:	f7fd f975 	bl	80061c4 <fill_area>
	fill_roundrect2(193,587,39,81,0xe7eefe);
 8008eda:	4c9c      	ldr	r4, [pc, #624]	; (800914c <attendence_search+0x28c>)
	fill_roundrect(190,590,36,84,0xcedcfd,PURPLE);	//   Search box
 8008edc:	2354      	movs	r3, #84	; 0x54
 8008ede:	2224      	movs	r2, #36	; 0x24
 8008ee0:	f240 214e 	movw	r1, #590	; 0x24e
 8008ee4:	20be      	movs	r0, #190	; 0xbe
 8008ee6:	e9cd 5600 	strd	r5, r6, [sp]
 8008eea:	f7fd fed9 	bl	8006ca0 <fill_roundrect>
	fill_roundrect2(193,587,39,81,0xe7eefe);
 8008eee:	2351      	movs	r3, #81	; 0x51
 8008ef0:	2227      	movs	r2, #39	; 0x27
 8008ef2:	9400      	str	r4, [sp, #0]
 8008ef4:	f240 214b 	movw	r1, #587	; 0x24b
 8008ef8:	20c1      	movs	r0, #193	; 0xc1
 8008efa:	f7ff f8c5 	bl	8008088 <fill_roundrect2>
	draw_roundrect(190,590,36,84,BLUE);
 8008efe:	22ff      	movs	r2, #255	; 0xff
 8008f00:	2354      	movs	r3, #84	; 0x54
 8008f02:	9200      	str	r2, [sp, #0]
 8008f04:	f240 214e 	movw	r1, #590	; 0x24e
 8008f08:	2224      	movs	r2, #36	; 0x24
 8008f0a:	20be      	movs	r0, #190	; 0xbe
 8008f0c:	f7fd fcc8 	bl	80068a0 <draw_roundrect>
	fill_roundrect(620,720,36,84,0xb6cbbb,PURPLE); //   Search button
 8008f10:	4a8f      	ldr	r2, [pc, #572]	; (8009150 <attendence_search+0x290>)
 8008f12:	2354      	movs	r3, #84	; 0x54
 8008f14:	e9cd 2600 	strd	r2, r6, [sp]
 8008f18:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8008f1c:	2224      	movs	r2, #36	; 0x24
 8008f1e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8008f22:	f7fd febd 	bl	8006ca0 <fill_roundrect>
	fill_roundrect(625,715,41,79,0xe7eefe,0xcedcfd);
 8008f26:	e9cd 4500 	strd	r4, r5, [sp]
 8008f2a:	2229      	movs	r2, #41	; 0x29
 8008f2c:	f240 21cb 	movw	r1, #715	; 0x2cb
 8008f30:	f240 2071 	movw	r0, #625	; 0x271
 8008f34:	234f      	movs	r3, #79	; 0x4f
 8008f36:	f7fd feb3 	bl	8006ca0 <fill_roundrect>
	//print_string(590,40,"SEARCH",0x737373);

///////////////////////////// for button  //////////////////////////////////////////////////////

	//draw_circle(760, 180-table_y+1, 20, 0x9900ff);
	fill_circle(760, 180-table_y, 20, 0xcedcfd);
 8008f3a:	462b      	mov	r3, r5
 8008f3c:	2214      	movs	r2, #20
 8008f3e:	219e      	movs	r1, #158	; 0x9e
 8008f40:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008f44:	f7fe f8ea 	bl	800711c <fill_circle>
	fill_circle(760, 180-table_y, 18, 0xe7eefe);
 8008f48:	4623      	mov	r3, r4
 8008f4a:	2212      	movs	r2, #18
 8008f4c:	219e      	movs	r1, #158	; 0x9e
 8008f4e:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008f52:	f7fe f8e3 	bl	800711c <fill_circle>
	symbol(760, 175-table_y, '^', 0x737373);
 8008f56:	4b7f      	ldr	r3, [pc, #508]	; (8009154 <attendence_search+0x294>)
 8008f58:	225e      	movs	r2, #94	; 0x5e
 8008f5a:	2199      	movs	r1, #153	; 0x99
 8008f5c:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008f60:	f7fe fd0c 	bl	800797c <symbol>
 8008f64:	24b7      	movs	r4, #183	; 0xb7

	for(int i = 4; i<195; i=i+8)
	 {
	   draw_vl(760, 179+i, 3, 0xe7eefe);
 8008f66:	b221      	sxth	r1, r4
 8008f68:	4b78      	ldr	r3, [pc, #480]	; (800914c <attendence_search+0x28c>)
 8008f6a:	9103      	str	r1, [sp, #12]
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008f72:	f7fd fa9f 	bl	80064b4 <draw_vl>
	for(int i = 4; i<195; i=i+8)
 8008f76:	3408      	adds	r4, #8
		 draw_vl(759, 179+i, 3, 0xe7eefe);
 8008f78:	4b74      	ldr	r3, [pc, #464]	; (800914c <attendence_search+0x28c>)
 8008f7a:	9903      	ldr	r1, [sp, #12]
 8008f7c:	2203      	movs	r2, #3
 8008f7e:	f240 20f7 	movw	r0, #759	; 0x2f7
 8008f82:	f7fd fa97 	bl	80064b4 <draw_vl>
	for(int i = 4; i<195; i=i+8)
 8008f86:	b2a4      	uxth	r4, r4
 8008f88:	f240 1377 	movw	r3, #375	; 0x177
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	d1ea      	bne.n	8008f66 <attendence_search+0xa6>
	 }

	//draw_circle(760, 418-table_y+1, 20, 0x9900ff);
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 8008f90:	4b6d      	ldr	r3, [pc, #436]	; (8009148 <attendence_search+0x288>)

////////////////////////// for table  ///////////////////////////////////////////////////////////

//	fill_area(20,730,90,140+3,0x74c69d);
	fill_area(70,720,143-table_y,193+3-table_y,0x8c8c8c);
	fill_area(70,720,196-table_y,246+3-table_y,table_color);
 8008f92:	4d71      	ldr	r5, [pc, #452]	; (8009158 <attendence_search+0x298>)
	fill_area(70,720,249-table_y,299+3-table_y,table_color_2);
 8008f94:	4c71      	ldr	r4, [pc, #452]	; (800915c <attendence_search+0x29c>)
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 8008f96:	2214      	movs	r2, #20
 8008f98:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008f9c:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008fa0:	f7fe f8bc 	bl	800711c <fill_circle>
	fill_circle(760, 418-table_y, 18, 0xe7eefe);
 8008fa4:	4b69      	ldr	r3, [pc, #420]	; (800914c <attendence_search+0x28c>)
 8008fa6:	2212      	movs	r2, #18
 8008fa8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008fac:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008fb0:	f7fe f8b4 	bl	800711c <fill_circle>
  symbol_dwn_Arrow (760, 423-table_y, 0x737373);  /// for DOWN Arrow  symbol
 8008fb4:	4a67      	ldr	r2, [pc, #412]	; (8009154 <attendence_search+0x294>)
 8008fb6:	f240 1191 	movw	r1, #401	; 0x191
 8008fba:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8008fbe:	f7ff fa37 	bl	8008430 <symbol_dwn_Arrow>
	fill_area(70,720,143-table_y,193+3-table_y,0x8c8c8c);
 8008fc2:	4867      	ldr	r0, [pc, #412]	; (8009160 <attendence_search+0x2a0>)
 8008fc4:	9000      	str	r0, [sp, #0]
 8008fc6:	23ae      	movs	r3, #174	; 0xae
 8008fc8:	2279      	movs	r2, #121	; 0x79
 8008fca:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8008fce:	2046      	movs	r0, #70	; 0x46
 8008fd0:	f7fd f8f8 	bl	80061c4 <fill_area>
	fill_area(70,720,196-table_y,246+3-table_y,table_color);
 8008fd4:	23e3      	movs	r3, #227	; 0xe3
 8008fd6:	22ae      	movs	r2, #174	; 0xae
 8008fd8:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8008fdc:	2046      	movs	r0, #70	; 0x46
 8008fde:	9500      	str	r5, [sp, #0]
 8008fe0:	f7fd f8f0 	bl	80061c4 <fill_area>
	fill_area(70,720,249-table_y,299+3-table_y,table_color_2);
 8008fe4:	9400      	str	r4, [sp, #0]
 8008fe6:	f44f 738c 	mov.w	r3, #280	; 0x118
 8008fea:	22e3      	movs	r2, #227	; 0xe3
 8008fec:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8008ff0:	2046      	movs	r0, #70	; 0x46
 8008ff2:	f7fd f8e7 	bl	80061c4 <fill_area>
	fill_area(70,720,302-table_y,352+3-table_y,table_color);
 8008ff6:	f240 134d 	movw	r3, #333	; 0x14d
 8008ffa:	f44f 728c 	mov.w	r2, #280	; 0x118
 8008ffe:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8009002:	9500      	str	r5, [sp, #0]
 8009004:	2046      	movs	r0, #70	; 0x46
 8009006:	f7fd f8dd 	bl	80061c4 <fill_area>
	fill_area(70,720,355-table_y,405+3-table_y,table_color_2);
 800900a:	9400      	str	r4, [sp, #0]
 800900c:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8009010:	f240 124d 	movw	r2, #333	; 0x14d
 8009014:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8009018:	2046      	movs	r0, #70	; 0x46
	fill_area(70,720,408-table_y,458+3-table_y,table_color);


	draw_rect(70,720,143-table_y,461-table_y,table_border_color);
 800901a:	4c52      	ldr	r4, [pc, #328]	; (8009164 <attendence_search+0x2a4>)
	fill_area(70,720,355-table_y,405+3-table_y,table_color_2);
 800901c:	f7fd f8d2 	bl	80061c4 <fill_area>
	fill_area(70,720,408-table_y,458+3-table_y,table_color);
 8009020:	f240 13b7 	movw	r3, #439	; 0x1b7
 8009024:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009028:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800902c:	9500      	str	r5, [sp, #0]
 800902e:	2046      	movs	r0, #70	; 0x46
 8009030:	f7fd f8c8 	bl	80061c4 <fill_area>
	draw_rect(70,720,143-table_y,461-table_y,table_border_color);
 8009034:	2279      	movs	r2, #121	; 0x79
 8009036:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800903a:	2046      	movs	r0, #70	; 0x46
 800903c:	9400      	str	r4, [sp, #0]
 800903e:	f240 13b7 	movw	r3, #439	; 0x1b7
 8009042:	f7fd fad7 	bl	80065f4 <draw_rect>

	draw_vl(70+90,143-table_y,318,table_border_color);
 8009046:	4623      	mov	r3, r4
 8009048:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800904c:	2179      	movs	r1, #121	; 0x79
 800904e:	20a0      	movs	r0, #160	; 0xa0
 8009050:	f7fd fa30 	bl	80064b4 <draw_vl>
	draw_vl(390+100,143-table_y,318,table_border_color);
 8009054:	4623      	mov	r3, r4
 8009056:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800905a:	2179      	movs	r1, #121	; 0x79
 800905c:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8009060:	f7fd fa28 	bl	80064b4 <draw_vl>
	draw_vl(170+435,143-table_y,318,table_border_color);
 8009064:	4623      	mov	r3, r4
 8009066:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800906a:	2179      	movs	r1, #121	; 0x79
 800906c:	f240 205d 	movw	r0, #605	; 0x25d
 8009070:	f7fd fa20 	bl	80064b4 <draw_vl>


//	draw_hl(20,143,710,table_border_color);
	draw_hl(70,196-table_y,650,table_border_color);
 8009074:	4623      	mov	r3, r4
 8009076:	f240 228a 	movw	r2, #650	; 0x28a
 800907a:	21ae      	movs	r1, #174	; 0xae
 800907c:	2046      	movs	r0, #70	; 0x46
 800907e:	f7fd f97b 	bl	8006378 <draw_hl>
	draw_hl(70,249-table_y,650,table_border_color);
 8009082:	4623      	mov	r3, r4
 8009084:	f240 228a 	movw	r2, #650	; 0x28a
 8009088:	21e3      	movs	r1, #227	; 0xe3
 800908a:	2046      	movs	r0, #70	; 0x46
 800908c:	f7fd f974 	bl	8006378 <draw_hl>
	draw_hl(70,302-table_y,650,table_border_color);
 8009090:	4623      	mov	r3, r4
 8009092:	f240 228a 	movw	r2, #650	; 0x28a
 8009096:	f44f 718c 	mov.w	r1, #280	; 0x118
 800909a:	2046      	movs	r0, #70	; 0x46
 800909c:	f7fd f96c 	bl	8006378 <draw_hl>
	draw_hl(70,355-table_y,650,table_border_color);
 80090a0:	4623      	mov	r3, r4
 80090a2:	f240 228a 	movw	r2, #650	; 0x28a
 80090a6:	f240 114d 	movw	r1, #333	; 0x14d
 80090aa:	2046      	movs	r0, #70	; 0x46
 80090ac:	f7fd f964 	bl	8006378 <draw_hl>
	draw_hl(70,408-table_y,650,table_border_color);
 80090b0:	4623      	mov	r3, r4
 80090b2:	f240 228a 	movw	r2, #650	; 0x28a
 80090b6:	f44f 71c1 	mov.w	r1, #386	; 0x182
 80090ba:	2046      	movs	r0, #70	; 0x46
 80090bc:	f7fd f95c 	bl	8006378 <draw_hl>

/////////////////////////////for string  ///////////////////////////////////////////////////////

	Set_Font(&Font12x18);
 80090c0:	4829      	ldr	r0, [pc, #164]	; (8009168 <attendence_search+0x2a8>)
 80090c2:	f7fc ffcd 	bl	8006060 <Set_Font>
	print_string(635,50,"SEARCH",0x737373);
 80090c6:	4b23      	ldr	r3, [pc, #140]	; (8009154 <attendence_search+0x294>)
 80090c8:	4a28      	ldr	r2, [pc, #160]	; (800916c <attendence_search+0x2ac>)
 80090ca:	2132      	movs	r1, #50	; 0x32
 80090cc:	f240 207b 	movw	r0, #635	; 0x27b
 80090d0:	f7fe f92e 	bl	8007330 <print_string>


//	print_int(4, 400, 25+5, 1, 1, WHITE);
//	print_string(200,50,"NAVEEN PRAKASH MAURYA",0x737373);
//	print_string(760,20+5,"6",WHITE);
	print_string(95,163-table_y,"ID",WHITE);
 80090d4:	4a26      	ldr	r2, [pc, #152]	; (8009170 <attendence_search+0x2b0>)
 80090d6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80090da:	218d      	movs	r1, #141	; 0x8d
 80090dc:	205f      	movs	r0, #95	; 0x5f
 80090de:	f7fe f927 	bl	8007330 <print_string>
	print_string(330,163-table_y,"NAME",WHITE);
 80090e2:	4a24      	ldr	r2, [pc, #144]	; (8009174 <attendence_search+0x2b4>)
 80090e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80090e8:	218d      	movs	r1, #141	; 0x8d
 80090ea:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80090ee:	f7fe f91f 	bl	8007330 <print_string>
	print_string(500,163-table_y,"IN",WHITE);
 80090f2:	4a21      	ldr	r2, [pc, #132]	; (8009178 <attendence_search+0x2b8>)
 80090f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80090f8:	218d      	movs	r1, #141	; 0x8d
 80090fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090fe:	f7fe f917 	bl	8007330 <print_string>
	print_string(615,163-table_y,"OUT",WHITE);
 8009102:	4a1e      	ldr	r2, [pc, #120]	; (800917c <attendence_search+0x2bc>)
 8009104:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009108:	218d      	movs	r1, #141	; 0x8d
 800910a:	f240 2067 	movw	r0, #615	; 0x267
 800910e:	f7fe f90f 	bl	8007330 <print_string>
//	print_string(170,216-table_y,"NAVEEN PRAKASH MAURYA",0x9900ff);
//	print_string(90,216-table_y,"E001",0x9900ff);
  print_string(505,216-table_y,"09:30",0x9900ff);
 8009112:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <attendence_search+0x2c0>)
 8009114:	4a1b      	ldr	r2, [pc, #108]	; (8009184 <attendence_search+0x2c4>)
 8009116:	21c2      	movs	r1, #194	; 0xc2
 8009118:	f240 10f9 	movw	r0, #505	; 0x1f9
 800911c:	f7fe f908 	bl	8007330 <print_string>
	print_string(615,216-table_y,"06:00",0x9900ff);
 8009120:	4b17      	ldr	r3, [pc, #92]	; (8009180 <attendence_search+0x2c0>)
 8009122:	4a19      	ldr	r2, [pc, #100]	; (8009188 <attendence_search+0x2c8>)
 8009124:	21c2      	movs	r1, #194	; 0xc2
 8009126:	f240 2067 	movw	r0, #615	; 0x267
 800912a:	f7fe f901 	bl	8007330 <print_string>
	print_image(10,10,60,60,back);
 800912e:	233c      	movs	r3, #60	; 0x3c
 8009130:	210a      	movs	r1, #10
 8009132:	4a16      	ldr	r2, [pc, #88]	; (800918c <attendence_search+0x2cc>)
 8009134:	9200      	str	r2, [sp, #0]
 8009136:	4608      	mov	r0, r1
 8009138:	461a      	mov	r2, r3
 800913a:	f7fe f91b 	bl	8007374 <print_image>
	BackBtn();
}
 800913e:	b004      	add	sp, #16
 8009140:	bd70      	pop	{r4, r5, r6, pc}
 8009142:	bf00      	nop
 8009144:	00800010 	.word	0x00800010
 8009148:	00cedcfd 	.word	0x00cedcfd
 800914c:	00e7eefe 	.word	0x00e7eefe
 8009150:	00b6cbbb 	.word	0x00b6cbbb
 8009154:	00737373 	.word	0x00737373
 8009158:	00b7e4c7 	.word	0x00b7e4c7
 800915c:	00d8f3dc 	.word	0x00d8f3dc
 8009160:	008c8c8c 	.word	0x008c8c8c
 8009164:	0052b788 	.word	0x0052b788
 8009168:	20000544 	.word	0x20000544
 800916c:	0800e648 	.word	0x0800e648
 8009170:	0800e6b0 	.word	0x0800e6b0
 8009174:	0800e6d8 	.word	0x0800e6d8
 8009178:	0800e6e0 	.word	0x0800e6e0
 800917c:	0800e6e4 	.word	0x0800e6e4
 8009180:	009900ff 	.word	0x009900ff
 8009184:	0800e6e8 	.word	0x0800e6e8
 8009188:	0800e6f0 	.word	0x0800e6f0
 800918c:	08014108 	.word	0x08014108

08009190 <Role_Page>:

//######################################    ROLE PAGE   #######################################

void Role_Page(void)
{
 8009190:	b530      	push	{r4, r5, lr}
  uint8_t table_y = 22;
	fill_screen(PURPLE);
 8009192:	487b      	ldr	r0, [pc, #492]	; (8009380 <Role_Page+0x1f0>)
{
 8009194:	b085      	sub	sp, #20
	fill_screen(PURPLE);
 8009196:	f7fc ffcf 	bl	8006138 <fill_screen>

///////////////////////////// for button  //////////////////////////////////////////////////////

	//draw_circle(760, 180-table_y+1, 20, 0x9900ff);
	fill_circle(760, 180-table_y, 20, 0xcedcfd);
 800919a:	4b7a      	ldr	r3, [pc, #488]	; (8009384 <Role_Page+0x1f4>)
 800919c:	2214      	movs	r2, #20
 800919e:	219e      	movs	r1, #158	; 0x9e
 80091a0:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80091a4:	f7fd ffba 	bl	800711c <fill_circle>
	fill_circle(760, 180-table_y, 18, 0xe7eefe);
 80091a8:	4b77      	ldr	r3, [pc, #476]	; (8009388 <Role_Page+0x1f8>)
 80091aa:	2212      	movs	r2, #18
 80091ac:	219e      	movs	r1, #158	; 0x9e
 80091ae:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80091b2:	f7fd ffb3 	bl	800711c <fill_circle>
	symbol(760, 175-table_y, '^', 0x737373);
 80091b6:	4b75      	ldr	r3, [pc, #468]	; (800938c <Role_Page+0x1fc>)
 80091b8:	225e      	movs	r2, #94	; 0x5e
 80091ba:	2199      	movs	r1, #153	; 0x99
 80091bc:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80091c0:	f7fe fbdc 	bl	800797c <symbol>
 80091c4:	24b7      	movs	r4, #183	; 0xb7

	for(int i = 4; i<195; i=i+8)
	 {
	   draw_vl(760, 179+i, 3, 0xe7eefe);
 80091c6:	b221      	sxth	r1, r4
 80091c8:	4b6f      	ldr	r3, [pc, #444]	; (8009388 <Role_Page+0x1f8>)
 80091ca:	9103      	str	r1, [sp, #12]
 80091cc:	2203      	movs	r2, #3
 80091ce:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80091d2:	f7fd f96f 	bl	80064b4 <draw_vl>
	for(int i = 4; i<195; i=i+8)
 80091d6:	3408      	adds	r4, #8
		 draw_vl(759, 179+i, 3, 0xe7eefe);
 80091d8:	4b6b      	ldr	r3, [pc, #428]	; (8009388 <Role_Page+0x1f8>)
 80091da:	9903      	ldr	r1, [sp, #12]
 80091dc:	2203      	movs	r2, #3
 80091de:	f240 20f7 	movw	r0, #759	; 0x2f7
 80091e2:	f7fd f967 	bl	80064b4 <draw_vl>
	for(int i = 4; i<195; i=i+8)
 80091e6:	b2a4      	uxth	r4, r4
 80091e8:	f240 1377 	movw	r3, #375	; 0x177
 80091ec:	429c      	cmp	r4, r3
 80091ee:	d1ea      	bne.n	80091c6 <Role_Page+0x36>
	 }

	//draw_circle(760, 418-table_y+1, 20, 0x9900ff);
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 80091f0:	4b64      	ldr	r3, [pc, #400]	; (8009384 <Role_Page+0x1f4>)

////////////////////////// for table  ///////////////////////////////////////////////////////////

//	fill_area(20,730,90,140+3,0x74c69d);
	fill_area(70,720,143-table_y,193+3-table_y,0x8c8c8c);
	fill_area(70,720,196-table_y,246+3-table_y,table_color);
 80091f2:	4d67      	ldr	r5, [pc, #412]	; (8009390 <Role_Page+0x200>)
	fill_area(70,720,249-table_y,299+3-table_y,table_color_2);
 80091f4:	4c67      	ldr	r4, [pc, #412]	; (8009394 <Role_Page+0x204>)
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 80091f6:	2214      	movs	r2, #20
 80091f8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80091fc:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8009200:	f7fd ff8c 	bl	800711c <fill_circle>
	fill_circle(760, 418-table_y, 18, 0xe7eefe);
 8009204:	4b60      	ldr	r3, [pc, #384]	; (8009388 <Role_Page+0x1f8>)
 8009206:	2212      	movs	r2, #18
 8009208:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800920c:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8009210:	f7fd ff84 	bl	800711c <fill_circle>
  symbol_dwn_Arrow (760, 423-table_y, 0x737373);  /// for DOWN Arrow  symbol
 8009214:	4a5d      	ldr	r2, [pc, #372]	; (800938c <Role_Page+0x1fc>)
 8009216:	f240 1191 	movw	r1, #401	; 0x191
 800921a:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 800921e:	f7ff f907 	bl	8008430 <symbol_dwn_Arrow>
	fill_area(70,720,143-table_y,193+3-table_y,0x8c8c8c);
 8009222:	485d      	ldr	r0, [pc, #372]	; (8009398 <Role_Page+0x208>)
 8009224:	9000      	str	r0, [sp, #0]
 8009226:	23ae      	movs	r3, #174	; 0xae
 8009228:	2279      	movs	r2, #121	; 0x79
 800922a:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800922e:	2046      	movs	r0, #70	; 0x46
 8009230:	f7fc ffc8 	bl	80061c4 <fill_area>
	fill_area(70,720,196-table_y,246+3-table_y,table_color);
 8009234:	23e3      	movs	r3, #227	; 0xe3
 8009236:	22ae      	movs	r2, #174	; 0xae
 8009238:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800923c:	2046      	movs	r0, #70	; 0x46
 800923e:	9500      	str	r5, [sp, #0]
 8009240:	f7fc ffc0 	bl	80061c4 <fill_area>
	fill_area(70,720,249-table_y,299+3-table_y,table_color_2);
 8009244:	9400      	str	r4, [sp, #0]
 8009246:	f44f 738c 	mov.w	r3, #280	; 0x118
 800924a:	22e3      	movs	r2, #227	; 0xe3
 800924c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8009250:	2046      	movs	r0, #70	; 0x46
 8009252:	f7fc ffb7 	bl	80061c4 <fill_area>
	fill_area(70,720,302-table_y,352+3-table_y,table_color);
 8009256:	f240 134d 	movw	r3, #333	; 0x14d
 800925a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800925e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8009262:	9500      	str	r5, [sp, #0]
 8009264:	2046      	movs	r0, #70	; 0x46
 8009266:	f7fc ffad 	bl	80061c4 <fill_area>
	fill_area(70,720,355-table_y,405+3-table_y,table_color_2);
 800926a:	9400      	str	r4, [sp, #0]
 800926c:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8009270:	f240 124d 	movw	r2, #333	; 0x14d
 8009274:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8009278:	2046      	movs	r0, #70	; 0x46
	fill_area(70,720,408-table_y,458+3-table_y,table_color);


	draw_rect(70,720,143-table_y,461-table_y,table_border_color);
 800927a:	4c48      	ldr	r4, [pc, #288]	; (800939c <Role_Page+0x20c>)
	fill_area(70,720,355-table_y,405+3-table_y,table_color_2);
 800927c:	f7fc ffa2 	bl	80061c4 <fill_area>
	fill_area(70,720,408-table_y,458+3-table_y,table_color);
 8009280:	f240 13b7 	movw	r3, #439	; 0x1b7
 8009284:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009288:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800928c:	9500      	str	r5, [sp, #0]
 800928e:	2046      	movs	r0, #70	; 0x46
 8009290:	f7fc ff98 	bl	80061c4 <fill_area>
	draw_rect(70,720,143-table_y,461-table_y,table_border_color);
 8009294:	2279      	movs	r2, #121	; 0x79
 8009296:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800929a:	2046      	movs	r0, #70	; 0x46
 800929c:	9400      	str	r4, [sp, #0]
 800929e:	f240 13b7 	movw	r3, #439	; 0x1b7
 80092a2:	f7fd f9a7 	bl	80065f4 <draw_rect>

	draw_vl(70+90,143-table_y,318,table_border_color);
 80092a6:	4623      	mov	r3, r4
 80092a8:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80092ac:	2179      	movs	r1, #121	; 0x79
 80092ae:	20a0      	movs	r0, #160	; 0xa0
 80092b0:	f7fd f900 	bl	80064b4 <draw_vl>
	draw_vl(550,143-table_y,318,table_border_color);
 80092b4:	4623      	mov	r3, r4
 80092b6:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80092ba:	2179      	movs	r1, #121	; 0x79
 80092bc:	f240 2026 	movw	r0, #550	; 0x226
 80092c0:	f7fd f8f8 	bl	80064b4 <draw_vl>
//	draw_vl(120+460,143-table_y,318,table_border_color);


//	draw_hl(20,143,710,table_border_color);
	draw_hl(70,196-table_y,650,table_border_color);
 80092c4:	4623      	mov	r3, r4
 80092c6:	f240 228a 	movw	r2, #650	; 0x28a
 80092ca:	21ae      	movs	r1, #174	; 0xae
 80092cc:	2046      	movs	r0, #70	; 0x46
 80092ce:	f7fd f853 	bl	8006378 <draw_hl>
	draw_hl(70,249-table_y,650,table_border_color);
 80092d2:	4623      	mov	r3, r4
 80092d4:	f240 228a 	movw	r2, #650	; 0x28a
 80092d8:	21e3      	movs	r1, #227	; 0xe3
 80092da:	2046      	movs	r0, #70	; 0x46
 80092dc:	f7fd f84c 	bl	8006378 <draw_hl>
	draw_hl(70,302-table_y,650,table_border_color);
 80092e0:	4623      	mov	r3, r4
 80092e2:	f240 228a 	movw	r2, #650	; 0x28a
 80092e6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80092ea:	2046      	movs	r0, #70	; 0x46
 80092ec:	f7fd f844 	bl	8006378 <draw_hl>
	draw_hl(70,355-table_y,650,table_border_color);
 80092f0:	4623      	mov	r3, r4
 80092f2:	f240 228a 	movw	r2, #650	; 0x28a
 80092f6:	f240 114d 	movw	r1, #333	; 0x14d
 80092fa:	2046      	movs	r0, #70	; 0x46
 80092fc:	f7fd f83c 	bl	8006378 <draw_hl>
	draw_hl(70,408-table_y,650,table_border_color);
 8009300:	4623      	mov	r3, r4
 8009302:	f240 228a 	movw	r2, #650	; 0x28a
 8009306:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800930a:	2046      	movs	r0, #70	; 0x46
 800930c:	f7fd f834 	bl	8006378 <draw_hl>



/////////////////////////////for string  ///////////////////////////////////////////////////////

	Set_Font(&Font12x18);
 8009310:	4823      	ldr	r0, [pc, #140]	; (80093a0 <Role_Page+0x210>)
 8009312:	f7fc fea5 	bl	8006060 <Set_Font>

	print_string(95,163-table_y,"ID",WHITE);
 8009316:	4a23      	ldr	r2, [pc, #140]	; (80093a4 <Role_Page+0x214>)
 8009318:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800931c:	218d      	movs	r1, #141	; 0x8d
 800931e:	205f      	movs	r0, #95	; 0x5f
 8009320:	f7fe f806 	bl	8007330 <print_string>
	print_string(300,163-table_y,"NAME",WHITE);
 8009324:	4a20      	ldr	r2, [pc, #128]	; (80093a8 <Role_Page+0x218>)
 8009326:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800932a:	218d      	movs	r1, #141	; 0x8d
 800932c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009330:	f7fd fffe 	bl	8007330 <print_string>
	print_string(620,163-table_y,"ROLE",WHITE);
 8009334:	4a1d      	ldr	r2, [pc, #116]	; (80093ac <Role_Page+0x21c>)
 8009336:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800933a:	218d      	movs	r1, #141	; 0x8d
 800933c:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8009340:	f7fd fff6 	bl	8007330 <print_string>
	print_string(80,216-table_y,"E001",0x9900ff);
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <Role_Page+0x220>)
 8009346:	4a1b      	ldr	r2, [pc, #108]	; (80093b4 <Role_Page+0x224>)
 8009348:	21c2      	movs	r1, #194	; 0xc2
 800934a:	2050      	movs	r0, #80	; 0x50
 800934c:	f7fd fff0 	bl	8007330 <print_string>
	print_string(210,216-table_y,"NAVEEN PRAKASH MAURYA",0x9900ff);
 8009350:	4b17      	ldr	r3, [pc, #92]	; (80093b0 <Role_Page+0x220>)
 8009352:	4a19      	ldr	r2, [pc, #100]	; (80093b8 <Role_Page+0x228>)
 8009354:	21c2      	movs	r1, #194	; 0xc2
 8009356:	20d2      	movs	r0, #210	; 0xd2
 8009358:	f7fd ffea 	bl	8007330 <print_string>
	print_string(570,216-table_y,"EMPLOYEE",0x9900ff);
 800935c:	4b14      	ldr	r3, [pc, #80]	; (80093b0 <Role_Page+0x220>)
 800935e:	4a17      	ldr	r2, [pc, #92]	; (80093bc <Role_Page+0x22c>)
 8009360:	21c2      	movs	r1, #194	; 0xc2
 8009362:	f240 203a 	movw	r0, #570	; 0x23a
 8009366:	f7fd ffe3 	bl	8007330 <print_string>
	print_image(10,10,60,60,back);
 800936a:	233c      	movs	r3, #60	; 0x3c
 800936c:	210a      	movs	r1, #10
 800936e:	4a14      	ldr	r2, [pc, #80]	; (80093c0 <Role_Page+0x230>)
 8009370:	9200      	str	r2, [sp, #0]
 8009372:	4608      	mov	r0, r1
 8009374:	461a      	mov	r2, r3
 8009376:	f7fd fffd 	bl	8007374 <print_image>
	BackBtn();
}
 800937a:	b005      	add	sp, #20
 800937c:	bd30      	pop	{r4, r5, pc}
 800937e:	bf00      	nop
 8009380:	00800010 	.word	0x00800010
 8009384:	00cedcfd 	.word	0x00cedcfd
 8009388:	00e7eefe 	.word	0x00e7eefe
 800938c:	00737373 	.word	0x00737373
 8009390:	00b7e4c7 	.word	0x00b7e4c7
 8009394:	00d8f3dc 	.word	0x00d8f3dc
 8009398:	008c8c8c 	.word	0x008c8c8c
 800939c:	0052b788 	.word	0x0052b788
 80093a0:	20000544 	.word	0x20000544
 80093a4:	0800e6b0 	.word	0x0800e6b0
 80093a8:	0800e6d8 	.word	0x0800e6d8
 80093ac:	0800e6f8 	.word	0x0800e6f8
 80093b0:	009900ff 	.word	0x009900ff
 80093b4:	0800e700 	.word	0x0800e700
 80093b8:	0800e708 	.word	0x0800e708
 80093bc:	0800b07c 	.word	0x0800b07c
 80093c0:	08014108 	.word	0x08014108

080093c4 <NewUser_Desig1>:
}


//######################  NEW_USER(DESIG)  #############################
void NewUser_Desig1(void)
{
 80093c4:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 80093c6:	481f      	ldr	r0, [pc, #124]	; (8009444 <NewUser_Desig1+0x80>)
		fill_roundrect(494,720,199,259,0xcedcfd,PURPLE);  // DESIG
 80093c8:	4d1f      	ldr	r5, [pc, #124]	; (8009448 <NewUser_Desig1+0x84>)
		fill_roundrect(499,715,204,254,0xfffafa,0xcedcfd);
 80093ca:	4c20      	ldr	r4, [pc, #128]	; (800944c <NewUser_Desig1+0x88>)
{
 80093cc:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 80093ce:	f7fc fe47 	bl	8006060 <Set_Font>
		fill_roundrect(494,720,199,259,0xcedcfd,PURPLE);  // DESIG
 80093d2:	481f      	ldr	r0, [pc, #124]	; (8009450 <NewUser_Desig1+0x8c>)
 80093d4:	f240 1303 	movw	r3, #259	; 0x103
 80093d8:	e9cd 5000 	strd	r5, r0, [sp]
 80093dc:	22c7      	movs	r2, #199	; 0xc7
 80093de:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80093e2:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 80093e6:	f7fd fc5b 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(499,715,204,254,0xfffafa,0xcedcfd);
 80093ea:	e9cd 4500 	strd	r4, r5, [sp]
 80093ee:	23fe      	movs	r3, #254	; 0xfe
 80093f0:	22cc      	movs	r2, #204	; 0xcc
 80093f2:	f240 21cb 	movw	r1, #715	; 0x2cb
 80093f6:	f240 10f3 	movw	r0, #499	; 0x1f3
 80093fa:	f7fd fc51 	bl	8006ca0 <fill_roundrect>

		symbol(690,200,'D',0x999999);
 80093fe:	4b15      	ldr	r3, [pc, #84]	; (8009454 <NewUser_Desig1+0x90>)
 8009400:	2244      	movs	r2, #68	; 0x44
 8009402:	21c8      	movs	r1, #200	; 0xc8
 8009404:	f240 20b2 	movw	r0, #690	; 0x2b2
 8009408:	f7fe fab8 	bl	800797c <symbol>
		symbol(690,195,'D',0xfffafa);
 800940c:	4623      	mov	r3, r4
 800940e:	2244      	movs	r2, #68	; 0x44
 8009410:	21c3      	movs	r1, #195	; 0xc3
 8009412:	f240 20b2 	movw	r0, #690	; 0x2b2
 8009416:	f7fe fab1 	bl	800797c <symbol>

		fill_area(499,615,204,254,0xfffafa);
 800941a:	23fe      	movs	r3, #254	; 0xfe
 800941c:	22cc      	movs	r2, #204	; 0xcc
 800941e:	f240 2167 	movw	r1, #615	; 0x267
 8009422:	f240 10f3 	movw	r0, #499	; 0x1f3
 8009426:	9400      	str	r4, [sp, #0]
 8009428:	f7fc fecc 	bl	80061c4 <fill_area>
		print_string(510,214,desgn_ptr,0x737373);
 800942c:	4a0a      	ldr	r2, [pc, #40]	; (8009458 <NewUser_Desig1+0x94>)
 800942e:	4b0b      	ldr	r3, [pc, #44]	; (800945c <NewUser_Desig1+0x98>)
 8009430:	6812      	ldr	r2, [r2, #0]
 8009432:	21d6      	movs	r1, #214	; 0xd6
 8009434:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
}
 8009438:	b003      	add	sp, #12
 800943a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(510,214,desgn_ptr,0x737373);
 800943e:	f7fd bf77 	b.w	8007330 <print_string>
 8009442:	bf00      	nop
 8009444:	20000544 	.word	0x20000544
 8009448:	00cedcfd 	.word	0x00cedcfd
 800944c:	00fffafa 	.word	0x00fffafa
 8009450:	00800010 	.word	0x00800010
 8009454:	00999999 	.word	0x00999999
 8009458:	20000024 	.word	0x20000024
 800945c:	00737373 	.word	0x00737373

08009460 <NewUser_Role1>:

//######################  NEW_USER(ROLE)  #############################
void NewUser_Role1(void)
{
 8009460:	b530      	push	{r4, r5, lr}
		Set_Font(&Font12x18);
 8009462:	4823      	ldr	r0, [pc, #140]	; (80094f0 <NewUser_Role1+0x90>)
		//int x=0,y=0;
		fill_roundrect(494,720,289,349,0xcedcfd,PURPLE);  // ROLE
 8009464:	4d23      	ldr	r5, [pc, #140]	; (80094f4 <NewUser_Role1+0x94>)
		fill_roundrect(499,715,294,344,0xfffafa,0xcedcfd);
 8009466:	4c24      	ldr	r4, [pc, #144]	; (80094f8 <NewUser_Role1+0x98>)
{
 8009468:	b083      	sub	sp, #12
		Set_Font(&Font12x18);
 800946a:	f7fc fdf9 	bl	8006060 <Set_Font>
		fill_roundrect(494,720,289,349,0xcedcfd,PURPLE);  // ROLE
 800946e:	4823      	ldr	r0, [pc, #140]	; (80094fc <NewUser_Role1+0x9c>)
 8009470:	f240 135d 	movw	r3, #349	; 0x15d
 8009474:	e9cd 5000 	strd	r5, r0, [sp]
 8009478:	f240 1221 	movw	r2, #289	; 0x121
 800947c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8009480:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8009484:	f7fd fc0c 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(499,715,294,344,0xfffafa,0xcedcfd);
 8009488:	e9cd 4500 	strd	r4, r5, [sp]
 800948c:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8009490:	f44f 7293 	mov.w	r2, #294	; 0x126
 8009494:	f240 21cb 	movw	r1, #715	; 0x2cb
 8009498:	f240 10f3 	movw	r0, #499	; 0x1f3
 800949c:	f7fd fc00 	bl	8006ca0 <fill_roundrect>

		symbol(690,293,'D',0x999999);
 80094a0:	4b17      	ldr	r3, [pc, #92]	; (8009500 <NewUser_Role1+0xa0>)
 80094a2:	2244      	movs	r2, #68	; 0x44
 80094a4:	f240 1125 	movw	r1, #293	; 0x125
 80094a8:	f240 20b2 	movw	r0, #690	; 0x2b2
 80094ac:	f7fe fa66 	bl	800797c <symbol>
		symbol(690,288,'D',0xfffafa);
 80094b0:	4623      	mov	r3, r4
 80094b2:	2244      	movs	r2, #68	; 0x44
 80094b4:	f44f 7190 	mov.w	r1, #288	; 0x120
 80094b8:	f240 20b2 	movw	r0, #690	; 0x2b2
 80094bc:	f7fe fa5e 	bl	800797c <symbol>

		fill_area(499,615,294,344,0xfffafa);
 80094c0:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80094c4:	f44f 7293 	mov.w	r2, #294	; 0x126
 80094c8:	f240 2167 	movw	r1, #615	; 0x267
 80094cc:	f240 10f3 	movw	r0, #499	; 0x1f3
 80094d0:	9400      	str	r4, [sp, #0]
 80094d2:	f7fc fe77 	bl	80061c4 <fill_area>
		print_string(510,307,role_ptr,0x737373);
 80094d6:	4a0b      	ldr	r2, [pc, #44]	; (8009504 <NewUser_Role1+0xa4>)
 80094d8:	4b0b      	ldr	r3, [pc, #44]	; (8009508 <NewUser_Role1+0xa8>)
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	f240 1133 	movw	r1, #307	; 0x133
 80094e0:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
}
 80094e4:	b003      	add	sp, #12
 80094e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(510,307,role_ptr,0x737373);
 80094ea:	f7fd bf21 	b.w	8007330 <print_string>
 80094ee:	bf00      	nop
 80094f0:	20000544 	.word	0x20000544
 80094f4:	00cedcfd 	.word	0x00cedcfd
 80094f8:	00fffafa 	.word	0x00fffafa
 80094fc:	00800010 	.word	0x00800010
 8009500:	00999999 	.word	0x00999999
 8009504:	20000074 	.word	0x20000074
 8009508:	00737373 	.word	0x00737373

0800950c <NewUser_Card1>:

//######################  NEW_USER(CARD)  #############################
void NewUser_Card1(void)
{
 800950c:	b530      	push	{r4, r5, lr}
	Set_Font(&Font12x18);
 800950e:	4823      	ldr	r0, [pc, #140]	; (800959c <NewUser_Card1+0x90>)
	//int x=0,y=0;
		fill_roundrect(494,720,379,439,0xcedcfd,PURPLE);  // CARD
 8009510:	4d23      	ldr	r5, [pc, #140]	; (80095a0 <NewUser_Card1+0x94>)
		fill_roundrect(499,715,384,434,0xfffafa,0xcedcfd);
 8009512:	4c24      	ldr	r4, [pc, #144]	; (80095a4 <NewUser_Card1+0x98>)
{
 8009514:	b083      	sub	sp, #12
	Set_Font(&Font12x18);
 8009516:	f7fc fda3 	bl	8006060 <Set_Font>
		fill_roundrect(494,720,379,439,0xcedcfd,PURPLE);  // CARD
 800951a:	4823      	ldr	r0, [pc, #140]	; (80095a8 <NewUser_Card1+0x9c>)
 800951c:	f240 13b7 	movw	r3, #439	; 0x1b7
 8009520:	e9cd 5000 	strd	r5, r0, [sp]
 8009524:	f240 127b 	movw	r2, #379	; 0x17b
 8009528:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800952c:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8009530:	f7fd fbb6 	bl	8006ca0 <fill_roundrect>
		fill_roundrect(499,715,384,434,0xfffafa,0xcedcfd);
 8009534:	e9cd 4500 	strd	r4, r5, [sp]
 8009538:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 800953c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009540:	f240 21cb 	movw	r1, #715	; 0x2cb
 8009544:	f240 10f3 	movw	r0, #499	; 0x1f3
 8009548:	f7fd fbaa 	bl	8006ca0 <fill_roundrect>

		symbol(690,386,'D',0x999999);
 800954c:	4b17      	ldr	r3, [pc, #92]	; (80095ac <NewUser_Card1+0xa0>)
 800954e:	2244      	movs	r2, #68	; 0x44
 8009550:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8009554:	f240 20b2 	movw	r0, #690	; 0x2b2
 8009558:	f7fe fa10 	bl	800797c <symbol>
		symbol(690,381,'D',0xfffafa);
 800955c:	4623      	mov	r3, r4
 800955e:	2244      	movs	r2, #68	; 0x44
 8009560:	f240 117d 	movw	r1, #381	; 0x17d
 8009564:	f240 20b2 	movw	r0, #690	; 0x2b2
 8009568:	f7fe fa08 	bl	800797c <symbol>

		fill_area(499,615,384,434,0xfffafa);
 800956c:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8009570:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009574:	f240 2167 	movw	r1, #615	; 0x267
 8009578:	f240 10f3 	movw	r0, #499	; 0x1f3
 800957c:	9400      	str	r4, [sp, #0]
 800957e:	f7fc fe21 	bl	80061c4 <fill_area>
		print_string(510,400,card_ptr,0x737373);
 8009582:	4a0b      	ldr	r2, [pc, #44]	; (80095b0 <NewUser_Card1+0xa4>)
 8009584:	4b0b      	ldr	r3, [pc, #44]	; (80095b4 <NewUser_Card1+0xa8>)
 8009586:	6812      	ldr	r2, [r2, #0]
 8009588:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800958c:	f44f 70ff 	mov.w	r0, #510	; 0x1fe
}
 8009590:	b003      	add	sp, #12
 8009592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		print_string(510,400,card_ptr,0x737373);
 8009596:	f7fd becb 	b.w	8007330 <print_string>
 800959a:	bf00      	nop
 800959c:	20000544 	.word	0x20000544
 80095a0:	00cedcfd 	.word	0x00cedcfd
 80095a4:	00fffafa 	.word	0x00fffafa
 80095a8:	00800010 	.word	0x00800010
 80095ac:	00999999 	.word	0x00999999
 80095b0:	20000000 	.word	0x20000000
 80095b4:	00737373 	.word	0x00737373

080095b8 <SaveAndExit>:

void SaveAndExit (void)
{
 80095b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	fill_roundrect(630,720,121,169,0xcedcfd,PURPLE);	//   Save and Modify button
 80095ba:	4c2a      	ldr	r4, [pc, #168]	; (8009664 <SaveAndExit+0xac>)
 80095bc:	4f2a      	ldr	r7, [pc, #168]	; (8009668 <SaveAndExit+0xb0>)
	fill_roundrect(633,717,124,166,0xfffafa,0xcedcfd);
 80095be:	4e2b      	ldr	r6, [pc, #172]	; (800966c <SaveAndExit+0xb4>)
{
 80095c0:	b083      	sub	sp, #12
	fill_roundrect(630,720,121,169,0xcedcfd,PURPLE);	//   Save and Modify button
 80095c2:	e9cd 4700 	strd	r4, r7, [sp]
 80095c6:	23a9      	movs	r3, #169	; 0xa9
 80095c8:	2279      	movs	r2, #121	; 0x79
 80095ca:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80095ce:	f240 2076 	movw	r0, #630	; 0x276
 80095d2:	f7fd fb65 	bl	8006ca0 <fill_roundrect>
	draw_roundrect(630,720,121,169,BLUE);
 80095d6:	25ff      	movs	r5, #255	; 0xff
	fill_roundrect(633,717,124,166,0xfffafa,0xcedcfd);
 80095d8:	e9cd 6400 	strd	r6, r4, [sp]
 80095dc:	23a6      	movs	r3, #166	; 0xa6
 80095de:	227c      	movs	r2, #124	; 0x7c
 80095e0:	f240 21cd 	movw	r1, #717	; 0x2cd
 80095e4:	f240 2079 	movw	r0, #633	; 0x279
 80095e8:	f7fd fb5a 	bl	8006ca0 <fill_roundrect>
	draw_roundrect(630,720,121,169,BLUE);
 80095ec:	23a9      	movs	r3, #169	; 0xa9
 80095ee:	9500      	str	r5, [sp, #0]
 80095f0:	2279      	movs	r2, #121	; 0x79
 80095f2:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80095f6:	f240 2076 	movw	r0, #630	; 0x276
 80095fa:	f7fd f951 	bl	80068a0 <draw_roundrect>

	fill_roundrect(494,584,121,169,0xcedcfd,PURPLE);
 80095fe:	e9cd 4700 	strd	r4, r7, [sp]
 8009602:	23a9      	movs	r3, #169	; 0xa9
 8009604:	2279      	movs	r2, #121	; 0x79
 8009606:	f44f 7112 	mov.w	r1, #584	; 0x248
 800960a:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 800960e:	f7fd fb47 	bl	8006ca0 <fill_roundrect>
	fill_roundrect(497,581,124,166,0xfffafa,0xcedcfd);
 8009612:	e9cd 6400 	strd	r6, r4, [sp]
 8009616:	23a6      	movs	r3, #166	; 0xa6
 8009618:	227c      	movs	r2, #124	; 0x7c
 800961a:	f240 2145 	movw	r1, #581	; 0x245
 800961e:	f240 10f1 	movw	r0, #497	; 0x1f1
 8009622:	f7fd fb3d 	bl	8006ca0 <fill_roundrect>
	draw_roundrect(494,584,121,169,BLUE);

	Set_Font(&Font12x18);
	print_string(515,140,"SAVE",0x737373);
 8009626:	4c12      	ldr	r4, [pc, #72]	; (8009670 <SaveAndExit+0xb8>)
	draw_roundrect(494,584,121,169,BLUE);
 8009628:	9500      	str	r5, [sp, #0]
 800962a:	23a9      	movs	r3, #169	; 0xa9
 800962c:	2279      	movs	r2, #121	; 0x79
 800962e:	f44f 7112 	mov.w	r1, #584	; 0x248
 8009632:	f44f 70f7 	mov.w	r0, #494	; 0x1ee
 8009636:	f7fd f933 	bl	80068a0 <draw_roundrect>
	Set_Font(&Font12x18);
 800963a:	480e      	ldr	r0, [pc, #56]	; (8009674 <SaveAndExit+0xbc>)
 800963c:	f7fc fd10 	bl	8006060 <Set_Font>
	print_string(515,140,"SAVE",0x737373);
 8009640:	4623      	mov	r3, r4
 8009642:	4a0d      	ldr	r2, [pc, #52]	; (8009678 <SaveAndExit+0xc0>)
 8009644:	218c      	movs	r1, #140	; 0x8c
 8009646:	f240 2003 	movw	r0, #515	; 0x203
 800964a:	f7fd fe71 	bl	8007330 <print_string>
	print_string(655,140,"EDIT",0x737373);
 800964e:	4a0b      	ldr	r2, [pc, #44]	; (800967c <SaveAndExit+0xc4>)
 8009650:	4623      	mov	r3, r4
 8009652:	218c      	movs	r1, #140	; 0x8c
 8009654:	f240 208f 	movw	r0, #655	; 0x28f
}
 8009658:	b003      	add	sp, #12
 800965a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	print_string(655,140,"EDIT",0x737373);
 800965e:	f7fd be67 	b.w	8007330 <print_string>
 8009662:	bf00      	nop
 8009664:	00cedcfd 	.word	0x00cedcfd
 8009668:	00800010 	.word	0x00800010
 800966c:	00fffafa 	.word	0x00fffafa
 8009670:	00737373 	.word	0x00737373
 8009674:	20000544 	.word	0x20000544
 8009678:	0800e720 	.word	0x0800e720
 800967c:	0800e728 	.word	0x0800e728

08009680 <AllUser_Page>:
{
 8009680:	b530      	push	{r4, r5, lr}
 8009682:	b085      	sub	sp, #20
	fill_area(150,720,80,439,PURPLE);
 8009684:	4c73      	ldr	r4, [pc, #460]	; (8009854 <AllUser_Page+0x1d4>)
 8009686:	9400      	str	r4, [sp, #0]
 8009688:	f240 13b7 	movw	r3, #439	; 0x1b7
 800968c:	2250      	movs	r2, #80	; 0x50
 800968e:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8009692:	2096      	movs	r0, #150	; 0x96
 8009694:	f7fc fd96 	bl	80061c4 <fill_area>
	fill_circle(760, 180-table_y, 20, 0xcedcfd);
 8009698:	4b6f      	ldr	r3, [pc, #444]	; (8009858 <AllUser_Page+0x1d8>)
 800969a:	2214      	movs	r2, #20
 800969c:	219e      	movs	r1, #158	; 0x9e
 800969e:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80096a2:	f7fd fd3b 	bl	800711c <fill_circle>
	fill_circle(760, 180-table_y, 18, 0xe7eefe);
 80096a6:	4b6d      	ldr	r3, [pc, #436]	; (800985c <AllUser_Page+0x1dc>)
 80096a8:	2212      	movs	r2, #18
 80096aa:	219e      	movs	r1, #158	; 0x9e
 80096ac:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80096b0:	f7fd fd34 	bl	800711c <fill_circle>
	symbol(760, 175-table_y, '^', 0x737373);
 80096b4:	4b6a      	ldr	r3, [pc, #424]	; (8009860 <AllUser_Page+0x1e0>)
 80096b6:	225e      	movs	r2, #94	; 0x5e
 80096b8:	2199      	movs	r1, #153	; 0x99
 80096ba:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80096be:	f7fe f95d 	bl	800797c <symbol>
 80096c2:	24b7      	movs	r4, #183	; 0xb7
	   draw_vl(760, 179+i, 3, 0xe7eefe);
 80096c4:	b221      	sxth	r1, r4
 80096c6:	4b65      	ldr	r3, [pc, #404]	; (800985c <AllUser_Page+0x1dc>)
 80096c8:	9103      	str	r1, [sp, #12]
 80096ca:	2203      	movs	r2, #3
 80096cc:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80096d0:	f7fc fef0 	bl	80064b4 <draw_vl>
	for(int i = 4; i<195; i=i+8)
 80096d4:	3408      	adds	r4, #8
		 draw_vl(759, 179+i, 3, 0xe7eefe);
 80096d6:	4b61      	ldr	r3, [pc, #388]	; (800985c <AllUser_Page+0x1dc>)
 80096d8:	9903      	ldr	r1, [sp, #12]
 80096da:	2203      	movs	r2, #3
 80096dc:	f240 20f7 	movw	r0, #759	; 0x2f7
 80096e0:	f7fc fee8 	bl	80064b4 <draw_vl>
	for(int i = 4; i<195; i=i+8)
 80096e4:	b2a4      	uxth	r4, r4
 80096e6:	f240 1377 	movw	r3, #375	; 0x177
 80096ea:	429c      	cmp	r4, r3
 80096ec:	d1ea      	bne.n	80096c4 <AllUser_Page+0x44>
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 80096ee:	4b5a      	ldr	r3, [pc, #360]	; (8009858 <AllUser_Page+0x1d8>)
	fill_area(70,470,196-table_y,246+3-table_y,table_color);
 80096f0:	4d5c      	ldr	r5, [pc, #368]	; (8009864 <AllUser_Page+0x1e4>)
	fill_area(70,470,249-table_y,299+3-table_y,table_color_2);
 80096f2:	4c5d      	ldr	r4, [pc, #372]	; (8009868 <AllUser_Page+0x1e8>)
	fill_circle(760, 418-table_y, 20, 0xcedcfd);
 80096f4:	2214      	movs	r2, #20
 80096f6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80096fa:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 80096fe:	f7fd fd0d 	bl	800711c <fill_circle>
	fill_circle(760, 418-table_y, 18, 0xe7eefe);
 8009702:	4b56      	ldr	r3, [pc, #344]	; (800985c <AllUser_Page+0x1dc>)
 8009704:	2212      	movs	r2, #18
 8009706:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800970a:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 800970e:	f7fd fd05 	bl	800711c <fill_circle>
  symbol_dwn_Arrow (760, 423-table_y, 0x737373);  /// for DOWN Arrow  symbol
 8009712:	4a53      	ldr	r2, [pc, #332]	; (8009860 <AllUser_Page+0x1e0>)
 8009714:	f240 1191 	movw	r1, #401	; 0x191
 8009718:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 800971c:	f7fe fe88 	bl	8008430 <symbol_dwn_Arrow>
	fill_area(70,470,143-table_y,193+3-table_y,0x8c8c8c);
 8009720:	4b52      	ldr	r3, [pc, #328]	; (800986c <AllUser_Page+0x1ec>)
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2279      	movs	r2, #121	; 0x79
 8009726:	23ae      	movs	r3, #174	; 0xae
 8009728:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800972c:	2046      	movs	r0, #70	; 0x46
 800972e:	f7fc fd49 	bl	80061c4 <fill_area>
	fill_area(70,470,196-table_y,246+3-table_y,table_color);
 8009732:	9500      	str	r5, [sp, #0]
 8009734:	23e3      	movs	r3, #227	; 0xe3
 8009736:	22ae      	movs	r2, #174	; 0xae
 8009738:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800973c:	2046      	movs	r0, #70	; 0x46
 800973e:	f7fc fd41 	bl	80061c4 <fill_area>
	fill_area(70,470,249-table_y,299+3-table_y,table_color_2);
 8009742:	9400      	str	r4, [sp, #0]
 8009744:	f44f 738c 	mov.w	r3, #280	; 0x118
 8009748:	22e3      	movs	r2, #227	; 0xe3
 800974a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800974e:	2046      	movs	r0, #70	; 0x46
 8009750:	f7fc fd38 	bl	80061c4 <fill_area>
	fill_area(70,470,302-table_y,352+3-table_y,table_color);
 8009754:	9500      	str	r5, [sp, #0]
 8009756:	f240 134d 	movw	r3, #333	; 0x14d
 800975a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800975e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8009762:	2046      	movs	r0, #70	; 0x46
 8009764:	f7fc fd2e 	bl	80061c4 <fill_area>
	fill_area(70,470,355-table_y,405+3-table_y,table_color_2);
 8009768:	9400      	str	r4, [sp, #0]
 800976a:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800976e:	f240 124d 	movw	r2, #333	; 0x14d
 8009772:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8009776:	2046      	movs	r0, #70	; 0x46
	draw_rect(70,470,143-table_y,461-table_y,table_border_color);
 8009778:	4c3d      	ldr	r4, [pc, #244]	; (8009870 <AllUser_Page+0x1f0>)
	fill_area(70,470,355-table_y,405+3-table_y,table_color_2);
 800977a:	f7fc fd23 	bl	80061c4 <fill_area>
	fill_area(70,470,408-table_y,458+3-table_y,table_color);
 800977e:	9500      	str	r5, [sp, #0]
 8009780:	f240 13b7 	movw	r3, #439	; 0x1b7
 8009784:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009788:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800978c:	2046      	movs	r0, #70	; 0x46
 800978e:	f7fc fd19 	bl	80061c4 <fill_area>
	draw_rect(70,470,143-table_y,461-table_y,table_border_color);
 8009792:	9400      	str	r4, [sp, #0]
 8009794:	2279      	movs	r2, #121	; 0x79
 8009796:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800979a:	2046      	movs	r0, #70	; 0x46
 800979c:	f240 13b7 	movw	r3, #439	; 0x1b7
 80097a0:	f7fc ff28 	bl	80065f4 <draw_rect>
	draw_vl(70+90,143-table_y,318,table_border_color);
 80097a4:	4623      	mov	r3, r4
 80097a6:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80097aa:	2179      	movs	r1, #121	; 0x79
 80097ac:	20a0      	movs	r0, #160	; 0xa0
 80097ae:	f7fc fe81 	bl	80064b4 <draw_vl>
	draw_vl(470,143-table_y,318,table_border_color);
 80097b2:	4623      	mov	r3, r4
 80097b4:	f44f 729f 	mov.w	r2, #318	; 0x13e
 80097b8:	2179      	movs	r1, #121	; 0x79
 80097ba:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80097be:	f7fc fe79 	bl	80064b4 <draw_vl>
	draw_hl(70,196-table_y,400,table_border_color);
 80097c2:	4623      	mov	r3, r4
 80097c4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80097c8:	21ae      	movs	r1, #174	; 0xae
 80097ca:	2046      	movs	r0, #70	; 0x46
 80097cc:	f7fc fdd4 	bl	8006378 <draw_hl>
	draw_hl(70,249-table_y,400,table_border_color);
 80097d0:	4623      	mov	r3, r4
 80097d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80097d6:	21e3      	movs	r1, #227	; 0xe3
 80097d8:	2046      	movs	r0, #70	; 0x46
 80097da:	f7fc fdcd 	bl	8006378 <draw_hl>
	draw_hl(70,302-table_y,400,table_border_color);
 80097de:	4623      	mov	r3, r4
 80097e0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80097e4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80097e8:	2046      	movs	r0, #70	; 0x46
 80097ea:	f7fc fdc5 	bl	8006378 <draw_hl>
	draw_hl(70,355-table_y,400,table_border_color);
 80097ee:	4623      	mov	r3, r4
 80097f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80097f4:	f240 114d 	movw	r1, #333	; 0x14d
 80097f8:	2046      	movs	r0, #70	; 0x46
 80097fa:	f7fc fdbd 	bl	8006378 <draw_hl>
	draw_hl(70,408-table_y,400,table_border_color);
 80097fe:	4623      	mov	r3, r4
 8009800:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009804:	f44f 71c1 	mov.w	r1, #386	; 0x182
 8009808:	2046      	movs	r0, #70	; 0x46
 800980a:	f7fc fdb5 	bl	8006378 <draw_hl>
	Set_Font(&Font12x18);
 800980e:	4819      	ldr	r0, [pc, #100]	; (8009874 <AllUser_Page+0x1f4>)
 8009810:	f7fc fc26 	bl	8006060 <Set_Font>
	print_string(95,163-table_y,"ID",WHITE);
 8009814:	4a18      	ldr	r2, [pc, #96]	; (8009878 <AllUser_Page+0x1f8>)
 8009816:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800981a:	218d      	movs	r1, #141	; 0x8d
 800981c:	205f      	movs	r0, #95	; 0x5f
 800981e:	f7fd fd87 	bl	8007330 <print_string>
	print_string(300,163-table_y,"NAME",WHITE);
 8009822:	4a16      	ldr	r2, [pc, #88]	; (800987c <AllUser_Page+0x1fc>)
 8009824:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8009828:	218d      	movs	r1, #141	; 0x8d
 800982a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800982e:	f7fd fd7f 	bl	8007330 <print_string>
	print_string(80,216-table_y,"E001",0x9900ff);
 8009832:	4b13      	ldr	r3, [pc, #76]	; (8009880 <AllUser_Page+0x200>)
 8009834:	4a13      	ldr	r2, [pc, #76]	; (8009884 <AllUser_Page+0x204>)
 8009836:	21c2      	movs	r1, #194	; 0xc2
 8009838:	2050      	movs	r0, #80	; 0x50
 800983a:	f7fd fd79 	bl	8007330 <print_string>
	NewUser_Desig1();
 800983e:	f7ff fdc1 	bl	80093c4 <NewUser_Desig1>
	NewUser_Role1();
 8009842:	f7ff fe0d 	bl	8009460 <NewUser_Role1>
	NewUser_Card1();
 8009846:	f7ff fe61 	bl	800950c <NewUser_Card1>
}
 800984a:	b005      	add	sp, #20
 800984c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	SaveAndExit();
 8009850:	f7ff beb2 	b.w	80095b8 <SaveAndExit>
 8009854:	00800010 	.word	0x00800010
 8009858:	00cedcfd 	.word	0x00cedcfd
 800985c:	00e7eefe 	.word	0x00e7eefe
 8009860:	00737373 	.word	0x00737373
 8009864:	00b7e4c7 	.word	0x00b7e4c7
 8009868:	00d8f3dc 	.word	0x00d8f3dc
 800986c:	008c8c8c 	.word	0x008c8c8c
 8009870:	0052b788 	.word	0x0052b788
 8009874:	20000544 	.word	0x20000544
 8009878:	0800e6b0 	.word	0x0800e6b0
 800987c:	0800e6d8 	.word	0x0800e6d8
 8009880:	009900ff 	.word	0x009900ff
 8009884:	0800e700 	.word	0x0800e700

08009888 <XPT2046_Init>:
	else
	return map(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
}

void XPT2046_Init(void)
{
 8009888:	b570      	push	{r4, r5, r6, lr}
	uint8_t address = 0x00;
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);  // if (XPT2046_NSS_SOFT)
 800988a:	4e17      	ldr	r6, [pc, #92]	; (80098e8 <XPT2046_Init+0x60>)
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 800988c:	4d17      	ldr	r5, [pc, #92]	; (80098ec <XPT2046_Init+0x64>)
{
 800988e:	b082      	sub	sp, #8
	uint8_t address = 0x00;
 8009890:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);  // if (XPT2046_NSS_SOFT)
 8009892:	4622      	mov	r2, r4
 8009894:	4630      	mov	r0, r6
 8009896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
	uint8_t address = 0x00;
 800989a:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);  // if (XPT2046_NSS_SOFT)
 800989e:	f7f8 fd73 	bl	8002388 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 80098a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098a6:	2201      	movs	r2, #1
 80098a8:	2180      	movs	r1, #128	; 0x80
 80098aa:	4628      	mov	r0, r5
 80098ac:	f7f9 fe16 	bl	80034dc <HAL_SPI_Transmit>
	address = 0x00;
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80098b0:	f10d 0107 	add.w	r1, sp, #7
 80098b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098b8:	2201      	movs	r2, #1
 80098ba:	4628      	mov	r0, r5
	address = 0x00;
 80098bc:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80098c0:	f7f9 fe0c 	bl	80034dc <HAL_SPI_Transmit>
	address = 0x00;
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80098c4:	f10d 0107 	add.w	r1, sp, #7
 80098c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098cc:	2201      	movs	r2, #1
 80098ce:	4628      	mov	r0, r5
	address = 0x00;
 80098d0:	f88d 4007 	strb.w	r4, [sp, #7]
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 80098d4:	f7f9 fe02 	bl	80034dc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);   // if (XPT2046_NSS_SOFT)
 80098d8:	2201      	movs	r2, #1
 80098da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098de:	4630      	mov	r0, r6
 80098e0:	f7f8 fd52 	bl	8002388 <HAL_GPIO_WritePin>
}
 80098e4:	b002      	add	sp, #8
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	40020400 	.word	0x40020400
 80098ec:	20000700 	.word	0x20000700

080098f0 <__libc_init_array>:
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	4d0d      	ldr	r5, [pc, #52]	; (8009928 <__libc_init_array+0x38>)
 80098f4:	4c0d      	ldr	r4, [pc, #52]	; (800992c <__libc_init_array+0x3c>)
 80098f6:	1b64      	subs	r4, r4, r5
 80098f8:	10a4      	asrs	r4, r4, #2
 80098fa:	2600      	movs	r6, #0
 80098fc:	42a6      	cmp	r6, r4
 80098fe:	d109      	bne.n	8009914 <__libc_init_array+0x24>
 8009900:	4d0b      	ldr	r5, [pc, #44]	; (8009930 <__libc_init_array+0x40>)
 8009902:	4c0c      	ldr	r4, [pc, #48]	; (8009934 <__libc_init_array+0x44>)
 8009904:	f001 fb42 	bl	800af8c <_init>
 8009908:	1b64      	subs	r4, r4, r5
 800990a:	10a4      	asrs	r4, r4, #2
 800990c:	2600      	movs	r6, #0
 800990e:	42a6      	cmp	r6, r4
 8009910:	d105      	bne.n	800991e <__libc_init_array+0x2e>
 8009912:	bd70      	pop	{r4, r5, r6, pc}
 8009914:	f855 3b04 	ldr.w	r3, [r5], #4
 8009918:	4798      	blx	r3
 800991a:	3601      	adds	r6, #1
 800991c:	e7ee      	b.n	80098fc <__libc_init_array+0xc>
 800991e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009922:	4798      	blx	r3
 8009924:	3601      	adds	r6, #1
 8009926:	e7f2      	b.n	800990e <__libc_init_array+0x1e>
 8009928:	0802ea58 	.word	0x0802ea58
 800992c:	0802ea58 	.word	0x0802ea58
 8009930:	0802ea58 	.word	0x0802ea58
 8009934:	0802ea5c 	.word	0x0802ea5c

08009938 <memcpy>:
 8009938:	440a      	add	r2, r1
 800993a:	4291      	cmp	r1, r2
 800993c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009940:	d100      	bne.n	8009944 <memcpy+0xc>
 8009942:	4770      	bx	lr
 8009944:	b510      	push	{r4, lr}
 8009946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800994e:	4291      	cmp	r1, r2
 8009950:	d1f9      	bne.n	8009946 <memcpy+0xe>
 8009952:	bd10      	pop	{r4, pc}

08009954 <memset>:
 8009954:	4402      	add	r2, r0
 8009956:	4603      	mov	r3, r0
 8009958:	4293      	cmp	r3, r2
 800995a:	d100      	bne.n	800995e <memset+0xa>
 800995c:	4770      	bx	lr
 800995e:	f803 1b01 	strb.w	r1, [r3], #1
 8009962:	e7f9      	b.n	8009958 <memset+0x4>

08009964 <iprintf>:
 8009964:	b40f      	push	{r0, r1, r2, r3}
 8009966:	4b0a      	ldr	r3, [pc, #40]	; (8009990 <iprintf+0x2c>)
 8009968:	b513      	push	{r0, r1, r4, lr}
 800996a:	681c      	ldr	r4, [r3, #0]
 800996c:	b124      	cbz	r4, 8009978 <iprintf+0x14>
 800996e:	69a3      	ldr	r3, [r4, #24]
 8009970:	b913      	cbnz	r3, 8009978 <iprintf+0x14>
 8009972:	4620      	mov	r0, r4
 8009974:	f000 fb62 	bl	800a03c <__sinit>
 8009978:	ab05      	add	r3, sp, #20
 800997a:	9a04      	ldr	r2, [sp, #16]
 800997c:	68a1      	ldr	r1, [r4, #8]
 800997e:	9301      	str	r3, [sp, #4]
 8009980:	4620      	mov	r0, r4
 8009982:	f000 fecf 	bl	800a724 <_vfiprintf_r>
 8009986:	b002      	add	sp, #8
 8009988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800998c:	b004      	add	sp, #16
 800998e:	4770      	bx	lr
 8009990:	2000055c 	.word	0x2000055c

08009994 <putchar>:
 8009994:	4b09      	ldr	r3, [pc, #36]	; (80099bc <putchar+0x28>)
 8009996:	b513      	push	{r0, r1, r4, lr}
 8009998:	681c      	ldr	r4, [r3, #0]
 800999a:	4601      	mov	r1, r0
 800999c:	b134      	cbz	r4, 80099ac <putchar+0x18>
 800999e:	69a3      	ldr	r3, [r4, #24]
 80099a0:	b923      	cbnz	r3, 80099ac <putchar+0x18>
 80099a2:	9001      	str	r0, [sp, #4]
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 fb49 	bl	800a03c <__sinit>
 80099aa:	9901      	ldr	r1, [sp, #4]
 80099ac:	68a2      	ldr	r2, [r4, #8]
 80099ae:	4620      	mov	r0, r4
 80099b0:	b002      	add	sp, #8
 80099b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b6:	f001 b979 	b.w	800acac <_putc_r>
 80099ba:	bf00      	nop
 80099bc:	2000055c 	.word	0x2000055c

080099c0 <_puts_r>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	460e      	mov	r6, r1
 80099c4:	4605      	mov	r5, r0
 80099c6:	b118      	cbz	r0, 80099d0 <_puts_r+0x10>
 80099c8:	6983      	ldr	r3, [r0, #24]
 80099ca:	b90b      	cbnz	r3, 80099d0 <_puts_r+0x10>
 80099cc:	f000 fb36 	bl	800a03c <__sinit>
 80099d0:	69ab      	ldr	r3, [r5, #24]
 80099d2:	68ac      	ldr	r4, [r5, #8]
 80099d4:	b913      	cbnz	r3, 80099dc <_puts_r+0x1c>
 80099d6:	4628      	mov	r0, r5
 80099d8:	f000 fb30 	bl	800a03c <__sinit>
 80099dc:	4b2c      	ldr	r3, [pc, #176]	; (8009a90 <_puts_r+0xd0>)
 80099de:	429c      	cmp	r4, r3
 80099e0:	d120      	bne.n	8009a24 <_puts_r+0x64>
 80099e2:	686c      	ldr	r4, [r5, #4]
 80099e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099e6:	07db      	lsls	r3, r3, #31
 80099e8:	d405      	bmi.n	80099f6 <_puts_r+0x36>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	0598      	lsls	r0, r3, #22
 80099ee:	d402      	bmi.n	80099f6 <_puts_r+0x36>
 80099f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099f2:	f000 fbc1 	bl	800a178 <__retarget_lock_acquire_recursive>
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	0719      	lsls	r1, r3, #28
 80099fa:	d51d      	bpl.n	8009a38 <_puts_r+0x78>
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	b1db      	cbz	r3, 8009a38 <_puts_r+0x78>
 8009a00:	3e01      	subs	r6, #1
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	60a3      	str	r3, [r4, #8]
 8009a0c:	bb39      	cbnz	r1, 8009a5e <_puts_r+0x9e>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da38      	bge.n	8009a84 <_puts_r+0xc4>
 8009a12:	4622      	mov	r2, r4
 8009a14:	210a      	movs	r1, #10
 8009a16:	4628      	mov	r0, r5
 8009a18:	f000 f936 	bl	8009c88 <__swbuf_r>
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d011      	beq.n	8009a44 <_puts_r+0x84>
 8009a20:	250a      	movs	r5, #10
 8009a22:	e011      	b.n	8009a48 <_puts_r+0x88>
 8009a24:	4b1b      	ldr	r3, [pc, #108]	; (8009a94 <_puts_r+0xd4>)
 8009a26:	429c      	cmp	r4, r3
 8009a28:	d101      	bne.n	8009a2e <_puts_r+0x6e>
 8009a2a:	68ac      	ldr	r4, [r5, #8]
 8009a2c:	e7da      	b.n	80099e4 <_puts_r+0x24>
 8009a2e:	4b1a      	ldr	r3, [pc, #104]	; (8009a98 <_puts_r+0xd8>)
 8009a30:	429c      	cmp	r4, r3
 8009a32:	bf08      	it	eq
 8009a34:	68ec      	ldreq	r4, [r5, #12]
 8009a36:	e7d5      	b.n	80099e4 <_puts_r+0x24>
 8009a38:	4621      	mov	r1, r4
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f000 f976 	bl	8009d2c <__swsetup_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d0dd      	beq.n	8009a00 <_puts_r+0x40>
 8009a44:	f04f 35ff 	mov.w	r5, #4294967295
 8009a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4a:	07da      	lsls	r2, r3, #31
 8009a4c:	d405      	bmi.n	8009a5a <_puts_r+0x9a>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	059b      	lsls	r3, r3, #22
 8009a52:	d402      	bmi.n	8009a5a <_puts_r+0x9a>
 8009a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a56:	f000 fb90 	bl	800a17a <__retarget_lock_release_recursive>
 8009a5a:	4628      	mov	r0, r5
 8009a5c:	bd70      	pop	{r4, r5, r6, pc}
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da04      	bge.n	8009a6c <_puts_r+0xac>
 8009a62:	69a2      	ldr	r2, [r4, #24]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	dc06      	bgt.n	8009a76 <_puts_r+0xb6>
 8009a68:	290a      	cmp	r1, #10
 8009a6a:	d004      	beq.n	8009a76 <_puts_r+0xb6>
 8009a6c:	6823      	ldr	r3, [r4, #0]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	6022      	str	r2, [r4, #0]
 8009a72:	7019      	strb	r1, [r3, #0]
 8009a74:	e7c5      	b.n	8009a02 <_puts_r+0x42>
 8009a76:	4622      	mov	r2, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 f905 	bl	8009c88 <__swbuf_r>
 8009a7e:	3001      	adds	r0, #1
 8009a80:	d1bf      	bne.n	8009a02 <_puts_r+0x42>
 8009a82:	e7df      	b.n	8009a44 <_puts_r+0x84>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	250a      	movs	r5, #10
 8009a88:	1c5a      	adds	r2, r3, #1
 8009a8a:	6022      	str	r2, [r4, #0]
 8009a8c:	701d      	strb	r5, [r3, #0]
 8009a8e:	e7db      	b.n	8009a48 <_puts_r+0x88>
 8009a90:	0802e9dc 	.word	0x0802e9dc
 8009a94:	0802e9fc 	.word	0x0802e9fc
 8009a98:	0802e9bc 	.word	0x0802e9bc

08009a9c <puts>:
 8009a9c:	4b02      	ldr	r3, [pc, #8]	; (8009aa8 <puts+0xc>)
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	f7ff bf8d 	b.w	80099c0 <_puts_r>
 8009aa6:	bf00      	nop
 8009aa8:	2000055c 	.word	0x2000055c

08009aac <setvbuf>:
 8009aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ab0:	461d      	mov	r5, r3
 8009ab2:	4b5d      	ldr	r3, [pc, #372]	; (8009c28 <setvbuf+0x17c>)
 8009ab4:	681f      	ldr	r7, [r3, #0]
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	460e      	mov	r6, r1
 8009aba:	4690      	mov	r8, r2
 8009abc:	b127      	cbz	r7, 8009ac8 <setvbuf+0x1c>
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	b913      	cbnz	r3, 8009ac8 <setvbuf+0x1c>
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	f000 faba 	bl	800a03c <__sinit>
 8009ac8:	4b58      	ldr	r3, [pc, #352]	; (8009c2c <setvbuf+0x180>)
 8009aca:	429c      	cmp	r4, r3
 8009acc:	d167      	bne.n	8009b9e <setvbuf+0xf2>
 8009ace:	687c      	ldr	r4, [r7, #4]
 8009ad0:	f1b8 0f02 	cmp.w	r8, #2
 8009ad4:	d006      	beq.n	8009ae4 <setvbuf+0x38>
 8009ad6:	f1b8 0f01 	cmp.w	r8, #1
 8009ada:	f200 809f 	bhi.w	8009c1c <setvbuf+0x170>
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	f2c0 809c 	blt.w	8009c1c <setvbuf+0x170>
 8009ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ae6:	07db      	lsls	r3, r3, #31
 8009ae8:	d405      	bmi.n	8009af6 <setvbuf+0x4a>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	0598      	lsls	r0, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <setvbuf+0x4a>
 8009af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009af2:	f000 fb41 	bl	800a178 <__retarget_lock_acquire_recursive>
 8009af6:	4621      	mov	r1, r4
 8009af8:	4638      	mov	r0, r7
 8009afa:	f000 fa0b 	bl	8009f14 <_fflush_r>
 8009afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b00:	b141      	cbz	r1, 8009b14 <setvbuf+0x68>
 8009b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b06:	4299      	cmp	r1, r3
 8009b08:	d002      	beq.n	8009b10 <setvbuf+0x64>
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f000 fba4 	bl	800a258 <_free_r>
 8009b10:	2300      	movs	r3, #0
 8009b12:	6363      	str	r3, [r4, #52]	; 0x34
 8009b14:	2300      	movs	r3, #0
 8009b16:	61a3      	str	r3, [r4, #24]
 8009b18:	6063      	str	r3, [r4, #4]
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	0619      	lsls	r1, r3, #24
 8009b1e:	d503      	bpl.n	8009b28 <setvbuf+0x7c>
 8009b20:	6921      	ldr	r1, [r4, #16]
 8009b22:	4638      	mov	r0, r7
 8009b24:	f000 fb98 	bl	800a258 <_free_r>
 8009b28:	89a3      	ldrh	r3, [r4, #12]
 8009b2a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009b2e:	f023 0303 	bic.w	r3, r3, #3
 8009b32:	f1b8 0f02 	cmp.w	r8, #2
 8009b36:	81a3      	strh	r3, [r4, #12]
 8009b38:	d06c      	beq.n	8009c14 <setvbuf+0x168>
 8009b3a:	ab01      	add	r3, sp, #4
 8009b3c:	466a      	mov	r2, sp
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4638      	mov	r0, r7
 8009b42:	f000 fb1b 	bl	800a17c <__swhatbuf_r>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	4318      	orrs	r0, r3
 8009b4a:	81a0      	strh	r0, [r4, #12]
 8009b4c:	2d00      	cmp	r5, #0
 8009b4e:	d130      	bne.n	8009bb2 <setvbuf+0x106>
 8009b50:	9d00      	ldr	r5, [sp, #0]
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 fb78 	bl	800a248 <malloc>
 8009b58:	4606      	mov	r6, r0
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d155      	bne.n	8009c0a <setvbuf+0x15e>
 8009b5e:	f8dd 9000 	ldr.w	r9, [sp]
 8009b62:	45a9      	cmp	r9, r5
 8009b64:	d14a      	bne.n	8009bfc <setvbuf+0x150>
 8009b66:	f04f 35ff 	mov.w	r5, #4294967295
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	60a2      	str	r2, [r4, #8]
 8009b6e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009b72:	6022      	str	r2, [r4, #0]
 8009b74:	6122      	str	r2, [r4, #16]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7c:	6162      	str	r2, [r4, #20]
 8009b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b80:	f043 0302 	orr.w	r3, r3, #2
 8009b84:	07d2      	lsls	r2, r2, #31
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	d405      	bmi.n	8009b96 <setvbuf+0xea>
 8009b8a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009b8e:	d102      	bne.n	8009b96 <setvbuf+0xea>
 8009b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b92:	f000 faf2 	bl	800a17a <__retarget_lock_release_recursive>
 8009b96:	4628      	mov	r0, r5
 8009b98:	b003      	add	sp, #12
 8009b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b9e:	4b24      	ldr	r3, [pc, #144]	; (8009c30 <setvbuf+0x184>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	d101      	bne.n	8009ba8 <setvbuf+0xfc>
 8009ba4:	68bc      	ldr	r4, [r7, #8]
 8009ba6:	e793      	b.n	8009ad0 <setvbuf+0x24>
 8009ba8:	4b22      	ldr	r3, [pc, #136]	; (8009c34 <setvbuf+0x188>)
 8009baa:	429c      	cmp	r4, r3
 8009bac:	bf08      	it	eq
 8009bae:	68fc      	ldreq	r4, [r7, #12]
 8009bb0:	e78e      	b.n	8009ad0 <setvbuf+0x24>
 8009bb2:	2e00      	cmp	r6, #0
 8009bb4:	d0cd      	beq.n	8009b52 <setvbuf+0xa6>
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	b913      	cbnz	r3, 8009bc0 <setvbuf+0x114>
 8009bba:	4638      	mov	r0, r7
 8009bbc:	f000 fa3e 	bl	800a03c <__sinit>
 8009bc0:	f1b8 0f01 	cmp.w	r8, #1
 8009bc4:	bf08      	it	eq
 8009bc6:	89a3      	ldrheq	r3, [r4, #12]
 8009bc8:	6026      	str	r6, [r4, #0]
 8009bca:	bf04      	itt	eq
 8009bcc:	f043 0301 	orreq.w	r3, r3, #1
 8009bd0:	81a3      	strheq	r3, [r4, #12]
 8009bd2:	89a2      	ldrh	r2, [r4, #12]
 8009bd4:	f012 0308 	ands.w	r3, r2, #8
 8009bd8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009bdc:	d01c      	beq.n	8009c18 <setvbuf+0x16c>
 8009bde:	07d3      	lsls	r3, r2, #31
 8009be0:	bf41      	itttt	mi
 8009be2:	2300      	movmi	r3, #0
 8009be4:	426d      	negmi	r5, r5
 8009be6:	60a3      	strmi	r3, [r4, #8]
 8009be8:	61a5      	strmi	r5, [r4, #24]
 8009bea:	bf58      	it	pl
 8009bec:	60a5      	strpl	r5, [r4, #8]
 8009bee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009bf0:	f015 0501 	ands.w	r5, r5, #1
 8009bf4:	d115      	bne.n	8009c22 <setvbuf+0x176>
 8009bf6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009bfa:	e7c8      	b.n	8009b8e <setvbuf+0xe2>
 8009bfc:	4648      	mov	r0, r9
 8009bfe:	f000 fb23 	bl	800a248 <malloc>
 8009c02:	4606      	mov	r6, r0
 8009c04:	2800      	cmp	r0, #0
 8009c06:	d0ae      	beq.n	8009b66 <setvbuf+0xba>
 8009c08:	464d      	mov	r5, r9
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	e7d0      	b.n	8009bb6 <setvbuf+0x10a>
 8009c14:	2500      	movs	r5, #0
 8009c16:	e7a8      	b.n	8009b6a <setvbuf+0xbe>
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	e7e8      	b.n	8009bee <setvbuf+0x142>
 8009c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c20:	e7b9      	b.n	8009b96 <setvbuf+0xea>
 8009c22:	2500      	movs	r5, #0
 8009c24:	e7b7      	b.n	8009b96 <setvbuf+0xea>
 8009c26:	bf00      	nop
 8009c28:	2000055c 	.word	0x2000055c
 8009c2c:	0802e9dc 	.word	0x0802e9dc
 8009c30:	0802e9fc 	.word	0x0802e9fc
 8009c34:	0802e9bc 	.word	0x0802e9bc

08009c38 <siprintf>:
 8009c38:	b40e      	push	{r1, r2, r3}
 8009c3a:	b500      	push	{lr}
 8009c3c:	b09c      	sub	sp, #112	; 0x70
 8009c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009c40:	9002      	str	r0, [sp, #8]
 8009c42:	9006      	str	r0, [sp, #24]
 8009c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c48:	4809      	ldr	r0, [pc, #36]	; (8009c70 <siprintf+0x38>)
 8009c4a:	9107      	str	r1, [sp, #28]
 8009c4c:	9104      	str	r1, [sp, #16]
 8009c4e:	4909      	ldr	r1, [pc, #36]	; (8009c74 <siprintf+0x3c>)
 8009c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c54:	9105      	str	r1, [sp, #20]
 8009c56:	6800      	ldr	r0, [r0, #0]
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	a902      	add	r1, sp, #8
 8009c5c:	f000 fc38 	bl	800a4d0 <_svfiprintf_r>
 8009c60:	9b02      	ldr	r3, [sp, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	701a      	strb	r2, [r3, #0]
 8009c66:	b01c      	add	sp, #112	; 0x70
 8009c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c6c:	b003      	add	sp, #12
 8009c6e:	4770      	bx	lr
 8009c70:	2000055c 	.word	0x2000055c
 8009c74:	ffff0208 	.word	0xffff0208

08009c78 <strcpy>:
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c7e:	f803 2b01 	strb.w	r2, [r3], #1
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	d1f9      	bne.n	8009c7a <strcpy+0x2>
 8009c86:	4770      	bx	lr

08009c88 <__swbuf_r>:
 8009c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8a:	460e      	mov	r6, r1
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	4605      	mov	r5, r0
 8009c90:	b118      	cbz	r0, 8009c9a <__swbuf_r+0x12>
 8009c92:	6983      	ldr	r3, [r0, #24]
 8009c94:	b90b      	cbnz	r3, 8009c9a <__swbuf_r+0x12>
 8009c96:	f000 f9d1 	bl	800a03c <__sinit>
 8009c9a:	4b21      	ldr	r3, [pc, #132]	; (8009d20 <__swbuf_r+0x98>)
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	d12b      	bne.n	8009cf8 <__swbuf_r+0x70>
 8009ca0:	686c      	ldr	r4, [r5, #4]
 8009ca2:	69a3      	ldr	r3, [r4, #24]
 8009ca4:	60a3      	str	r3, [r4, #8]
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	071a      	lsls	r2, r3, #28
 8009caa:	d52f      	bpl.n	8009d0c <__swbuf_r+0x84>
 8009cac:	6923      	ldr	r3, [r4, #16]
 8009cae:	b36b      	cbz	r3, 8009d0c <__swbuf_r+0x84>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	6820      	ldr	r0, [r4, #0]
 8009cb4:	1ac0      	subs	r0, r0, r3
 8009cb6:	6963      	ldr	r3, [r4, #20]
 8009cb8:	b2f6      	uxtb	r6, r6
 8009cba:	4283      	cmp	r3, r0
 8009cbc:	4637      	mov	r7, r6
 8009cbe:	dc04      	bgt.n	8009cca <__swbuf_r+0x42>
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	f000 f926 	bl	8009f14 <_fflush_r>
 8009cc8:	bb30      	cbnz	r0, 8009d18 <__swbuf_r+0x90>
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	60a3      	str	r3, [r4, #8]
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	701e      	strb	r6, [r3, #0]
 8009cd8:	6963      	ldr	r3, [r4, #20]
 8009cda:	3001      	adds	r0, #1
 8009cdc:	4283      	cmp	r3, r0
 8009cde:	d004      	beq.n	8009cea <__swbuf_r+0x62>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	07db      	lsls	r3, r3, #31
 8009ce4:	d506      	bpl.n	8009cf4 <__swbuf_r+0x6c>
 8009ce6:	2e0a      	cmp	r6, #10
 8009ce8:	d104      	bne.n	8009cf4 <__swbuf_r+0x6c>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f000 f911 	bl	8009f14 <_fflush_r>
 8009cf2:	b988      	cbnz	r0, 8009d18 <__swbuf_r+0x90>
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <__swbuf_r+0x9c>)
 8009cfa:	429c      	cmp	r4, r3
 8009cfc:	d101      	bne.n	8009d02 <__swbuf_r+0x7a>
 8009cfe:	68ac      	ldr	r4, [r5, #8]
 8009d00:	e7cf      	b.n	8009ca2 <__swbuf_r+0x1a>
 8009d02:	4b09      	ldr	r3, [pc, #36]	; (8009d28 <__swbuf_r+0xa0>)
 8009d04:	429c      	cmp	r4, r3
 8009d06:	bf08      	it	eq
 8009d08:	68ec      	ldreq	r4, [r5, #12]
 8009d0a:	e7ca      	b.n	8009ca2 <__swbuf_r+0x1a>
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f000 f80c 	bl	8009d2c <__swsetup_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d0cb      	beq.n	8009cb0 <__swbuf_r+0x28>
 8009d18:	f04f 37ff 	mov.w	r7, #4294967295
 8009d1c:	e7ea      	b.n	8009cf4 <__swbuf_r+0x6c>
 8009d1e:	bf00      	nop
 8009d20:	0802e9dc 	.word	0x0802e9dc
 8009d24:	0802e9fc 	.word	0x0802e9fc
 8009d28:	0802e9bc 	.word	0x0802e9bc

08009d2c <__swsetup_r>:
 8009d2c:	4b32      	ldr	r3, [pc, #200]	; (8009df8 <__swsetup_r+0xcc>)
 8009d2e:	b570      	push	{r4, r5, r6, lr}
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	4606      	mov	r6, r0
 8009d34:	460c      	mov	r4, r1
 8009d36:	b125      	cbz	r5, 8009d42 <__swsetup_r+0x16>
 8009d38:	69ab      	ldr	r3, [r5, #24]
 8009d3a:	b913      	cbnz	r3, 8009d42 <__swsetup_r+0x16>
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	f000 f97d 	bl	800a03c <__sinit>
 8009d42:	4b2e      	ldr	r3, [pc, #184]	; (8009dfc <__swsetup_r+0xd0>)
 8009d44:	429c      	cmp	r4, r3
 8009d46:	d10f      	bne.n	8009d68 <__swsetup_r+0x3c>
 8009d48:	686c      	ldr	r4, [r5, #4]
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d50:	0719      	lsls	r1, r3, #28
 8009d52:	d42c      	bmi.n	8009dae <__swsetup_r+0x82>
 8009d54:	06dd      	lsls	r5, r3, #27
 8009d56:	d411      	bmi.n	8009d7c <__swsetup_r+0x50>
 8009d58:	2309      	movs	r3, #9
 8009d5a:	6033      	str	r3, [r6, #0]
 8009d5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295
 8009d66:	e03e      	b.n	8009de6 <__swsetup_r+0xba>
 8009d68:	4b25      	ldr	r3, [pc, #148]	; (8009e00 <__swsetup_r+0xd4>)
 8009d6a:	429c      	cmp	r4, r3
 8009d6c:	d101      	bne.n	8009d72 <__swsetup_r+0x46>
 8009d6e:	68ac      	ldr	r4, [r5, #8]
 8009d70:	e7eb      	b.n	8009d4a <__swsetup_r+0x1e>
 8009d72:	4b24      	ldr	r3, [pc, #144]	; (8009e04 <__swsetup_r+0xd8>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	bf08      	it	eq
 8009d78:	68ec      	ldreq	r4, [r5, #12]
 8009d7a:	e7e6      	b.n	8009d4a <__swsetup_r+0x1e>
 8009d7c:	0758      	lsls	r0, r3, #29
 8009d7e:	d512      	bpl.n	8009da6 <__swsetup_r+0x7a>
 8009d80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d82:	b141      	cbz	r1, 8009d96 <__swsetup_r+0x6a>
 8009d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d88:	4299      	cmp	r1, r3
 8009d8a:	d002      	beq.n	8009d92 <__swsetup_r+0x66>
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f000 fa63 	bl	800a258 <_free_r>
 8009d92:	2300      	movs	r3, #0
 8009d94:	6363      	str	r3, [r4, #52]	; 0x34
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d9c:	81a3      	strh	r3, [r4, #12]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	6923      	ldr	r3, [r4, #16]
 8009da4:	6023      	str	r3, [r4, #0]
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f043 0308 	orr.w	r3, r3, #8
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	b94b      	cbnz	r3, 8009dc6 <__swsetup_r+0x9a>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dbc:	d003      	beq.n	8009dc6 <__swsetup_r+0x9a>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	f000 fa01 	bl	800a1c8 <__smakebuf_r>
 8009dc6:	89a0      	ldrh	r0, [r4, #12]
 8009dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dcc:	f010 0301 	ands.w	r3, r0, #1
 8009dd0:	d00a      	beq.n	8009de8 <__swsetup_r+0xbc>
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	60a3      	str	r3, [r4, #8]
 8009dd6:	6963      	ldr	r3, [r4, #20]
 8009dd8:	425b      	negs	r3, r3
 8009dda:	61a3      	str	r3, [r4, #24]
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	b943      	cbnz	r3, 8009df2 <__swsetup_r+0xc6>
 8009de0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009de4:	d1ba      	bne.n	8009d5c <__swsetup_r+0x30>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	0781      	lsls	r1, r0, #30
 8009dea:	bf58      	it	pl
 8009dec:	6963      	ldrpl	r3, [r4, #20]
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	e7f4      	b.n	8009ddc <__swsetup_r+0xb0>
 8009df2:	2000      	movs	r0, #0
 8009df4:	e7f7      	b.n	8009de6 <__swsetup_r+0xba>
 8009df6:	bf00      	nop
 8009df8:	2000055c 	.word	0x2000055c
 8009dfc:	0802e9dc 	.word	0x0802e9dc
 8009e00:	0802e9fc 	.word	0x0802e9fc
 8009e04:	0802e9bc 	.word	0x0802e9bc

08009e08 <__sflush_r>:
 8009e08:	898a      	ldrh	r2, [r1, #12]
 8009e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0e:	4605      	mov	r5, r0
 8009e10:	0710      	lsls	r0, r2, #28
 8009e12:	460c      	mov	r4, r1
 8009e14:	d458      	bmi.n	8009ec8 <__sflush_r+0xc0>
 8009e16:	684b      	ldr	r3, [r1, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	dc05      	bgt.n	8009e28 <__sflush_r+0x20>
 8009e1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dc02      	bgt.n	8009e28 <__sflush_r+0x20>
 8009e22:	2000      	movs	r0, #0
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	d0f9      	beq.n	8009e22 <__sflush_r+0x1a>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e34:	682f      	ldr	r7, [r5, #0]
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	d032      	beq.n	8009ea0 <__sflush_r+0x98>
 8009e3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	075a      	lsls	r2, r3, #29
 8009e40:	d505      	bpl.n	8009e4e <__sflush_r+0x46>
 8009e42:	6863      	ldr	r3, [r4, #4]
 8009e44:	1ac0      	subs	r0, r0, r3
 8009e46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e48:	b10b      	cbz	r3, 8009e4e <__sflush_r+0x46>
 8009e4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e4c:	1ac0      	subs	r0, r0, r3
 8009e4e:	2300      	movs	r3, #0
 8009e50:	4602      	mov	r2, r0
 8009e52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e54:	6a21      	ldr	r1, [r4, #32]
 8009e56:	4628      	mov	r0, r5
 8009e58:	47b0      	blx	r6
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	d106      	bne.n	8009e6e <__sflush_r+0x66>
 8009e60:	6829      	ldr	r1, [r5, #0]
 8009e62:	291d      	cmp	r1, #29
 8009e64:	d82c      	bhi.n	8009ec0 <__sflush_r+0xb8>
 8009e66:	4a2a      	ldr	r2, [pc, #168]	; (8009f10 <__sflush_r+0x108>)
 8009e68:	40ca      	lsrs	r2, r1
 8009e6a:	07d6      	lsls	r6, r2, #31
 8009e6c:	d528      	bpl.n	8009ec0 <__sflush_r+0xb8>
 8009e6e:	2200      	movs	r2, #0
 8009e70:	6062      	str	r2, [r4, #4]
 8009e72:	04d9      	lsls	r1, r3, #19
 8009e74:	6922      	ldr	r2, [r4, #16]
 8009e76:	6022      	str	r2, [r4, #0]
 8009e78:	d504      	bpl.n	8009e84 <__sflush_r+0x7c>
 8009e7a:	1c42      	adds	r2, r0, #1
 8009e7c:	d101      	bne.n	8009e82 <__sflush_r+0x7a>
 8009e7e:	682b      	ldr	r3, [r5, #0]
 8009e80:	b903      	cbnz	r3, 8009e84 <__sflush_r+0x7c>
 8009e82:	6560      	str	r0, [r4, #84]	; 0x54
 8009e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e86:	602f      	str	r7, [r5, #0]
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	d0ca      	beq.n	8009e22 <__sflush_r+0x1a>
 8009e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e90:	4299      	cmp	r1, r3
 8009e92:	d002      	beq.n	8009e9a <__sflush_r+0x92>
 8009e94:	4628      	mov	r0, r5
 8009e96:	f000 f9df 	bl	800a258 <_free_r>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e9e:	e7c1      	b.n	8009e24 <__sflush_r+0x1c>
 8009ea0:	6a21      	ldr	r1, [r4, #32]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b0      	blx	r6
 8009ea8:	1c41      	adds	r1, r0, #1
 8009eaa:	d1c7      	bne.n	8009e3c <__sflush_r+0x34>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0c4      	beq.n	8009e3c <__sflush_r+0x34>
 8009eb2:	2b1d      	cmp	r3, #29
 8009eb4:	d001      	beq.n	8009eba <__sflush_r+0xb2>
 8009eb6:	2b16      	cmp	r3, #22
 8009eb8:	d101      	bne.n	8009ebe <__sflush_r+0xb6>
 8009eba:	602f      	str	r7, [r5, #0]
 8009ebc:	e7b1      	b.n	8009e22 <__sflush_r+0x1a>
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	e7ad      	b.n	8009e24 <__sflush_r+0x1c>
 8009ec8:	690f      	ldr	r7, [r1, #16]
 8009eca:	2f00      	cmp	r7, #0
 8009ecc:	d0a9      	beq.n	8009e22 <__sflush_r+0x1a>
 8009ece:	0793      	lsls	r3, r2, #30
 8009ed0:	680e      	ldr	r6, [r1, #0]
 8009ed2:	bf08      	it	eq
 8009ed4:	694b      	ldreq	r3, [r1, #20]
 8009ed6:	600f      	str	r7, [r1, #0]
 8009ed8:	bf18      	it	ne
 8009eda:	2300      	movne	r3, #0
 8009edc:	eba6 0807 	sub.w	r8, r6, r7
 8009ee0:	608b      	str	r3, [r1, #8]
 8009ee2:	f1b8 0f00 	cmp.w	r8, #0
 8009ee6:	dd9c      	ble.n	8009e22 <__sflush_r+0x1a>
 8009ee8:	6a21      	ldr	r1, [r4, #32]
 8009eea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009eec:	4643      	mov	r3, r8
 8009eee:	463a      	mov	r2, r7
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b0      	blx	r6
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	dc06      	bgt.n	8009f06 <__sflush_r+0xfe>
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009efe:	81a3      	strh	r3, [r4, #12]
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	e78e      	b.n	8009e24 <__sflush_r+0x1c>
 8009f06:	4407      	add	r7, r0
 8009f08:	eba8 0800 	sub.w	r8, r8, r0
 8009f0c:	e7e9      	b.n	8009ee2 <__sflush_r+0xda>
 8009f0e:	bf00      	nop
 8009f10:	20400001 	.word	0x20400001

08009f14 <_fflush_r>:
 8009f14:	b538      	push	{r3, r4, r5, lr}
 8009f16:	690b      	ldr	r3, [r1, #16]
 8009f18:	4605      	mov	r5, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	b913      	cbnz	r3, 8009f24 <_fflush_r+0x10>
 8009f1e:	2500      	movs	r5, #0
 8009f20:	4628      	mov	r0, r5
 8009f22:	bd38      	pop	{r3, r4, r5, pc}
 8009f24:	b118      	cbz	r0, 8009f2e <_fflush_r+0x1a>
 8009f26:	6983      	ldr	r3, [r0, #24]
 8009f28:	b90b      	cbnz	r3, 8009f2e <_fflush_r+0x1a>
 8009f2a:	f000 f887 	bl	800a03c <__sinit>
 8009f2e:	4b14      	ldr	r3, [pc, #80]	; (8009f80 <_fflush_r+0x6c>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	d11b      	bne.n	8009f6c <_fflush_r+0x58>
 8009f34:	686c      	ldr	r4, [r5, #4]
 8009f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0ef      	beq.n	8009f1e <_fflush_r+0xa>
 8009f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f40:	07d0      	lsls	r0, r2, #31
 8009f42:	d404      	bmi.n	8009f4e <_fflush_r+0x3a>
 8009f44:	0599      	lsls	r1, r3, #22
 8009f46:	d402      	bmi.n	8009f4e <_fflush_r+0x3a>
 8009f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f4a:	f000 f915 	bl	800a178 <__retarget_lock_acquire_recursive>
 8009f4e:	4628      	mov	r0, r5
 8009f50:	4621      	mov	r1, r4
 8009f52:	f7ff ff59 	bl	8009e08 <__sflush_r>
 8009f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f58:	07da      	lsls	r2, r3, #31
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	d4e0      	bmi.n	8009f20 <_fflush_r+0xc>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	059b      	lsls	r3, r3, #22
 8009f62:	d4dd      	bmi.n	8009f20 <_fflush_r+0xc>
 8009f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f66:	f000 f908 	bl	800a17a <__retarget_lock_release_recursive>
 8009f6a:	e7d9      	b.n	8009f20 <_fflush_r+0xc>
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <_fflush_r+0x70>)
 8009f6e:	429c      	cmp	r4, r3
 8009f70:	d101      	bne.n	8009f76 <_fflush_r+0x62>
 8009f72:	68ac      	ldr	r4, [r5, #8]
 8009f74:	e7df      	b.n	8009f36 <_fflush_r+0x22>
 8009f76:	4b04      	ldr	r3, [pc, #16]	; (8009f88 <_fflush_r+0x74>)
 8009f78:	429c      	cmp	r4, r3
 8009f7a:	bf08      	it	eq
 8009f7c:	68ec      	ldreq	r4, [r5, #12]
 8009f7e:	e7da      	b.n	8009f36 <_fflush_r+0x22>
 8009f80:	0802e9dc 	.word	0x0802e9dc
 8009f84:	0802e9fc 	.word	0x0802e9fc
 8009f88:	0802e9bc 	.word	0x0802e9bc

08009f8c <std>:
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	4604      	mov	r4, r0
 8009f92:	e9c0 3300 	strd	r3, r3, [r0]
 8009f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f9a:	6083      	str	r3, [r0, #8]
 8009f9c:	8181      	strh	r1, [r0, #12]
 8009f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8009fa0:	81c2      	strh	r2, [r0, #14]
 8009fa2:	6183      	str	r3, [r0, #24]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	2208      	movs	r2, #8
 8009fa8:	305c      	adds	r0, #92	; 0x5c
 8009faa:	f7ff fcd3 	bl	8009954 <memset>
 8009fae:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <std+0x38>)
 8009fb0:	6263      	str	r3, [r4, #36]	; 0x24
 8009fb2:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <std+0x3c>)
 8009fb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8009fb6:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <std+0x40>)
 8009fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fba:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <std+0x44>)
 8009fbc:	6224      	str	r4, [r4, #32]
 8009fbe:	6323      	str	r3, [r4, #48]	; 0x30
 8009fc0:	bd10      	pop	{r4, pc}
 8009fc2:	bf00      	nop
 8009fc4:	0800ad5d 	.word	0x0800ad5d
 8009fc8:	0800ad7f 	.word	0x0800ad7f
 8009fcc:	0800adb7 	.word	0x0800adb7
 8009fd0:	0800addb 	.word	0x0800addb

08009fd4 <_cleanup_r>:
 8009fd4:	4901      	ldr	r1, [pc, #4]	; (8009fdc <_cleanup_r+0x8>)
 8009fd6:	f000 b8af 	b.w	800a138 <_fwalk_reent>
 8009fda:	bf00      	nop
 8009fdc:	08009f15 	.word	0x08009f15

08009fe0 <__sfmoreglue>:
 8009fe0:	b570      	push	{r4, r5, r6, lr}
 8009fe2:	2268      	movs	r2, #104	; 0x68
 8009fe4:	1e4d      	subs	r5, r1, #1
 8009fe6:	4355      	muls	r5, r2
 8009fe8:	460e      	mov	r6, r1
 8009fea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fee:	f000 f99f 	bl	800a330 <_malloc_r>
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	b140      	cbz	r0, 800a008 <__sfmoreglue+0x28>
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	e9c0 1600 	strd	r1, r6, [r0]
 8009ffc:	300c      	adds	r0, #12
 8009ffe:	60a0      	str	r0, [r4, #8]
 800a000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a004:	f7ff fca6 	bl	8009954 <memset>
 800a008:	4620      	mov	r0, r4
 800a00a:	bd70      	pop	{r4, r5, r6, pc}

0800a00c <__sfp_lock_acquire>:
 800a00c:	4801      	ldr	r0, [pc, #4]	; (800a014 <__sfp_lock_acquire+0x8>)
 800a00e:	f000 b8b3 	b.w	800a178 <__retarget_lock_acquire_recursive>
 800a012:	bf00      	nop
 800a014:	20000929 	.word	0x20000929

0800a018 <__sfp_lock_release>:
 800a018:	4801      	ldr	r0, [pc, #4]	; (800a020 <__sfp_lock_release+0x8>)
 800a01a:	f000 b8ae 	b.w	800a17a <__retarget_lock_release_recursive>
 800a01e:	bf00      	nop
 800a020:	20000929 	.word	0x20000929

0800a024 <__sinit_lock_acquire>:
 800a024:	4801      	ldr	r0, [pc, #4]	; (800a02c <__sinit_lock_acquire+0x8>)
 800a026:	f000 b8a7 	b.w	800a178 <__retarget_lock_acquire_recursive>
 800a02a:	bf00      	nop
 800a02c:	2000092a 	.word	0x2000092a

0800a030 <__sinit_lock_release>:
 800a030:	4801      	ldr	r0, [pc, #4]	; (800a038 <__sinit_lock_release+0x8>)
 800a032:	f000 b8a2 	b.w	800a17a <__retarget_lock_release_recursive>
 800a036:	bf00      	nop
 800a038:	2000092a 	.word	0x2000092a

0800a03c <__sinit>:
 800a03c:	b510      	push	{r4, lr}
 800a03e:	4604      	mov	r4, r0
 800a040:	f7ff fff0 	bl	800a024 <__sinit_lock_acquire>
 800a044:	69a3      	ldr	r3, [r4, #24]
 800a046:	b11b      	cbz	r3, 800a050 <__sinit+0x14>
 800a048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a04c:	f7ff bff0 	b.w	800a030 <__sinit_lock_release>
 800a050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a054:	6523      	str	r3, [r4, #80]	; 0x50
 800a056:	4b13      	ldr	r3, [pc, #76]	; (800a0a4 <__sinit+0x68>)
 800a058:	4a13      	ldr	r2, [pc, #76]	; (800a0a8 <__sinit+0x6c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a05e:	42a3      	cmp	r3, r4
 800a060:	bf04      	itt	eq
 800a062:	2301      	moveq	r3, #1
 800a064:	61a3      	streq	r3, [r4, #24]
 800a066:	4620      	mov	r0, r4
 800a068:	f000 f820 	bl	800a0ac <__sfp>
 800a06c:	6060      	str	r0, [r4, #4]
 800a06e:	4620      	mov	r0, r4
 800a070:	f000 f81c 	bl	800a0ac <__sfp>
 800a074:	60a0      	str	r0, [r4, #8]
 800a076:	4620      	mov	r0, r4
 800a078:	f000 f818 	bl	800a0ac <__sfp>
 800a07c:	2200      	movs	r2, #0
 800a07e:	60e0      	str	r0, [r4, #12]
 800a080:	2104      	movs	r1, #4
 800a082:	6860      	ldr	r0, [r4, #4]
 800a084:	f7ff ff82 	bl	8009f8c <std>
 800a088:	68a0      	ldr	r0, [r4, #8]
 800a08a:	2201      	movs	r2, #1
 800a08c:	2109      	movs	r1, #9
 800a08e:	f7ff ff7d 	bl	8009f8c <std>
 800a092:	68e0      	ldr	r0, [r4, #12]
 800a094:	2202      	movs	r2, #2
 800a096:	2112      	movs	r1, #18
 800a098:	f7ff ff78 	bl	8009f8c <std>
 800a09c:	2301      	movs	r3, #1
 800a09e:	61a3      	str	r3, [r4, #24]
 800a0a0:	e7d2      	b.n	800a048 <__sinit+0xc>
 800a0a2:	bf00      	nop
 800a0a4:	0802e9b8 	.word	0x0802e9b8
 800a0a8:	08009fd5 	.word	0x08009fd5

0800a0ac <__sfp>:
 800a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	f7ff ffac 	bl	800a00c <__sfp_lock_acquire>
 800a0b4:	4b1e      	ldr	r3, [pc, #120]	; (800a130 <__sfp+0x84>)
 800a0b6:	681e      	ldr	r6, [r3, #0]
 800a0b8:	69b3      	ldr	r3, [r6, #24]
 800a0ba:	b913      	cbnz	r3, 800a0c2 <__sfp+0x16>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f7ff ffbd 	bl	800a03c <__sinit>
 800a0c2:	3648      	adds	r6, #72	; 0x48
 800a0c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	d503      	bpl.n	800a0d4 <__sfp+0x28>
 800a0cc:	6833      	ldr	r3, [r6, #0]
 800a0ce:	b30b      	cbz	r3, 800a114 <__sfp+0x68>
 800a0d0:	6836      	ldr	r6, [r6, #0]
 800a0d2:	e7f7      	b.n	800a0c4 <__sfp+0x18>
 800a0d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0d8:	b9d5      	cbnz	r5, 800a110 <__sfp+0x64>
 800a0da:	4b16      	ldr	r3, [pc, #88]	; (800a134 <__sfp+0x88>)
 800a0dc:	60e3      	str	r3, [r4, #12]
 800a0de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0e2:	6665      	str	r5, [r4, #100]	; 0x64
 800a0e4:	f000 f847 	bl	800a176 <__retarget_lock_init_recursive>
 800a0e8:	f7ff ff96 	bl	800a018 <__sfp_lock_release>
 800a0ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0f4:	6025      	str	r5, [r4, #0]
 800a0f6:	61a5      	str	r5, [r4, #24]
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a100:	f7ff fc28 	bl	8009954 <memset>
 800a104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a10c:	4620      	mov	r0, r4
 800a10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a110:	3468      	adds	r4, #104	; 0x68
 800a112:	e7d9      	b.n	800a0c8 <__sfp+0x1c>
 800a114:	2104      	movs	r1, #4
 800a116:	4638      	mov	r0, r7
 800a118:	f7ff ff62 	bl	8009fe0 <__sfmoreglue>
 800a11c:	4604      	mov	r4, r0
 800a11e:	6030      	str	r0, [r6, #0]
 800a120:	2800      	cmp	r0, #0
 800a122:	d1d5      	bne.n	800a0d0 <__sfp+0x24>
 800a124:	f7ff ff78 	bl	800a018 <__sfp_lock_release>
 800a128:	230c      	movs	r3, #12
 800a12a:	603b      	str	r3, [r7, #0]
 800a12c:	e7ee      	b.n	800a10c <__sfp+0x60>
 800a12e:	bf00      	nop
 800a130:	0802e9b8 	.word	0x0802e9b8
 800a134:	ffff0001 	.word	0xffff0001

0800a138 <_fwalk_reent>:
 800a138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13c:	4606      	mov	r6, r0
 800a13e:	4688      	mov	r8, r1
 800a140:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a144:	2700      	movs	r7, #0
 800a146:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a14a:	f1b9 0901 	subs.w	r9, r9, #1
 800a14e:	d505      	bpl.n	800a15c <_fwalk_reent+0x24>
 800a150:	6824      	ldr	r4, [r4, #0]
 800a152:	2c00      	cmp	r4, #0
 800a154:	d1f7      	bne.n	800a146 <_fwalk_reent+0xe>
 800a156:	4638      	mov	r0, r7
 800a158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15c:	89ab      	ldrh	r3, [r5, #12]
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d907      	bls.n	800a172 <_fwalk_reent+0x3a>
 800a162:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a166:	3301      	adds	r3, #1
 800a168:	d003      	beq.n	800a172 <_fwalk_reent+0x3a>
 800a16a:	4629      	mov	r1, r5
 800a16c:	4630      	mov	r0, r6
 800a16e:	47c0      	blx	r8
 800a170:	4307      	orrs	r7, r0
 800a172:	3568      	adds	r5, #104	; 0x68
 800a174:	e7e9      	b.n	800a14a <_fwalk_reent+0x12>

0800a176 <__retarget_lock_init_recursive>:
 800a176:	4770      	bx	lr

0800a178 <__retarget_lock_acquire_recursive>:
 800a178:	4770      	bx	lr

0800a17a <__retarget_lock_release_recursive>:
 800a17a:	4770      	bx	lr

0800a17c <__swhatbuf_r>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	460e      	mov	r6, r1
 800a180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a184:	2900      	cmp	r1, #0
 800a186:	b096      	sub	sp, #88	; 0x58
 800a188:	4614      	mov	r4, r2
 800a18a:	461d      	mov	r5, r3
 800a18c:	da08      	bge.n	800a1a0 <__swhatbuf_r+0x24>
 800a18e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	602a      	str	r2, [r5, #0]
 800a196:	061a      	lsls	r2, r3, #24
 800a198:	d410      	bmi.n	800a1bc <__swhatbuf_r+0x40>
 800a19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a19e:	e00e      	b.n	800a1be <__swhatbuf_r+0x42>
 800a1a0:	466a      	mov	r2, sp
 800a1a2:	f000 fe41 	bl	800ae28 <_fstat_r>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	dbf1      	blt.n	800a18e <__swhatbuf_r+0x12>
 800a1aa:	9a01      	ldr	r2, [sp, #4]
 800a1ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1b4:	425a      	negs	r2, r3
 800a1b6:	415a      	adcs	r2, r3
 800a1b8:	602a      	str	r2, [r5, #0]
 800a1ba:	e7ee      	b.n	800a19a <__swhatbuf_r+0x1e>
 800a1bc:	2340      	movs	r3, #64	; 0x40
 800a1be:	2000      	movs	r0, #0
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	b016      	add	sp, #88	; 0x58
 800a1c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1c8 <__smakebuf_r>:
 800a1c8:	898b      	ldrh	r3, [r1, #12]
 800a1ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1cc:	079d      	lsls	r5, r3, #30
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	d507      	bpl.n	800a1e4 <__smakebuf_r+0x1c>
 800a1d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	6123      	str	r3, [r4, #16]
 800a1dc:	2301      	movs	r3, #1
 800a1de:	6163      	str	r3, [r4, #20]
 800a1e0:	b002      	add	sp, #8
 800a1e2:	bd70      	pop	{r4, r5, r6, pc}
 800a1e4:	ab01      	add	r3, sp, #4
 800a1e6:	466a      	mov	r2, sp
 800a1e8:	f7ff ffc8 	bl	800a17c <__swhatbuf_r>
 800a1ec:	9900      	ldr	r1, [sp, #0]
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f000 f89d 	bl	800a330 <_malloc_r>
 800a1f6:	b948      	cbnz	r0, 800a20c <__smakebuf_r+0x44>
 800a1f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1fc:	059a      	lsls	r2, r3, #22
 800a1fe:	d4ef      	bmi.n	800a1e0 <__smakebuf_r+0x18>
 800a200:	f023 0303 	bic.w	r3, r3, #3
 800a204:	f043 0302 	orr.w	r3, r3, #2
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	e7e3      	b.n	800a1d4 <__smakebuf_r+0xc>
 800a20c:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <__smakebuf_r+0x7c>)
 800a20e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	6020      	str	r0, [r4, #0]
 800a214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a218:	81a3      	strh	r3, [r4, #12]
 800a21a:	9b00      	ldr	r3, [sp, #0]
 800a21c:	6163      	str	r3, [r4, #20]
 800a21e:	9b01      	ldr	r3, [sp, #4]
 800a220:	6120      	str	r0, [r4, #16]
 800a222:	b15b      	cbz	r3, 800a23c <__smakebuf_r+0x74>
 800a224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a228:	4630      	mov	r0, r6
 800a22a:	f000 fe0f 	bl	800ae4c <_isatty_r>
 800a22e:	b128      	cbz	r0, 800a23c <__smakebuf_r+0x74>
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	f043 0301 	orr.w	r3, r3, #1
 800a23a:	81a3      	strh	r3, [r4, #12]
 800a23c:	89a0      	ldrh	r0, [r4, #12]
 800a23e:	4305      	orrs	r5, r0
 800a240:	81a5      	strh	r5, [r4, #12]
 800a242:	e7cd      	b.n	800a1e0 <__smakebuf_r+0x18>
 800a244:	08009fd5 	.word	0x08009fd5

0800a248 <malloc>:
 800a248:	4b02      	ldr	r3, [pc, #8]	; (800a254 <malloc+0xc>)
 800a24a:	4601      	mov	r1, r0
 800a24c:	6818      	ldr	r0, [r3, #0]
 800a24e:	f000 b86f 	b.w	800a330 <_malloc_r>
 800a252:	bf00      	nop
 800a254:	2000055c 	.word	0x2000055c

0800a258 <_free_r>:
 800a258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a25a:	2900      	cmp	r1, #0
 800a25c:	d044      	beq.n	800a2e8 <_free_r+0x90>
 800a25e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a262:	9001      	str	r0, [sp, #4]
 800a264:	2b00      	cmp	r3, #0
 800a266:	f1a1 0404 	sub.w	r4, r1, #4
 800a26a:	bfb8      	it	lt
 800a26c:	18e4      	addlt	r4, r4, r3
 800a26e:	f000 fe29 	bl	800aec4 <__malloc_lock>
 800a272:	4a1e      	ldr	r2, [pc, #120]	; (800a2ec <_free_r+0x94>)
 800a274:	9801      	ldr	r0, [sp, #4]
 800a276:	6813      	ldr	r3, [r2, #0]
 800a278:	b933      	cbnz	r3, 800a288 <_free_r+0x30>
 800a27a:	6063      	str	r3, [r4, #4]
 800a27c:	6014      	str	r4, [r2, #0]
 800a27e:	b003      	add	sp, #12
 800a280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a284:	f000 be24 	b.w	800aed0 <__malloc_unlock>
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d908      	bls.n	800a29e <_free_r+0x46>
 800a28c:	6825      	ldr	r5, [r4, #0]
 800a28e:	1961      	adds	r1, r4, r5
 800a290:	428b      	cmp	r3, r1
 800a292:	bf01      	itttt	eq
 800a294:	6819      	ldreq	r1, [r3, #0]
 800a296:	685b      	ldreq	r3, [r3, #4]
 800a298:	1949      	addeq	r1, r1, r5
 800a29a:	6021      	streq	r1, [r4, #0]
 800a29c:	e7ed      	b.n	800a27a <_free_r+0x22>
 800a29e:	461a      	mov	r2, r3
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	b10b      	cbz	r3, 800a2a8 <_free_r+0x50>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d9fa      	bls.n	800a29e <_free_r+0x46>
 800a2a8:	6811      	ldr	r1, [r2, #0]
 800a2aa:	1855      	adds	r5, r2, r1
 800a2ac:	42a5      	cmp	r5, r4
 800a2ae:	d10b      	bne.n	800a2c8 <_free_r+0x70>
 800a2b0:	6824      	ldr	r4, [r4, #0]
 800a2b2:	4421      	add	r1, r4
 800a2b4:	1854      	adds	r4, r2, r1
 800a2b6:	42a3      	cmp	r3, r4
 800a2b8:	6011      	str	r1, [r2, #0]
 800a2ba:	d1e0      	bne.n	800a27e <_free_r+0x26>
 800a2bc:	681c      	ldr	r4, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	6053      	str	r3, [r2, #4]
 800a2c2:	4421      	add	r1, r4
 800a2c4:	6011      	str	r1, [r2, #0]
 800a2c6:	e7da      	b.n	800a27e <_free_r+0x26>
 800a2c8:	d902      	bls.n	800a2d0 <_free_r+0x78>
 800a2ca:	230c      	movs	r3, #12
 800a2cc:	6003      	str	r3, [r0, #0]
 800a2ce:	e7d6      	b.n	800a27e <_free_r+0x26>
 800a2d0:	6825      	ldr	r5, [r4, #0]
 800a2d2:	1961      	adds	r1, r4, r5
 800a2d4:	428b      	cmp	r3, r1
 800a2d6:	bf04      	itt	eq
 800a2d8:	6819      	ldreq	r1, [r3, #0]
 800a2da:	685b      	ldreq	r3, [r3, #4]
 800a2dc:	6063      	str	r3, [r4, #4]
 800a2de:	bf04      	itt	eq
 800a2e0:	1949      	addeq	r1, r1, r5
 800a2e2:	6021      	streq	r1, [r4, #0]
 800a2e4:	6054      	str	r4, [r2, #4]
 800a2e6:	e7ca      	b.n	800a27e <_free_r+0x26>
 800a2e8:	b003      	add	sp, #12
 800a2ea:	bd30      	pop	{r4, r5, pc}
 800a2ec:	2000092c 	.word	0x2000092c

0800a2f0 <sbrk_aligned>:
 800a2f0:	b570      	push	{r4, r5, r6, lr}
 800a2f2:	4e0e      	ldr	r6, [pc, #56]	; (800a32c <sbrk_aligned+0x3c>)
 800a2f4:	460c      	mov	r4, r1
 800a2f6:	6831      	ldr	r1, [r6, #0]
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	b911      	cbnz	r1, 800a302 <sbrk_aligned+0x12>
 800a2fc:	f000 fd1e 	bl	800ad3c <_sbrk_r>
 800a300:	6030      	str	r0, [r6, #0]
 800a302:	4621      	mov	r1, r4
 800a304:	4628      	mov	r0, r5
 800a306:	f000 fd19 	bl	800ad3c <_sbrk_r>
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	d00a      	beq.n	800a324 <sbrk_aligned+0x34>
 800a30e:	1cc4      	adds	r4, r0, #3
 800a310:	f024 0403 	bic.w	r4, r4, #3
 800a314:	42a0      	cmp	r0, r4
 800a316:	d007      	beq.n	800a328 <sbrk_aligned+0x38>
 800a318:	1a21      	subs	r1, r4, r0
 800a31a:	4628      	mov	r0, r5
 800a31c:	f000 fd0e 	bl	800ad3c <_sbrk_r>
 800a320:	3001      	adds	r0, #1
 800a322:	d101      	bne.n	800a328 <sbrk_aligned+0x38>
 800a324:	f04f 34ff 	mov.w	r4, #4294967295
 800a328:	4620      	mov	r0, r4
 800a32a:	bd70      	pop	{r4, r5, r6, pc}
 800a32c:	20000930 	.word	0x20000930

0800a330 <_malloc_r>:
 800a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a334:	1ccd      	adds	r5, r1, #3
 800a336:	f025 0503 	bic.w	r5, r5, #3
 800a33a:	3508      	adds	r5, #8
 800a33c:	2d0c      	cmp	r5, #12
 800a33e:	bf38      	it	cc
 800a340:	250c      	movcc	r5, #12
 800a342:	2d00      	cmp	r5, #0
 800a344:	4607      	mov	r7, r0
 800a346:	db01      	blt.n	800a34c <_malloc_r+0x1c>
 800a348:	42a9      	cmp	r1, r5
 800a34a:	d905      	bls.n	800a358 <_malloc_r+0x28>
 800a34c:	230c      	movs	r3, #12
 800a34e:	603b      	str	r3, [r7, #0]
 800a350:	2600      	movs	r6, #0
 800a352:	4630      	mov	r0, r6
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a358:	4e2e      	ldr	r6, [pc, #184]	; (800a414 <_malloc_r+0xe4>)
 800a35a:	f000 fdb3 	bl	800aec4 <__malloc_lock>
 800a35e:	6833      	ldr	r3, [r6, #0]
 800a360:	461c      	mov	r4, r3
 800a362:	bb34      	cbnz	r4, 800a3b2 <_malloc_r+0x82>
 800a364:	4629      	mov	r1, r5
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ffc2 	bl	800a2f0 <sbrk_aligned>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	4604      	mov	r4, r0
 800a370:	d14d      	bne.n	800a40e <_malloc_r+0xde>
 800a372:	6834      	ldr	r4, [r6, #0]
 800a374:	4626      	mov	r6, r4
 800a376:	2e00      	cmp	r6, #0
 800a378:	d140      	bne.n	800a3fc <_malloc_r+0xcc>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	4631      	mov	r1, r6
 800a37e:	4638      	mov	r0, r7
 800a380:	eb04 0803 	add.w	r8, r4, r3
 800a384:	f000 fcda 	bl	800ad3c <_sbrk_r>
 800a388:	4580      	cmp	r8, r0
 800a38a:	d13a      	bne.n	800a402 <_malloc_r+0xd2>
 800a38c:	6821      	ldr	r1, [r4, #0]
 800a38e:	3503      	adds	r5, #3
 800a390:	1a6d      	subs	r5, r5, r1
 800a392:	f025 0503 	bic.w	r5, r5, #3
 800a396:	3508      	adds	r5, #8
 800a398:	2d0c      	cmp	r5, #12
 800a39a:	bf38      	it	cc
 800a39c:	250c      	movcc	r5, #12
 800a39e:	4629      	mov	r1, r5
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7ff ffa5 	bl	800a2f0 <sbrk_aligned>
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	d02b      	beq.n	800a402 <_malloc_r+0xd2>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	442b      	add	r3, r5
 800a3ae:	6023      	str	r3, [r4, #0]
 800a3b0:	e00e      	b.n	800a3d0 <_malloc_r+0xa0>
 800a3b2:	6822      	ldr	r2, [r4, #0]
 800a3b4:	1b52      	subs	r2, r2, r5
 800a3b6:	d41e      	bmi.n	800a3f6 <_malloc_r+0xc6>
 800a3b8:	2a0b      	cmp	r2, #11
 800a3ba:	d916      	bls.n	800a3ea <_malloc_r+0xba>
 800a3bc:	1961      	adds	r1, r4, r5
 800a3be:	42a3      	cmp	r3, r4
 800a3c0:	6025      	str	r5, [r4, #0]
 800a3c2:	bf18      	it	ne
 800a3c4:	6059      	strne	r1, [r3, #4]
 800a3c6:	6863      	ldr	r3, [r4, #4]
 800a3c8:	bf08      	it	eq
 800a3ca:	6031      	streq	r1, [r6, #0]
 800a3cc:	5162      	str	r2, [r4, r5]
 800a3ce:	604b      	str	r3, [r1, #4]
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f104 060b 	add.w	r6, r4, #11
 800a3d6:	f000 fd7b 	bl	800aed0 <__malloc_unlock>
 800a3da:	f026 0607 	bic.w	r6, r6, #7
 800a3de:	1d23      	adds	r3, r4, #4
 800a3e0:	1af2      	subs	r2, r6, r3
 800a3e2:	d0b6      	beq.n	800a352 <_malloc_r+0x22>
 800a3e4:	1b9b      	subs	r3, r3, r6
 800a3e6:	50a3      	str	r3, [r4, r2]
 800a3e8:	e7b3      	b.n	800a352 <_malloc_r+0x22>
 800a3ea:	6862      	ldr	r2, [r4, #4]
 800a3ec:	42a3      	cmp	r3, r4
 800a3ee:	bf0c      	ite	eq
 800a3f0:	6032      	streq	r2, [r6, #0]
 800a3f2:	605a      	strne	r2, [r3, #4]
 800a3f4:	e7ec      	b.n	800a3d0 <_malloc_r+0xa0>
 800a3f6:	4623      	mov	r3, r4
 800a3f8:	6864      	ldr	r4, [r4, #4]
 800a3fa:	e7b2      	b.n	800a362 <_malloc_r+0x32>
 800a3fc:	4634      	mov	r4, r6
 800a3fe:	6876      	ldr	r6, [r6, #4]
 800a400:	e7b9      	b.n	800a376 <_malloc_r+0x46>
 800a402:	230c      	movs	r3, #12
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	4638      	mov	r0, r7
 800a408:	f000 fd62 	bl	800aed0 <__malloc_unlock>
 800a40c:	e7a1      	b.n	800a352 <_malloc_r+0x22>
 800a40e:	6025      	str	r5, [r4, #0]
 800a410:	e7de      	b.n	800a3d0 <_malloc_r+0xa0>
 800a412:	bf00      	nop
 800a414:	2000092c 	.word	0x2000092c

0800a418 <__ssputs_r>:
 800a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	688e      	ldr	r6, [r1, #8]
 800a41e:	429e      	cmp	r6, r3
 800a420:	4682      	mov	sl, r0
 800a422:	460c      	mov	r4, r1
 800a424:	4690      	mov	r8, r2
 800a426:	461f      	mov	r7, r3
 800a428:	d838      	bhi.n	800a49c <__ssputs_r+0x84>
 800a42a:	898a      	ldrh	r2, [r1, #12]
 800a42c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a430:	d032      	beq.n	800a498 <__ssputs_r+0x80>
 800a432:	6825      	ldr	r5, [r4, #0]
 800a434:	6909      	ldr	r1, [r1, #16]
 800a436:	eba5 0901 	sub.w	r9, r5, r1
 800a43a:	6965      	ldr	r5, [r4, #20]
 800a43c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a440:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a444:	3301      	adds	r3, #1
 800a446:	444b      	add	r3, r9
 800a448:	106d      	asrs	r5, r5, #1
 800a44a:	429d      	cmp	r5, r3
 800a44c:	bf38      	it	cc
 800a44e:	461d      	movcc	r5, r3
 800a450:	0553      	lsls	r3, r2, #21
 800a452:	d531      	bpl.n	800a4b8 <__ssputs_r+0xa0>
 800a454:	4629      	mov	r1, r5
 800a456:	f7ff ff6b 	bl	800a330 <_malloc_r>
 800a45a:	4606      	mov	r6, r0
 800a45c:	b950      	cbnz	r0, 800a474 <__ssputs_r+0x5c>
 800a45e:	230c      	movs	r3, #12
 800a460:	f8ca 3000 	str.w	r3, [sl]
 800a464:	89a3      	ldrh	r3, [r4, #12]
 800a466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a46a:	81a3      	strh	r3, [r4, #12]
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a474:	6921      	ldr	r1, [r4, #16]
 800a476:	464a      	mov	r2, r9
 800a478:	f7ff fa5e 	bl	8009938 <memcpy>
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	6126      	str	r6, [r4, #16]
 800a48a:	6165      	str	r5, [r4, #20]
 800a48c:	444e      	add	r6, r9
 800a48e:	eba5 0509 	sub.w	r5, r5, r9
 800a492:	6026      	str	r6, [r4, #0]
 800a494:	60a5      	str	r5, [r4, #8]
 800a496:	463e      	mov	r6, r7
 800a498:	42be      	cmp	r6, r7
 800a49a:	d900      	bls.n	800a49e <__ssputs_r+0x86>
 800a49c:	463e      	mov	r6, r7
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	f000 fcf4 	bl	800ae90 <memmove>
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	1b9b      	subs	r3, r3, r6
 800a4ac:	60a3      	str	r3, [r4, #8]
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	4433      	add	r3, r6
 800a4b2:	6023      	str	r3, [r4, #0]
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	e7db      	b.n	800a470 <__ssputs_r+0x58>
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	f000 fd0f 	bl	800aedc <_realloc_r>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d1e1      	bne.n	800a488 <__ssputs_r+0x70>
 800a4c4:	6921      	ldr	r1, [r4, #16]
 800a4c6:	4650      	mov	r0, sl
 800a4c8:	f7ff fec6 	bl	800a258 <_free_r>
 800a4cc:	e7c7      	b.n	800a45e <__ssputs_r+0x46>
	...

0800a4d0 <_svfiprintf_r>:
 800a4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d4:	4698      	mov	r8, r3
 800a4d6:	898b      	ldrh	r3, [r1, #12]
 800a4d8:	061b      	lsls	r3, r3, #24
 800a4da:	b09d      	sub	sp, #116	; 0x74
 800a4dc:	4607      	mov	r7, r0
 800a4de:	460d      	mov	r5, r1
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	d50e      	bpl.n	800a502 <_svfiprintf_r+0x32>
 800a4e4:	690b      	ldr	r3, [r1, #16]
 800a4e6:	b963      	cbnz	r3, 800a502 <_svfiprintf_r+0x32>
 800a4e8:	2140      	movs	r1, #64	; 0x40
 800a4ea:	f7ff ff21 	bl	800a330 <_malloc_r>
 800a4ee:	6028      	str	r0, [r5, #0]
 800a4f0:	6128      	str	r0, [r5, #16]
 800a4f2:	b920      	cbnz	r0, 800a4fe <_svfiprintf_r+0x2e>
 800a4f4:	230c      	movs	r3, #12
 800a4f6:	603b      	str	r3, [r7, #0]
 800a4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fc:	e0d1      	b.n	800a6a2 <_svfiprintf_r+0x1d2>
 800a4fe:	2340      	movs	r3, #64	; 0x40
 800a500:	616b      	str	r3, [r5, #20]
 800a502:	2300      	movs	r3, #0
 800a504:	9309      	str	r3, [sp, #36]	; 0x24
 800a506:	2320      	movs	r3, #32
 800a508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a510:	2330      	movs	r3, #48	; 0x30
 800a512:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6bc <_svfiprintf_r+0x1ec>
 800a516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a51a:	f04f 0901 	mov.w	r9, #1
 800a51e:	4623      	mov	r3, r4
 800a520:	469a      	mov	sl, r3
 800a522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a526:	b10a      	cbz	r2, 800a52c <_svfiprintf_r+0x5c>
 800a528:	2a25      	cmp	r2, #37	; 0x25
 800a52a:	d1f9      	bne.n	800a520 <_svfiprintf_r+0x50>
 800a52c:	ebba 0b04 	subs.w	fp, sl, r4
 800a530:	d00b      	beq.n	800a54a <_svfiprintf_r+0x7a>
 800a532:	465b      	mov	r3, fp
 800a534:	4622      	mov	r2, r4
 800a536:	4629      	mov	r1, r5
 800a538:	4638      	mov	r0, r7
 800a53a:	f7ff ff6d 	bl	800a418 <__ssputs_r>
 800a53e:	3001      	adds	r0, #1
 800a540:	f000 80aa 	beq.w	800a698 <_svfiprintf_r+0x1c8>
 800a544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a546:	445a      	add	r2, fp
 800a548:	9209      	str	r2, [sp, #36]	; 0x24
 800a54a:	f89a 3000 	ldrb.w	r3, [sl]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 80a2 	beq.w	800a698 <_svfiprintf_r+0x1c8>
 800a554:	2300      	movs	r3, #0
 800a556:	f04f 32ff 	mov.w	r2, #4294967295
 800a55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a55e:	f10a 0a01 	add.w	sl, sl, #1
 800a562:	9304      	str	r3, [sp, #16]
 800a564:	9307      	str	r3, [sp, #28]
 800a566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a56a:	931a      	str	r3, [sp, #104]	; 0x68
 800a56c:	4654      	mov	r4, sl
 800a56e:	2205      	movs	r2, #5
 800a570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a574:	4851      	ldr	r0, [pc, #324]	; (800a6bc <_svfiprintf_r+0x1ec>)
 800a576:	f7f5 fe33 	bl	80001e0 <memchr>
 800a57a:	9a04      	ldr	r2, [sp, #16]
 800a57c:	b9d8      	cbnz	r0, 800a5b6 <_svfiprintf_r+0xe6>
 800a57e:	06d0      	lsls	r0, r2, #27
 800a580:	bf44      	itt	mi
 800a582:	2320      	movmi	r3, #32
 800a584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a588:	0711      	lsls	r1, r2, #28
 800a58a:	bf44      	itt	mi
 800a58c:	232b      	movmi	r3, #43	; 0x2b
 800a58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a592:	f89a 3000 	ldrb.w	r3, [sl]
 800a596:	2b2a      	cmp	r3, #42	; 0x2a
 800a598:	d015      	beq.n	800a5c6 <_svfiprintf_r+0xf6>
 800a59a:	9a07      	ldr	r2, [sp, #28]
 800a59c:	4654      	mov	r4, sl
 800a59e:	2000      	movs	r0, #0
 800a5a0:	f04f 0c0a 	mov.w	ip, #10
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5aa:	3b30      	subs	r3, #48	; 0x30
 800a5ac:	2b09      	cmp	r3, #9
 800a5ae:	d94e      	bls.n	800a64e <_svfiprintf_r+0x17e>
 800a5b0:	b1b0      	cbz	r0, 800a5e0 <_svfiprintf_r+0x110>
 800a5b2:	9207      	str	r2, [sp, #28]
 800a5b4:	e014      	b.n	800a5e0 <_svfiprintf_r+0x110>
 800a5b6:	eba0 0308 	sub.w	r3, r0, r8
 800a5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	9304      	str	r3, [sp, #16]
 800a5c2:	46a2      	mov	sl, r4
 800a5c4:	e7d2      	b.n	800a56c <_svfiprintf_r+0x9c>
 800a5c6:	9b03      	ldr	r3, [sp, #12]
 800a5c8:	1d19      	adds	r1, r3, #4
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	9103      	str	r1, [sp, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfbb      	ittet	lt
 800a5d2:	425b      	neglt	r3, r3
 800a5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5d8:	9307      	strge	r3, [sp, #28]
 800a5da:	9307      	strlt	r3, [sp, #28]
 800a5dc:	bfb8      	it	lt
 800a5de:	9204      	strlt	r2, [sp, #16]
 800a5e0:	7823      	ldrb	r3, [r4, #0]
 800a5e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a5e4:	d10c      	bne.n	800a600 <_svfiprintf_r+0x130>
 800a5e6:	7863      	ldrb	r3, [r4, #1]
 800a5e8:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ea:	d135      	bne.n	800a658 <_svfiprintf_r+0x188>
 800a5ec:	9b03      	ldr	r3, [sp, #12]
 800a5ee:	1d1a      	adds	r2, r3, #4
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	9203      	str	r2, [sp, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfb8      	it	lt
 800a5f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5fc:	3402      	adds	r4, #2
 800a5fe:	9305      	str	r3, [sp, #20]
 800a600:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6cc <_svfiprintf_r+0x1fc>
 800a604:	7821      	ldrb	r1, [r4, #0]
 800a606:	2203      	movs	r2, #3
 800a608:	4650      	mov	r0, sl
 800a60a:	f7f5 fde9 	bl	80001e0 <memchr>
 800a60e:	b140      	cbz	r0, 800a622 <_svfiprintf_r+0x152>
 800a610:	2340      	movs	r3, #64	; 0x40
 800a612:	eba0 000a 	sub.w	r0, r0, sl
 800a616:	fa03 f000 	lsl.w	r0, r3, r0
 800a61a:	9b04      	ldr	r3, [sp, #16]
 800a61c:	4303      	orrs	r3, r0
 800a61e:	3401      	adds	r4, #1
 800a620:	9304      	str	r3, [sp, #16]
 800a622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a626:	4826      	ldr	r0, [pc, #152]	; (800a6c0 <_svfiprintf_r+0x1f0>)
 800a628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a62c:	2206      	movs	r2, #6
 800a62e:	f7f5 fdd7 	bl	80001e0 <memchr>
 800a632:	2800      	cmp	r0, #0
 800a634:	d038      	beq.n	800a6a8 <_svfiprintf_r+0x1d8>
 800a636:	4b23      	ldr	r3, [pc, #140]	; (800a6c4 <_svfiprintf_r+0x1f4>)
 800a638:	bb1b      	cbnz	r3, 800a682 <_svfiprintf_r+0x1b2>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	3307      	adds	r3, #7
 800a63e:	f023 0307 	bic.w	r3, r3, #7
 800a642:	3308      	adds	r3, #8
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a648:	4433      	add	r3, r6
 800a64a:	9309      	str	r3, [sp, #36]	; 0x24
 800a64c:	e767      	b.n	800a51e <_svfiprintf_r+0x4e>
 800a64e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a652:	460c      	mov	r4, r1
 800a654:	2001      	movs	r0, #1
 800a656:	e7a5      	b.n	800a5a4 <_svfiprintf_r+0xd4>
 800a658:	2300      	movs	r3, #0
 800a65a:	3401      	adds	r4, #1
 800a65c:	9305      	str	r3, [sp, #20]
 800a65e:	4619      	mov	r1, r3
 800a660:	f04f 0c0a 	mov.w	ip, #10
 800a664:	4620      	mov	r0, r4
 800a666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a66a:	3a30      	subs	r2, #48	; 0x30
 800a66c:	2a09      	cmp	r2, #9
 800a66e:	d903      	bls.n	800a678 <_svfiprintf_r+0x1a8>
 800a670:	2b00      	cmp	r3, #0
 800a672:	d0c5      	beq.n	800a600 <_svfiprintf_r+0x130>
 800a674:	9105      	str	r1, [sp, #20]
 800a676:	e7c3      	b.n	800a600 <_svfiprintf_r+0x130>
 800a678:	fb0c 2101 	mla	r1, ip, r1, r2
 800a67c:	4604      	mov	r4, r0
 800a67e:	2301      	movs	r3, #1
 800a680:	e7f0      	b.n	800a664 <_svfiprintf_r+0x194>
 800a682:	ab03      	add	r3, sp, #12
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	462a      	mov	r2, r5
 800a688:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <_svfiprintf_r+0x1f8>)
 800a68a:	a904      	add	r1, sp, #16
 800a68c:	4638      	mov	r0, r7
 800a68e:	f3af 8000 	nop.w
 800a692:	1c42      	adds	r2, r0, #1
 800a694:	4606      	mov	r6, r0
 800a696:	d1d6      	bne.n	800a646 <_svfiprintf_r+0x176>
 800a698:	89ab      	ldrh	r3, [r5, #12]
 800a69a:	065b      	lsls	r3, r3, #25
 800a69c:	f53f af2c 	bmi.w	800a4f8 <_svfiprintf_r+0x28>
 800a6a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6a2:	b01d      	add	sp, #116	; 0x74
 800a6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a8:	ab03      	add	r3, sp, #12
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4b06      	ldr	r3, [pc, #24]	; (800a6c8 <_svfiprintf_r+0x1f8>)
 800a6b0:	a904      	add	r1, sp, #16
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f000 f9d4 	bl	800aa60 <_printf_i>
 800a6b8:	e7eb      	b.n	800a692 <_svfiprintf_r+0x1c2>
 800a6ba:	bf00      	nop
 800a6bc:	0802ea1c 	.word	0x0802ea1c
 800a6c0:	0802ea26 	.word	0x0802ea26
 800a6c4:	00000000 	.word	0x00000000
 800a6c8:	0800a419 	.word	0x0800a419
 800a6cc:	0802ea22 	.word	0x0802ea22

0800a6d0 <__sfputc_r>:
 800a6d0:	6893      	ldr	r3, [r2, #8]
 800a6d2:	3b01      	subs	r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	b410      	push	{r4}
 800a6d8:	6093      	str	r3, [r2, #8]
 800a6da:	da08      	bge.n	800a6ee <__sfputc_r+0x1e>
 800a6dc:	6994      	ldr	r4, [r2, #24]
 800a6de:	42a3      	cmp	r3, r4
 800a6e0:	db01      	blt.n	800a6e6 <__sfputc_r+0x16>
 800a6e2:	290a      	cmp	r1, #10
 800a6e4:	d103      	bne.n	800a6ee <__sfputc_r+0x1e>
 800a6e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ea:	f7ff bacd 	b.w	8009c88 <__swbuf_r>
 800a6ee:	6813      	ldr	r3, [r2, #0]
 800a6f0:	1c58      	adds	r0, r3, #1
 800a6f2:	6010      	str	r0, [r2, #0]
 800a6f4:	7019      	strb	r1, [r3, #0]
 800a6f6:	4608      	mov	r0, r1
 800a6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <__sfputs_r>:
 800a6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a700:	4606      	mov	r6, r0
 800a702:	460f      	mov	r7, r1
 800a704:	4614      	mov	r4, r2
 800a706:	18d5      	adds	r5, r2, r3
 800a708:	42ac      	cmp	r4, r5
 800a70a:	d101      	bne.n	800a710 <__sfputs_r+0x12>
 800a70c:	2000      	movs	r0, #0
 800a70e:	e007      	b.n	800a720 <__sfputs_r+0x22>
 800a710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a714:	463a      	mov	r2, r7
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff ffda 	bl	800a6d0 <__sfputc_r>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d1f3      	bne.n	800a708 <__sfputs_r+0xa>
 800a720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a724 <_vfiprintf_r>:
 800a724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	460d      	mov	r5, r1
 800a72a:	b09d      	sub	sp, #116	; 0x74
 800a72c:	4614      	mov	r4, r2
 800a72e:	4698      	mov	r8, r3
 800a730:	4606      	mov	r6, r0
 800a732:	b118      	cbz	r0, 800a73c <_vfiprintf_r+0x18>
 800a734:	6983      	ldr	r3, [r0, #24]
 800a736:	b90b      	cbnz	r3, 800a73c <_vfiprintf_r+0x18>
 800a738:	f7ff fc80 	bl	800a03c <__sinit>
 800a73c:	4b89      	ldr	r3, [pc, #548]	; (800a964 <_vfiprintf_r+0x240>)
 800a73e:	429d      	cmp	r5, r3
 800a740:	d11b      	bne.n	800a77a <_vfiprintf_r+0x56>
 800a742:	6875      	ldr	r5, [r6, #4]
 800a744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a746:	07d9      	lsls	r1, r3, #31
 800a748:	d405      	bmi.n	800a756 <_vfiprintf_r+0x32>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	059a      	lsls	r2, r3, #22
 800a74e:	d402      	bmi.n	800a756 <_vfiprintf_r+0x32>
 800a750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a752:	f7ff fd11 	bl	800a178 <__retarget_lock_acquire_recursive>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	071b      	lsls	r3, r3, #28
 800a75a:	d501      	bpl.n	800a760 <_vfiprintf_r+0x3c>
 800a75c:	692b      	ldr	r3, [r5, #16]
 800a75e:	b9eb      	cbnz	r3, 800a79c <_vfiprintf_r+0x78>
 800a760:	4629      	mov	r1, r5
 800a762:	4630      	mov	r0, r6
 800a764:	f7ff fae2 	bl	8009d2c <__swsetup_r>
 800a768:	b1c0      	cbz	r0, 800a79c <_vfiprintf_r+0x78>
 800a76a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a76c:	07dc      	lsls	r4, r3, #31
 800a76e:	d50e      	bpl.n	800a78e <_vfiprintf_r+0x6a>
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	b01d      	add	sp, #116	; 0x74
 800a776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77a:	4b7b      	ldr	r3, [pc, #492]	; (800a968 <_vfiprintf_r+0x244>)
 800a77c:	429d      	cmp	r5, r3
 800a77e:	d101      	bne.n	800a784 <_vfiprintf_r+0x60>
 800a780:	68b5      	ldr	r5, [r6, #8]
 800a782:	e7df      	b.n	800a744 <_vfiprintf_r+0x20>
 800a784:	4b79      	ldr	r3, [pc, #484]	; (800a96c <_vfiprintf_r+0x248>)
 800a786:	429d      	cmp	r5, r3
 800a788:	bf08      	it	eq
 800a78a:	68f5      	ldreq	r5, [r6, #12]
 800a78c:	e7da      	b.n	800a744 <_vfiprintf_r+0x20>
 800a78e:	89ab      	ldrh	r3, [r5, #12]
 800a790:	0598      	lsls	r0, r3, #22
 800a792:	d4ed      	bmi.n	800a770 <_vfiprintf_r+0x4c>
 800a794:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a796:	f7ff fcf0 	bl	800a17a <__retarget_lock_release_recursive>
 800a79a:	e7e9      	b.n	800a770 <_vfiprintf_r+0x4c>
 800a79c:	2300      	movs	r3, #0
 800a79e:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a0:	2320      	movs	r3, #32
 800a7a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7aa:	2330      	movs	r3, #48	; 0x30
 800a7ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a970 <_vfiprintf_r+0x24c>
 800a7b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7b4:	f04f 0901 	mov.w	r9, #1
 800a7b8:	4623      	mov	r3, r4
 800a7ba:	469a      	mov	sl, r3
 800a7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c0:	b10a      	cbz	r2, 800a7c6 <_vfiprintf_r+0xa2>
 800a7c2:	2a25      	cmp	r2, #37	; 0x25
 800a7c4:	d1f9      	bne.n	800a7ba <_vfiprintf_r+0x96>
 800a7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7ca:	d00b      	beq.n	800a7e4 <_vfiprintf_r+0xc0>
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	4622      	mov	r2, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f7ff ff93 	bl	800a6fe <__sfputs_r>
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f000 80aa 	beq.w	800a932 <_vfiprintf_r+0x20e>
 800a7de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7e0:	445a      	add	r2, fp
 800a7e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80a2 	beq.w	800a932 <_vfiprintf_r+0x20e>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f8:	f10a 0a01 	add.w	sl, sl, #1
 800a7fc:	9304      	str	r3, [sp, #16]
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a804:	931a      	str	r3, [sp, #104]	; 0x68
 800a806:	4654      	mov	r4, sl
 800a808:	2205      	movs	r2, #5
 800a80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80e:	4858      	ldr	r0, [pc, #352]	; (800a970 <_vfiprintf_r+0x24c>)
 800a810:	f7f5 fce6 	bl	80001e0 <memchr>
 800a814:	9a04      	ldr	r2, [sp, #16]
 800a816:	b9d8      	cbnz	r0, 800a850 <_vfiprintf_r+0x12c>
 800a818:	06d1      	lsls	r1, r2, #27
 800a81a:	bf44      	itt	mi
 800a81c:	2320      	movmi	r3, #32
 800a81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a822:	0713      	lsls	r3, r2, #28
 800a824:	bf44      	itt	mi
 800a826:	232b      	movmi	r3, #43	; 0x2b
 800a828:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a82c:	f89a 3000 	ldrb.w	r3, [sl]
 800a830:	2b2a      	cmp	r3, #42	; 0x2a
 800a832:	d015      	beq.n	800a860 <_vfiprintf_r+0x13c>
 800a834:	9a07      	ldr	r2, [sp, #28]
 800a836:	4654      	mov	r4, sl
 800a838:	2000      	movs	r0, #0
 800a83a:	f04f 0c0a 	mov.w	ip, #10
 800a83e:	4621      	mov	r1, r4
 800a840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a844:	3b30      	subs	r3, #48	; 0x30
 800a846:	2b09      	cmp	r3, #9
 800a848:	d94e      	bls.n	800a8e8 <_vfiprintf_r+0x1c4>
 800a84a:	b1b0      	cbz	r0, 800a87a <_vfiprintf_r+0x156>
 800a84c:	9207      	str	r2, [sp, #28]
 800a84e:	e014      	b.n	800a87a <_vfiprintf_r+0x156>
 800a850:	eba0 0308 	sub.w	r3, r0, r8
 800a854:	fa09 f303 	lsl.w	r3, r9, r3
 800a858:	4313      	orrs	r3, r2
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	46a2      	mov	sl, r4
 800a85e:	e7d2      	b.n	800a806 <_vfiprintf_r+0xe2>
 800a860:	9b03      	ldr	r3, [sp, #12]
 800a862:	1d19      	adds	r1, r3, #4
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	9103      	str	r1, [sp, #12]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfbb      	ittet	lt
 800a86c:	425b      	neglt	r3, r3
 800a86e:	f042 0202 	orrlt.w	r2, r2, #2
 800a872:	9307      	strge	r3, [sp, #28]
 800a874:	9307      	strlt	r3, [sp, #28]
 800a876:	bfb8      	it	lt
 800a878:	9204      	strlt	r2, [sp, #16]
 800a87a:	7823      	ldrb	r3, [r4, #0]
 800a87c:	2b2e      	cmp	r3, #46	; 0x2e
 800a87e:	d10c      	bne.n	800a89a <_vfiprintf_r+0x176>
 800a880:	7863      	ldrb	r3, [r4, #1]
 800a882:	2b2a      	cmp	r3, #42	; 0x2a
 800a884:	d135      	bne.n	800a8f2 <_vfiprintf_r+0x1ce>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	1d1a      	adds	r2, r3, #4
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	9203      	str	r2, [sp, #12]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfb8      	it	lt
 800a892:	f04f 33ff 	movlt.w	r3, #4294967295
 800a896:	3402      	adds	r4, #2
 800a898:	9305      	str	r3, [sp, #20]
 800a89a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a980 <_vfiprintf_r+0x25c>
 800a89e:	7821      	ldrb	r1, [r4, #0]
 800a8a0:	2203      	movs	r2, #3
 800a8a2:	4650      	mov	r0, sl
 800a8a4:	f7f5 fc9c 	bl	80001e0 <memchr>
 800a8a8:	b140      	cbz	r0, 800a8bc <_vfiprintf_r+0x198>
 800a8aa:	2340      	movs	r3, #64	; 0x40
 800a8ac:	eba0 000a 	sub.w	r0, r0, sl
 800a8b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a8b4:	9b04      	ldr	r3, [sp, #16]
 800a8b6:	4303      	orrs	r3, r0
 800a8b8:	3401      	adds	r4, #1
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c0:	482c      	ldr	r0, [pc, #176]	; (800a974 <_vfiprintf_r+0x250>)
 800a8c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8c6:	2206      	movs	r2, #6
 800a8c8:	f7f5 fc8a 	bl	80001e0 <memchr>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d03f      	beq.n	800a950 <_vfiprintf_r+0x22c>
 800a8d0:	4b29      	ldr	r3, [pc, #164]	; (800a978 <_vfiprintf_r+0x254>)
 800a8d2:	bb1b      	cbnz	r3, 800a91c <_vfiprintf_r+0x1f8>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	3307      	adds	r3, #7
 800a8d8:	f023 0307 	bic.w	r3, r3, #7
 800a8dc:	3308      	adds	r3, #8
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e2:	443b      	add	r3, r7
 800a8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e6:	e767      	b.n	800a7b8 <_vfiprintf_r+0x94>
 800a8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	e7a5      	b.n	800a83e <_vfiprintf_r+0x11a>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	9305      	str	r3, [sp, #20]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4620      	mov	r0, r4
 800a900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a904:	3a30      	subs	r2, #48	; 0x30
 800a906:	2a09      	cmp	r2, #9
 800a908:	d903      	bls.n	800a912 <_vfiprintf_r+0x1ee>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0c5      	beq.n	800a89a <_vfiprintf_r+0x176>
 800a90e:	9105      	str	r1, [sp, #20]
 800a910:	e7c3      	b.n	800a89a <_vfiprintf_r+0x176>
 800a912:	fb0c 2101 	mla	r1, ip, r1, r2
 800a916:	4604      	mov	r4, r0
 800a918:	2301      	movs	r3, #1
 800a91a:	e7f0      	b.n	800a8fe <_vfiprintf_r+0x1da>
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	462a      	mov	r2, r5
 800a922:	4b16      	ldr	r3, [pc, #88]	; (800a97c <_vfiprintf_r+0x258>)
 800a924:	a904      	add	r1, sp, #16
 800a926:	4630      	mov	r0, r6
 800a928:	f3af 8000 	nop.w
 800a92c:	4607      	mov	r7, r0
 800a92e:	1c78      	adds	r0, r7, #1
 800a930:	d1d6      	bne.n	800a8e0 <_vfiprintf_r+0x1bc>
 800a932:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a934:	07d9      	lsls	r1, r3, #31
 800a936:	d405      	bmi.n	800a944 <_vfiprintf_r+0x220>
 800a938:	89ab      	ldrh	r3, [r5, #12]
 800a93a:	059a      	lsls	r2, r3, #22
 800a93c:	d402      	bmi.n	800a944 <_vfiprintf_r+0x220>
 800a93e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a940:	f7ff fc1b 	bl	800a17a <__retarget_lock_release_recursive>
 800a944:	89ab      	ldrh	r3, [r5, #12]
 800a946:	065b      	lsls	r3, r3, #25
 800a948:	f53f af12 	bmi.w	800a770 <_vfiprintf_r+0x4c>
 800a94c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a94e:	e711      	b.n	800a774 <_vfiprintf_r+0x50>
 800a950:	ab03      	add	r3, sp, #12
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	462a      	mov	r2, r5
 800a956:	4b09      	ldr	r3, [pc, #36]	; (800a97c <_vfiprintf_r+0x258>)
 800a958:	a904      	add	r1, sp, #16
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 f880 	bl	800aa60 <_printf_i>
 800a960:	e7e4      	b.n	800a92c <_vfiprintf_r+0x208>
 800a962:	bf00      	nop
 800a964:	0802e9dc 	.word	0x0802e9dc
 800a968:	0802e9fc 	.word	0x0802e9fc
 800a96c:	0802e9bc 	.word	0x0802e9bc
 800a970:	0802ea1c 	.word	0x0802ea1c
 800a974:	0802ea26 	.word	0x0802ea26
 800a978:	00000000 	.word	0x00000000
 800a97c:	0800a6ff 	.word	0x0800a6ff
 800a980:	0802ea22 	.word	0x0802ea22

0800a984 <_printf_common>:
 800a984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a988:	4616      	mov	r6, r2
 800a98a:	4699      	mov	r9, r3
 800a98c:	688a      	ldr	r2, [r1, #8]
 800a98e:	690b      	ldr	r3, [r1, #16]
 800a990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a994:	4293      	cmp	r3, r2
 800a996:	bfb8      	it	lt
 800a998:	4613      	movlt	r3, r2
 800a99a:	6033      	str	r3, [r6, #0]
 800a99c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	b10a      	cbz	r2, 800a9aa <_printf_common+0x26>
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	6033      	str	r3, [r6, #0]
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	0699      	lsls	r1, r3, #26
 800a9ae:	bf42      	ittt	mi
 800a9b0:	6833      	ldrmi	r3, [r6, #0]
 800a9b2:	3302      	addmi	r3, #2
 800a9b4:	6033      	strmi	r3, [r6, #0]
 800a9b6:	6825      	ldr	r5, [r4, #0]
 800a9b8:	f015 0506 	ands.w	r5, r5, #6
 800a9bc:	d106      	bne.n	800a9cc <_printf_common+0x48>
 800a9be:	f104 0a19 	add.w	sl, r4, #25
 800a9c2:	68e3      	ldr	r3, [r4, #12]
 800a9c4:	6832      	ldr	r2, [r6, #0]
 800a9c6:	1a9b      	subs	r3, r3, r2
 800a9c8:	42ab      	cmp	r3, r5
 800a9ca:	dc26      	bgt.n	800aa1a <_printf_common+0x96>
 800a9cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9d0:	1e13      	subs	r3, r2, #0
 800a9d2:	6822      	ldr	r2, [r4, #0]
 800a9d4:	bf18      	it	ne
 800a9d6:	2301      	movne	r3, #1
 800a9d8:	0692      	lsls	r2, r2, #26
 800a9da:	d42b      	bmi.n	800aa34 <_printf_common+0xb0>
 800a9dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	47c0      	blx	r8
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	d01e      	beq.n	800aa28 <_printf_common+0xa4>
 800a9ea:	6823      	ldr	r3, [r4, #0]
 800a9ec:	68e5      	ldr	r5, [r4, #12]
 800a9ee:	6832      	ldr	r2, [r6, #0]
 800a9f0:	f003 0306 	and.w	r3, r3, #6
 800a9f4:	2b04      	cmp	r3, #4
 800a9f6:	bf08      	it	eq
 800a9f8:	1aad      	subeq	r5, r5, r2
 800a9fa:	68a3      	ldr	r3, [r4, #8]
 800a9fc:	6922      	ldr	r2, [r4, #16]
 800a9fe:	bf0c      	ite	eq
 800aa00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa04:	2500      	movne	r5, #0
 800aa06:	4293      	cmp	r3, r2
 800aa08:	bfc4      	itt	gt
 800aa0a:	1a9b      	subgt	r3, r3, r2
 800aa0c:	18ed      	addgt	r5, r5, r3
 800aa0e:	2600      	movs	r6, #0
 800aa10:	341a      	adds	r4, #26
 800aa12:	42b5      	cmp	r5, r6
 800aa14:	d11a      	bne.n	800aa4c <_printf_common+0xc8>
 800aa16:	2000      	movs	r0, #0
 800aa18:	e008      	b.n	800aa2c <_printf_common+0xa8>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4652      	mov	r2, sl
 800aa1e:	4649      	mov	r1, r9
 800aa20:	4638      	mov	r0, r7
 800aa22:	47c0      	blx	r8
 800aa24:	3001      	adds	r0, #1
 800aa26:	d103      	bne.n	800aa30 <_printf_common+0xac>
 800aa28:	f04f 30ff 	mov.w	r0, #4294967295
 800aa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa30:	3501      	adds	r5, #1
 800aa32:	e7c6      	b.n	800a9c2 <_printf_common+0x3e>
 800aa34:	18e1      	adds	r1, r4, r3
 800aa36:	1c5a      	adds	r2, r3, #1
 800aa38:	2030      	movs	r0, #48	; 0x30
 800aa3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa3e:	4422      	add	r2, r4
 800aa40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa48:	3302      	adds	r3, #2
 800aa4a:	e7c7      	b.n	800a9dc <_printf_common+0x58>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	4622      	mov	r2, r4
 800aa50:	4649      	mov	r1, r9
 800aa52:	4638      	mov	r0, r7
 800aa54:	47c0      	blx	r8
 800aa56:	3001      	adds	r0, #1
 800aa58:	d0e6      	beq.n	800aa28 <_printf_common+0xa4>
 800aa5a:	3601      	adds	r6, #1
 800aa5c:	e7d9      	b.n	800aa12 <_printf_common+0x8e>
	...

0800aa60 <_printf_i>:
 800aa60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa64:	7e0f      	ldrb	r7, [r1, #24]
 800aa66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa68:	2f78      	cmp	r7, #120	; 0x78
 800aa6a:	4691      	mov	r9, r2
 800aa6c:	4680      	mov	r8, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	469a      	mov	sl, r3
 800aa72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa76:	d807      	bhi.n	800aa88 <_printf_i+0x28>
 800aa78:	2f62      	cmp	r7, #98	; 0x62
 800aa7a:	d80a      	bhi.n	800aa92 <_printf_i+0x32>
 800aa7c:	2f00      	cmp	r7, #0
 800aa7e:	f000 80d8 	beq.w	800ac32 <_printf_i+0x1d2>
 800aa82:	2f58      	cmp	r7, #88	; 0x58
 800aa84:	f000 80a3 	beq.w	800abce <_printf_i+0x16e>
 800aa88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa90:	e03a      	b.n	800ab08 <_printf_i+0xa8>
 800aa92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa96:	2b15      	cmp	r3, #21
 800aa98:	d8f6      	bhi.n	800aa88 <_printf_i+0x28>
 800aa9a:	a101      	add	r1, pc, #4	; (adr r1, 800aaa0 <_printf_i+0x40>)
 800aa9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaa0:	0800aaf9 	.word	0x0800aaf9
 800aaa4:	0800ab0d 	.word	0x0800ab0d
 800aaa8:	0800aa89 	.word	0x0800aa89
 800aaac:	0800aa89 	.word	0x0800aa89
 800aab0:	0800aa89 	.word	0x0800aa89
 800aab4:	0800aa89 	.word	0x0800aa89
 800aab8:	0800ab0d 	.word	0x0800ab0d
 800aabc:	0800aa89 	.word	0x0800aa89
 800aac0:	0800aa89 	.word	0x0800aa89
 800aac4:	0800aa89 	.word	0x0800aa89
 800aac8:	0800aa89 	.word	0x0800aa89
 800aacc:	0800ac19 	.word	0x0800ac19
 800aad0:	0800ab3d 	.word	0x0800ab3d
 800aad4:	0800abfb 	.word	0x0800abfb
 800aad8:	0800aa89 	.word	0x0800aa89
 800aadc:	0800aa89 	.word	0x0800aa89
 800aae0:	0800ac3b 	.word	0x0800ac3b
 800aae4:	0800aa89 	.word	0x0800aa89
 800aae8:	0800ab3d 	.word	0x0800ab3d
 800aaec:	0800aa89 	.word	0x0800aa89
 800aaf0:	0800aa89 	.word	0x0800aa89
 800aaf4:	0800ac03 	.word	0x0800ac03
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	1d1a      	adds	r2, r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	602a      	str	r2, [r5, #0]
 800ab00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab08:	2301      	movs	r3, #1
 800ab0a:	e0a3      	b.n	800ac54 <_printf_i+0x1f4>
 800ab0c:	6820      	ldr	r0, [r4, #0]
 800ab0e:	6829      	ldr	r1, [r5, #0]
 800ab10:	0606      	lsls	r6, r0, #24
 800ab12:	f101 0304 	add.w	r3, r1, #4
 800ab16:	d50a      	bpl.n	800ab2e <_printf_i+0xce>
 800ab18:	680e      	ldr	r6, [r1, #0]
 800ab1a:	602b      	str	r3, [r5, #0]
 800ab1c:	2e00      	cmp	r6, #0
 800ab1e:	da03      	bge.n	800ab28 <_printf_i+0xc8>
 800ab20:	232d      	movs	r3, #45	; 0x2d
 800ab22:	4276      	negs	r6, r6
 800ab24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab28:	485e      	ldr	r0, [pc, #376]	; (800aca4 <_printf_i+0x244>)
 800ab2a:	230a      	movs	r3, #10
 800ab2c:	e019      	b.n	800ab62 <_printf_i+0x102>
 800ab2e:	680e      	ldr	r6, [r1, #0]
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab36:	bf18      	it	ne
 800ab38:	b236      	sxthne	r6, r6
 800ab3a:	e7ef      	b.n	800ab1c <_printf_i+0xbc>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	6820      	ldr	r0, [r4, #0]
 800ab40:	1d19      	adds	r1, r3, #4
 800ab42:	6029      	str	r1, [r5, #0]
 800ab44:	0601      	lsls	r1, r0, #24
 800ab46:	d501      	bpl.n	800ab4c <_printf_i+0xec>
 800ab48:	681e      	ldr	r6, [r3, #0]
 800ab4a:	e002      	b.n	800ab52 <_printf_i+0xf2>
 800ab4c:	0646      	lsls	r6, r0, #25
 800ab4e:	d5fb      	bpl.n	800ab48 <_printf_i+0xe8>
 800ab50:	881e      	ldrh	r6, [r3, #0]
 800ab52:	4854      	ldr	r0, [pc, #336]	; (800aca4 <_printf_i+0x244>)
 800ab54:	2f6f      	cmp	r7, #111	; 0x6f
 800ab56:	bf0c      	ite	eq
 800ab58:	2308      	moveq	r3, #8
 800ab5a:	230a      	movne	r3, #10
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab62:	6865      	ldr	r5, [r4, #4]
 800ab64:	60a5      	str	r5, [r4, #8]
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	bfa2      	ittt	ge
 800ab6a:	6821      	ldrge	r1, [r4, #0]
 800ab6c:	f021 0104 	bicge.w	r1, r1, #4
 800ab70:	6021      	strge	r1, [r4, #0]
 800ab72:	b90e      	cbnz	r6, 800ab78 <_printf_i+0x118>
 800ab74:	2d00      	cmp	r5, #0
 800ab76:	d04d      	beq.n	800ac14 <_printf_i+0x1b4>
 800ab78:	4615      	mov	r5, r2
 800ab7a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab7e:	fb03 6711 	mls	r7, r3, r1, r6
 800ab82:	5dc7      	ldrb	r7, [r0, r7]
 800ab84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab88:	4637      	mov	r7, r6
 800ab8a:	42bb      	cmp	r3, r7
 800ab8c:	460e      	mov	r6, r1
 800ab8e:	d9f4      	bls.n	800ab7a <_printf_i+0x11a>
 800ab90:	2b08      	cmp	r3, #8
 800ab92:	d10b      	bne.n	800abac <_printf_i+0x14c>
 800ab94:	6823      	ldr	r3, [r4, #0]
 800ab96:	07de      	lsls	r6, r3, #31
 800ab98:	d508      	bpl.n	800abac <_printf_i+0x14c>
 800ab9a:	6923      	ldr	r3, [r4, #16]
 800ab9c:	6861      	ldr	r1, [r4, #4]
 800ab9e:	4299      	cmp	r1, r3
 800aba0:	bfde      	ittt	le
 800aba2:	2330      	movle	r3, #48	; 0x30
 800aba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800abac:	1b52      	subs	r2, r2, r5
 800abae:	6122      	str	r2, [r4, #16]
 800abb0:	f8cd a000 	str.w	sl, [sp]
 800abb4:	464b      	mov	r3, r9
 800abb6:	aa03      	add	r2, sp, #12
 800abb8:	4621      	mov	r1, r4
 800abba:	4640      	mov	r0, r8
 800abbc:	f7ff fee2 	bl	800a984 <_printf_common>
 800abc0:	3001      	adds	r0, #1
 800abc2:	d14c      	bne.n	800ac5e <_printf_i+0x1fe>
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	b004      	add	sp, #16
 800abca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abce:	4835      	ldr	r0, [pc, #212]	; (800aca4 <_printf_i+0x244>)
 800abd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800abd4:	6829      	ldr	r1, [r5, #0]
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	f851 6b04 	ldr.w	r6, [r1], #4
 800abdc:	6029      	str	r1, [r5, #0]
 800abde:	061d      	lsls	r5, r3, #24
 800abe0:	d514      	bpl.n	800ac0c <_printf_i+0x1ac>
 800abe2:	07df      	lsls	r7, r3, #31
 800abe4:	bf44      	itt	mi
 800abe6:	f043 0320 	orrmi.w	r3, r3, #32
 800abea:	6023      	strmi	r3, [r4, #0]
 800abec:	b91e      	cbnz	r6, 800abf6 <_printf_i+0x196>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	f023 0320 	bic.w	r3, r3, #32
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	2310      	movs	r3, #16
 800abf8:	e7b0      	b.n	800ab5c <_printf_i+0xfc>
 800abfa:	6823      	ldr	r3, [r4, #0]
 800abfc:	f043 0320 	orr.w	r3, r3, #32
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	2378      	movs	r3, #120	; 0x78
 800ac04:	4828      	ldr	r0, [pc, #160]	; (800aca8 <_printf_i+0x248>)
 800ac06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac0a:	e7e3      	b.n	800abd4 <_printf_i+0x174>
 800ac0c:	0659      	lsls	r1, r3, #25
 800ac0e:	bf48      	it	mi
 800ac10:	b2b6      	uxthmi	r6, r6
 800ac12:	e7e6      	b.n	800abe2 <_printf_i+0x182>
 800ac14:	4615      	mov	r5, r2
 800ac16:	e7bb      	b.n	800ab90 <_printf_i+0x130>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	6826      	ldr	r6, [r4, #0]
 800ac1c:	6961      	ldr	r1, [r4, #20]
 800ac1e:	1d18      	adds	r0, r3, #4
 800ac20:	6028      	str	r0, [r5, #0]
 800ac22:	0635      	lsls	r5, r6, #24
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	d501      	bpl.n	800ac2c <_printf_i+0x1cc>
 800ac28:	6019      	str	r1, [r3, #0]
 800ac2a:	e002      	b.n	800ac32 <_printf_i+0x1d2>
 800ac2c:	0670      	lsls	r0, r6, #25
 800ac2e:	d5fb      	bpl.n	800ac28 <_printf_i+0x1c8>
 800ac30:	8019      	strh	r1, [r3, #0]
 800ac32:	2300      	movs	r3, #0
 800ac34:	6123      	str	r3, [r4, #16]
 800ac36:	4615      	mov	r5, r2
 800ac38:	e7ba      	b.n	800abb0 <_printf_i+0x150>
 800ac3a:	682b      	ldr	r3, [r5, #0]
 800ac3c:	1d1a      	adds	r2, r3, #4
 800ac3e:	602a      	str	r2, [r5, #0]
 800ac40:	681d      	ldr	r5, [r3, #0]
 800ac42:	6862      	ldr	r2, [r4, #4]
 800ac44:	2100      	movs	r1, #0
 800ac46:	4628      	mov	r0, r5
 800ac48:	f7f5 faca 	bl	80001e0 <memchr>
 800ac4c:	b108      	cbz	r0, 800ac52 <_printf_i+0x1f2>
 800ac4e:	1b40      	subs	r0, r0, r5
 800ac50:	6060      	str	r0, [r4, #4]
 800ac52:	6863      	ldr	r3, [r4, #4]
 800ac54:	6123      	str	r3, [r4, #16]
 800ac56:	2300      	movs	r3, #0
 800ac58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac5c:	e7a8      	b.n	800abb0 <_printf_i+0x150>
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	462a      	mov	r2, r5
 800ac62:	4649      	mov	r1, r9
 800ac64:	4640      	mov	r0, r8
 800ac66:	47d0      	blx	sl
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d0ab      	beq.n	800abc4 <_printf_i+0x164>
 800ac6c:	6823      	ldr	r3, [r4, #0]
 800ac6e:	079b      	lsls	r3, r3, #30
 800ac70:	d413      	bmi.n	800ac9a <_printf_i+0x23a>
 800ac72:	68e0      	ldr	r0, [r4, #12]
 800ac74:	9b03      	ldr	r3, [sp, #12]
 800ac76:	4298      	cmp	r0, r3
 800ac78:	bfb8      	it	lt
 800ac7a:	4618      	movlt	r0, r3
 800ac7c:	e7a4      	b.n	800abc8 <_printf_i+0x168>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	4632      	mov	r2, r6
 800ac82:	4649      	mov	r1, r9
 800ac84:	4640      	mov	r0, r8
 800ac86:	47d0      	blx	sl
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d09b      	beq.n	800abc4 <_printf_i+0x164>
 800ac8c:	3501      	adds	r5, #1
 800ac8e:	68e3      	ldr	r3, [r4, #12]
 800ac90:	9903      	ldr	r1, [sp, #12]
 800ac92:	1a5b      	subs	r3, r3, r1
 800ac94:	42ab      	cmp	r3, r5
 800ac96:	dcf2      	bgt.n	800ac7e <_printf_i+0x21e>
 800ac98:	e7eb      	b.n	800ac72 <_printf_i+0x212>
 800ac9a:	2500      	movs	r5, #0
 800ac9c:	f104 0619 	add.w	r6, r4, #25
 800aca0:	e7f5      	b.n	800ac8e <_printf_i+0x22e>
 800aca2:	bf00      	nop
 800aca4:	0802ea2d 	.word	0x0802ea2d
 800aca8:	0802ea3e 	.word	0x0802ea3e

0800acac <_putc_r>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	460d      	mov	r5, r1
 800acb0:	4614      	mov	r4, r2
 800acb2:	4606      	mov	r6, r0
 800acb4:	b118      	cbz	r0, 800acbe <_putc_r+0x12>
 800acb6:	6983      	ldr	r3, [r0, #24]
 800acb8:	b90b      	cbnz	r3, 800acbe <_putc_r+0x12>
 800acba:	f7ff f9bf 	bl	800a03c <__sinit>
 800acbe:	4b1c      	ldr	r3, [pc, #112]	; (800ad30 <_putc_r+0x84>)
 800acc0:	429c      	cmp	r4, r3
 800acc2:	d124      	bne.n	800ad0e <_putc_r+0x62>
 800acc4:	6874      	ldr	r4, [r6, #4]
 800acc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acc8:	07d8      	lsls	r0, r3, #31
 800acca:	d405      	bmi.n	800acd8 <_putc_r+0x2c>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	0599      	lsls	r1, r3, #22
 800acd0:	d402      	bmi.n	800acd8 <_putc_r+0x2c>
 800acd2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acd4:	f7ff fa50 	bl	800a178 <__retarget_lock_acquire_recursive>
 800acd8:	68a3      	ldr	r3, [r4, #8]
 800acda:	3b01      	subs	r3, #1
 800acdc:	2b00      	cmp	r3, #0
 800acde:	60a3      	str	r3, [r4, #8]
 800ace0:	da05      	bge.n	800acee <_putc_r+0x42>
 800ace2:	69a2      	ldr	r2, [r4, #24]
 800ace4:	4293      	cmp	r3, r2
 800ace6:	db1c      	blt.n	800ad22 <_putc_r+0x76>
 800ace8:	b2eb      	uxtb	r3, r5
 800acea:	2b0a      	cmp	r3, #10
 800acec:	d019      	beq.n	800ad22 <_putc_r+0x76>
 800acee:	6823      	ldr	r3, [r4, #0]
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	6022      	str	r2, [r4, #0]
 800acf4:	701d      	strb	r5, [r3, #0]
 800acf6:	b2ed      	uxtb	r5, r5
 800acf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acfa:	07da      	lsls	r2, r3, #31
 800acfc:	d405      	bmi.n	800ad0a <_putc_r+0x5e>
 800acfe:	89a3      	ldrh	r3, [r4, #12]
 800ad00:	059b      	lsls	r3, r3, #22
 800ad02:	d402      	bmi.n	800ad0a <_putc_r+0x5e>
 800ad04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad06:	f7ff fa38 	bl	800a17a <__retarget_lock_release_recursive>
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
 800ad0e:	4b09      	ldr	r3, [pc, #36]	; (800ad34 <_putc_r+0x88>)
 800ad10:	429c      	cmp	r4, r3
 800ad12:	d101      	bne.n	800ad18 <_putc_r+0x6c>
 800ad14:	68b4      	ldr	r4, [r6, #8]
 800ad16:	e7d6      	b.n	800acc6 <_putc_r+0x1a>
 800ad18:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <_putc_r+0x8c>)
 800ad1a:	429c      	cmp	r4, r3
 800ad1c:	bf08      	it	eq
 800ad1e:	68f4      	ldreq	r4, [r6, #12]
 800ad20:	e7d1      	b.n	800acc6 <_putc_r+0x1a>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4622      	mov	r2, r4
 800ad26:	4630      	mov	r0, r6
 800ad28:	f7fe ffae 	bl	8009c88 <__swbuf_r>
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	e7e3      	b.n	800acf8 <_putc_r+0x4c>
 800ad30:	0802e9dc 	.word	0x0802e9dc
 800ad34:	0802e9fc 	.word	0x0802e9fc
 800ad38:	0802e9bc 	.word	0x0802e9bc

0800ad3c <_sbrk_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d06      	ldr	r5, [pc, #24]	; (800ad58 <_sbrk_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	602b      	str	r3, [r5, #0]
 800ad48:	f000 f912 	bl	800af70 <_sbrk>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_sbrk_r+0x1a>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_sbrk_r+0x1a>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20000934 	.word	0x20000934

0800ad5c <__sread>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	460c      	mov	r4, r1
 800ad60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad64:	f000 f8ea 	bl	800af3c <_read_r>
 800ad68:	2800      	cmp	r0, #0
 800ad6a:	bfab      	itete	ge
 800ad6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad6e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad70:	181b      	addge	r3, r3, r0
 800ad72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad76:	bfac      	ite	ge
 800ad78:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad7a:	81a3      	strhlt	r3, [r4, #12]
 800ad7c:	bd10      	pop	{r4, pc}

0800ad7e <__swrite>:
 800ad7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad82:	461f      	mov	r7, r3
 800ad84:	898b      	ldrh	r3, [r1, #12]
 800ad86:	05db      	lsls	r3, r3, #23
 800ad88:	4605      	mov	r5, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	4616      	mov	r6, r2
 800ad8e:	d505      	bpl.n	800ad9c <__swrite+0x1e>
 800ad90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad94:	2302      	movs	r3, #2
 800ad96:	2200      	movs	r2, #0
 800ad98:	f000 f868 	bl	800ae6c <_lseek_r>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ada2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	4632      	mov	r2, r6
 800adaa:	463b      	mov	r3, r7
 800adac:	4628      	mov	r0, r5
 800adae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb2:	f000 b817 	b.w	800ade4 <_write_r>

0800adb6 <__sseek>:
 800adb6:	b510      	push	{r4, lr}
 800adb8:	460c      	mov	r4, r1
 800adba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adbe:	f000 f855 	bl	800ae6c <_lseek_r>
 800adc2:	1c43      	adds	r3, r0, #1
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	bf15      	itete	ne
 800adc8:	6560      	strne	r0, [r4, #84]	; 0x54
 800adca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800add2:	81a3      	strheq	r3, [r4, #12]
 800add4:	bf18      	it	ne
 800add6:	81a3      	strhne	r3, [r4, #12]
 800add8:	bd10      	pop	{r4, pc}

0800adda <__sclose>:
 800adda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adde:	f000 b813 	b.w	800ae08 <_close_r>
	...

0800ade4 <_write_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d07      	ldr	r5, [pc, #28]	; (800ae04 <_write_r+0x20>)
 800ade8:	4604      	mov	r4, r0
 800adea:	4608      	mov	r0, r1
 800adec:	4611      	mov	r1, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	602a      	str	r2, [r5, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f7f7 f8ce 	bl	8001f94 <_write>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_write_r+0x1e>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_write_r+0x1e>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	20000934 	.word	0x20000934

0800ae08 <_close_r>:
 800ae08:	b538      	push	{r3, r4, r5, lr}
 800ae0a:	4d06      	ldr	r5, [pc, #24]	; (800ae24 <_close_r+0x1c>)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4604      	mov	r4, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	602b      	str	r3, [r5, #0]
 800ae14:	f7f7 f8cc 	bl	8001fb0 <_close>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_close_r+0x1a>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_close_r+0x1a>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	20000934 	.word	0x20000934

0800ae28 <_fstat_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	; (800ae48 <_fstat_r+0x20>)
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	4604      	mov	r4, r0
 800ae30:	4608      	mov	r0, r1
 800ae32:	4611      	mov	r1, r2
 800ae34:	602b      	str	r3, [r5, #0]
 800ae36:	f7f7 f8bf 	bl	8001fb8 <_fstat>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	d102      	bne.n	800ae44 <_fstat_r+0x1c>
 800ae3e:	682b      	ldr	r3, [r5, #0]
 800ae40:	b103      	cbz	r3, 800ae44 <_fstat_r+0x1c>
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	bf00      	nop
 800ae48:	20000934 	.word	0x20000934

0800ae4c <_isatty_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4d06      	ldr	r5, [pc, #24]	; (800ae68 <_isatty_r+0x1c>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4604      	mov	r4, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	602b      	str	r3, [r5, #0]
 800ae58:	f7f7 f8b4 	bl	8001fc4 <_isatty>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_isatty_r+0x1a>
 800ae60:	682b      	ldr	r3, [r5, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_isatty_r+0x1a>
 800ae64:	6023      	str	r3, [r4, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	20000934 	.word	0x20000934

0800ae6c <_lseek_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d07      	ldr	r5, [pc, #28]	; (800ae8c <_lseek_r+0x20>)
 800ae70:	4604      	mov	r4, r0
 800ae72:	4608      	mov	r0, r1
 800ae74:	4611      	mov	r1, r2
 800ae76:	2200      	movs	r2, #0
 800ae78:	602a      	str	r2, [r5, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f7f7 f8a4 	bl	8001fc8 <_lseek>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_lseek_r+0x1e>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_lseek_r+0x1e>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20000934 	.word	0x20000934

0800ae90 <memmove>:
 800ae90:	4288      	cmp	r0, r1
 800ae92:	b510      	push	{r4, lr}
 800ae94:	eb01 0402 	add.w	r4, r1, r2
 800ae98:	d902      	bls.n	800aea0 <memmove+0x10>
 800ae9a:	4284      	cmp	r4, r0
 800ae9c:	4623      	mov	r3, r4
 800ae9e:	d807      	bhi.n	800aeb0 <memmove+0x20>
 800aea0:	1e43      	subs	r3, r0, #1
 800aea2:	42a1      	cmp	r1, r4
 800aea4:	d008      	beq.n	800aeb8 <memmove+0x28>
 800aea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aeaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aeae:	e7f8      	b.n	800aea2 <memmove+0x12>
 800aeb0:	4402      	add	r2, r0
 800aeb2:	4601      	mov	r1, r0
 800aeb4:	428a      	cmp	r2, r1
 800aeb6:	d100      	bne.n	800aeba <memmove+0x2a>
 800aeb8:	bd10      	pop	{r4, pc}
 800aeba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aec2:	e7f7      	b.n	800aeb4 <memmove+0x24>

0800aec4 <__malloc_lock>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__malloc_lock+0x8>)
 800aec6:	f7ff b957 	b.w	800a178 <__retarget_lock_acquire_recursive>
 800aeca:	bf00      	nop
 800aecc:	20000928 	.word	0x20000928

0800aed0 <__malloc_unlock>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__malloc_unlock+0x8>)
 800aed2:	f7ff b952 	b.w	800a17a <__retarget_lock_release_recursive>
 800aed6:	bf00      	nop
 800aed8:	20000928 	.word	0x20000928

0800aedc <_realloc_r>:
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee0:	4680      	mov	r8, r0
 800aee2:	4614      	mov	r4, r2
 800aee4:	460e      	mov	r6, r1
 800aee6:	b921      	cbnz	r1, 800aef2 <_realloc_r+0x16>
 800aee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeec:	4611      	mov	r1, r2
 800aeee:	f7ff ba1f 	b.w	800a330 <_malloc_r>
 800aef2:	b92a      	cbnz	r2, 800af00 <_realloc_r+0x24>
 800aef4:	f7ff f9b0 	bl	800a258 <_free_r>
 800aef8:	4625      	mov	r5, r4
 800aefa:	4628      	mov	r0, r5
 800aefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af00:	f000 f82e 	bl	800af60 <_malloc_usable_size_r>
 800af04:	4284      	cmp	r4, r0
 800af06:	4607      	mov	r7, r0
 800af08:	d802      	bhi.n	800af10 <_realloc_r+0x34>
 800af0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af0e:	d812      	bhi.n	800af36 <_realloc_r+0x5a>
 800af10:	4621      	mov	r1, r4
 800af12:	4640      	mov	r0, r8
 800af14:	f7ff fa0c 	bl	800a330 <_malloc_r>
 800af18:	4605      	mov	r5, r0
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d0ed      	beq.n	800aefa <_realloc_r+0x1e>
 800af1e:	42bc      	cmp	r4, r7
 800af20:	4622      	mov	r2, r4
 800af22:	4631      	mov	r1, r6
 800af24:	bf28      	it	cs
 800af26:	463a      	movcs	r2, r7
 800af28:	f7fe fd06 	bl	8009938 <memcpy>
 800af2c:	4631      	mov	r1, r6
 800af2e:	4640      	mov	r0, r8
 800af30:	f7ff f992 	bl	800a258 <_free_r>
 800af34:	e7e1      	b.n	800aefa <_realloc_r+0x1e>
 800af36:	4635      	mov	r5, r6
 800af38:	e7df      	b.n	800aefa <_realloc_r+0x1e>
	...

0800af3c <_read_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	4d07      	ldr	r5, [pc, #28]	; (800af5c <_read_r+0x20>)
 800af40:	4604      	mov	r4, r0
 800af42:	4608      	mov	r0, r1
 800af44:	4611      	mov	r1, r2
 800af46:	2200      	movs	r2, #0
 800af48:	602a      	str	r2, [r5, #0]
 800af4a:	461a      	mov	r2, r3
 800af4c:	f7f7 f814 	bl	8001f78 <_read>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_read_r+0x1e>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_read_r+0x1e>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	20000934 	.word	0x20000934

0800af60 <_malloc_usable_size_r>:
 800af60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af64:	1f18      	subs	r0, r3, #4
 800af66:	2b00      	cmp	r3, #0
 800af68:	bfbc      	itt	lt
 800af6a:	580b      	ldrlt	r3, [r1, r0]
 800af6c:	18c0      	addlt	r0, r0, r3
 800af6e:	4770      	bx	lr

0800af70 <_sbrk>:
 800af70:	4a04      	ldr	r2, [pc, #16]	; (800af84 <_sbrk+0x14>)
 800af72:	6811      	ldr	r1, [r2, #0]
 800af74:	4603      	mov	r3, r0
 800af76:	b909      	cbnz	r1, 800af7c <_sbrk+0xc>
 800af78:	4903      	ldr	r1, [pc, #12]	; (800af88 <_sbrk+0x18>)
 800af7a:	6011      	str	r1, [r2, #0]
 800af7c:	6810      	ldr	r0, [r2, #0]
 800af7e:	4403      	add	r3, r0
 800af80:	6013      	str	r3, [r2, #0]
 800af82:	4770      	bx	lr
 800af84:	20000938 	.word	0x20000938
 800af88:	20000940 	.word	0x20000940

0800af8c <_init>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	bf00      	nop
 800af90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af92:	bc08      	pop	{r3}
 800af94:	469e      	mov	lr, r3
 800af96:	4770      	bx	lr

0800af98 <_fini>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	bf00      	nop
 800af9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af9e:	bc08      	pop	{r3}
 800afa0:	469e      	mov	lr, r3
 800afa2:	4770      	bx	lr
